{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377",
    "id": 1436373813,
    "node_id": "PR_kwDOAP4Jqs5VnVM1",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1377.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1377.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1377",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1377/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/e48091bef93b06b6b0c230cda1e6998898a8fa4e",
    "number": 1377,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add tests for fuzzing on scalar operation",
    "user": {
      "login": "YafeiXie1",
      "id": 114428701,
      "node_id": "U_kgDOBtILHQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/114428701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YafeiXie1",
      "html_url": "https://github.com/YafeiXie1",
      "followers_url": "https://api.github.com/users/YafeiXie1/followers",
      "following_url": "https://api.github.com/users/YafeiXie1/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/YafeiXie1/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/YafeiXie1/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/YafeiXie1/subscriptions",
      "organizations_url": "https://api.github.com/users/YafeiXie1/orgs",
      "repos_url": "https://api.github.com/users/YafeiXie1/repos",
      "events_url": "https://api.github.com/users/YafeiXie1/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/YafeiXie1/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hello, Iâ€™m trying to develop the fuzz test using libfuzzer. This PR shows  the tests about several properties of scalar operations. Could you give me some suggestions? ",
    "labels": [
      {
        "id": 165017692,
        "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
        "name": "assurance",
        "description": "",
        "color": "A6DF3D",
        "default": false
      }
    ],
    "created_at": "2023-07-16T20:35:14Z",
    "updated_at": "2023-07-27T07:34:02Z",
    "closed_at": "2023-07-27T07:34:00Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "5d5b79ef984926273de16f8986a6d44b7d9e17c5",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "YafeiXie1:fuzz_test",
      "ref": "fuzz_test",
      "sha": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "user": {
        "login": "YafeiXie1",
        "id": 114428701,
        "node_id": "U_kgDOBtILHQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/114428701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/YafeiXie1",
        "html_url": "https://github.com/YafeiXie1",
        "followers_url": "https://api.github.com/users/YafeiXie1/followers",
        "following_url": "https://api.github.com/users/YafeiXie1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/YafeiXie1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/YafeiXie1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/YafeiXie1/subscriptions",
        "organizations_url": "https://api.github.com/users/YafeiXie1/orgs",
        "repos_url": "https://api.github.com/users/YafeiXie1/repos",
        "events_url": "https://api.github.com/users/YafeiXie1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/YafeiXie1/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 667139146,
        "node_id": "R_kgDOJ8O8Sg",
        "name": "secp256k1",
        "full_name": "YafeiXie1/secp256k1",
        "owner": {
          "login": "YafeiXie1",
          "id": 114428701,
          "node_id": "U_kgDOBtILHQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/114428701?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/YafeiXie1",
          "html_url": "https://github.com/YafeiXie1",
          "followers_url": "https://api.github.com/users/YafeiXie1/followers",
          "following_url": "https://api.github.com/users/YafeiXie1/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/YafeiXie1/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/YafeiXie1/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/YafeiXie1/subscriptions",
          "organizations_url": "https://api.github.com/users/YafeiXie1/orgs",
          "repos_url": "https://api.github.com/users/YafeiXie1/repos",
          "events_url": "https://api.github.com/users/YafeiXie1/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/YafeiXie1/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/YafeiXie1/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/YafeiXie1/secp256k1",
        "archive_url": "https://api.github.com/repos/YafeiXie1/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/YafeiXie1/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/YafeiXie1/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/YafeiXie1/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/YafeiXie1/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/YafeiXie1/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/YafeiXie1/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/YafeiXie1/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/YafeiXie1/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/YafeiXie1/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/YafeiXie1/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/YafeiXie1/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/YafeiXie1/secp256k1/events",
        "forks_url": "https://api.github.com/repos/YafeiXie1/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/YafeiXie1/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/YafeiXie1/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/YafeiXie1/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/YafeiXie1/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/YafeiXie1/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/YafeiXie1/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/YafeiXie1/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/YafeiXie1/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/YafeiXie1/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/YafeiXie1/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/YafeiXie1/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/YafeiXie1/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/YafeiXie1/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/YafeiXie1/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/YafeiXie1/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:YafeiXie1/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/YafeiXie1/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/YafeiXie1/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/YafeiXie1/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/YafeiXie1/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/YafeiXie1/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/YafeiXie1/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/YafeiXie1/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/YafeiXie1/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/YafeiXie1/secp256k1/hooks",
        "svn_url": "https://github.com/YafeiXie1/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 10369,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-27T07:49:15Z",
        "created_at": "2023-07-16T19:06:56Z",
        "updated_at": "2023-07-27T07:02:29Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "0e00fc7d10af4035cb22749c6f9a8973eeb87f7d",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 208,
    "deletions": 0,
    "changed_files": 1,
    "commits": 2,
    "review_comments": 16,
    "comments": 0
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDNkYWFkNjZmODZkZDg1ZWRiMTAwM2FiZDUxNzQxNzllYTc0NmRjZDM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3daad66f86dd85edb1003abd5174179ea746dcd3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3daad66f86dd85edb1003abd5174179ea746dcd3",
      "tree": {
        "sha": "40200c922344a770df7e9435c9714c83b9ad8190",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/40200c922344a770df7e9435c9714c83b9ad8190"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/907a67212e90e265231baad751b0af66c8c157b5",
          "sha": "907a67212e90e265231baad751b0af66c8c157b5",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/907a67212e90e265231baad751b0af66c8c157b5"
        }
      ],
      "message": "add fuzz tests for scalar operations",
      "committer": {
        "name": "oliver",
        "email": "yx1569@york.ac.uk",
        "date": "2023-07-16T19:47:13Z"
      },
      "author": {
        "name": "oliver",
        "email": "yx1569@york.ac.uk",
        "date": "2023-07-16T19:47:13Z"
      },
      "sha": "3daad66f86dd85edb1003abd5174179ea746dcd3"
    },
    {
      "event": "reviewed",
      "id": 1532919690,
      "node_id": "PRR_kwDOAP4Jqs5bXn-K",
      "url": null,
      "actor": null,
      "commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#pullrequestreview-1532919690",
      "submitted_at": "2023-07-17T14:42:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
    },
    {
      "event": "labeled",
      "id": 9846954470,
      "node_id": "LE_lADOAP4Jqs5rsDzPzwAAAAJK7Jnm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9846954470",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-18T07:51:07Z",
      "label": {
        "name": "assurance",
        "color": "A6DF3D"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGU0ODA5MWJlZjkzYjA2YjZiMGMyMzBjZGExZTY5OTg4OThhOGZhNGU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "tree": {
        "sha": "891fb213ad98c00113bf1b75b9a55ce4de5688f7",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/891fb213ad98c00113bf1b75b9a55ce4de5688f7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 891fb213ad98c00113bf1b75b9a55ce4de5688f7\nparent 3daad66f86dd85edb1003abd5174179ea746dcd3\nparent 0e00fc7d10af4035cb22749c6f9a8973eeb87f7d\nauthor OliverX <114428701+YafeiXie1@users.noreply.github.com> 1690441686 +0100\ncommitter GitHub <noreply@github.com> 1690441686 +0100\n\nMerge branch 'bitcoin-core:master' into fuzz_test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkwhfWCRBK7hj4Ov3rIwAArXIIAIhormy9vR2hm+Ao6x6uyqSb\n0jdAVj46lhl/TUcdNtT0x7WIZcLUxwl3bXfxKBhQyZEaYYpEUkbVo/PbViKKIDZu\nvY5HkQ6UXuDof0+fxdtoPIasKoAthuvFnEZ4Py25Q8Jhv1aoFYKXzSU8OkByDiJU\nHl3HOrg4VvS/FMnWavV3/i4XFAI5WYF1EVD3XthGQ1R5YSJSCGeEtD2bUWf9gtnA\nhDVCHeKXnlyzoWuWF/8b2VMs/RWM9GiGrJLT97POe0CtG4oWvuFd3MF0hiVJDtys\nh9Sx1NVge1EShe0ClLeon7xQBTLyhmAD3gTIGlHK09j9Vi4dwjS/iGWjWVgkPaM=\n=doii\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3daad66f86dd85edb1003abd5174179ea746dcd3",
          "sha": "3daad66f86dd85edb1003abd5174179ea746dcd3",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3daad66f86dd85edb1003abd5174179ea746dcd3"
        },
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0e00fc7d10af4035cb22749c6f9a8973eeb87f7d",
          "sha": "0e00fc7d10af4035cb22749c6f9a8973eeb87f7d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0e00fc7d10af4035cb22749c6f9a8973eeb87f7d"
        }
      ],
      "message": "Merge branch 'bitcoin-core:master' into fuzz_test",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2023-07-27T07:08:06Z"
      },
      "author": {
        "name": "OliverX",
        "email": "114428701+YafeiXie1@users.noreply.github.com",
        "date": "2023-07-27T07:08:06Z"
      },
      "sha": "e48091bef93b06b6b0c230cda1e6998898a8fa4e"
    },
    {
      "event": "closed",
      "id": 9932339647,
      "node_id": "CE_lADOAP4Jqs5rsDzPzwAAAAJQA3m_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9932339647",
      "actor": {
        "login": "YafeiXie1",
        "id": 114428701,
        "node_id": "U_kgDOBtILHQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/114428701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/YafeiXie1",
        "html_url": "https://github.com/YafeiXie1",
        "followers_url": "https://api.github.com/users/YafeiXie1/followers",
        "following_url": "https://api.github.com/users/YafeiXie1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/YafeiXie1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/YafeiXie1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/YafeiXie1/subscriptions",
        "organizations_url": "https://api.github.com/users/YafeiXie1/orgs",
        "repos_url": "https://api.github.com/users/YafeiXie1/repos",
        "events_url": "https://api.github.com/users/YafeiXie1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/YafeiXie1/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T07:34:01Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 9932339863,
      "node_id": "HRDE_lADOAP4Jqs5rsDzPzwAAAAJQA3qX",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9932339863",
      "actor": {
        "login": "YafeiXie1",
        "id": 114428701,
        "node_id": "U_kgDOBtILHQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/114428701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/YafeiXie1",
        "html_url": "https://github.com/YafeiXie1",
        "followers_url": "https://api.github.com/users/YafeiXie1/followers",
        "following_url": "https://api.github.com/users/YafeiXie1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/YafeiXie1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/YafeiXie1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/YafeiXie1/subscriptions",
        "organizations_url": "https://api.github.com/users/YafeiXie1/orgs",
        "repos_url": "https://api.github.com/users/YafeiXie1/repos",
        "events_url": "https://api.github.com/users/YafeiXie1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/YafeiXie1/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T07:34:02Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265439480",
      "pull_request_review_id": 1532919690,
      "id": 1265439480,
      "node_id": "PRRC_kwDOAP4Jqs5LbRL4",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>",
      "path": "src/fuzz.c",
      "position": 4,
      "original_position": 4,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think you need `time.h`.",
      "created_at": "2023-07-17T14:18:39Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265439480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265439480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265440403",
      "pull_request_review_id": 1532919690,
      "id": 1265440403,
      "node_id": "PRRC_kwDOAP4Jqs5LbRaT",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"",
      "path": "src/fuzz.c",
      "position": 6,
      "original_position": 6,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of including all these individual files, you can just include `secp256k1.c` (the main implementation file includes all the necessary code from all modules).\r\n\r\nWhen you do that, you'll also need the precomputed tables (which are in separate .c files) when compiling, as the ecmult logic needs them (even when you're not actually testing those yet).\r\n\r\nFor example, you'd build with\r\n\r\n```\r\nclang++ -g -O2 -fsanitize=undefined,address,fuzzer fuzz.c precomputed_ecmult.c precomputed_ecmult_gen.c -o fuzz\r\n```\r\n\r\n(this is just temporary before we integrate it into the build system)",
      "created_at": "2023-07-17T14:19:23Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265440403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265440403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265461476",
      "pull_request_review_id": 1532919690,
      "id": 1265461476,
      "node_id": "PRRC_kwDOAP4Jqs5LbWjk",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &b, &c);\n+        secp256k1_scalar_mul(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test distributivity of scalar multiplication */\n+static void fuzz_distri_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &a, &c);\n+        secp256k1_scalar_mul(&r3, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &r3);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity multiplication */ \n+static void fuzz_one_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_one);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+\n+/* Test scalar multiplication with zero */ \n+static void fuzz_zero_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_is_zero(&r1));\n+    }\n+}\n+\n+/* Test scalar inverse */\n+static void fuzz_scalar_inverse(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+} \n+\n+/* Test scalar inverse (without constant-time guarantee) */\n+static void fuzz_scalar_inverse_var(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a, r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse_var(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+}             \n+\n+/* Test scalar complement */ \n+static void fuzz_scalar_negate(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_negate(&r2, &r1);\n+        CHECK(secp256k1_scalar_eq(&a, &r2));\n+    }\n+}\n+\n+\n+/* Test low bits shifted off */\n+static void fuzz_scalar_shift(const uint8_t *data, size_t size) {\n+    if (size > 31) {\n+        int bit, r1, r2;     \n+        secp256k1_scalar a;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        bit = 1 + secp256k1_testrand_int(15);\n+        r2 = a.d[0] % (1ULL << bit);\n+        r1 = secp256k1_scalar_shr_int(&a, bit);\n+        CHECK(r1 == r2);\n+    }\n+}\n+\n+/* Test r1+r2*lambda = a */\n+static void fuzz_scalar_splite_lambda(const uint8_t *data, size_t size) {\n+    if (size > 31) {\n+        secp256k1_scalar a, r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_split_lambda(&r1, &r2, &a);\n+        secp256k1_scalar_mul(&r3, &secp256k1_const_lambda, &r2);\n+        secp256k1_scalar_add(&r3, &r3, &r1);\n+        CHECK(secp256k1_scalar_eq(&r3, &a));\n+    }    \n+}        \n+   \n+\n+/** Entry point of Libfuzzer **/  ",
      "path": "src/fuzz.c",
      "position": 200,
      "original_position": 200,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here is some code to decide the test based on an environment variable:\r\n\r\n```\r\ntypedef void (*fuzz_function)(const uint8_t* data, size_t size);\r\n\r\nstatic fuzz_function selected_fuzz_function = NULL;\r\n\r\nint LLVMFuzzerInitialize(int *argc, char ***argv) {\r\n    const char* test_name = getenv(\"FUZZ\");\r\n    if (!test_name) {\r\n        fprintf(stderr, \"Select a fuzz test using the FUZZ environment variable\\n\");\r\n        assert(false);\r\n    }\r\n    if (strcmp(test_name, \"scalar_inverse\") == 0) {\r\n        selected_fuzz_test = &fuzz_scalar_inverse;\r\n    } else if (strcmp(test_name, \"scalar_negate\") == 0) {\r\n        selected_fuzz_test = &fuzz_scalar_negate;\r\n    } else if ...\r\n        ...\r\n    } else {\r\n        fprintf(stderr, \"Unknown fuzz test selected using FUZZ environment variable: %s\\n\", test_name);\r\n        assert(false);\r\n    }\r\n    return 0;\r\n}\r\n\r\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\r\n    selected_fuzz_test(data, size);\r\n    return 0;\r\n}\r\n```\r\n(I haven't tried to compile/run the above, there may be bugs)\r\n\r\nYou'd then invoke the tests using\r\n\r\n```\r\nFUZZ=scalar_inverse ./fuzz\r\n```",
      "created_at": "2023-07-17T14:34:30Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265461476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265461476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265464113",
      "pull_request_review_id": 1532919690,
      "id": 1265464113,
      "node_id": "PRRC_kwDOAP4Jqs5LbXMx",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 19,
      "original_position": 19,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit (= unimportant comment, feel free to ignore if you disagree): I find \"cummutate\" a bit unnatural, what about `fuzz_add_commutativity` for example?",
      "created_at": "2023-07-17T14:36:29Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265464113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265464113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265464354",
      "pull_request_review_id": 1532919690,
      "id": 1265464354,
      "node_id": "PRRC_kwDOAP4Jqs5LbXQi",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 31,
      "original_position": 31,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `fuzz_add_associativity` ?",
      "created_at": "2023-07-17T14:36:41Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265464354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265464354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265465311",
      "pull_request_review_id": 1532919690,
      "id": 1265465311,
      "node_id": "PRRC_kwDOAP4Jqs5LbXff",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 46,
      "original_position": 46,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Add `scalar` to the name (because we'll probably have tests adding zero for field elements and group elements too).",
      "created_at": "2023-07-17T14:37:27Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265465311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265465311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265465646",
      "pull_request_review_id": 1532919690,
      "id": 1265465646,
      "node_id": "PRRC_kwDOAP4Jqs5LbXku",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 56,
      "original_position": 56,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Add `scalar` to the name?",
      "created_at": "2023-07-17T14:37:43Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265465646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265465646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265465988",
      "pull_request_review_id": 1532919690,
      "id": 1265465988,
      "node_id": "PRRC_kwDOAP4Jqs5LbXqE",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 67,
      "original_position": 67,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `fuzz_scalar_mul_commutativity` ?",
      "created_at": "2023-07-17T14:38:00Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265465988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265465988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265467016",
      "pull_request_review_id": 1532919690,
      "id": 1265467016,
      "node_id": "PRRC_kwDOAP4Jqs5LbX6I",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 79,
      "original_position": 79,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `fuzz_scalar_mul_associativity` ?",
      "created_at": "2023-07-17T14:38:21Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265467016",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265467016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265468477",
      "pull_request_review_id": 1532919690,
      "id": 1265468477,
      "node_id": "PRRC_kwDOAP4Jqs5LbYQ9",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &b, &c);\n+        secp256k1_scalar_mul(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test distributivity of scalar multiplication */\n+static void fuzz_distri_mul(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 94,
      "original_position": 94,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `fuzz_scalar_mul_distributivity` ?",
      "created_at": "2023-07-17T14:38:40Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265468477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265468477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265469456",
      "pull_request_review_id": 1532919690,
      "id": 1265469456,
      "node_id": "PRRC_kwDOAP4Jqs5LbYgQ",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &b, &c);\n+        secp256k1_scalar_mul(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test distributivity of scalar multiplication */\n+static void fuzz_distri_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &a, &c);\n+        secp256k1_scalar_mul(&r3, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &r3);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity multiplication */ \n+static void fuzz_one_mul(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 110,
      "original_position": 110,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `fuzz_scalar_mul_one` ?",
      "created_at": "2023-07-17T14:38:57Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265469456",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265469456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265469773",
      "pull_request_review_id": 1532919690,
      "id": 1265469773,
      "node_id": "PRRC_kwDOAP4Jqs5LbYlN",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &b, &c);\n+        secp256k1_scalar_mul(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test distributivity of scalar multiplication */\n+static void fuzz_distri_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &a, &c);\n+        secp256k1_scalar_mul(&r3, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &r3);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity multiplication */ \n+static void fuzz_one_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_one);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+\n+/* Test scalar multiplication with zero */ \n+static void fuzz_zero_mul(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 121,
      "original_position": 121,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `fuzz_scalar_mul_zero` ?",
      "created_at": "2023-07-17T14:39:06Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265469773",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265469773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265472791",
      "pull_request_review_id": 1532919690,
      "id": 1265472791,
      "node_id": "PRRC_kwDOAP4Jqs5LbZUX",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &b, &c);\n+        secp256k1_scalar_mul(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test distributivity of scalar multiplication */\n+static void fuzz_distri_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &a, &c);\n+        secp256k1_scalar_mul(&r3, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &r3);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity multiplication */ \n+static void fuzz_one_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_one);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+\n+/* Test scalar multiplication with zero */ \n+static void fuzz_zero_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_is_zero(&r1));\n+    }\n+}\n+\n+/* Test scalar inverse */\n+static void fuzz_scalar_inverse(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+} \n+\n+/* Test scalar inverse (without constant-time guarantee) */\n+static void fuzz_scalar_inverse_var(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a, r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse_var(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+}             \n+\n+/* Test scalar complement */ \n+static void fuzz_scalar_negate(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_negate(&r2, &r1);\n+        CHECK(secp256k1_scalar_eq(&a, &r2));\n+    }\n+}\n+\n+\n+/* Test low bits shifted off */\n+static void fuzz_scalar_shift(const uint8_t *data, size_t size) {\n+    if (size > 31) {\n+        int bit, r1, r2;     \n+        secp256k1_scalar a;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        bit = 1 + secp256k1_testrand_int(15);",
      "path": "src/fuzz.c",
      "position": 180,
      "original_position": 180,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You cannot use randomness in fuzz tests, because the fuzzer cannot control the randomness (coverage will be unrelated and nondeterministic, which will confuse the fuzzer's tracking of which seeds are useful). You should get the value from the fuzzer data/size here too.",
      "created_at": "2023-07-17T14:41:05Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265472791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265472791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265473194",
      "pull_request_review_id": 1532919690,
      "id": 1265473194,
      "node_id": "PRRC_kwDOAP4Jqs5LbZaq",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"",
      "path": "src/fuzz.c",
      "position": 14,
      "original_position": 14,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Don't include this; you should never need randomness in fuzz tests.",
      "created_at": "2023-07-17T14:41:23Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265473194",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265473194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265473579",
      "pull_request_review_id": 1532919690,
      "id": 1265473579,
      "node_id": "PRRC_kwDOAP4Jqs5LbZgr",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &b, &c);\n+        secp256k1_scalar_mul(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test distributivity of scalar multiplication */\n+static void fuzz_distri_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &a, &c);\n+        secp256k1_scalar_mul(&r3, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &r3);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity multiplication */ \n+static void fuzz_one_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_one);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+\n+/* Test scalar multiplication with zero */ \n+static void fuzz_zero_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_is_zero(&r1));\n+    }\n+}\n+\n+/* Test scalar inverse */\n+static void fuzz_scalar_inverse(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+} \n+\n+/* Test scalar inverse (without constant-time guarantee) */\n+static void fuzz_scalar_inverse_var(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a, r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse_var(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+}             \n+\n+/* Test scalar complement */ \n+static void fuzz_scalar_negate(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_negate(&r2, &r1);\n+        CHECK(secp256k1_scalar_eq(&a, &r2));\n+    }\n+}\n+\n+\n+/* Test low bits shifted off */\n+static void fuzz_scalar_shift(const uint8_t *data, size_t size) {\n+    if (size > 31) {\n+        int bit, r1, r2;     \n+        secp256k1_scalar a;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        bit = 1 + secp256k1_testrand_int(15);\n+        r2 = a.d[0] % (1ULL << bit);\n+        r1 = secp256k1_scalar_shr_int(&a, bit);\n+        CHECK(r1 == r2);\n+    }\n+}\n+\n+/* Test r1+r2*lambda = a */\n+static void fuzz_scalar_splite_lambda(const uint8_t *data, size_t size) {",
      "path": "src/fuzz.c",
      "position": 188,
      "original_position": 188,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: splite -> split",
      "created_at": "2023-07-17T14:41:41Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265473579",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265473579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265474151",
      "pull_request_review_id": 1532919690,
      "id": 1265474151,
      "node_id": "PRRC_kwDOAP4Jqs5LbZpn",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"scalar_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+#include \"int128_impl.h\"\n+#include \"scratch_impl.h\"\n+#include \"testrand_impl.h\"\n+\n+/*** Scalar Operation ***/\n+\n+/* Test commutativity of scalar addition */ \n+static void fuzz_commutate_add(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar addition */\n+static void fuzz_associate_add(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_add(&r1, &r1, &c);\n+        secp256k1_scalar_add(&r2, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity addition */ \n+static void fuzz_zero_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_add(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+/* Test scalar addition with its complement */ \n+static void fuzz_complement_add(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_add(&r2, &a, &r1);\n+        CHECK(secp256k1_scalar_is_zero(&r2));\n+    }\n+}\n+\n+/* Test commutativity of scalar multiplication */\n+static void fuzz_commutate_mul(const uint8_t *data, size_t size) {\n+    if (size > 63) {        \n+        secp256k1_scalar a, b,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r2, &b, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test associativity of scalar multiplication */\n+static void fuzz_associate_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_mul(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &b, &c);\n+        secp256k1_scalar_mul(&r2, &r2, &a);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test distributivity of scalar multiplication */\n+static void fuzz_distri_mul(const uint8_t *data, size_t size) {\n+    if (size > 95) {     \n+        secp256k1_scalar a, b, c,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_set_b32(&b, data + 32, NULL);\n+        secp256k1_scalar_set_b32(&c, data + 64, NULL);       \n+        secp256k1_scalar_add(&r1, &a, &b);\n+        secp256k1_scalar_mul(&r1, &r1, &c);\n+        secp256k1_scalar_mul(&r2, &a, &c);\n+        secp256k1_scalar_mul(&r3, &b, &c);\n+        secp256k1_scalar_add(&r2, &r2, &r3);\n+        CHECK(secp256k1_scalar_eq(&r1, &r2));\n+    }\n+}\n+\n+/* Test identity multiplication */ \n+static void fuzz_one_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_one);\n+        CHECK(secp256k1_scalar_eq(&r1, &a));\n+    }\n+}\n+\n+\n+/* Test scalar multiplication with zero */ \n+static void fuzz_zero_mul(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_mul(&r1, &a, &secp256k1_scalar_zero);\n+        CHECK(secp256k1_scalar_is_zero(&r1));\n+    }\n+}\n+\n+/* Test scalar inverse */\n+static void fuzz_scalar_inverse(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a,r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+} \n+\n+/* Test scalar inverse (without constant-time guarantee) */\n+static void fuzz_scalar_inverse_var(const uint8_t *data, size_t size) {\n+    if (size > 31) {     \n+        secp256k1_scalar a, r1, r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_inverse_var(&r1, &a);\n+        if (secp256k1_scalar_is_zero(&a)) {\n+            CHECK(secp256k1_scalar_is_zero(&r1));\n+        }\n+        else {\n+            secp256k1_scalar_mul(&r2, &a, &r1);\n+            CHECK(secp256k1_scalar_is_one(&r2));\n+        }\n+    }\n+}             \n+\n+/* Test scalar complement */ \n+static void fuzz_scalar_negate(const uint8_t *data, size_t size) {\n+    if (size > 31) {        \n+        secp256k1_scalar a,r1,r2;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_negate(&r1, &a);\n+        secp256k1_scalar_negate(&r2, &r1);\n+        CHECK(secp256k1_scalar_eq(&a, &r2));\n+    }\n+}\n+\n+\n+/* Test low bits shifted off */\n+static void fuzz_scalar_shift(const uint8_t *data, size_t size) {\n+    if (size > 31) {\n+        int bit, r1, r2;     \n+        secp256k1_scalar a;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        bit = 1 + secp256k1_testrand_int(15);\n+        r2 = a.d[0] % (1ULL << bit);\n+        r1 = secp256k1_scalar_shr_int(&a, bit);\n+        CHECK(r1 == r2);\n+    }\n+}\n+\n+/* Test r1+r2*lambda = a */\n+static void fuzz_scalar_splite_lambda(const uint8_t *data, size_t size) {\n+    if (size > 31) {\n+        secp256k1_scalar a, r1, r2, r3;\n+        secp256k1_scalar_set_b32(&a, data, NULL);\n+        secp256k1_scalar_split_lambda(&r1, &r2, &a);\n+        secp256k1_scalar_mul(&r3, &secp256k1_const_lambda, &r2);\n+        secp256k1_scalar_add(&r3, &r3, &r1);\n+        CHECK(secp256k1_scalar_eq(&r3, &a));\n+    }    \n+}        \n+   \n+\n+/** Entry point of Libfuzzer **/  \n+/** \n+int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n+    test(data,size);\n+    return 0;\n+}\n+**/   \n+        \n+        ",
      "path": "src/fuzz.c",
      "position": 208,
      "original_position": 208,
      "commit_id": "e48091bef93b06b6b0c230cda1e6998898a8fa4e",
      "original_commit_id": "3daad66f86dd85edb1003abd5174179ea746dcd3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add a newline at the end of the file.",
      "created_at": "2023-07-17T14:42:06Z",
      "updated_at": "2023-07-17T14:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1377#discussion_r1265474151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1265474151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    }
  ]
}