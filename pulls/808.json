{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808",
    "id": 480645211,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDgwNjQ1MjEx",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/808.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/808.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
    "number": 808,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Exhaustive test improvements + exhaustive schnorrsig tests",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A few miscellaneous improvements:\r\n* Just use EXHAUSTIVE_TEST_ORDER as order everywhere, rather than a variable\r\n* Move exhaustive tests for recovery module to the recovery module directory\r\n* Make `secp256k1_scalar_set_b32` detect overflow correctly for scalar_low (a comment in the recovery exhaustive test indicated why this was the case, but this looks incorrect).\r\n* Change the small test groups so that they include a point with X coordinate 1.\r\n* Initialize the RNG seed, allowing configurating from the cmdline, and report it.\r\n* Permit changing the number of iterations (re-randomizing for each).\r\n* Support splitting the work across cores from the cmdline.\r\n\r\nAnd a big one:\r\n* Add exhaustive tests for schnorrsig module (and limited ones for extrakeys).",
    "labels": [],
    "created_at": "2020-09-06T03:58:16Z",
    "updated_at": "2020-09-26T03:51:55Z",
    "closed_at": "2020-09-26T03:44:28Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-09-26T03:44:28Z",
    "merge_commit_sha": "5006895bd6768779772678214e51e2d2322896c4",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:202009_exhaustive_scalar_overflow",
      "ref": "202009_exhaustive_scalar_overflow",
      "sha": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 16648672,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODY3Mg==",
        "name": "secp256k1",
        "full_name": "sipa/secp256k1",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/secp256k1",
        "archive_url": "https://api.github.com/repos/sipa/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/sipa/secp256k1/events",
        "forks_url": "https://api.github.com/repos/sipa/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/sipa/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/sipa/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/sipa/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/sipa/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/sipa/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/sipa/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/sipa/secp256k1/hooks",
        "svn_url": "https://github.com/sipa/secp256k1",
        "language": "C",
        "forks_count": 20,
        "stargazers_count": 43,
        "watchers_count": 43,
        "size": 11487,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T17:42:23Z",
        "created_at": "2014-02-08T17:33:30Z",
        "updated_at": "2023-05-11T11:08:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "4ad408faf321508b31a1d4e292cc8ff2b5b3f2d3",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 948,
        "stargazers_count": 1768,
        "watchers_count": 1768,
        "size": 10062,
        "default_branch": "master",
        "open_issues_count": 142,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-12T16:38:48Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-06-12T17:38:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 874,
    "deletions": 341,
    "changed_files": 18,
    "commits": 14,
    "review_comments": 45,
    "comments": 14
  },
  "events": [
    {
      "event": "reviewed",
      "id": 483153437,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTUzNDM3",
      "url": null,
      "actor": null,
      "commit_id": "634b3e9024340797b09105533ca63cf35cce427d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 634b3e9024340797b09105533ca63cf35cce427d\r\n\r\nI don't really see the point of removing the order variable - was less strenous to read.\r\n\r\nDid you notice the low order scalar_set_b32 issue in the exhaustive schnorrsig tests?\r\nI couldn't find a historic reason for the old comment about the infinite loop but the test clearly show that it's wrong.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-483153437",
      "submitted_at": "2020-09-06T15:37:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "commented",
      "id": 687887415,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4Nzg4NzQxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/687887415",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T20:06:18Z",
      "updated_at": "2020-09-06T20:06:18Z",
      "author_association": "MEMBER",
      "body": "> I don't really see the point of removing the order variable - was less strenous to read.\r\n\r\nI'm also ok with replacing it with `order` everywhere, but in the current code it's a mix, which makes no sense IMO. In theory using a compile-time constant should be faster (modulus operations are very slow for the CPU, but modulus with a known constant can be rewritten using multiply/shift/subtract by the compiler), so I chose that side. I can't measure a difference in performance though, so it probably doesn't matter much.\r\n\r\n> Did you notice the low order scalar_set_b32 issue in the exhaustive schnorrsig tests?\r\n\r\nSort of, I wanted to add a test that uses an out-of-range `s` value, but expected it would break things with the low-order scalar implementation that ignored overflows. In trying to fix that, I noticed it wasn't actually necessary in the first place.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-687887415",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "commented",
      "id": 687937811,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzkzNzgxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/687937811",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T23:52:09Z",
      "updated_at": "2020-09-06T23:52:09Z",
      "author_association": "MEMBER",
      "body": "Added a commit that changes the exhaustive test groups so they include a point with X coordinate 1 (suggested by @gmaxwell).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-687937811",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "mentioned",
      "id": 3734681153,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzczNDY4MTE1Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3734681153",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T23:52:10Z"
    },
    {
      "event": "subscribed",
      "id": 3734681155,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3MzQ2ODExNTU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3734681155",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T23:52:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3734724067,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzczNDcyNDA2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3734724067",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-07T00:28:47Z"
    },
    {
      "event": "commented",
      "id": 687953981,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4Nzk1Mzk4MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/687953981",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-07T00:49:17Z",
      "updated_at": "2020-09-07T00:49:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "nice, utack",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-687953981",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "reviewed",
      "id": 483670470,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjcwNDcw",
      "url": null,
      "actor": null,
      "commit_id": "27dd2f14f3c5b1830b1990740add4d9209d297c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Nice idea to create groups with an X=1 point!",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-483670470",
      "submitted_at": "2020-09-07T17:13:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3738437241,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzczODQzNzI0MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3738437241",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-07T21:47:09Z"
    },
    {
      "event": "commented",
      "id": 688571420,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODU3MTQyMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/688571420",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-08T01:43:26Z",
      "updated_at": "2020-09-08T02:58:30Z",
      "author_association": "MEMBER",
      "body": "I've updated https://github.com/sipa/secp256k1/commits/202009_schnorrsig_exhaustive to build on this, including tests with signatures that have R.x=(fieldsize+1). It now catches removing the check on the return value of `secp256k1_fe_set_b32(&rx, &sig64[0])`.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-688571420",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "reviewed",
      "id": 484033395,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDMzMzk1",
      "url": null,
      "actor": null,
      "commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK aa48ca9c5b91f570eb2cb52636cd590eccea5de4 careful code inspection\r\n\r\nMy two comments are strictly speaking not this PR. If these are real issues, I guess you could address them here or in another PR, either is fine.  ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-484033395",
      "submitted_at": "2020-09-08T11:18:18Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "reviewed",
      "id": 484342125,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzQyMTI1",
      "url": null,
      "actor": null,
      "commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-484342125",
      "submitted_at": "2020-09-08T17:18:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3742556005,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc0MjU1NjAwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3742556005",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-08T19:48:23Z"
    },
    {
      "event": "reviewed",
      "id": 484562190,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTYyMTkw",
      "url": null,
      "actor": null,
      "commit_id": "c124528a43e6c788699fbc4d063bbcc85f28d45f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-484562190",
      "submitted_at": "2020-09-08T23:35:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "commented",
      "id": 689195918,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTE5NTkxOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/689195918",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-08T23:47:52Z",
      "updated_at": "2020-09-08T23:47:52Z",
      "author_association": "MEMBER",
      "body": "I made another change, making the exhaustive tests correctly initialize the RNG, and adding a way to split the workload (invoke with `./exhaustive_tests 1 \"\" 8 0` on CPU 0, `./exhaustive_tests 1 \"\" 8 1` on CPU 1, etc).\r\n\r\nI'm done expanding the scope of this PR now. If this is too much I'm happy to split stuff off.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-689195918",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3743345081,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc0MzM0NTA4MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3743345081",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T00:45:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3743446087,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc0MzQ0NjA4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3743446087",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T01:37:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3744225234,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc0NDIyNTIzNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3744225234",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T06:58:12Z"
    },
    {
      "event": "commented",
      "id": 689425851,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTQyNTg1MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/689425851",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T08:53:29Z",
      "updated_at": "2020-09-09T08:53:29Z",
      "author_association": "MEMBER",
      "body": "Valgrind fails on Travis:\r\nhttps://travis-ci.org/github/bitcoin-core/secp256k1/jobs/725488761#L573\r\n\r\n> I made another change, making the exhaustive tests correctly initialize the RNG, and adding a way to split the workload (invoke with `./exhaustive_tests 1 \"\" 8 0` on CPU 0, `./exhaustive_tests 1 \"\" 8 1` on CPU 1, etc).\r\n\r\nReally invoke the seed with \"\" ? Doesn't every instance get a different random seed then? \r\n\r\n> I'm done expanding the scope of this PR now. If this is too much I'm happy to split stuff off.\r\n\r\nI think that's ok.\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-689425851",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "reviewed",
      "id": 484806642,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODA2NjQy",
      "url": null,
      "actor": null,
      "commit_id": "8c5dfdf57686d39d5a458ebafe4a037058f385de",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-484806642",
      "submitted_at": "2020-09-09T09:03:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "commented",
      "id": 689480925,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTQ4MDkyNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/689480925",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T10:44:55Z",
      "updated_at": "2020-09-09T10:44:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "I don't think exhaustive_tests should be actually random.  There is a need for 'random' values, but I don't see a lot of gain in having every run use different ones... and they make reproducing issues harder.   Is there a reason to not just give it a constant seed?",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-689480925",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "commented",
      "id": 689745752,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTc0NTc1Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/689745752",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T18:42:50Z",
      "updated_at": "2020-09-09T18:50:00Z",
      "author_association": "MEMBER",
      "body": "> Really invoke the seed with \"\" ? Doesn't every instance get a different random seed then?\r\n\r\nYes, for the random part. You can also specify a fixed seed by passing a non-empty hex string.\r\n\r\n> I don't think exhaustive_tests should be actually random. There is a need for 'random' values, but I don't see a lot of gain in having every run use different ones... and they make reproducing issues harder. Is there a reason to not just give it a constant seed?\r\n\r\nUnsure.\r\n\r\nAt least the gej tests are explicitly rescaled with a random z in every run, and unfortunately, those cannot be selected from an tractably-sized set for exhaustive tests.\r\n\r\nThe main thing these tests hope to reveal shouldn't be dependent on the choice of the seed, though, so perhaps it's ok to just pick a fixed seed. If so, we can probably also do without the iteration count.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-689745752",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "commented",
      "id": 689854543,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTg1NDU0Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/689854543",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T22:25:10Z",
      "updated_at": "2020-09-09T22:25:10Z",
      "author_association": "MEMBER",
      "body": "> > Really invoke the seed with \"\" ? Doesn't every instance get a different random seed then?\r\n> \r\n> Yes, for the random part. You can also specify a fixed seed by passing a non-empty hex string.\r\n\r\nOk, yes. I somehow wrongly assumed that the randomness affects the mapping of work to CPUs, but it does not of course.  \r\n\r\n\r\n> > I don't think exhaustive_tests should be actually random. There is a need for 'random' values, but I don't see a lot of gain in having every run use different ones... and they make reproducing issues harder. Is there a reason to not just give it a constant seed?\r\n> \r\n> Unsure.\r\n> \r\n> At least the gej tests are explicitly rescaled with a random z in every run, and unfortunately, those cannot be selected from an tractably-sized set for exhaustive tests.\r\n> \r\n> The main thing these tests hope to reveal shouldn't be dependent on the choice of the seed, though, so perhaps it's ok to just pick a fixed seed. If so, we can probably also do without the iteration count.\r\n\r\n\"Unsure\" was my first thought, too. Yes, the main thing here does not depend of on the choice of the seed but I still believe that randomness helps more than it hurts here. For example, it could detect a bug that occurs as a combination of special coordinate value 1 and some z value that we hit with probability 1/10000. This could be missed by the normal tests, even though they're randomized.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-689854543",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "commented",
      "id": 689859191,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTg1OTE5MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/689859191",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T22:37:38Z",
      "updated_at": "2020-09-09T22:37:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I suppose it doesn't hurt.  If a user reports a bug that only happens with some particular seeds and they fail to provide their seed-- well that's a bug which wouldn't have otherwise been detected at all.\r\n\r\nJust please no \"expected failures\", the situation in CI  (common in bitcoin core but has happened here too) where people are responding to failures by retrying the CI rather than treating the failure as an emergency is a dangerous practice.\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-689859191",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3748217093,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc0ODIxNzA5Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3748217093",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T23:28:16Z"
    },
    {
      "event": "commented",
      "id": 690690971,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDY5MDk3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/690690971",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T20:09:29Z",
      "updated_at": "2020-09-10T20:09:29Z",
      "author_association": "MEMBER",
      "body": "Adding `setbuf(stdout, NULL);` seems to have fixed it...",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-690690971",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "reviewed",
      "id": 486730516,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzMwNTE2",
      "url": null,
      "actor": null,
      "commit_id": "dd29d2ef298e92e9bae0bf35b269fb38dd79b23f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK dd29d2ef298e92e9bae0bf35b269fb38dd79b23f code review and tests pass",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-486730516",
      "submitted_at": "2020-09-11T11:39:04Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3758714822,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc1ODcxNDgyMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3758714822",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-12T02:57:49Z"
    },
    {
      "event": "renamed",
      "id": 3758715297,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50Mzc1ODcxNTI5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3758715297",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-12T02:58:14Z",
      "rename": {
        "from": "Exhaustive test improvements",
        "to": "Exhaustive test improvements + exhaustive schnorrsig tests"
      }
    },
    {
      "event": "commented",
      "id": 691391274,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MTM5MTI3NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/691391274",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-12T02:59:08Z",
      "updated_at": "2020-09-12T02:59:08Z",
      "author_association": "MEMBER",
      "body": "Rebased on the now-merged #558, and added exhaustive tests for schnorrsig module too.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-691391274",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "reviewed",
      "id": 487232551,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjMyNTUx",
      "url": null,
      "actor": null,
      "commit_id": "9737f95773d5d398518dbcda0dad5cc6cff531fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-487232551",
      "submitted_at": "2020-09-12T14:17:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "reviewed",
      "id": 487237604,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjM3NjA0",
      "url": null,
      "actor": null,
      "commit_id": "9737f95773d5d398518dbcda0dad5cc6cff531fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-487237604",
      "submitted_at": "2020-09-12T15:43:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "reviewed",
      "id": 487237670,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjM3Njcw",
      "url": null,
      "actor": null,
      "commit_id": "9737f95773d5d398518dbcda0dad5cc6cff531fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Nice! LGTM mod nits",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-487237670",
      "submitted_at": "2020-09-12T15:44:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3759628997,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc1OTYyODk5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3759628997",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-12T18:27:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3760714231,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc2MDcxNDIzMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3760714231",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-13T19:09:36Z"
    },
    {
      "event": "reviewed",
      "id": 487332803,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzMyODAz",
      "url": null,
      "actor": null,
      "commit_id": "4ecde861d47f22e608f8c1570172f3e5003e5b41",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-487332803",
      "submitted_at": "2020-09-13T19:18:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3760723958,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc2MDcyMzk1OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3760723958",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-13T19:21:30Z"
    },
    {
      "event": "reviewed",
      "id": 487340734,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzQwNzM0",
      "url": null,
      "actor": null,
      "commit_id": "3acadb107a998a1da6468744e21c3e293c8cdab6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-487340734",
      "submitted_at": "2020-09-13T21:30:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3760831672,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc2MDgzMTY3Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3760831672",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-13T21:46:12Z"
    },
    {
      "event": "reviewed",
      "id": 488904441,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTA0NDQx",
      "url": null,
      "actor": null,
      "commit_id": "76ac2bf214cd6a272176e90b98c84d34fe440f18",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 76ac2bf214cd6a272176e90b98c84d34fe440f18",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-488904441",
      "submitted_at": "2020-09-15T17:24:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "reviewed",
      "id": 487333447,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzMzNDQ3",
      "url": null,
      "actor": null,
      "commit_id": "4ecde861d47f22e608f8c1570172f3e5003e5b41",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-487333447",
      "submitted_at": "2020-09-16T00:24:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "commented",
      "id": 693327237,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzMyNzIzNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/693327237",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-16T10:49:08Z",
      "updated_at": "2020-09-16T10:49:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "I ran this for 199 without and with endo across 256 cores. Each process completed within +/-0.3%  of the others.  Total CPU time was 292 CPU-days (for each configuration), as expected-- it passed. ",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-693327237",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YmUzMTc5MTU0MzY5MDk1NzM3MzNhZmUzOTcyYTlhYmRlZTkzNTdmNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/be317915436909573733afe3972a9abdee9357f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/be317915436909573733afe3972a9abdee9357f7",
      "tree": {
        "sha": "3f06323837f1dbdee02a74aa84dac3be3ef53a00",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3f06323837f1dbdee02a74aa84dac3be3ef53a00"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4ad408faf321508b31a1d4e292cc8ff2b5b3f2d3",
          "sha": "4ad408faf321508b31a1d4e292cc8ff2b5b3f2d3",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4ad408faf321508b31a1d4e292cc8ff2b5b3f2d3"
        }
      ],
      "message": "Make group order purely compile-time in exhaustive tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-04T20:27:28Z"
      },
      "sha": "be317915436909573733afe3972a9abdee9357f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YzQ5ODM2NmU1YjJkOWM2MGUyZTY3Nzk0OWNmNzM3M2RiZTg3NzUxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c498366e5b2d9c60e2e677949cf7373dbe877515",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c498366e5b2d9c60e2e677949cf7373dbe877515",
      "tree": {
        "sha": "9a5f277ad62a2b87662812c04155b526e472e99b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9a5f277ad62a2b87662812c04155b526e472e99b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/be317915436909573733afe3972a9abdee9357f7",
          "sha": "be317915436909573733afe3972a9abdee9357f7",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/be317915436909573733afe3972a9abdee9357f7"
        }
      ],
      "message": "Move exhaustive tests for recovery to module",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-05T01:15:40Z"
      },
      "sha": "c498366e5b2d9c60e2e677949cf7373dbe877515"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OGJjZDc4Y2Q3OTFmZDkyMDlkNzJkNmJjZTQ1NWM4ZDNjZjJjMDI0OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8bcd78cd791fd9209d72d6bce455c8d3cf2c0249",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8bcd78cd791fd9209d72d6bce455c8d3cf2c0249",
      "tree": {
        "sha": "e7fbd09f974044ce23af5851bb7ef844c80da25e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e7fbd09f974044ce23af5851bb7ef844c80da25e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c498366e5b2d9c60e2e677949cf7373dbe877515",
          "sha": "c498366e5b2d9c60e2e677949cf7373dbe877515",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c498366e5b2d9c60e2e677949cf7373dbe877515"
        }
      ],
      "message": "Make secp256k1_scalar_b32 detect overflow in scalar_low",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-06T03:51:30Z"
      },
      "sha": "8bcd78cd791fd9209d72d6bce455c8d3cf2c0249"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZDdmMzlhZTRiNjdlYTFhYzZmMDg1ZTYyNjJhNWY1M2FmYzBjNWEyNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d7f39ae4b67ea1ac6f085e6262a5f53afc0c5a25",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d7f39ae4b67ea1ac6f085e6262a5f53afc0c5a25",
      "tree": {
        "sha": "028784ae4077cf6cd2f5ef875a1f3937b5ccf792",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/028784ae4077cf6cd2f5ef875a1f3937b5ccf792"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8bcd78cd791fd9209d72d6bce455c8d3cf2c0249",
          "sha": "8bcd78cd791fd9209d72d6bce455c8d3cf2c0249",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8bcd78cd791fd9209d72d6bce455c8d3cf2c0249"
        }
      ],
      "message": "Delete gej_is_valid_var: unused outside tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-07T00:25:02Z"
      },
      "sha": "d7f39ae4b67ea1ac6f085e6262a5f53afc0c5a25"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NzhmNmNkZmFhZTk4NjY2OTRkY2IwZWVlOTY2MzMyNjg4NzUzYThjMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/78f6cdfaae9866694dcb0eee966332688753a8c3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/78f6cdfaae9866694dcb0eee966332688753a8c3",
      "tree": {
        "sha": "9301260397d1e57d854de892ac95eee0d4aea4c5",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9301260397d1e57d854de892ac95eee0d4aea4c5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d7f39ae4b67ea1ac6f085e6262a5f53afc0c5a25",
          "sha": "d7f39ae4b67ea1ac6f085e6262a5f53afc0c5a25",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d7f39ae4b67ea1ac6f085e6262a5f53afc0c5a25"
        }
      ],
      "message": "Make the curve B constant a secp256k1_fe",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-06T23:24:43Z"
      },
      "sha": "78f6cdfaae9866694dcb0eee966332688753a8c3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6Y2VjN2IxOGEzNGU2OGFkYjA0ZjMxYTcxYTJlYjRjNWZjOTc2NzRjZQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cec7b18a34e68adb04f31a71a2eb4c5fc97674ce",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cec7b18a34e68adb04f31a71a2eb4c5fc97674ce",
      "tree": {
        "sha": "0ec80f7abc59bd9aa5724f032fa777d59508664b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0ec80f7abc59bd9aa5724f032fa777d59508664b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/78f6cdfaae9866694dcb0eee966332688753a8c3",
          "sha": "78f6cdfaae9866694dcb0eee966332688753a8c3",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/78f6cdfaae9866694dcb0eee966332688753a8c3"
        }
      ],
      "message": "Select exhaustive lambda in function of order",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-08T17:20:31Z"
      },
      "sha": "cec7b18a34e68adb04f31a71a2eb4c5fc97674ce"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YjExMGMxMDZmYTk3MDRlMzBmNmIwYzJmZmE2YTI2OTcwMzFlODlhOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b110c106fa9704e30f6b0c2ffa6a2697031e89a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b110c106fa9704e30f6b0c2ffa6a2697031e89a8",
      "tree": {
        "sha": "0084a2cfbc1073965cf296d046eb5f93bfbb1850",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0084a2cfbc1073965cf296d046eb5f93bfbb1850"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cec7b18a34e68adb04f31a71a2eb4c5fc97674ce",
          "sha": "cec7b18a34e68adb04f31a71a2eb4c5fc97674ce",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cec7b18a34e68adb04f31a71a2eb4c5fc97674ce"
        }
      ],
      "message": "Change exhaustive test groups so they have a point with X=1\n\nThis enables testing overflow is correctly encoded in the recid, and\nlikely triggers more edge cases.\n\nAlso introduce a Sage script to generate the parameters.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-06T23:46:41Z"
      },
      "sha": "b110c106fa9704e30f6b0c2ffa6a2697031e89a8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NDllNjYzMGJjYTVmNjYyOGJkMWZkOTJkNzBkNDY1MjczZDRkODczZg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/49e6630bca5f6628bd1fd92d70d465273d4d873f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/49e6630bca5f6628bd1fd92d70d465273d4d873f",
      "tree": {
        "sha": "65802a90e812388d3a393beb2eeee694a6bf361f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/65802a90e812388d3a393beb2eeee694a6bf361f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b110c106fa9704e30f6b0c2ffa6a2697031e89a8",
          "sha": "b110c106fa9704e30f6b0c2ffa6a2697031e89a8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b110c106fa9704e30f6b0c2ffa6a2697031e89a8"
        }
      ],
      "message": "refactor: move RNG seeding to testrand",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:01:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-08T20:40:26Z"
      },
      "sha": "49e6630bca5f6628bd1fd92d70d465273d4d873f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZTk5YjI2ZmNkNTRjYjQwOTY1MTViYTgwY2YwZjc5ZDE0N2IyNjgzYw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e99b26fcd54cb4096515ba80cf0f79d147b2683c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e99b26fcd54cb4096515ba80cf0f79d147b2683c",
      "tree": {
        "sha": "6b336314fe9f8e739900d8e961395ea3c62e2e8d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6b336314fe9f8e739900d8e961395ea3c62e2e8d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/49e6630bca5f6628bd1fd92d70d465273d4d873f",
          "sha": "49e6630bca5f6628bd1fd92d70d465273d4d873f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/49e6630bca5f6628bd1fd92d70d465273d4d873f"
        }
      ],
      "message": "Give exhaustive_tests count and seed cmdline inputs",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:10:59Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-08T20:59:02Z"
      },
      "sha": "e99b26fcd54cb4096515ba80cf0f79d147b2683c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MzlmNjdkZDA3MmZjNDRjN2MwZDI3Yjk1NjEwYmE4OTEyZGU1NmRiNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/39f67dd072fc44c7c0d27b95610ba8912de56db5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/39f67dd072fc44c7c0d27b95610ba8912de56db5",
      "tree": {
        "sha": "366439aef6da9ff7412d14fd721d29d14ad9cb14",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/366439aef6da9ff7412d14fd721d29d14ad9cb14"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e99b26fcd54cb4096515ba80cf0f79d147b2683c",
          "sha": "e99b26fcd54cb4096515ba80cf0f79d147b2683c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e99b26fcd54cb4096515ba80cf0f79d147b2683c"
        }
      ],
      "message": "Support splitting exhaustive tests across cores",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:11:02Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-08T23:27:04Z"
      },
      "sha": "39f67dd072fc44c7c0d27b95610ba8912de56db5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NjNlMWIyYWE3ZDM5NjIwOWFhNWUyNmFhNTQwZDk1OTNlZGUzMTJhNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/63e1b2aa7d396209aa5e26aa540d9593ede312a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/63e1b2aa7d396209aa5e26aa540d9593ede312a6",
      "tree": {
        "sha": "885d3b0e4c958380c2054217714e117de31d5d95",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/885d3b0e4c958380c2054217714e117de31d5d95"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/39f67dd072fc44c7c0d27b95610ba8912de56db5",
          "sha": "39f67dd072fc44c7c0d27b95610ba8912de56db5",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/39f67dd072fc44c7c0d27b95610ba8912de56db5"
        }
      ],
      "message": "Disable output buffering in tests_exhaustive.c",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:11:37Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-10T16:09:15Z"
      },
      "sha": "63e1b2aa7d396209aa5e26aa540d9593ede312a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ODdhZjAwYjUxMWYyOTM4YjZiNDc5OWY5NGQ0NDZhMDA1NzMwNTE1ZQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/87af00b511f2938b6b4799f94d446a005730515e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/87af00b511f2938b6b4799f94d446a005730515e",
      "tree": {
        "sha": "ee5749c942726a596613f3cbac1251c68f7eeaab",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ee5749c942726a596613f3cbac1251c68f7eeaab"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/63e1b2aa7d396209aa5e26aa540d9593ede312a6",
          "sha": "63e1b2aa7d396209aa5e26aa540d9593ede312a6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/63e1b2aa7d396209aa5e26aa540d9593ede312a6"
        }
      ],
      "message": "Abstract out challenge computation in schnorrsig",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:11:38Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-05T00:08:23Z"
      },
      "sha": "87af00b511f2938b6b4799f94d446a005730515e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MDhkN2Q4OTI5OWE2NDkyYmY5Mzg4YjQ2NjJiNzA5ZDI2OGM4ZWEyOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/08d7d89299a6492bf9388b4662b709d268c8ea29",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/08d7d89299a6492bf9388b4662b709d268c8ea29",
      "tree": {
        "sha": "ae719e61fd201a419def138f883a1944c32241b3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ae719e61fd201a419def138f883a1944c32241b3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/87af00b511f2938b6b4799f94d446a005730515e",
          "sha": "87af00b511f2938b6b4799f94d446a005730515e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/87af00b511f2938b6b4799f94d446a005730515e"
        }
      ],
      "message": "Make pubkey parsing test whether points are in the correct subgroup",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:11:38Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-08T01:23:52Z"
      },
      "sha": "08d7d89299a6492bf9388b4662b709d268c8ea29"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OGI3ZGNkZDk1NWE0ZjU3MTc0ZjQ3OGUzNmJkYWU1Yjg0Nzg0ZmI5Yw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "tree": {
        "sha": "251731c2c9995b2b585bba6d64c181a12ca9bc48",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/251731c2c9995b2b585bba6d64c181a12ca9bc48"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/08d7d89299a6492bf9388b4662b709d268c8ea29",
          "sha": "08d7d89299a6492bf9388b4662b709d268c8ea29",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/08d7d89299a6492bf9388b4662b709d268c8ea29"
        }
      ],
      "message": "Add exhaustive test for extrakeys and schnorrsig",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-18T21:11:38Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-05T01:58:25Z"
      },
      "sha": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3784268368,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc4NDI2ODM2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3784268368",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-18T21:16:02Z"
    },
    {
      "event": "reviewed",
      "id": 495298722,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Mjk4NzIy",
      "url": null,
      "actor": null,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#pullrequestreview-495298722",
      "submitted_at": "2020-09-24T07:41:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
    },
    {
      "event": "commented",
      "id": 698197280,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODE5NzI4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/698197280",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-24T08:26:15Z",
      "updated_at": "2020-09-24T08:26:15Z",
      "author_association": "MEMBER",
      "body": "ACK 8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#issuecomment-698197280",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/808"
    },
    {
      "event": "merged",
      "id": 3810061154,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzgxMDA2MTE1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3810061154",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5006895bd6768779772678214e51e2d2322896c4",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/5006895bd6768779772678214e51e2d2322896c4",
      "created_at": "2020-09-26T03:44:28Z"
    },
    {
      "event": "closed",
      "id": 3810061160,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzgxMDA2MTE2MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3810061160",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-26T03:44:28Z"
    },
    {
      "event": "referenced",
      "id": 3811500664,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTE1MDA2NjQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3811500664",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "63150ab4da1ef13ebfb4396064e1ff501dbd015e",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/63150ab4da1ef13ebfb4396064e1ff501dbd015e",
      "created_at": "2020-09-27T09:17:37Z"
    },
    {
      "event": "referenced",
      "id": 3819475400,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk0NzU0MDA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819475400",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e01389c3ea057a5faac53d548cffbbf7e21b6d81",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e01389c3ea057a5faac53d548cffbbf7e21b6d81",
      "created_at": "2020-09-29T13:05:07Z"
    },
    {
      "event": "referenced",
      "id": 3819475404,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk0NzU0MDQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819475404",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a7206a83a7577b789d67cf3c6ac719351ee699e9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/a7206a83a7577b789d67cf3c6ac719351ee699e9",
      "created_at": "2020-09-29T13:05:07Z"
    },
    {
      "event": "referenced",
      "id": 3819475411,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk0NzU0MTE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819475411",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ef5bb90888c08ab73a66fc056efb3cdb6d868048",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/ef5bb90888c08ab73a66fc056efb3cdb6d868048",
      "created_at": "2020-09-29T13:05:07Z"
    },
    {
      "event": "referenced",
      "id": 3819487330,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk0ODczMzA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819487330",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "af04b3dd3be4b508c71953ca9048a4d7f6da0b02",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/af04b3dd3be4b508c71953ca9048a4d7f6da0b02",
      "created_at": "2020-09-29T13:07:22Z"
    },
    {
      "event": "referenced",
      "id": 3819487334,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk0ODczMzQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819487334",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "14b9df32626994b422213d14690df0abc20a562c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/14b9df32626994b422213d14690df0abc20a562c",
      "created_at": "2020-09-29T13:07:22Z"
    },
    {
      "event": "referenced",
      "id": 3819502110,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk1MDIxMTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819502110",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2657986ae05335ad1745421fc49e43203d42cae2",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/2657986ae05335ad1745421fc49e43203d42cae2",
      "created_at": "2020-09-29T13:10:17Z"
    },
    {
      "event": "referenced",
      "id": 3819534588,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk1MzQ1ODg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819534588",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4d157a325167bb6827ce74cfc9444b99ae638d1d",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/4d157a325167bb6827ce74cfc9444b99ae638d1d",
      "created_at": "2020-09-29T13:16:41Z"
    },
    {
      "event": "referenced",
      "id": 3819534592,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk1MzQ1OTI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819534592",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b65e9ad734797517f1850b0538ceaa25b3684627",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/b65e9ad734797517f1850b0538ceaa25b3684627",
      "created_at": "2020-09-29T13:16:41Z"
    },
    {
      "event": "referenced",
      "id": 3819534595,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk1MzQ1OTU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819534595",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6a316e94bd2c1437ddf5e9966d90349e276892a3",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/6a316e94bd2c1437ddf5e9966d90349e276892a3",
      "created_at": "2020-09-29T13:16:41Z"
    },
    {
      "event": "referenced",
      "id": 3819611786,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk2MTE3ODY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819611786",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0029010ce8f29707043fb99ff6f0c6c33136bac0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/0029010ce8f29707043fb99ff6f0c6c33136bac0",
      "created_at": "2020-09-29T13:31:58Z"
    },
    {
      "event": "referenced",
      "id": 3819611793,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk2MTE3OTM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819611793",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6ee6cc93fe3714e1bdad9881200d5598fc29e5d9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/6ee6cc93fe3714e1bdad9881200d5598fc29e5d9",
      "created_at": "2020-09-29T13:31:58Z"
    },
    {
      "event": "referenced",
      "id": 3819626103,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk2MjYxMDM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819626103",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "175e3ee20f2c7c285ee7ebddccd9813b36a30f7a",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/175e3ee20f2c7c285ee7ebddccd9813b36a30f7a",
      "created_at": "2020-09-29T13:34:48Z"
    },
    {
      "event": "referenced",
      "id": 3819626112,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk2MjYxMTI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819626112",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c7ed0bca26deee545f40f0eb03566f56e7ed66ac",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c7ed0bca26deee545f40f0eb03566f56e7ed66ac",
      "created_at": "2020-09-29T13:34:48Z"
    },
    {
      "event": "referenced",
      "id": 3819626124,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk2MjYxMjQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3819626124",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a9d47b1da003a3ba3446a9df1edd7d38566bc3f0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/a9d47b1da003a3ba3446a9df1edd7d38566bc3f0",
      "created_at": "2020-09-29T13:34:48Z"
    },
    {
      "event": "referenced",
      "id": 3822601973,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5NzM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601973",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7ccac17d2e577828ac825548df50e046460e6d09",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/7ccac17d2e577828ac825548df50e046460e6d09",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601977,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5Nzc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601977",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4d46e3f55880e2a0f6360ce5f8a34b9ecf286ffb",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/4d46e3f55880e2a0f6360ce5f8a34b9ecf286ffb",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601979,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5Nzk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601979",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4b98dde7766551e499fd514a1da0b6f04591e02e",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/4b98dde7766551e499fd514a1da0b6f04591e02e",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601980,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5ODA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601980",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "52b55a985c5acdc0cf1369bcc62b9ce7812b3f00",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/52b55a985c5acdc0cf1369bcc62b9ce7812b3f00",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601982,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5ODI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601982",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c927b9b030a69b726038d12af001c1b008c3acf0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/c927b9b030a69b726038d12af001c1b008c3acf0",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601985,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5ODU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601985",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bc83900e93a2cc7b08b8fffe41dedb57ea9b0b17",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/bc83900e93a2cc7b08b8fffe41dedb57ea9b0b17",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601987,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5ODc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601987",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b0594138809883a449466e4f84e3ccc57a1c17e0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/b0594138809883a449466e4f84e3ccc57a1c17e0",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601989,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5ODk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601989",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "169b01ca4185e37177e12f01edbb4be3e8ba8ba2",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/169b01ca4185e37177e12f01edbb4be3e8ba8ba2",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601990,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5OTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601990",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f9f6163d70e857ebdb86e9d3c97589c1249623ef",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/f9f6163d70e857ebdb86e9d3c97589c1249623ef",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601992,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5OTI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601992",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b579ff69001328607b4717497a77369e53a0f61c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/b579ff69001328607b4717497a77369e53a0f61c",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601993,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5OTM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601993",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2a3941a509fd70b73f1a4323e330ceea04391922",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/2a3941a509fd70b73f1a4323e330ceea04391922",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601995,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5OTU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601995",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e8037445005ad5d4fe2b2b422495803d0b6fa947",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/e8037445005ad5d4fe2b2b422495803d0b6fa947",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601996,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5OTY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601996",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c1685a7a147eb1b7e62f9c030411a380a6ed0a04",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/c1685a7a147eb1b7e62f9c030411a380a6ed0a04",
      "created_at": "2020-09-30T04:33:51Z"
    },
    {
      "event": "referenced",
      "id": 3822601998,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjI2MDE5OTg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3822601998",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8e82a43f7ee54693b1a9cc9e84e5a38dfff78285",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/secp256k1/commits/8e82a43f7ee54693b1a9cc9e84e5a38dfff78285",
      "created_at": "2020-09-30T04:33:51Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484526319",
      "pull_request_review_id": 483670470,
      "id": 484526319,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNjMxOQ==",
      "diff_hunk": "@@ -11,49 +11,125 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The order is less than 1000 to permit exhaustive testing.\n+ * - The order is a multiple of 3 plus 1, enabling the endomorphism optimization.\n+ * - The generator is 2*P, where P has X coefficient equal to 1.\n  *\n- * 0. Setup a worksheet with the following parameters.\n- *   b = 4  # whatever CURVE_B will be set to\n- *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)\n- *   C = EllipticCurve ([F (0), F (b)])\n+ * They can generated with the following Sage code:",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 16,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "27dd2f14f3c5b1830b1990740add4d9209d297c8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We have a sage directory, perhaps best to move this over? My first attempt at copy & pasting this messed up indentation.",
      "created_at": "2020-09-07T17:12:06Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r484526319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484526319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484526412",
      "pull_request_review_id": 483670470,
      "id": 484526412,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNjQxMg==",
      "diff_hunk": "@@ -11,49 +11,125 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The order is less than 1000 to permit exhaustive testing.\n+ * - The order is a multiple of 3 plus 1, enabling the endomorphism optimization.\n+ * - The generator is 2*P, where P has X coefficient equal to 1.",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "27dd2f14f3c5b1830b1990740add4d9209d297c8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "coefficient -> coordinate?",
      "created_at": "2020-09-07T17:12:29Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r484526412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484526412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484572720",
      "pull_request_review_id": 483714558,
      "id": 484572720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3MjcyMA==",
      "diff_hunk": "@@ -11,49 +11,125 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The order is less than 1000 to permit exhaustive testing.\n+ * - The order is a multiple of 3 plus 1, enabling the endomorphism optimization.\n+ * - The generator is 2*P, where P has X coefficient equal to 1.\n  *\n- * 0. Setup a worksheet with the following parameters.\n- *   b = 4  # whatever CURVE_B will be set to\n- *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)\n- *   C = EllipticCurve ([F (0), F (b)])\n+ * They can generated with the following Sage code:",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 16,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "27dd2f14f3c5b1830b1990740add4d9209d297c8",
      "in_reply_to_id": 484526319,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, done.",
      "created_at": "2020-09-07T21:47:23Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r484572720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484572720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484572737",
      "pull_request_review_id": 483714576,
      "id": 484572737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3MjczNw==",
      "diff_hunk": "@@ -11,49 +11,125 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The order is less than 1000 to permit exhaustive testing.\n+ * - The order is a multiple of 3 plus 1, enabling the endomorphism optimization.\n+ * - The generator is 2*P, where P has X coefficient equal to 1.",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "27dd2f14f3c5b1830b1990740add4d9209d297c8",
      "in_reply_to_id": 484526412,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2020-09-07T21:47:31Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r484572737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484572737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484839302",
      "pull_request_review_id": 484033395,
      "id": 484839302,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzOTMwMg==",
      "diff_hunk": "@@ -11,49 +11,49 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The subgroup has a generator 2*P, where P.x=1.\n+ * - The subgroup has size less than 1000 to permit exhaustive testing.\n+ * - The subgroup has a size that is multiple of 3 plus 1, enabling the endomorphism optimization.\n  *\n- * 0. Setup a worksheet with the following parameters.\n- *   b = 4  # whatever CURVE_B will be set to\n- *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)\n- *   C = EllipticCurve ([F (0), F (b)])\n- *\n- * 1. Determine all the small orders available to you. (If there are\n- *    no satisfactory ones, go back and change b.)\n- *   print C.order().factor(limit=1000)\n- *\n- * 2. Choose an order as one of the prime factors listed in the above step.\n- *    (You can also multiply some to get a composite order, though the\n- *    tests will crash trying to invert scalars during signing.) We take a\n- *    random point and scale it to drop its order to the desired value.\n- *    There is some probability this won't work; just try again.\n- *   order = 199\n- *   P = C.random_point()\n- *   P = (int(P.order()) / int(order)) * P\n- *   assert(P.order() == order)\n- *\n- * 3. Print the values. You'll need to use a vim macro or something to\n- *    split the hex output into 4-byte chunks.\n- *   print \"%x %x\" % P.xy()\n+ * They can generated using the Sage code in sage/gen_exhaustive_groups.sage.\n  */\n #if defined(EXHAUSTIVE_TEST_ORDER)\n-#  if EXHAUSTIVE_TEST_ORDER == 199\n+#  if EXHAUSTIVE_TEST_ORDER == 13",
      "path": "src/group_impl.h",
      "position": 38,
      "original_position": 38,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't `EXHAUSTIVE_TEST_LAMBDA` chosen by these #ifs too?",
      "created_at": "2020-09-08T11:16:22Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r484839302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484839302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484839372",
      "pull_request_review_id": 484033395,
      "id": 484839372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzOTM3Mg==",
      "diff_hunk": "@@ -11,49 +11,49 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The subgroup has a generator 2*P, where P.x=1.\n+ * - The subgroup has size less than 1000 to permit exhaustive testing.\n+ * - The subgroup has a size that is multiple of 3 plus 1, enabling the endomorphism optimization.\n  *\n- * 0. Setup a worksheet with the following parameters.\n- *   b = 4  # whatever CURVE_B will be set to\n- *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)\n- *   C = EllipticCurve ([F (0), F (b)])\n- *\n- * 1. Determine all the small orders available to you. (If there are\n- *    no satisfactory ones, go back and change b.)\n- *   print C.order().factor(limit=1000)\n- *\n- * 2. Choose an order as one of the prime factors listed in the above step.\n- *    (You can also multiply some to get a composite order, though the\n- *    tests will crash trying to invert scalars during signing.) We take a\n- *    random point and scale it to drop its order to the desired value.\n- *    There is some probability this won't work; just try again.\n- *   order = 199\n- *   P = C.random_point()\n- *   P = (int(P.order()) / int(order)) * P\n- *   assert(P.order() == order)\n- *\n- * 3. Print the values. You'll need to use a vim macro or something to\n- *    split the hex output into 4-byte chunks.\n- *   print \"%x %x\" % P.xy()\n+ * They can generated using the Sage code in sage/gen_exhaustive_groups.sage.\n  */\n #if defined(EXHAUSTIVE_TEST_ORDER)\n-#  if EXHAUSTIVE_TEST_ORDER == 199\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST(\n-    0xFA7CC9A7, 0x0737F2DB, 0xA749DD39, 0x2B4FB069,\n-    0x3B017A7D, 0xA808C2F1, 0xFB12940C, 0x9EA66C18,\n-    0x78AC123A, 0x5ED8AEF3, 0x8732BC91, 0x1F3A2868,\n-    0x48DF246C, 0x808DAE72, 0xCFE52572, 0x7F0501ED\n+    0xc3459c3d, 0x35326167, 0xcd86cce8, 0x07a2417f,\n+    0x5b8bd567, 0xde8538ee, 0x0d507b0c, 0xd128f5bb,\n+    0x8e467fec, 0xcd30000a, 0x6cc1184e, 0x25d382c2,\n+    0xa2f4494e, 0x2fbe9abc, 0x8b64abac, 0xd005fb24\n );\n-\n-static const int CURVE_B = 4;\n-#  elif EXHAUSTIVE_TEST_ORDER == 13\n+static const secp256k1_fe secp256k1_fe_const_b = SECP256K1_FE_CONST(\n+    0x3d3486b2, 0x159a9ca5, 0xc75638be, 0xb23a69bc,\n+    0x946a45ab, 0x24801247, 0xb4ed2b8e, 0x26b6a417\n+);\n+#  elif EXHAUSTIVE_TEST_ORDER == 199",
      "path": "src/group_impl.h",
      "position": 56,
      "original_position": 56,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "And have you tried running this with 199? Seems to take forever.",
      "created_at": "2020-09-08T11:16:29Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r484839372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/484839372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485028895",
      "pull_request_review_id": 484281564,
      "id": 485028895,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyODg5NQ==",
      "diff_hunk": "@@ -11,49 +11,49 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The subgroup has a generator 2*P, where P.x=1.\n+ * - The subgroup has size less than 1000 to permit exhaustive testing.\n+ * - The subgroup has a size that is multiple of 3 plus 1, enabling the endomorphism optimization.\n  *\n- * 0. Setup a worksheet with the following parameters.\n- *   b = 4  # whatever CURVE_B will be set to\n- *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)\n- *   C = EllipticCurve ([F (0), F (b)])\n- *\n- * 1. Determine all the small orders available to you. (If there are\n- *    no satisfactory ones, go back and change b.)\n- *   print C.order().factor(limit=1000)\n- *\n- * 2. Choose an order as one of the prime factors listed in the above step.\n- *    (You can also multiply some to get a composite order, though the\n- *    tests will crash trying to invert scalars during signing.) We take a\n- *    random point and scale it to drop its order to the desired value.\n- *    There is some probability this won't work; just try again.\n- *   order = 199\n- *   P = C.random_point()\n- *   P = (int(P.order()) / int(order)) * P\n- *   assert(P.order() == order)\n- *\n- * 3. Print the values. You'll need to use a vim macro or something to\n- *    split the hex output into 4-byte chunks.\n- *   print \"%x %x\" % P.xy()\n+ * They can generated using the Sage code in sage/gen_exhaustive_groups.sage.\n  */\n #if defined(EXHAUSTIVE_TEST_ORDER)\n-#  if EXHAUSTIVE_TEST_ORDER == 199\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST(\n-    0xFA7CC9A7, 0x0737F2DB, 0xA749DD39, 0x2B4FB069,\n-    0x3B017A7D, 0xA808C2F1, 0xFB12940C, 0x9EA66C18,\n-    0x78AC123A, 0x5ED8AEF3, 0x8732BC91, 0x1F3A2868,\n-    0x48DF246C, 0x808DAE72, 0xCFE52572, 0x7F0501ED\n+    0xc3459c3d, 0x35326167, 0xcd86cce8, 0x07a2417f,\n+    0x5b8bd567, 0xde8538ee, 0x0d507b0c, 0xd128f5bb,\n+    0x8e467fec, 0xcd30000a, 0x6cc1184e, 0x25d382c2,\n+    0xa2f4494e, 0x2fbe9abc, 0x8b64abac, 0xd005fb24\n );\n-\n-static const int CURVE_B = 4;\n-#  elif EXHAUSTIVE_TEST_ORDER == 13\n+static const secp256k1_fe secp256k1_fe_const_b = SECP256K1_FE_CONST(\n+    0x3d3486b2, 0x159a9ca5, 0xc75638be, 0xb23a69bc,\n+    0x946a45ab, 0x24801247, 0xb4ed2b8e, 0x26b6a417\n+);\n+#  elif EXHAUSTIVE_TEST_ORDER == 199",
      "path": "src/group_impl.h",
      "position": 56,
      "original_position": 56,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": 484839372,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tried it on my laptop over night but terminated it the next morning.",
      "created_at": "2020-09-08T15:56:17Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485028895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485028895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485036855",
      "pull_request_review_id": 484292019,
      "id": 485036855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNjg1NQ==",
      "diff_hunk": "@@ -11,49 +11,49 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The subgroup has a generator 2*P, where P.x=1.\n+ * - The subgroup has size less than 1000 to permit exhaustive testing.\n+ * - The subgroup has a size that is multiple of 3 plus 1, enabling the endomorphism optimization.\n  *\n- * 0. Setup a worksheet with the following parameters.\n- *   b = 4  # whatever CURVE_B will be set to\n- *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)\n- *   C = EllipticCurve ([F (0), F (b)])\n- *\n- * 1. Determine all the small orders available to you. (If there are\n- *    no satisfactory ones, go back and change b.)\n- *   print C.order().factor(limit=1000)\n- *\n- * 2. Choose an order as one of the prime factors listed in the above step.\n- *    (You can also multiply some to get a composite order, though the\n- *    tests will crash trying to invert scalars during signing.) We take a\n- *    random point and scale it to drop its order to the desired value.\n- *    There is some probability this won't work; just try again.\n- *   order = 199\n- *   P = C.random_point()\n- *   P = (int(P.order()) / int(order)) * P\n- *   assert(P.order() == order)\n- *\n- * 3. Print the values. You'll need to use a vim macro or something to\n- *    split the hex output into 4-byte chunks.\n- *   print \"%x %x\" % P.xy()\n+ * They can generated using the Sage code in sage/gen_exhaustive_groups.sage.\n  */\n #if defined(EXHAUSTIVE_TEST_ORDER)\n-#  if EXHAUSTIVE_TEST_ORDER == 199\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST(\n-    0xFA7CC9A7, 0x0737F2DB, 0xA749DD39, 0x2B4FB069,\n-    0x3B017A7D, 0xA808C2F1, 0xFB12940C, 0x9EA66C18,\n-    0x78AC123A, 0x5ED8AEF3, 0x8732BC91, 0x1F3A2868,\n-    0x48DF246C, 0x808DAE72, 0xCFE52572, 0x7F0501ED\n+    0xc3459c3d, 0x35326167, 0xcd86cce8, 0x07a2417f,\n+    0x5b8bd567, 0xde8538ee, 0x0d507b0c, 0xd128f5bb,\n+    0x8e467fec, 0xcd30000a, 0x6cc1184e, 0x25d382c2,\n+    0xa2f4494e, 0x2fbe9abc, 0x8b64abac, 0xd005fb24\n );\n-\n-static const int CURVE_B = 4;\n-#  elif EXHAUSTIVE_TEST_ORDER == 13\n+static const secp256k1_fe secp256k1_fe_const_b = SECP256K1_FE_CONST(\n+    0x3d3486b2, 0x159a9ca5, 0xc75638be, 0xb23a69bc,\n+    0x946a45ab, 0x24801247, 0xb4ed2b8e, 0x26b6a417\n+);\n+#  elif EXHAUSTIVE_TEST_ORDER == 199",
      "path": "src/group_impl.h",
      "position": 56,
      "original_position": 56,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": 484839372,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tested an earlier version of the extrakeys/schnorr exhaustive tests. The generic group and ECDSA ones are too slow with 199 (they include quintuple nested loops; the schnorr tests are only quartic).",
      "created_at": "2020-09-08T16:08:25Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485036855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485036855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485076267",
      "pull_request_review_id": 484342125,
      "id": 485076267,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NjI2Nw==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+# Define field size and field\n+P = 2^256 - 2^32 - 977\n+F = GF(P)\n+\n+orders_done = set()\n+first = True\n+for b in range(1, P):\n+    E = EllipticCurve(F, [0, b])\n+    n = E.order()\n+    # Skip curves isomorphic to the real secp256k1\n+    if n.is_pseudoprime():\n+        continue\n+    # Skip curves with an order we've already tried\n+    if n in orders_done:\n+        continue\n+    orders_done.add(n)\n+\n+    # Find what prime subgroups exist\n+    for f, _ in n.factor():\n+        # Skip subgroups of order >1000\n+        if f > 1000:\n+            continue\n+        # Skip subgroups that are not 3n+1 (needed for endomorphism)\n+        if f % 3 != 1:\n+            continue\n+\n+        if first:\n+            print(\"#  if EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+            first = False\n+        else:\n+            print(\"#  elif EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+\n+        # Iterate over X coordinates until we find one that is on the curve, has order f,\n+        # and for which curve isomorphism exists that maps it to X coordinate 1.\n+        for x in range(1, P):\n+            # Skip X coordinates not on the curve, and construct the full point otherwise.\n+            if not E.is_x_coord(x):\n+                continue\n+            G = E.lift_x(F(x))\n+\n+            # Skip points whose order is not a multiple of f. Project the point to have\n+            # order f otherwise.\n+            if (G.order() % f):\n+                continue\n+            G = G * (G.order() // f)\n+            assert G.order() == f\n+\n+            # Now look for an isomorphism of the curve that gives this generator X\n+            # coordinate equal to 1.\n+            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n+            # So look for m=a^2=1/x.\n+            m = F(1)/G[0]\n+            if not m.is_square():\n+                continue\n+            rb = b*m^3\n+            RE = EllipticCurve(F, [0, rb])\n+\n+            # Use as generator twice the point with this low X coordinate (like secp256k1!)\n+            RG = RE.lift_x(1) * 2",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 59,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why does `RG` have the same order as `G`?",
      "created_at": "2020-09-08T17:15:29Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485076267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485076267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485078507",
      "pull_request_review_id": 484345063,
      "id": 485078507,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODUwNw==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+# Define field size and field\n+P = 2^256 - 2^32 - 977\n+F = GF(P)\n+\n+orders_done = set()\n+first = True\n+for b in range(1, P):\n+    E = EllipticCurve(F, [0, b])\n+    n = E.order()\n+    # Skip curves isomorphic to the real secp256k1\n+    if n.is_pseudoprime():\n+        continue\n+    # Skip curves with an order we've already tried\n+    if n in orders_done:\n+        continue\n+    orders_done.add(n)\n+\n+    # Find what prime subgroups exist\n+    for f, _ in n.factor():\n+        # Skip subgroups of order >1000\n+        if f > 1000:\n+            continue\n+        # Skip subgroups that are not 3n+1 (needed for endomorphism)\n+        if f % 3 != 1:\n+            continue\n+\n+        if first:\n+            print(\"#  if EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+            first = False\n+        else:\n+            print(\"#  elif EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+\n+        # Iterate over X coordinates until we find one that is on the curve, has order f,\n+        # and for which curve isomorphism exists that maps it to X coordinate 1.\n+        for x in range(1, P):\n+            # Skip X coordinates not on the curve, and construct the full point otherwise.\n+            if not E.is_x_coord(x):\n+                continue\n+            G = E.lift_x(F(x))\n+\n+            # Skip points whose order is not a multiple of f. Project the point to have\n+            # order f otherwise.\n+            if (G.order() % f):\n+                continue\n+            G = G * (G.order() // f)\n+            assert G.order() == f\n+\n+            # Now look for an isomorphism of the curve that gives this generator X\n+            # coordinate equal to 1.\n+            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n+            # So look for m=a^2=1/x.\n+            m = F(1)/G[0]\n+            if not m.is_square():\n+                continue\n+            rb = b*m^3\n+            RE = EllipticCurve(F, [0, rb])\n+\n+            # Use as generator twice the point with this low X coordinate (like secp256k1!)\n+            RG = RE.lift_x(1) * 2",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 59,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": 485076267,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's the image of G under the isomorphism described in the comments. I can make it more explicit by computing it directly instead of re-lifting from 1.",
      "created_at": "2020-09-08T17:19:39Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485078507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485078507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485158377",
      "pull_request_review_id": 484445442,
      "id": 485158377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1ODM3Nw==",
      "diff_hunk": "@@ -11,49 +11,49 @@\n #include \"field.h\"\n #include \"group.h\"\n \n-/* These points can be generated in sage as follows:\n+/* These exhaustive group test orders and generators are chosen such that:\n+ * - The field size is equal to that of secp256k1, so field code is the same.\n+ * - The curve equation is of the form y^2=x^3+B for some constant B.\n+ * - The subgroup has a generator 2*P, where P.x=1.\n+ * - The subgroup has size less than 1000 to permit exhaustive testing.\n+ * - The subgroup has a size that is multiple of 3 plus 1, enabling the endomorphism optimization.\n  *\n- * 0. Setup a worksheet with the following parameters.\n- *   b = 4  # whatever CURVE_B will be set to\n- *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)\n- *   C = EllipticCurve ([F (0), F (b)])\n- *\n- * 1. Determine all the small orders available to you. (If there are\n- *    no satisfactory ones, go back and change b.)\n- *   print C.order().factor(limit=1000)\n- *\n- * 2. Choose an order as one of the prime factors listed in the above step.\n- *    (You can also multiply some to get a composite order, though the\n- *    tests will crash trying to invert scalars during signing.) We take a\n- *    random point and scale it to drop its order to the desired value.\n- *    There is some probability this won't work; just try again.\n- *   order = 199\n- *   P = C.random_point()\n- *   P = (int(P.order()) / int(order)) * P\n- *   assert(P.order() == order)\n- *\n- * 3. Print the values. You'll need to use a vim macro or something to\n- *    split the hex output into 4-byte chunks.\n- *   print \"%x %x\" % P.xy()\n+ * They can generated using the Sage code in sage/gen_exhaustive_groups.sage.\n  */\n #if defined(EXHAUSTIVE_TEST_ORDER)\n-#  if EXHAUSTIVE_TEST_ORDER == 199\n+#  if EXHAUSTIVE_TEST_ORDER == 13",
      "path": "src/group_impl.h",
      "position": 38,
      "original_position": 38,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": 484839302,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They're needed in scalar, which is independent from the group \"module\". Otherwise, done: I've added ifdefs there to pick the correct one automatically.",
      "created_at": "2020-09-08T19:49:48Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485158377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485158377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485158515",
      "pull_request_review_id": 484445574,
      "id": 485158515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1ODUxNQ==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+# Define field size and field\n+P = 2^256 - 2^32 - 977\n+F = GF(P)\n+\n+orders_done = set()\n+first = True\n+for b in range(1, P):\n+    E = EllipticCurve(F, [0, b])\n+    n = E.order()\n+    # Skip curves isomorphic to the real secp256k1\n+    if n.is_pseudoprime():\n+        continue\n+    # Skip curves with an order we've already tried\n+    if n in orders_done:\n+        continue\n+    orders_done.add(n)\n+\n+    # Find what prime subgroups exist\n+    for f, _ in n.factor():\n+        # Skip subgroups of order >1000\n+        if f > 1000:\n+            continue\n+        # Skip subgroups that are not 3n+1 (needed for endomorphism)\n+        if f % 3 != 1:\n+            continue\n+\n+        if first:\n+            print(\"#  if EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+            first = False\n+        else:\n+            print(\"#  elif EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+\n+        # Iterate over X coordinates until we find one that is on the curve, has order f,\n+        # and for which curve isomorphism exists that maps it to X coordinate 1.\n+        for x in range(1, P):\n+            # Skip X coordinates not on the curve, and construct the full point otherwise.\n+            if not E.is_x_coord(x):\n+                continue\n+            G = E.lift_x(F(x))\n+\n+            # Skip points whose order is not a multiple of f. Project the point to have\n+            # order f otherwise.\n+            if (G.order() % f):\n+                continue\n+            G = G * (G.order() // f)\n+            assert G.order() == f\n+\n+            # Now look for an isomorphism of the curve that gives this generator X\n+            # coordinate equal to 1.\n+            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n+            # So look for m=a^2=1/x.\n+            m = F(1)/G[0]\n+            if not m.is_square():\n+                continue\n+            rb = b*m^3\n+            RE = EllipticCurve(F, [0, rb])\n+\n+            # Use as generator twice the point with this low X coordinate (like secp256k1!)\n+            RG = RE.lift_x(1) * 2",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 59,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": 485076267,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2020-09-08T19:50:01Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485158515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485158515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485251860",
      "pull_request_review_id": 484562190,
      "id": 485251860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MTg2MA==",
      "diff_hunk": "@@ -254,6 +254,14 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_sc\n \n #ifdef USE_ENDOMORPHISM\n #if defined(EXHAUSTIVE_TEST_ORDER)\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n+#    define EXHAUSTIVE_TEST_LAMBDA 9\n+#  elif EXHAUSTIVE_TEST_ORDER == 199\n+#    define EXHAUSTIVE_TEST_LAMBDA 92\n+#  else\n+#    error No known lambda for the specified exhaustive test group order.\n+#endif",
      "path": "src/scalar_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "c124528a43e6c788699fbc4d063bbcc85f28d45f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: indentation.\r\n\r\nNo lambda for order 7?",
      "created_at": "2020-09-08T23:35:09Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485251860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485251860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485255000",
      "pull_request_review_id": 484565546,
      "id": 485255000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NTAwMA==",
      "diff_hunk": "@@ -254,6 +254,14 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_sc\n \n #ifdef USE_ENDOMORPHISM\n #if defined(EXHAUSTIVE_TEST_ORDER)\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n+#    define EXHAUSTIVE_TEST_LAMBDA 9\n+#  elif EXHAUSTIVE_TEST_ORDER == 199\n+#    define EXHAUSTIVE_TEST_LAMBDA 92\n+#  else\n+#    error No known lambda for the specified exhaustive test group order.\n+#endif",
      "path": "src/scalar_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "c124528a43e6c788699fbc4d063bbcc85f28d45f",
      "in_reply_to_id": 485251860,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I just pushed another update.\r\n\r\nThe order 7 subgroup in fact does not have the endomorphism property (apparently all subgroups do, except the order 2, 3, and 7 ones).",
      "created_at": "2020-09-08T23:45:44Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485255000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485255000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485273684",
      "pull_request_review_id": 484585944,
      "id": 485273684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MzY4NA==",
      "diff_hunk": "@@ -254,6 +254,14 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_sc\n \n #ifdef USE_ENDOMORPHISM\n #if defined(EXHAUSTIVE_TEST_ORDER)\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n+#    define EXHAUSTIVE_TEST_LAMBDA 9\n+#  elif EXHAUSTIVE_TEST_ORDER == 199\n+#    define EXHAUSTIVE_TEST_LAMBDA 92\n+#  else\n+#    error No known lambda for the specified exhaustive test group order.\n+#endif",
      "path": "src/scalar_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "c124528a43e6c788699fbc4d063bbcc85f28d45f",
      "in_reply_to_id": 485251860,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok I see.\r\n\r\nCan you fix the #endif indentation? ",
      "created_at": "2020-09-09T00:52:53Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485273684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485273684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485279262",
      "pull_request_review_id": 484591839,
      "id": 485279262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3OTI2Mg==",
      "diff_hunk": "@@ -254,6 +254,14 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_sc\n \n #ifdef USE_ENDOMORPHISM\n #if defined(EXHAUSTIVE_TEST_ORDER)\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n+#    define EXHAUSTIVE_TEST_LAMBDA 9\n+#  elif EXHAUSTIVE_TEST_ORDER == 199\n+#    define EXHAUSTIVE_TEST_LAMBDA 92\n+#  else\n+#    error No known lambda for the specified exhaustive test group order.\n+#endif",
      "path": "src/scalar_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "c124528a43e6c788699fbc4d063bbcc85f28d45f",
      "in_reply_to_id": 485251860,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's already fixed, I think?",
      "created_at": "2020-09-09T01:13:27Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485279262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485279262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485286577",
      "pull_request_review_id": 484603924,
      "id": 485286577,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NjU3Nw==",
      "diff_hunk": "@@ -254,6 +254,14 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_sc\n \n #ifdef USE_ENDOMORPHISM\n #if defined(EXHAUSTIVE_TEST_ORDER)\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n+#    define EXHAUSTIVE_TEST_LAMBDA 9\n+#  elif EXHAUSTIVE_TEST_ORDER == 199\n+#    define EXHAUSTIVE_TEST_LAMBDA 92\n+#  else\n+#    error No known lambda for the specified exhaustive test group order.\n+#endif",
      "path": "src/scalar_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "c124528a43e6c788699fbc4d063bbcc85f28d45f",
      "in_reply_to_id": 485251860,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, it was fixed in a later commit only. Really fixed now.",
      "created_at": "2020-09-09T01:38:16Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485286577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485286577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485436331",
      "pull_request_review_id": 484782232,
      "id": 485436331,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNjMzMQ==",
      "diff_hunk": "@@ -254,6 +254,14 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_sc\n \n #ifdef USE_ENDOMORPHISM\n #if defined(EXHAUSTIVE_TEST_ORDER)\n+#  if EXHAUSTIVE_TEST_ORDER == 13\n+#    define EXHAUSTIVE_TEST_LAMBDA 9\n+#  elif EXHAUSTIVE_TEST_ORDER == 199\n+#    define EXHAUSTIVE_TEST_LAMBDA 92\n+#  else\n+#    error No known lambda for the specified exhaustive test group order.\n+#endif",
      "path": "src/scalar_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "c124528a43e6c788699fbc4d063bbcc85f28d45f",
      "in_reply_to_id": 485251860,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh sorry, I thought I looked in the later commits too. For some reason I missed it there.",
      "created_at": "2020-09-09T08:35:26Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485436331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485436331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485455697",
      "pull_request_review_id": 484806642,
      "id": 485455697,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1NTY5Nw==",
      "diff_hunk": "@@ -327,184 +340,94 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n+int main(int argc, char** argv) {\n+    int i;\n+    int count = 2;\n+    secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n+    secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n \n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n     }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n-\n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n-\n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 404,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "8c5dfdf57686d39d5a458ebafe4a037058f385de",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is where valgrind on MacOS complains about uninit data.\r\n\r\nThis is spurious, see https://stackoverflow.com/questions/29312335/valgrind-on-os-x-yosemite-giving-bogus-errors ... @elichai Do you think we can update to MacOS 10.13 ? According to homebrew, valgrind supports this now. ",
      "created_at": "2020-09-09T09:03:36Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485455697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485455697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485464631",
      "pull_request_review_id": 484817694,
      "id": 485464631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2NDYzMQ==",
      "diff_hunk": "@@ -327,184 +340,94 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n+int main(int argc, char** argv) {\n+    int i;\n+    int count = 2;\n+    secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n+    secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n \n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n     }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n-\n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n-\n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 404,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "8c5dfdf57686d39d5a458ebafe4a037058f385de",
      "in_reply_to_id": 485455697,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah no, we're at 10.13 already... Upstream bug: https://bugs.kde.org/show_bug.cgi?id=399584 There they mention https://github.com/LouisBrunner/valgrind-macos as an alternative tap. Do you think it's worth trying?",
      "created_at": "2020-09-09T09:16:29Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485464631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485464631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485536910",
      "pull_request_review_id": 484910773,
      "id": 485536910,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNjkxMA==",
      "diff_hunk": "@@ -327,184 +340,94 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n+int main(int argc, char** argv) {\n+    int i;\n+    int count = 2;\n+    secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n+    secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n \n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n     }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n-\n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n-\n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 404,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "8c5dfdf57686d39d5a458ebafe4a037058f385de",
      "in_reply_to_id": 485455697,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can try, idk how much will we trust it though (if someone is bored enough, he can go over their patches hehe https://github.com/LouisBrunner/valgrind-macos/commits/patches)",
      "created_at": "2020-09-09T11:26:48Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485536910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485536910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485702279",
      "pull_request_review_id": 485129201,
      "id": 485702279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMjI3OQ==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+# Define field size and field\n+P = 2^256 - 2^32 - 977\n+F = GF(P)\n+\n+orders_done = set()\n+first = True\n+for b in range(1, P):\n+    E = EllipticCurve(F, [0, b])\n+    n = E.order()\n+    # Skip curves isomorphic to the real secp256k1\n+    if n.is_pseudoprime():\n+        continue\n+    # Skip curves with an order we've already tried\n+    if n in orders_done:\n+        continue\n+    orders_done.add(n)\n+\n+    # Find what prime subgroups exist\n+    for f, _ in n.factor():\n+        # Skip subgroups of order >1000\n+        if f > 1000:\n+            continue\n+        # Skip subgroups that are not 3n+1 (needed for endomorphism)\n+        if f % 3 != 1:\n+            continue\n+\n+        if first:\n+            print(\"#  if EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+            first = False\n+        else:\n+            print(\"#  elif EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+\n+        # Iterate over X coordinates until we find one that is on the curve, has order f,\n+        # and for which curve isomorphism exists that maps it to X coordinate 1.\n+        for x in range(1, P):\n+            # Skip X coordinates not on the curve, and construct the full point otherwise.\n+            if not E.is_x_coord(x):\n+                continue\n+            G = E.lift_x(F(x))\n+\n+            # Skip points whose order is not a multiple of f. Project the point to have\n+            # order f otherwise.\n+            if (G.order() % f):\n+                continue\n+            G = G * (G.order() // f)\n+            assert G.order() == f\n+\n+            # Now look for an isomorphism of the curve that gives this generator X\n+            # coordinate equal to 1.\n+            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n+            # So look for m=a^2=1/x.\n+            m = F(1)/G[0]\n+            if not m.is_square():\n+                continue\n+            rb = b*m^3\n+            RE = EllipticCurve(F, [0, rb])\n+\n+            # Use as generator twice the point with this low X coordinate (like secp256k1!)\n+            RG = RE.lift_x(1) * 2",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 59,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": 485076267,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I see now. You're specifically checking that `m` is square, i.e., that `a` exists.",
      "created_at": "2020-09-09T15:27:19Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r485702279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/485702279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/486002236",
      "pull_request_review_id": 485497476,
      "id": 486002236,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMjIzNg==",
      "diff_hunk": "@@ -327,184 +340,94 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n+int main(int argc, char** argv) {\n+    int i;\n+    int count = 2;\n+    secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n+    secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n \n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n     }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n-\n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n-\n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 404,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "8c5dfdf57686d39d5a458ebafe4a037058f385de",
      "in_reply_to_id": 485455697,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Anyone have a clue why the `tests` binary doesn't have the exact same problem?",
      "created_at": "2020-09-10T01:01:54Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r486002236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/486002236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/486237893",
      "pull_request_review_id": 485802207,
      "id": 486237893,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNzg5Mw==",
      "diff_hunk": "@@ -327,184 +340,94 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n+int main(int argc, char** argv) {\n+    int i;\n+    int count = 2;\n+    secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n+    secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n \n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n     }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n-\n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n-\n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 404,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "8c5dfdf57686d39d5a458ebafe4a037058f385de",
      "in_reply_to_id": 485455697,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was wondering about this, too. The compile/link options seem to be the same. Now that I looked at the two files again, my best guess is https://github.com/bitcoin-core/secp256k1/blob/master/src/tests.c#L5529 ",
      "created_at": "2020-09-10T10:38:32Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r486237893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/486237893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/486603316",
      "pull_request_review_id": 486271767,
      "id": 486603316,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwMzMxNg==",
      "diff_hunk": "@@ -327,184 +340,94 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n+int main(int argc, char** argv) {\n+    int i;\n+    int count = 2;\n+    secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n+    secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n \n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n     }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n-\n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n-\n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 404,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "8c5dfdf57686d39d5a458ebafe4a037058f385de",
      "in_reply_to_id": 485455697,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems that fixed it.",
      "created_at": "2020-09-10T20:06:54Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r486603316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/486603316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487414063",
      "pull_request_review_id": 487232551,
      "id": 487414063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQxNDA2Mw==",
      "diff_hunk": "@@ -0,0 +1,211 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+#define _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"src/modules/schnorrsig/main_impl.h\"\n+\n+static const unsigned char invalid_pubkey_bytes[][32] = {\n+    /* 0 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+    },\n+    /* 2 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2\n+    },\n+    /* order */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 0UL) & 0xFF\n+    },\n+    /* order + 1 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 1UL) & 0xFF\n+    },\n+    /* field size */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x2F\n+    },\n+    /* field size + 1 (note that 1 is legal) */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x30\n+    },\n+    /* 2^256 - 1 */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n+    }\n+};\n+\n+#define NUM_INVALID_KEYS (sizeof(invalid_pubkey_bytes) / sizeof(invalid_pubkey_bytes[0]))\n+\n+static int secp256k1_hardened_nonce_function_smallint(unsigned char *nonce32, const unsigned char *msg32,\n+                                                      const unsigned char *key32, const unsigned char *xonly_pk32,\n+                                                      const unsigned char *algo16, void* data) {\n+    secp256k1_scalar s;\n+    int *idata = data;\n+    (void)msg32;\n+    (void)key32;\n+    (void)xonly_pk32;\n+    (void)algo16;\n+    secp256k1_scalar_set_int(&s, *idata);\n+    secp256k1_scalar_get_b32(nonce32, &s);\n+    return 1;\n+}\n+\n+static void test_exhaustive_schnorrsig_verify(const secp256k1_context *ctx, const secp256k1_xonly_pubkey* pubkeys, unsigned char (*xonly_pubkey_bytes)[32], const int* parities) {\n+    int d;\n+    uint64_t iter = 0;\n+    /* Iterate over the possible public keys to verify against (through their corresponding DL d). */\n+    for (d = 1; d <= EXHAUSTIVE_TEST_ORDER / 2; ++d) {\n+        int actual_d;\n+        unsigned k;\n+        unsigned char pk32[32];\n+        memcpy(pk32, xonly_pubkey_bytes[d - 1], 32);\n+        actual_d = parities[d - 1] ? EXHAUSTIVE_TEST_ORDER - d : d;\n+        /* Iterate over the possible valid first 32 bytes in the signature, through their corresponding DL k.\n+           Values above EXHAUSTIVE_TEST_ORDER/2 refer to the entries in invalid_pubkey_bytes. */\n+        for (k = 1; k <= EXHAUSTIVE_TEST_ORDER / 2 + NUM_INVALID_KEYS; ++k) {\n+            unsigned char sig64[64];\n+            int actual_k = -1;\n+            int e_done[EXHAUSTIVE_TEST_ORDER] = {0};\n+            int e_count_done = 0;\n+            if (skip_section(iter++)) continue;",
      "path": "src/modules/schnorrsig/tests_exhaustive_impl.h",
      "position": null,
      "original_position": 92,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "9737f95773d5d398518dbcda0dad5cc6cff531fd",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`skip_section` takes a pointer, same in schnorrsig_sign",
      "created_at": "2020-09-12T14:16:56Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487414063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487414063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487421659",
      "pull_request_review_id": 487237604,
      "id": 487421659,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMTY1OQ==",
      "diff_hunk": "@@ -0,0 +1,211 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+#define _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"src/modules/schnorrsig/main_impl.h\"\n+\n+static const unsigned char invalid_pubkey_bytes[][32] = {\n+    /* 0 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+    },\n+    /* 2 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2\n+    },\n+    /* order */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 0UL) & 0xFF\n+    },\n+    /* order + 1 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 1UL) & 0xFF\n+    },\n+    /* field size */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x2F\n+    },\n+    /* field size + 1 (note that 1 is legal) */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x30\n+    },\n+    /* 2^256 - 1 */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n+    }\n+};\n+\n+#define NUM_INVALID_KEYS (sizeof(invalid_pubkey_bytes) / sizeof(invalid_pubkey_bytes[0]))\n+\n+static int secp256k1_hardened_nonce_function_smallint(unsigned char *nonce32, const unsigned char *msg32,\n+                                                      const unsigned char *key32, const unsigned char *xonly_pk32,\n+                                                      const unsigned char *algo16, void* data) {\n+    secp256k1_scalar s;\n+    int *idata = data;\n+    (void)msg32;\n+    (void)key32;\n+    (void)xonly_pk32;\n+    (void)algo16;\n+    secp256k1_scalar_set_int(&s, *idata);\n+    secp256k1_scalar_get_b32(nonce32, &s);\n+    return 1;\n+}\n+\n+static void test_exhaustive_schnorrsig_verify(const secp256k1_context *ctx, const secp256k1_xonly_pubkey* pubkeys, unsigned char (*xonly_pubkey_bytes)[32], const int* parities) {\n+    int d;\n+    uint64_t iter = 0;\n+    /* Iterate over the possible public keys to verify against (through their corresponding DL d). */\n+    for (d = 1; d <= EXHAUSTIVE_TEST_ORDER / 2; ++d) {\n+        int actual_d;\n+        unsigned k;\n+        unsigned char pk32[32];\n+        memcpy(pk32, xonly_pubkey_bytes[d - 1], 32);\n+        actual_d = parities[d - 1] ? EXHAUSTIVE_TEST_ORDER - d : d;\n+        /* Iterate over the possible valid first 32 bytes in the signature, through their corresponding DL k.\n+           Values above EXHAUSTIVE_TEST_ORDER/2 refer to the entries in invalid_pubkey_bytes. */\n+        for (k = 1; k <= EXHAUSTIVE_TEST_ORDER / 2 + NUM_INVALID_KEYS; ++k) {\n+            unsigned char sig64[64];\n+            int actual_k = -1;\n+            int e_done[EXHAUSTIVE_TEST_ORDER] = {0};\n+            int e_count_done = 0;\n+            if (skip_section(iter++)) continue;\n+            if (k <= EXHAUSTIVE_TEST_ORDER / 2) {\n+                memcpy(sig64, xonly_pubkey_bytes[k - 1], 32);\n+                actual_k = parities[k - 1] ? EXHAUSTIVE_TEST_ORDER - k : k;\n+            } else {\n+                memcpy(sig64, invalid_pubkey_bytes[k - 1 - EXHAUSTIVE_TEST_ORDER / 2], 32);\n+            }\n+            /* Randomly generate messages until all challenges have been hit. */\n+            while (e_count_done < EXHAUSTIVE_TEST_ORDER) {\n+                secp256k1_scalar e;\n+                unsigned char msg32[32];\n+                secp256k1_rand256(msg32);\n+                secp256k1_schnorrsig_challenge(&e, sig64, msg32, pk32);\n+                /* Only do work if we hit a challenge we haven't tried before. */\n+                if (!e_done[e]) {\n+                    /* Iterate over the possible valid last 32 bytes in the signature.\n+                       0..order=that s value; order+1=random bytes */\n+                    int count_valid = 0, s;\n+                    for (s = 0; s <= EXHAUSTIVE_TEST_ORDER + 1; ++s) {\n+                        int expect_valid, valid;\n+                        if (s <= EXHAUSTIVE_TEST_ORDER) {\n+                            secp256k1_scalar s_s;\n+                            secp256k1_scalar_set_int(&s_s, s);\n+                            secp256k1_scalar_get_b32(sig64 + 32, &s_s);\n+                            expect_valid = actual_k != -1 && s != EXHAUSTIVE_TEST_ORDER &&\n+                                           (s_s == (actual_k + actual_d * e) % EXHAUSTIVE_TEST_ORDER);\n+                        } else {\n+                            secp256k1_rand256(sig64 + 32);\n+                            expect_valid = 0;\n+                        }\n+                        valid = secp256k1_schnorrsig_verify(ctx, sig64, msg32, &pubkeys[d - 1]);\n+                        CHECK(valid == expect_valid);\n+                        count_valid += valid;\n+                    }\n+                    /* Exactly one s value must verify, unless R is illegal. */\n+                    CHECK(count_valid == (actual_k != -1));\n+                    /* Don't retry other messages that result in the same challenge. */\n+                    e_done[e] = 1;\n+                    ++e_count_done;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+static void test_exhaustive_schnorrsig_sign(const secp256k1_context *ctx, unsigned char (*xonly_pubkey_bytes)[32], const secp256k1_keypair* keypairs, const int* parities) {\n+    int d, k;\n+    uint64_t iter = 0;\n+    /* Loop over keys. */\n+    for (d = 1; d < EXHAUSTIVE_TEST_ORDER; ++d) {\n+        int actual_d = d;\n+        if (parities[d - 1]) actual_d = EXHAUSTIVE_TEST_ORDER - d;\n+        /* Loop over nonces. */\n+        for (k = 1; k < EXHAUSTIVE_TEST_ORDER; ++k) {\n+            int e_done[EXHAUSTIVE_TEST_ORDER] = {0};\n+            int e_count_done = 0;\n+            unsigned char msg32[32];\n+            unsigned char sig64[64];\n+            int actual_k = k;\n+            if (skip_section(iter++)) continue;\n+            if (parities[k - 1]) actual_k = EXHAUSTIVE_TEST_ORDER - k;\n+            /* Generate random messages until all challenges have been tried. */\n+            while (e_count_done < EXHAUSTIVE_TEST_ORDER) {\n+                secp256k1_scalar e;\n+                secp256k1_rand256(msg32);\n+                secp256k1_schnorrsig_challenge(&e, xonly_pubkey_bytes[k - 1], msg32, xonly_pubkey_bytes[d - 1]);\n+                /* Only do work if we hit a challenge we haven't tried before. */\n+                if (!e_done[e]) {\n+                    secp256k1_scalar expected_s = (actual_k + e * actual_d) % EXHAUSTIVE_TEST_ORDER;\n+                    unsigned char expected_s_bytes[32];\n+                    secp256k1_scalar_get_b32(expected_s_bytes, &expected_s);\n+                    /* Invoke the real function to construct a signature. */\n+                    CHECK(secp256k1_schnorrsig_sign(ctx, sig64, msg32, &keypairs[d - 1], secp256k1_hardened_nonce_function_smallint, &k));\n+                    /* The first 32 bytes must match the xonly pubkey for the specified k. */\n+                    CHECK(memcmp(sig64, xonly_pubkey_bytes[k - 1], 32) == 0);\n+                    /* The last 32 bytes must match the expected s value. */\n+                    CHECK(memcmp(sig64 + 32, expected_s_bytes, 32) == 0);\n+                    /* Don't retry other messages that result in the same challenge. */\n+                    e_done[e] = 1;\n+                    ++e_count_done;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+\n+static void test_exhaustive_schnorrsig(const secp256k1_context *ctx, const secp256k1_ge* group) {\n+    secp256k1_keypair keypair[EXHAUSTIVE_TEST_ORDER - 1];\n+    secp256k1_xonly_pubkey xonly_pubkey[EXHAUSTIVE_TEST_ORDER - 1];\n+    int parity[EXHAUSTIVE_TEST_ORDER - 1];\n+    unsigned char xonly_pubkey_bytes[EXHAUSTIVE_TEST_ORDER - 1][32];\n+    unsigned i;\n+\n+    /* Verify that all invalid_pubkey_bytes are actually invalid. */\n+    for (i = 0; i < NUM_INVALID_KEYS; ++i) {\n+        secp256k1_xonly_pubkey pk;\n+        CHECK(!secp256k1_xonly_pubkey_parse(ctx, &pk, invalid_pubkey_bytes[i]));\n+    }\n+\n+    /* Construct keypairs and xonly-pubkeys for the entire group. */\n+    for (i = 1; i < EXHAUSTIVE_TEST_ORDER; ++i) {\n+        secp256k1_scalar scalar_i;\n+        unsigned char buf[32];\n+        secp256k1_scalar_set_int(&scalar_i, i);\n+        secp256k1_scalar_get_b32(buf, &scalar_i);\n+        CHECK(secp256k1_keypair_create(ctx, &keypair[i - 1], buf));\n+        CHECK(secp256k1_keypair_xonly_pub(ctx, &xonly_pubkey[i - 1], &parity[i - 1], &keypair[i - 1]));\n+        CHECK(secp256k1_xonly_pubkey_serialize(ctx, xonly_pubkey_bytes[i - 1], &xonly_pubkey[i - 1]));\n+    }\n+\n+    /* The keypairs/pubkey functions above have already been tested agains the group;\n+       see src/modules/extrakeys/tests_exhaustive_impl.h. */\n+    (void)group;",
      "path": "src/modules/schnorrsig/tests_exhaustive_impl.h",
      "position": null,
      "original_position": 205,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "9737f95773d5d398518dbcda0dad5cc6cff531fd",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why not just remove this argument?",
      "created_at": "2020-09-12T15:42:49Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487421659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487421659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487421721",
      "pull_request_review_id": 487237604,
      "id": 487421721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMTcyMQ==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+# Define field size and field\n+P = 2^256 - 2^32 - 977\n+F = GF(P)\n+\n+orders_done = set()\n+first = True\n+for b in range(1, P):\n+    E = EllipticCurve(F, [0, b])\n+    n = E.order()\n+    # Skip curves isomorphic to the real secp256k1\n+    if n.is_pseudoprime():\n+        continue\n+    # Skip curves with an order we've already tried\n+    if n in orders_done:\n+        continue\n+    orders_done.add(n)\n+\n+    # Find what prime subgroups exist\n+    for f, _ in n.factor():\n+        # Skip subgroups of order >1000\n+        if f > 1000:\n+            continue\n+        # Skip subgroups that are not 3n+1 (needed for endomorphism)\n+        if f % 3 != 1:\n+            continue\n+\n+        if first:\n+            print(\"#  if EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+            first = False\n+        else:\n+            print(\"#  elif EXHAUSTIVE_TEST_ORDER == %i\" % f)\n+\n+        # Iterate over X coordinates until we find one that is on the curve, has order f,\n+        # and for which curve isomorphism exists that maps it to X coordinate 1.\n+        for x in range(1, P):\n+            # Skip X coordinates not on the curve, and construct the full point otherwise.\n+            if not E.is_x_coord(x):\n+                continue\n+            G = E.lift_x(F(x))\n+\n+            # Skip points whose order is not a multiple of f. Project the point to have\n+            # order f otherwise.\n+            if (G.order() % f):\n+                continue\n+            G = G * (G.order() // f)\n+            assert G.order() == f\n+\n+            # Now look for an isomorphism of the curve that gives this generator X\n+            # coordinate equal to 1.\n+            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n+            # So look for m=a^2=1/x.\n+            m = F(1)/G[0]\n+            if not m.is_square():\n+                continue\n+            rb = b*m^3\n+            RE = EllipticCurve(F, [0, rb])\n+\n+            # Use as generator twice the point with this low X coordinate (like secp256k1!)\n+            RG = RE.lift_x(1) * 2",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 59,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "aa48ca9c5b91f570eb2cb52636cd590eccea5de4",
      "in_reply_to_id": 485076267,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The new script output makes running this quite exciting!",
      "created_at": "2020-09-12T15:43:43Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487421721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487421721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487435815",
      "pull_request_review_id": 487247660,
      "id": 487435815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNTgxNQ==",
      "diff_hunk": "@@ -0,0 +1,211 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+#define _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"src/modules/schnorrsig/main_impl.h\"\n+\n+static const unsigned char invalid_pubkey_bytes[][32] = {\n+    /* 0 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+    },\n+    /* 2 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2\n+    },\n+    /* order */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 0UL) & 0xFF\n+    },\n+    /* order + 1 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 1UL) & 0xFF\n+    },\n+    /* field size */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x2F\n+    },\n+    /* field size + 1 (note that 1 is legal) */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x30\n+    },\n+    /* 2^256 - 1 */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n+    }\n+};\n+\n+#define NUM_INVALID_KEYS (sizeof(invalid_pubkey_bytes) / sizeof(invalid_pubkey_bytes[0]))\n+\n+static int secp256k1_hardened_nonce_function_smallint(unsigned char *nonce32, const unsigned char *msg32,\n+                                                      const unsigned char *key32, const unsigned char *xonly_pk32,\n+                                                      const unsigned char *algo16, void* data) {\n+    secp256k1_scalar s;\n+    int *idata = data;\n+    (void)msg32;\n+    (void)key32;\n+    (void)xonly_pk32;\n+    (void)algo16;\n+    secp256k1_scalar_set_int(&s, *idata);\n+    secp256k1_scalar_get_b32(nonce32, &s);\n+    return 1;\n+}\n+\n+static void test_exhaustive_schnorrsig_verify(const secp256k1_context *ctx, const secp256k1_xonly_pubkey* pubkeys, unsigned char (*xonly_pubkey_bytes)[32], const int* parities) {\n+    int d;\n+    uint64_t iter = 0;\n+    /* Iterate over the possible public keys to verify against (through their corresponding DL d). */\n+    for (d = 1; d <= EXHAUSTIVE_TEST_ORDER / 2; ++d) {\n+        int actual_d;\n+        unsigned k;\n+        unsigned char pk32[32];\n+        memcpy(pk32, xonly_pubkey_bytes[d - 1], 32);\n+        actual_d = parities[d - 1] ? EXHAUSTIVE_TEST_ORDER - d : d;\n+        /* Iterate over the possible valid first 32 bytes in the signature, through their corresponding DL k.\n+           Values above EXHAUSTIVE_TEST_ORDER/2 refer to the entries in invalid_pubkey_bytes. */\n+        for (k = 1; k <= EXHAUSTIVE_TEST_ORDER / 2 + NUM_INVALID_KEYS; ++k) {\n+            unsigned char sig64[64];\n+            int actual_k = -1;\n+            int e_done[EXHAUSTIVE_TEST_ORDER] = {0};\n+            int e_count_done = 0;\n+            if (skip_section(iter++)) continue;",
      "path": "src/modules/schnorrsig/tests_exhaustive_impl.h",
      "position": null,
      "original_position": 92,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "9737f95773d5d398518dbcda0dad5cc6cff531fd",
      "in_reply_to_id": 487414063,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2020-09-12T18:28:51Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487435815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487435815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487435915",
      "pull_request_review_id": 487247727,
      "id": 487435915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNTkxNQ==",
      "diff_hunk": "@@ -0,0 +1,211 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+#define _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"src/modules/schnorrsig/main_impl.h\"\n+\n+static const unsigned char invalid_pubkey_bytes[][32] = {\n+    /* 0 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+    },\n+    /* 2 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2\n+    },\n+    /* order */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 0UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 0UL) & 0xFF\n+    },\n+    /* order + 1 */\n+    {\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 24) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 16) & 0xFF,\n+        ((EXHAUSTIVE_TEST_ORDER + 1UL) >> 8) & 0xFF,\n+        (EXHAUSTIVE_TEST_ORDER + 1UL) & 0xFF\n+    },\n+    /* field size */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x2F\n+    },\n+    /* field size + 1 (note that 1 is legal) */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x30\n+    },\n+    /* 2^256 - 1 */\n+    {\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n+    }\n+};\n+\n+#define NUM_INVALID_KEYS (sizeof(invalid_pubkey_bytes) / sizeof(invalid_pubkey_bytes[0]))\n+\n+static int secp256k1_hardened_nonce_function_smallint(unsigned char *nonce32, const unsigned char *msg32,\n+                                                      const unsigned char *key32, const unsigned char *xonly_pk32,\n+                                                      const unsigned char *algo16, void* data) {\n+    secp256k1_scalar s;\n+    int *idata = data;\n+    (void)msg32;\n+    (void)key32;\n+    (void)xonly_pk32;\n+    (void)algo16;\n+    secp256k1_scalar_set_int(&s, *idata);\n+    secp256k1_scalar_get_b32(nonce32, &s);\n+    return 1;\n+}\n+\n+static void test_exhaustive_schnorrsig_verify(const secp256k1_context *ctx, const secp256k1_xonly_pubkey* pubkeys, unsigned char (*xonly_pubkey_bytes)[32], const int* parities) {\n+    int d;\n+    uint64_t iter = 0;\n+    /* Iterate over the possible public keys to verify against (through their corresponding DL d). */\n+    for (d = 1; d <= EXHAUSTIVE_TEST_ORDER / 2; ++d) {\n+        int actual_d;\n+        unsigned k;\n+        unsigned char pk32[32];\n+        memcpy(pk32, xonly_pubkey_bytes[d - 1], 32);\n+        actual_d = parities[d - 1] ? EXHAUSTIVE_TEST_ORDER - d : d;\n+        /* Iterate over the possible valid first 32 bytes in the signature, through their corresponding DL k.\n+           Values above EXHAUSTIVE_TEST_ORDER/2 refer to the entries in invalid_pubkey_bytes. */\n+        for (k = 1; k <= EXHAUSTIVE_TEST_ORDER / 2 + NUM_INVALID_KEYS; ++k) {\n+            unsigned char sig64[64];\n+            int actual_k = -1;\n+            int e_done[EXHAUSTIVE_TEST_ORDER] = {0};\n+            int e_count_done = 0;\n+            if (skip_section(iter++)) continue;\n+            if (k <= EXHAUSTIVE_TEST_ORDER / 2) {\n+                memcpy(sig64, xonly_pubkey_bytes[k - 1], 32);\n+                actual_k = parities[k - 1] ? EXHAUSTIVE_TEST_ORDER - k : k;\n+            } else {\n+                memcpy(sig64, invalid_pubkey_bytes[k - 1 - EXHAUSTIVE_TEST_ORDER / 2], 32);\n+            }\n+            /* Randomly generate messages until all challenges have been hit. */\n+            while (e_count_done < EXHAUSTIVE_TEST_ORDER) {\n+                secp256k1_scalar e;\n+                unsigned char msg32[32];\n+                secp256k1_rand256(msg32);\n+                secp256k1_schnorrsig_challenge(&e, sig64, msg32, pk32);\n+                /* Only do work if we hit a challenge we haven't tried before. */\n+                if (!e_done[e]) {\n+                    /* Iterate over the possible valid last 32 bytes in the signature.\n+                       0..order=that s value; order+1=random bytes */\n+                    int count_valid = 0, s;\n+                    for (s = 0; s <= EXHAUSTIVE_TEST_ORDER + 1; ++s) {\n+                        int expect_valid, valid;\n+                        if (s <= EXHAUSTIVE_TEST_ORDER) {\n+                            secp256k1_scalar s_s;\n+                            secp256k1_scalar_set_int(&s_s, s);\n+                            secp256k1_scalar_get_b32(sig64 + 32, &s_s);\n+                            expect_valid = actual_k != -1 && s != EXHAUSTIVE_TEST_ORDER &&\n+                                           (s_s == (actual_k + actual_d * e) % EXHAUSTIVE_TEST_ORDER);\n+                        } else {\n+                            secp256k1_rand256(sig64 + 32);\n+                            expect_valid = 0;\n+                        }\n+                        valid = secp256k1_schnorrsig_verify(ctx, sig64, msg32, &pubkeys[d - 1]);\n+                        CHECK(valid == expect_valid);\n+                        count_valid += valid;\n+                    }\n+                    /* Exactly one s value must verify, unless R is illegal. */\n+                    CHECK(count_valid == (actual_k != -1));\n+                    /* Don't retry other messages that result in the same challenge. */\n+                    e_done[e] = 1;\n+                    ++e_count_done;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+static void test_exhaustive_schnorrsig_sign(const secp256k1_context *ctx, unsigned char (*xonly_pubkey_bytes)[32], const secp256k1_keypair* keypairs, const int* parities) {\n+    int d, k;\n+    uint64_t iter = 0;\n+    /* Loop over keys. */\n+    for (d = 1; d < EXHAUSTIVE_TEST_ORDER; ++d) {\n+        int actual_d = d;\n+        if (parities[d - 1]) actual_d = EXHAUSTIVE_TEST_ORDER - d;\n+        /* Loop over nonces. */\n+        for (k = 1; k < EXHAUSTIVE_TEST_ORDER; ++k) {\n+            int e_done[EXHAUSTIVE_TEST_ORDER] = {0};\n+            int e_count_done = 0;\n+            unsigned char msg32[32];\n+            unsigned char sig64[64];\n+            int actual_k = k;\n+            if (skip_section(iter++)) continue;\n+            if (parities[k - 1]) actual_k = EXHAUSTIVE_TEST_ORDER - k;\n+            /* Generate random messages until all challenges have been tried. */\n+            while (e_count_done < EXHAUSTIVE_TEST_ORDER) {\n+                secp256k1_scalar e;\n+                secp256k1_rand256(msg32);\n+                secp256k1_schnorrsig_challenge(&e, xonly_pubkey_bytes[k - 1], msg32, xonly_pubkey_bytes[d - 1]);\n+                /* Only do work if we hit a challenge we haven't tried before. */\n+                if (!e_done[e]) {\n+                    secp256k1_scalar expected_s = (actual_k + e * actual_d) % EXHAUSTIVE_TEST_ORDER;\n+                    unsigned char expected_s_bytes[32];\n+                    secp256k1_scalar_get_b32(expected_s_bytes, &expected_s);\n+                    /* Invoke the real function to construct a signature. */\n+                    CHECK(secp256k1_schnorrsig_sign(ctx, sig64, msg32, &keypairs[d - 1], secp256k1_hardened_nonce_function_smallint, &k));\n+                    /* The first 32 bytes must match the xonly pubkey for the specified k. */\n+                    CHECK(memcmp(sig64, xonly_pubkey_bytes[k - 1], 32) == 0);\n+                    /* The last 32 bytes must match the expected s value. */\n+                    CHECK(memcmp(sig64 + 32, expected_s_bytes, 32) == 0);\n+                    /* Don't retry other messages that result in the same challenge. */\n+                    e_done[e] = 1;\n+                    ++e_count_done;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+\n+static void test_exhaustive_schnorrsig(const secp256k1_context *ctx, const secp256k1_ge* group) {\n+    secp256k1_keypair keypair[EXHAUSTIVE_TEST_ORDER - 1];\n+    secp256k1_xonly_pubkey xonly_pubkey[EXHAUSTIVE_TEST_ORDER - 1];\n+    int parity[EXHAUSTIVE_TEST_ORDER - 1];\n+    unsigned char xonly_pubkey_bytes[EXHAUSTIVE_TEST_ORDER - 1][32];\n+    unsigned i;\n+\n+    /* Verify that all invalid_pubkey_bytes are actually invalid. */\n+    for (i = 0; i < NUM_INVALID_KEYS; ++i) {\n+        secp256k1_xonly_pubkey pk;\n+        CHECK(!secp256k1_xonly_pubkey_parse(ctx, &pk, invalid_pubkey_bytes[i]));\n+    }\n+\n+    /* Construct keypairs and xonly-pubkeys for the entire group. */\n+    for (i = 1; i < EXHAUSTIVE_TEST_ORDER; ++i) {\n+        secp256k1_scalar scalar_i;\n+        unsigned char buf[32];\n+        secp256k1_scalar_set_int(&scalar_i, i);\n+        secp256k1_scalar_get_b32(buf, &scalar_i);\n+        CHECK(secp256k1_keypair_create(ctx, &keypair[i - 1], buf));\n+        CHECK(secp256k1_keypair_xonly_pub(ctx, &xonly_pubkey[i - 1], &parity[i - 1], &keypair[i - 1]));\n+        CHECK(secp256k1_xonly_pubkey_serialize(ctx, xonly_pubkey_bytes[i - 1], &xonly_pubkey[i - 1]));\n+    }\n+\n+    /* The keypairs/pubkey functions above have already been tested agains the group;\n+       see src/modules/extrakeys/tests_exhaustive_impl.h. */\n+    (void)group;",
      "path": "src/modules/schnorrsig/tests_exhaustive_impl.h",
      "position": null,
      "original_position": 205,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "9737f95773d5d398518dbcda0dad5cc6cff531fd",
      "in_reply_to_id": 487421659,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, done.\r\n\r\nI wanted to keep the same \"interface\" for all exhaustive tests that are delegated to modules, but that's easy to add if we'd a lot more modules too.",
      "created_at": "2020-09-12T18:30:09Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487435915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487435915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487566577",
      "pull_request_review_id": 487332803,
      "id": 487566577,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjU3Nw==",
      "diff_hunk": "@@ -327,184 +343,114 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n-\n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-\n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"src/modules/extrakeys/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n-        }\n-    }\n-}\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"src/modules/schnorrsig/tests_exhaustive_impl.h\"\n #endif\n \n-int main(void) {\n+int main(int argc, char** argv) {\n     int i;\n     secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n     secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n+    }\n+    printf(\"test count = %i\\n\", count);\n+\n+    /* find random seed */\n+    secp256k1_rand_init(argc > 2 ? argv[2] : NULL);\n+\n+    /* set up split processing */\n+    if (argc > 4) {\n+        num_cores = strtol(argv[3], NULL, 0);\n+        this_core = strtol(argv[4], NULL, 0);\n+        if (num_cores < 1 || this_core >= num_cores) {\n+            fprintf(stderr, \"Usage: %s [count] [seed] [numcores] [thiscore]\", argv[0]);",
      "path": "src/tests_exhaustive.c",
      "position": null,
      "original_position": 435,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "4ecde861d47f22e608f8c1570172f3e5003e5b41",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "needs a \\n at the end.",
      "created_at": "2020-09-13T19:18:03Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487566577",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487566577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 386,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487567016",
      "pull_request_review_id": 487333093,
      "id": 487567016,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NzAxNg==",
      "diff_hunk": "@@ -327,184 +343,114 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n-\n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-\n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"src/modules/extrakeys/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n-        }\n-    }\n-}\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"src/modules/schnorrsig/tests_exhaustive_impl.h\"\n #endif\n \n-int main(void) {\n+int main(int argc, char** argv) {\n     int i;\n     secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n     secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n+    }\n+    printf(\"test count = %i\\n\", count);\n+\n+    /* find random seed */\n+    secp256k1_rand_init(argc > 2 ? argv[2] : NULL);\n+\n+    /* set up split processing */\n+    if (argc > 4) {\n+        num_cores = strtol(argv[3], NULL, 0);\n+        this_core = strtol(argv[4], NULL, 0);\n+        if (num_cores < 1 || this_core >= num_cores) {\n+            fprintf(stderr, \"Usage: %s [count] [seed] [numcores] [thiscore]\", argv[0]);",
      "path": "src/tests_exhaustive.c",
      "position": null,
      "original_position": 435,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "4ecde861d47f22e608f8c1570172f3e5003e5b41",
      "in_reply_to_id": 487566577,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2020-09-13T19:22:26Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487567016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487567016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 386,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487567793",
      "pull_request_review_id": 487333447,
      "id": 487567793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Nzc5Mw==",
      "diff_hunk": "@@ -327,184 +343,114 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n-\n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-\n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"src/modules/extrakeys/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n-        }\n-    }\n-}\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"src/modules/schnorrsig/tests_exhaustive_impl.h\"\n #endif\n \n-int main(void) {\n+int main(int argc, char** argv) {\n     int i;\n     secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n     secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n+    }\n+    printf(\"test count = %i\\n\", count);\n+\n+    /* find random seed */\n+    secp256k1_rand_init(argc > 2 ? argv[2] : NULL);\n+\n+    /* set up split processing */\n+    if (argc > 4) {\n+        num_cores = strtol(argv[3], NULL, 0);\n+        this_core = strtol(argv[4], NULL, 0);\n+        if (num_cores < 1 || this_core >= num_cores) {\n+            fprintf(stderr, \"Usage: %s [count] [seed] [numcores] [thiscore]\\n\", argv[0]);\n+            return 1;\n+        }\n+        printf(\"running tests for core %lu out of %lu\\n\", (unsigned long)this_core, (unsigned long)num_cores);",
      "path": "src/tests_exhaustive.c",
      "position": null,
      "original_position": 438,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "b6f299ee1a958f7bd0a489e0dcc9bf659d41a54d",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "running tests for core 255 out of 256 doesn't sound quite right, makes it sound like you're missing one when you're not because its zero indexed.  I'm not instantly seeing how to better rephrase that, however.",
      "created_at": "2020-09-13T19:30:08Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487567793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487567793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487571404",
      "pull_request_review_id": 487333447,
      "id": 487571404,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3MTQwNA==",
      "diff_hunk": "@@ -327,184 +343,114 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n-\n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-\n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"src/modules/extrakeys/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n-        }\n-    }\n-}\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"src/modules/schnorrsig/tests_exhaustive_impl.h\"\n #endif\n \n-int main(void) {\n+int main(int argc, char** argv) {\n     int i;\n     secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n     secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n+    }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 425,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "b6f299ee1a958f7bd0a489e0dcc9bf659d41a54d",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The output should print the order somewhere.",
      "created_at": "2020-09-13T20:04:55Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487571404",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487571404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487578815",
      "pull_request_review_id": 487340734,
      "id": 487578815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3ODgxNQ==",
      "diff_hunk": "@@ -138,4 +138,7 @@ static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_g\n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n+/** Determine if a point (which is assumed to be on the curve) is in the group. */",
      "path": "src/group.h",
      "position": null,
      "original_position": 4,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "3acadb107a998a1da6468744e21c3e293c8cdab6",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think \"is in group\" is somewhat imprecise (which group?), even for readers who know about exhaustive tests. And others may really wonder what the point of this function is. \r\n\r\nThe same is true for the name of the function. When I saw this, I first assumed it checks if the input is really on the point.",
      "created_at": "2020-09-13T21:21:17Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487578815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487578815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487581250",
      "pull_request_review_id": 487342369,
      "id": 487581250,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MTI1MA==",
      "diff_hunk": "@@ -138,4 +138,7 @@ static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_g\n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n+/** Determine if a point (which is assumed to be on the curve) is in the group. */",
      "path": "src/group.h",
      "position": null,
      "original_position": 4,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "3acadb107a998a1da6468744e21c3e293c8cdab6",
      "in_reply_to_id": 487578815,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added some comments. WDYT?",
      "created_at": "2020-09-13T21:46:16Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r487581250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/487581250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/488871913",
      "pull_request_review_id": 487333447,
      "id": 488871913,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3MTkxMw==",
      "diff_hunk": "@@ -111,4 +112,47 @@ static void secp256k1_rand_flip(unsigned char *b, size_t len) {\n     b[secp256k1_rand_int(len)] ^= (1 << secp256k1_rand_int(8));\n }\n \n+static void secp256k1_rand_init(const char* hexseed) {",
      "path": "src/testrand_impl.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "76ac2bf214cd6a272176e90b98c84d34fe440f18",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe the function name also should get a \"test\" or \"insecure\" in it, before someone sees this function and thinks that the software will use insecure randomness for private keys (or someone generating a private key thinks they can use this function).",
      "created_at": "2020-09-15T18:19:33Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r488871913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/488871913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/489290831",
      "pull_request_review_id": 489434446,
      "id": 489290831,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5MDgzMQ==",
      "diff_hunk": "@@ -138,4 +138,7 @@ static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_g\n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n+/** Determine if a point (which is assumed to be on the curve) is in the group. */",
      "path": "src/group.h",
      "position": null,
      "original_position": 4,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "3acadb107a998a1da6468744e21c3e293c8cdab6",
      "in_reply_to_id": 487578815,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, looks good! Now that you got a few more comments, I still think the function name can be improved. I don't have a great suggestion but something like  `ge_is_in_correct_subgroup`, `ge_is_in_subgroup`  would already make clear that this function is not about being on the curve or not. Note also the \"is\", I think that's more consistent with other names like `is_infinity` and makes clear that this is a getter.",
      "created_at": "2020-09-16T09:18:43Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r489290831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/489290831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194333",
      "pull_request_review_id": 491785470,
      "id": 491194333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5NDMzMw==",
      "diff_hunk": "@@ -111,4 +112,47 @@ static void secp256k1_rand_flip(unsigned char *b, size_t len) {\n     b[secp256k1_rand_int(len)] ^= (1 << secp256k1_rand_int(8));\n }\n \n+static void secp256k1_rand_init(const char* hexseed) {",
      "path": "src/testrand_impl.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "76ac2bf214cd6a272176e90b98c84d34fe440f18",
      "in_reply_to_id": 488871913,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, but that's not specific to that function. It's in a file called `testrand` - should all functions in it be renamed to have `test` in the name?",
      "created_at": "2020-09-18T21:15:41Z",
      "updated_at": "2020-09-18T21:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r491194333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194478",
      "pull_request_review_id": 491785664,
      "id": 491194478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5NDQ3OA==",
      "diff_hunk": "@@ -327,184 +343,114 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n-\n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-\n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"src/modules/extrakeys/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n-        }\n-    }\n-}\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"src/modules/schnorrsig/tests_exhaustive_impl.h\"\n #endif\n \n-int main(void) {\n+int main(int argc, char** argv) {\n     int i;\n     secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n     secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n+    }\n+    printf(\"test count = %i\\n\", count);",
      "path": "src/tests_exhaustive.c",
      "position": 427,
      "original_position": 425,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "b6f299ee1a958f7bd0a489e0dcc9bf659d41a54d",
      "in_reply_to_id": 487571404,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2020-09-18T21:16:05Z",
      "updated_at": "2020-09-18T21:16:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r491194478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 378,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194622",
      "pull_request_review_id": 491785849,
      "id": 491194622,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5NDYyMg==",
      "diff_hunk": "@@ -327,184 +343,114 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n-\n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-\n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"src/modules/extrakeys/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n-        }\n-    }\n-}\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"src/modules/schnorrsig/tests_exhaustive_impl.h\"\n #endif\n \n-int main(void) {\n+int main(int argc, char** argv) {\n     int i;\n     secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n     secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n+    }\n+    printf(\"test count = %i\\n\", count);\n+\n+    /* find random seed */\n+    secp256k1_rand_init(argc > 2 ? argv[2] : NULL);\n+\n+    /* set up split processing */\n+    if (argc > 4) {\n+        num_cores = strtol(argv[3], NULL, 0);\n+        this_core = strtol(argv[4], NULL, 0);\n+        if (num_cores < 1 || this_core >= num_cores) {\n+            fprintf(stderr, \"Usage: %s [count] [seed] [numcores] [thiscore]\\n\", argv[0]);\n+            return 1;\n+        }\n+        printf(\"running tests for core %lu out of %lu\\n\", (unsigned long)this_core, (unsigned long)num_cores);",
      "path": "src/tests_exhaustive.c",
      "position": null,
      "original_position": 438,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "b6f299ee1a958f7bd0a489e0dcc9bf659d41a54d",
      "in_reply_to_id": 487567793,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed it to `core 255 (out of [0..255])`. Does that seem better?",
      "created_at": "2020-09-18T21:16:29Z",
      "updated_at": "2020-09-18T21:16:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r491194622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194669",
      "pull_request_review_id": 491785913,
      "id": 491194669,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5NDY2OQ==",
      "diff_hunk": "@@ -138,4 +138,7 @@ static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_g\n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n+/** Determine if a point (which is assumed to be on the curve) is in the group. */",
      "path": "src/group.h",
      "position": null,
      "original_position": 4,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "3acadb107a998a1da6468744e21c3e293c8cdab6",
      "in_reply_to_id": 487578815,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2020-09-18T21:16:39Z",
      "updated_at": "2020-09-18T21:16:40Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r491194669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491194669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491207461",
      "pull_request_review_id": 491803482,
      "id": 491207461,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwNzQ2MQ==",
      "diff_hunk": "@@ -327,184 +343,114 @@ void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *grou\n }\n \n #ifdef ENABLE_MODULE_RECOVERY\n-void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    int i, j, k;\n-\n-    /* Loop */\n-    for (i = 1; i < order; i++) {  /* message */\n-        for (j = 1; j < order; j++) {  /* key */\n-            for (k = 1; k < order; k++) {  /* nonce */\n-                const int starting_k = k;\n-                secp256k1_fe r_dot_y_normalized;\n-                secp256k1_ecdsa_recoverable_signature rsig;\n-                secp256k1_ecdsa_signature sig;\n-                secp256k1_scalar sk, msg, r, s, expected_r;\n-                unsigned char sk32[32], msg32[32];\n-                int expected_recid;\n-                int recid;\n-                secp256k1_scalar_set_int(&msg, i);\n-                secp256k1_scalar_set_int(&sk, j);\n-                secp256k1_scalar_get_b32(sk32, &sk);\n-                secp256k1_scalar_get_b32(msg32, &msg);\n-\n-                secp256k1_ecdsa_sign_recoverable(ctx, &rsig, msg32, sk32, secp256k1_nonce_function_smallint, &k);\n-\n-                /* Check directly */\n-                secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, &rsig);\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-                /* In computing the recid, there is an overflow condition that is disabled in\n-                 * scalar_low_impl.h `secp256k1_scalar_set_b32` because almost every r.y value\n-                 * will exceed the group order, and our signing code always holds out for r\n-                 * values that don't overflow, so with a proper overflow check the tests would\n-                 * loop indefinitely. */\n-                r_dot_y_normalized = group[k].y;\n-                secp256k1_fe_normalize(&r_dot_y_normalized);\n-                /* Also the recovery id is flipped depending if we hit the low-s branch */\n-                if ((k * s) % order == (i + r * j) % order) {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 1 : 0;\n-                } else {\n-                    expected_recid = secp256k1_fe_is_odd(&r_dot_y_normalized) ? 0 : 1;\n-                }\n-                CHECK(recid == expected_recid);\n-\n-                /* Convert to a standard sig then check */\n-                secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                secp256k1_ecdsa_signature_load(ctx, &r, &s, &sig);\n-                /* Note that we compute expected_r *after* signing -- this is important\n-                 * because our nonce-computing function function might change k during\n-                 * signing. */\n-                r_from_k(&expected_r, group, k);\n-                CHECK(r == expected_r);\n-                CHECK((k * s) % order == (i + r * j) % order ||\n-                      (k * (EXHAUSTIVE_TEST_ORDER - s)) % order == (i + r * j) % order);\n-\n-                /* Overflow means we've tried every possible nonce */\n-                if (k < starting_k) {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {\n-    /* This is essentially a copy of test_exhaustive_verify, with recovery added */\n-    int s, r, msg, key;\n-    for (s = 1; s < order; s++) {\n-        for (r = 1; r < order; r++) {\n-            for (msg = 1; msg < order; msg++) {\n-                for (key = 1; key < order; key++) {\n-                    secp256k1_ge nonconst_ge;\n-                    secp256k1_ecdsa_recoverable_signature rsig;\n-                    secp256k1_ecdsa_signature sig;\n-                    secp256k1_pubkey pk;\n-                    secp256k1_scalar sk_s, msg_s, r_s, s_s;\n-                    secp256k1_scalar s_times_k_s, msg_plus_r_times_sk_s;\n-                    int recid = 0;\n-                    int k, should_verify;\n-                    unsigned char msg32[32];\n-\n-                    secp256k1_scalar_set_int(&s_s, s);\n-                    secp256k1_scalar_set_int(&r_s, r);\n-                    secp256k1_scalar_set_int(&msg_s, msg);\n-                    secp256k1_scalar_set_int(&sk_s, key);\n-                    secp256k1_scalar_get_b32(msg32, &msg_s);\n-\n-                    /* Verify by hand */\n-                    /* Run through every k value that gives us this r and check that *one* works.\n-                     * Note there could be none, there could be multiple, ECDSA is weird. */\n-                    should_verify = 0;\n-                    for (k = 0; k < order; k++) {\n-                        secp256k1_scalar check_x_s;\n-                        r_from_k(&check_x_s, group, k);\n-                        if (r_s == check_x_s) {\n-                            secp256k1_scalar_set_int(&s_times_k_s, k);\n-                            secp256k1_scalar_mul(&s_times_k_s, &s_times_k_s, &s_s);\n-                            secp256k1_scalar_mul(&msg_plus_r_times_sk_s, &r_s, &sk_s);\n-                            secp256k1_scalar_add(&msg_plus_r_times_sk_s, &msg_plus_r_times_sk_s, &msg_s);\n-                            should_verify |= secp256k1_scalar_eq(&s_times_k_s, &msg_plus_r_times_sk_s);\n-                        }\n-                    }\n-                    /* nb we have a \"high s\" rule */\n-                    should_verify &= !secp256k1_scalar_is_high(&s_s);\n+#include \"src/modules/recovery/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* We would like to try recovering the pubkey and checking that it matches,\n-                     * but pubkey recovery is impossible in the exhaustive tests (the reason\n-                     * being that there are 12 nonzero r values, 12 nonzero points, and no\n-                     * overlap between the sets, so there are no valid signatures). */\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"src/modules/extrakeys/tests_exhaustive_impl.h\"\n+#endif\n \n-                    /* Verify by converting to a standard signature and calling verify */\n-                    secp256k1_ecdsa_recoverable_signature_save(&rsig, &r_s, &s_s, recid);\n-                    secp256k1_ecdsa_recoverable_signature_convert(ctx, &sig, &rsig);\n-                    memcpy(&nonconst_ge, &group[sk_s], sizeof(nonconst_ge));\n-                    secp256k1_pubkey_save(&pk, &nonconst_ge);\n-                    CHECK(should_verify ==\n-                          secp256k1_ecdsa_verify(ctx, &sig, msg32, &pk));\n-                }\n-            }\n-        }\n-    }\n-}\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"src/modules/schnorrsig/tests_exhaustive_impl.h\"\n #endif\n \n-int main(void) {\n+int main(int argc, char** argv) {\n     int i;\n     secp256k1_gej groupj[EXHAUSTIVE_TEST_ORDER];\n     secp256k1_ge group[EXHAUSTIVE_TEST_ORDER];\n+    unsigned char rand32[32];\n+    secp256k1_context *ctx;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* find iteration count */\n+    if (argc > 1) {\n+        count = strtol(argv[1], NULL, 0);\n+    }\n+    printf(\"test count = %i\\n\", count);\n+\n+    /* find random seed */\n+    secp256k1_rand_init(argc > 2 ? argv[2] : NULL);\n+\n+    /* set up split processing */\n+    if (argc > 4) {\n+        num_cores = strtol(argv[3], NULL, 0);\n+        this_core = strtol(argv[4], NULL, 0);\n+        if (num_cores < 1 || this_core >= num_cores) {\n+            fprintf(stderr, \"Usage: %s [count] [seed] [numcores] [thiscore]\\n\", argv[0]);\n+            return 1;\n+        }\n+        printf(\"running tests for core %lu out of %lu\\n\", (unsigned long)this_core, (unsigned long)num_cores);",
      "path": "src/tests_exhaustive.c",
      "position": null,
      "original_position": 438,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "b6f299ee1a958f7bd0a489e0dcc9bf659d41a54d",
      "in_reply_to_id": 487567793,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems fine to me!",
      "created_at": "2020-09-18T21:51:27Z",
      "updated_at": "2020-09-18T21:51:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r491207461",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491207461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491208662",
      "pull_request_review_id": 491804214,
      "id": 491208662,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwODY2Mg==",
      "diff_hunk": "@@ -111,4 +112,47 @@ static void secp256k1_rand_flip(unsigned char *b, size_t len) {\n     b[secp256k1_rand_int(len)] ^= (1 << secp256k1_rand_int(8));\n }\n \n+static void secp256k1_rand_init(const char* hexseed) {",
      "path": "src/testrand_impl.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "76ac2bf214cd6a272176e90b98c84d34fe440f18",
      "in_reply_to_id": 488871913,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That wouldn't be bad.  Mostly I raised this one becuase I thought it was likely to come to someone's attention if they searched the codebase for 'random', and in isolation it looks kind of bad! :)  (and was probably somewhat less of an issue previously when it was in tests.c's main, so it was clear that it wasn't being used anywhere else)",
      "created_at": "2020-09-18T21:53:35Z",
      "updated_at": "2020-09-18T23:06:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r491208662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/491208662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/495410526",
      "pull_request_review_id": 496937348,
      "id": 495410526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMDUyNg==",
      "diff_hunk": "@@ -111,4 +112,47 @@ static void secp256k1_rand_flip(unsigned char *b, size_t len) {\n     b[secp256k1_rand_int(len)] ^= (1 << secp256k1_rand_int(8));\n }\n \n+static void secp256k1_rand_init(const char* hexseed) {",
      "path": "src/testrand_impl.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "8b7dcdd955a4f57174f478e36bdae5b84784fb9c",
      "original_commit_id": "76ac2bf214cd6a272176e90b98c84d34fe440f18",
      "in_reply_to_id": 488871913,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in a separate PR: https://github.com/bitcoin-core/secp256k1/pull/827",
      "created_at": "2020-09-26T03:51:54Z",
      "updated_at": "2020-09-26T03:51:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/808#discussion_r495410526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/495410526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/808"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    }
  ]
}