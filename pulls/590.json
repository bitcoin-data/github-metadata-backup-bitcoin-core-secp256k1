{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590",
    "id": 253430486,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzNDMwNDg2",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/590.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/590.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/590",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/590/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
    "number": 590,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add anti nonce-sidechannel protocol to schnorrsigs [̶a̶l̶t̶e̶r̶n̶a̶t̶i̶v̶e̶]̶ ",
    "user": {
      "login": "jonasnick",
      "id": 2582071,
      "node_id": "MDQ6VXNlcjI1ODIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasnick",
      "html_url": "https://github.com/jonasnick",
      "followers_url": "https://api.github.com/users/jonasnick/followers",
      "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasnick/orgs",
      "repos_url": "https://api.github.com/users/jonasnick/repos",
      "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonasnick/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "~~This is an alternative to #572~~ based on #589 (EDIT: this seems to be generally preferred now). It's a demonstration that the anti nonce-sidechannel protocol can be build just as well on #589 as on #588.",
    "labels": [],
    "created_at": "2019-02-15T13:35:23Z",
    "updated_at": "2022-03-24T14:08:24Z",
    "closed_at": "2022-03-24T14:08:23Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "75c7941b0a01c9cee47caaf09efbd1b6ae2601ea",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "jonasnick:schnorrsig-s2c-only-new-ans",
      "ref": "schnorrsig-s2c-only-new-ans",
      "sha": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 57937974,
        "node_id": "MDEwOlJlcG9zaXRvcnk1NzkzNzk3NA==",
        "name": "secp256k1",
        "full_name": "jonasnick/secp256k1",
        "owner": {
          "login": "jonasnick",
          "id": 2582071,
          "node_id": "MDQ6VXNlcjI1ODIwNzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jonasnick",
          "html_url": "https://github.com/jonasnick",
          "followers_url": "https://api.github.com/users/jonasnick/followers",
          "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
          "organizations_url": "https://api.github.com/users/jonasnick/orgs",
          "repos_url": "https://api.github.com/users/jonasnick/repos",
          "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jonasnick/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jonasnick/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/jonasnick/secp256k1",
        "archive_url": "https://api.github.com/repos/jonasnick/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jonasnick/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jonasnick/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jonasnick/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jonasnick/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jonasnick/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jonasnick/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jonasnick/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jonasnick/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/jonasnick/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/jonasnick/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/jonasnick/secp256k1/events",
        "forks_url": "https://api.github.com/repos/jonasnick/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/jonasnick/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jonasnick/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jonasnick/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jonasnick/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jonasnick/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jonasnick/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jonasnick/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/jonasnick/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/jonasnick/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jonasnick/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jonasnick/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jonasnick/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:jonasnick/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/jonasnick/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/jonasnick/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jonasnick/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/jonasnick/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/jonasnick/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/jonasnick/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/jonasnick/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jonasnick/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/jonasnick/secp256k1/hooks",
        "svn_url": "https://github.com/jonasnick/secp256k1",
        "language": "C",
        "forks_count": 4,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 11430,
        "default_branch": "master",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-24T13:49:16Z",
        "created_at": "2016-05-03T03:14:21Z",
        "updated_at": "2023-03-16T11:44:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "fa3301713549d118e57ebe6551d062903ddd6b63",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 948,
        "stargazers_count": 1768,
        "watchers_count": 1768,
        "size": 10062,
        "default_branch": "master",
        "open_issues_count": 142,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-12T16:38:48Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-06-12T17:38:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 2445,
    "deletions": 7,
    "changed_files": 16,
    "commits": 8,
    "review_comments": 12,
    "comments": 3
  },
  "events": [
    {
      "event": "reviewed",
      "id": 204276497,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA0Mjc2NDk3",
      "url": null,
      "actor": null,
      "commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#pullrequestreview-204276497",
      "submitted_at": "2019-02-15T14:55:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
    },
    {
      "event": "reviewed",
      "id": 248072321,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ4MDcyMzIx",
      "url": null,
      "actor": null,
      "commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#pullrequestreview-248072321",
      "submitted_at": "2019-06-11T09:59:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
    },
    {
      "event": "reviewed",
      "id": 248112065,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ4MTEyMDY1",
      "url": null,
      "actor": null,
      "commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#pullrequestreview-248112065",
      "submitted_at": "2019-06-11T11:25:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
    },
    {
      "event": "reviewed",
      "id": 250225812,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMjI1ODEy",
      "url": null,
      "actor": null,
      "commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#pullrequestreview-250225812",
      "submitted_at": "2019-06-16T10:41:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
    },
    {
      "event": "renamed",
      "id": 2457502135,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjQ1NzUwMjEzNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2457502135",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-03T13:03:27Z",
      "rename": {
        "from": "Add anti nonce-sidechannel protocol to schnorrsigs [alternative]",
        "to": "Add anti nonce-sidechannel protocol to schnorrsigs [̶a̶l̶t̶e̶r̶n̶a̶t̶i̶v̶e̶]̶ "
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MmY0MGUxZWMyZWY4OWFhYzUwYjI5ZWViYWNlNTJjYmY3YWYyOTRlYw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2f40e1ec2ef89aac50b29eebace52cbf7af294ec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2f40e1ec2ef89aac50b29eebace52cbf7af294ec",
      "tree": {
        "sha": "d8996c0e986040267ac75236377485dc78958654",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d8996c0e986040267ac75236377485dc78958654"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e541a90ef6461007d9c6a74b9f9a7fb8aa34aaa8",
          "sha": "e541a90ef6461007d9c6a74b9f9a7fb8aa34aaa8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e541a90ef6461007d9c6a74b9f9a7fb8aa34aaa8"
        }
      ],
      "message": "add chacha20 function",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-04T22:09:43Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2018-04-03T22:06:07Z"
      },
      "sha": "2f40e1ec2ef89aac50b29eebace52cbf7af294ec"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ODI2NDU3MjljYzcxN2FhZjIyNGQxMzBlOGJjYzI1ODY1ZDYyMmU4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/82645729cc717aaf224d130e8bcc25865d622e87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/82645729cc717aaf224d130e8bcc25865d622e87",
      "tree": {
        "sha": "a529aa422bc81b4573451ad1cea9ab966f6f39ac",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a529aa422bc81b4573451ad1cea9ab966f6f39ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2f40e1ec2ef89aac50b29eebace52cbf7af294ec",
          "sha": "2f40e1ec2ef89aac50b29eebace52cbf7af294ec",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2f40e1ec2ef89aac50b29eebace52cbf7af294ec"
        }
      ],
      "message": "Add schnorrsig module which implements BIP-schnorr [0] compatible signing, verification and batch verification.\n\n[0] https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-04T22:09:43Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2018-05-09T15:37:35Z"
      },
      "sha": "82645729cc717aaf224d130e8bcc25865d622e87"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MGI0YmVmNDUyN2UyYjQ2OTRhODMzMDZmNDk1Y2E2MWQ1NzRkMmMxZg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0b4bef4527e2b4694a83306f495ca61d574d2c1f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0b4bef4527e2b4694a83306f495ca61d574d2c1f",
      "tree": {
        "sha": "073fed1a472202457de8ef09b0cea8e60d92cd51",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/073fed1a472202457de8ef09b0cea8e60d92cd51"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/82645729cc717aaf224d130e8bcc25865d622e87",
          "sha": "82645729cc717aaf224d130e8bcc25865d622e87",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/82645729cc717aaf224d130e8bcc25865d622e87"
        }
      ],
      "message": "Add ec_commitments which are essentially the pay-to-contract-style tweaks of public keys.\nThe functionality is not exposed.",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-04T22:09:43Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-11-01T10:31:24Z"
      },
      "sha": "0b4bef4527e2b4694a83306f495ca61d574d2c1f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ODU0YzFjNDk1ZmU2Y2Y0ZTE3ZjcxZDE0ODMyOTA5NjU5Y2EyZDkyMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/854c1c495fe6cf4e17f71d14832909659ca2d922",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/854c1c495fe6cf4e17f71d14832909659ca2d922",
      "tree": {
        "sha": "7e7bac2c90bd28c566ae07c1670c4e540b82b7b8",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7e7bac2c90bd28c566ae07c1670c4e540b82b7b8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0b4bef4527e2b4694a83306f495ca61d574d2c1f",
          "sha": "0b4bef4527e2b4694a83306f495ca61d574d2c1f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0b4bef4527e2b4694a83306f495ca61d574d2c1f"
        }
      ],
      "message": "Add and expose sign-to-contract opening with parse and serialize functions",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-04T22:09:43Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-02-13T14:15:23Z"
      },
      "sha": "854c1c495fe6cf4e17f71d14832909659ca2d922"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OTAzN2JjZjVlODMyMWM5ZTYzOGY5MTBiNjgwNzE1YzYxYWRkN2RiOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9037bcf5e8321c9e638f910b680715c61add7db9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9037bcf5e8321c9e638f910b680715c61add7db9",
      "tree": {
        "sha": "d49f72009ed016606646d07079800cdd7dff06c6",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d49f72009ed016606646d07079800cdd7dff06c6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/854c1c495fe6cf4e17f71d14832909659ca2d922",
          "sha": "854c1c495fe6cf4e17f71d14832909659ca2d922",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/854c1c495fe6cf4e17f71d14832909659ca2d922"
        }
      ],
      "message": "Allow creating and verifying Schnorr sign-to-contract commitments",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-04T22:09:43Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-04T22:04:00Z"
      },
      "sha": "9037bcf5e8321c9e638f910b680715c61add7db9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZjhmOTMzN2E0OTFiMWUyNWNiOTdlMzI2N2M0MzlhNWQ0MGFhMDZjYQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f8f9337a491b1e25cb97e3267c439a5d40aa06ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f8f9337a491b1e25cb97e3267c439a5d40aa06ca",
      "tree": {
        "sha": "df535831d91cf4dac35612302175b66292def250",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/df535831d91cf4dac35612302175b66292def250"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9037bcf5e8321c9e638f910b680715c61add7db9",
          "sha": "9037bcf5e8321c9e638f910b680715c61add7db9",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9037bcf5e8321c9e638f910b680715c61add7db9"
        }
      ],
      "message": "Add anti nonce sidechannel protocol for schnorrsigs",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-04T22:25:29Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-01-29T13:58:27Z"
      },
      "sha": "f8f9337a491b1e25cb97e3267c439a5d40aa06ca"
    },
    {
      "event": "commented",
      "id": 508586340,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODU4NjM0MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/508586340",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-04T22:40:50Z",
      "updated_at": "2019-07-04T22:40:50Z",
      "author_association": "MEMBER",
      "body": "This thing needs a better name. Covert channel is a much better term for this than side channel. If no one comes up with something better I'll go on with `anti_covert_channel`.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#issuecomment-508586340",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/590"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZWQ0YWRkN2VjMjI1NWY2ZDRiNzA5OGExNTk3ZmU3Y2RmYjk4ZmE2NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
      "tree": {
        "sha": "4560aee75fd70c49f480b3e8fa3285ddf7704b76",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4560aee75fd70c49f480b3e8fa3285ddf7704b76"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f8f9337a491b1e25cb97e3267c439a5d40aa06ca",
          "sha": "f8f9337a491b1e25cb97e3267c439a5d40aa06ca",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f8f9337a491b1e25cb97e3267c439a5d40aa06ca"
        }
      ],
      "message": "f add rationale to protocol doc",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-05T20:46:36Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-05T20:46:36Z"
      },
      "sha": "ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463528109,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzUyODEwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2463528109",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T20:47:39Z"
    },
    {
      "event": "commented",
      "id": 508859321,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg1OTMyMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/508859321",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T20:48:12Z",
      "updated_at": "2019-07-05T20:48:12Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#issuecomment-508859321",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/590"
    },
    {
      "event": "reviewed",
      "id": 263755081,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYzNzU1MDgx",
      "url": null,
      "actor": null,
      "commit_id": "ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#pullrequestreview-263755081",
      "submitted_at": "2019-07-18T15:57:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
    },
    {
      "event": "reviewed",
      "id": 267488399,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY3NDg4Mzk5",
      "url": null,
      "actor": null,
      "commit_id": "ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#pullrequestreview-267488399",
      "submitted_at": "2019-07-28T03:15:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YmRhZDE0MDJmMWQ3YzNlZmU3NzJmZGQyZWY3MjZkZTRlZTJlNTg3Yw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "tree": {
        "sha": "da3802d81cc38657453732f078206e288232fe12",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/da3802d81cc38657453732f078206e288232fe12"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
          "sha": "ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64"
        }
      ],
      "message": "f simplify setting a gej",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-31T08:56:06Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-31T08:56:06Z"
      },
      "sha": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c"
    },
    {
      "event": "referenced",
      "id": 4974038470,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ5NzQwMzg0NzA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4974038470",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0440945fb5ce69d335fed32827b5166e84b02e05",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/0440945fb5ce69d335fed32827b5166e84b02e05",
      "created_at": "2021-07-03T09:45:40Z"
    },
    {
      "event": "commented",
      "id": 1077668520,
      "node_id": "IC_kwDOAP4Jqs5AO-qo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1077668520",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-24T14:08:23Z",
      "updated_at": "2022-03-24T14:08:23Z",
      "author_association": "MEMBER",
      "body": "Closing this PR since it's based on a closed sign-to-contract PR. Another attempt at adding an anti-nonce-sidechannel should have a close look at the same protocol for ECDSA in secp256k1-zkp which was inspired by this PR (https://github.com/ElementsProject/secp256k1-zkp/blob/master/include/secp256k1_ecdsa_s2c.h).",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#issuecomment-1077668520",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/590"
    },
    {
      "event": "closed",
      "id": 6299810690,
      "node_id": "CE_lADOAP4Jqs4Ye-MXzwAAAAF3f3uC",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6299810690",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-24T14:08:23Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/257264099",
      "pull_request_review_id": 204276497,
      "id": 257264099,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzI2NDA5OQ==",
      "diff_hunk": "@@ -56,6 +56,85 @@ SECP256K1_API int secp256k1_schnorrsig_parse(\n     const unsigned char *in64\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Anti Nonce Sidechannel Protocol\n+ *\n+ *  The next functions can be used to prevent a signing device from exfiltrating the secret signing\n+ *  keys through biased signature nonces. The general idea is that a host provides additional\n+ *  randomness to the signing device client and the client commits to the randomness in the nonce\n+ *  using sign-to-contract.\n+ *  In order to make the randomness unpredictable, the host and client must engage in a\n+ *  commit-reveal protocol as follows:\n+ *  1. The host draws the randomness, commits to it with the `anti_nonce_sidechan_host_commit`\n+ *     function and sends the commitment to the client.\n+ *  2. The client commits to its sign-to-contract original nonce (which is the nonce without the\n+ *     sign-to-contract tweak) using the hosts commitment by calling the\n+ *     `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` function. The client sends the\n+ *     rusulting commitment to the host\n+ *  3. The host replies with the randomness generated in step 1.\n+ *  4. The client signs with `schnorrsig_sign` using the host provided randomness as `s2c_data` and\n+ *     sends the signature and opening to the host.\n+ *  5. The host checks that the signature contains an sign-to-contract commitment to the randomness\n+ *     by calling `secp256k1_schnorrsig_anti_nonce_sidechan_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ */\n+\n+/** Create a randomness commitment on the host as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)",
      "path": "include/secp256k1_schnorrsig.h",
      "position": 103,
      "original_position": 32,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe it's even better to make this function responsible for calling `secp256k1_rand256` to avoid that the user screws up when producing randomness. \r\n\r\n(But then the user can't use his fancy hardware RNG... If we want to support that, then maybe there could also a callback to a randomness function, and if it's NULL, then just call `lsecp256k1_rand256`. But in general, I don't like the idea of the user providing randomness, unless really necessary.)",
      "created_at": "2019-02-15T14:54:37Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r257264099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/257264099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292374598",
      "pull_request_review_id": 248072321,
      "id": 292374598,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjM3NDU5OA==",
      "diff_hunk": "@@ -56,6 +56,85 @@ SECP256K1_API int secp256k1_schnorrsig_parse(\n     const unsigned char *in64\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Anti Nonce Sidechannel Protocol\n+ *\n+ *  The next functions can be used to prevent a signing device from exfiltrating the secret signing\n+ *  keys through biased signature nonces. The general idea is that a host provides additional\n+ *  randomness to the signing device client and the client commits to the randomness in the nonce\n+ *  using sign-to-contract.\n+ *  In order to make the randomness unpredictable, the host and client must engage in a\n+ *  commit-reveal protocol as follows:\n+ *  1. The host draws the randomness, commits to it with the `anti_nonce_sidechan_host_commit`\n+ *     function and sends the commitment to the client.\n+ *  2. The client commits to its sign-to-contract original nonce (which is the nonce without the\n+ *     sign-to-contract tweak) using the hosts commitment by calling the\n+ *     `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` function. The client sends the\n+ *     rusulting commitment to the host",
      "path": "include/secp256k1_schnorrsig.h",
      "position": null,
      "original_position": 17,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "rusulting -> resulting :)",
      "created_at": "2019-06-11T09:59:47Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r292374598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292374598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292405880",
      "pull_request_review_id": 248112065,
      "id": 292405880,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjQwNTg4MA==",
      "diff_hunk": "@@ -56,6 +56,85 @@ SECP256K1_API int secp256k1_schnorrsig_parse(\n     const unsigned char *in64\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Anti Nonce Sidechannel Protocol\n+ *\n+ *  The next functions can be used to prevent a signing device from exfiltrating the secret signing\n+ *  keys through biased signature nonces. The general idea is that a host provides additional\n+ *  randomness to the signing device client and the client commits to the randomness in the nonce\n+ *  using sign-to-contract.\n+ *  In order to make the randomness unpredictable, the host and client must engage in a\n+ *  commit-reveal protocol as follows:\n+ *  1. The host draws the randomness, commits to it with the `anti_nonce_sidechan_host_commit`\n+ *     function and sends the commitment to the client.\n+ *  2. The client commits to its sign-to-contract original nonce (which is the nonce without the\n+ *     sign-to-contract tweak) using the hosts commitment by calling the\n+ *     `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` function. The client sends the\n+ *     rusulting commitment to the host\n+ *  3. The host replies with the randomness generated in step 1.\n+ *  4. The client signs with `schnorrsig_sign` using the host provided randomness as `s2c_data` and\n+ *     sends the signature and opening to the host.\n+ *  5. The host checks that the signature contains an sign-to-contract commitment to the randomness\n+ *     by calling `secp256k1_schnorrsig_anti_nonce_sidechan_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ */\n+\n+/** Create a randomness commitment on the host as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(\n+    secp256k1_context *ctx,\n+    unsigned char *rand_commitment32,\n+    const unsigned char *rand32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Compute commitment on the client as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. This is the public nonce before doing the\n+ *                       sign-to-contract commitment to the hosts randomness (cannot\n+ *                       be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(",
      "path": "include/secp256k1_schnorrsig.h",
      "position": 123,
      "original_position": 52,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To keep the api / interface smaller, the client could also call the sign function and get the commitment from the signature. Would there be any security downside in that (except for code readability?).",
      "created_at": "2019-06-11T11:25:47Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r292405880",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292405880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292654505",
      "pull_request_review_id": 248431188,
      "id": 292654505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY1NDUwNQ==",
      "diff_hunk": "@@ -56,6 +56,85 @@ SECP256K1_API int secp256k1_schnorrsig_parse(\n     const unsigned char *in64\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Anti Nonce Sidechannel Protocol\n+ *\n+ *  The next functions can be used to prevent a signing device from exfiltrating the secret signing\n+ *  keys through biased signature nonces. The general idea is that a host provides additional\n+ *  randomness to the signing device client and the client commits to the randomness in the nonce\n+ *  using sign-to-contract.\n+ *  In order to make the randomness unpredictable, the host and client must engage in a\n+ *  commit-reveal protocol as follows:\n+ *  1. The host draws the randomness, commits to it with the `anti_nonce_sidechan_host_commit`\n+ *     function and sends the commitment to the client.\n+ *  2. The client commits to its sign-to-contract original nonce (which is the nonce without the\n+ *     sign-to-contract tweak) using the hosts commitment by calling the\n+ *     `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` function. The client sends the\n+ *     rusulting commitment to the host\n+ *  3. The host replies with the randomness generated in step 1.\n+ *  4. The client signs with `schnorrsig_sign` using the host provided randomness as `s2c_data` and\n+ *     sends the signature and opening to the host.\n+ *  5. The host checks that the signature contains an sign-to-contract commitment to the randomness\n+ *     by calling `secp256k1_schnorrsig_anti_nonce_sidechan_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ */\n+\n+/** Create a randomness commitment on the host as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(\n+    secp256k1_context *ctx,\n+    unsigned char *rand_commitment32,\n+    const unsigned char *rand32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Compute commitment on the client as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. This is the public nonce before doing the\n+ *                       sign-to-contract commitment to the hosts randomness (cannot\n+ *                       be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(",
      "path": "include/secp256k1_schnorrsig.h",
      "position": 123,
      "original_position": 52,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": 292405880,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That doesn't seem to work if I understand you correctly. The client needs the hosts randomness to produce the signature which it doesn't get until it sends the commitment.",
      "created_at": "2019-06-11T20:51:34Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r292654505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292654505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292663096",
      "pull_request_review_id": 248442292,
      "id": 292663096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY2MzA5Ng==",
      "diff_hunk": "@@ -56,6 +56,85 @@ SECP256K1_API int secp256k1_schnorrsig_parse(\n     const unsigned char *in64\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Anti Nonce Sidechannel Protocol\n+ *\n+ *  The next functions can be used to prevent a signing device from exfiltrating the secret signing\n+ *  keys through biased signature nonces. The general idea is that a host provides additional\n+ *  randomness to the signing device client and the client commits to the randomness in the nonce\n+ *  using sign-to-contract.\n+ *  In order to make the randomness unpredictable, the host and client must engage in a\n+ *  commit-reveal protocol as follows:\n+ *  1. The host draws the randomness, commits to it with the `anti_nonce_sidechan_host_commit`\n+ *     function and sends the commitment to the client.\n+ *  2. The client commits to its sign-to-contract original nonce (which is the nonce without the\n+ *     sign-to-contract tweak) using the hosts commitment by calling the\n+ *     `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` function. The client sends the\n+ *     rusulting commitment to the host\n+ *  3. The host replies with the randomness generated in step 1.\n+ *  4. The client signs with `schnorrsig_sign` using the host provided randomness as `s2c_data` and\n+ *     sends the signature and opening to the host.\n+ *  5. The host checks that the signature contains an sign-to-contract commitment to the randomness\n+ *     by calling `secp256k1_schnorrsig_anti_nonce_sidechan_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ */\n+\n+/** Create a randomness commitment on the host as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(\n+    secp256k1_context *ctx,\n+    unsigned char *rand_commitment32,\n+    const unsigned char *rand32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Compute commitment on the client as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. This is the public nonce before doing the\n+ *                       sign-to-contract commitment to the hosts randomness (cannot\n+ *                       be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(",
      "path": "include/secp256k1_schnorrsig.h",
      "position": 123,
      "original_position": 52,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": 292405880,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I meant a first of two calls to the signing function, with the first one being a plain call with no host randomness, just to extract the client commitment (`R = k*G` like `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` computes, but, `R` can also be reconstructed from the sig).\r\n",
      "created_at": "2019-06-11T21:15:29Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r292663096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292663096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292666855",
      "pull_request_review_id": 248446994,
      "id": 292666855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY2Njg1NQ==",
      "diff_hunk": "@@ -56,6 +56,85 @@ SECP256K1_API int secp256k1_schnorrsig_parse(\n     const unsigned char *in64\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Anti Nonce Sidechannel Protocol\n+ *\n+ *  The next functions can be used to prevent a signing device from exfiltrating the secret signing\n+ *  keys through biased signature nonces. The general idea is that a host provides additional\n+ *  randomness to the signing device client and the client commits to the randomness in the nonce\n+ *  using sign-to-contract.\n+ *  In order to make the randomness unpredictable, the host and client must engage in a\n+ *  commit-reveal protocol as follows:\n+ *  1. The host draws the randomness, commits to it with the `anti_nonce_sidechan_host_commit`\n+ *     function and sends the commitment to the client.\n+ *  2. The client commits to its sign-to-contract original nonce (which is the nonce without the\n+ *     sign-to-contract tweak) using the hosts commitment by calling the\n+ *     `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` function. The client sends the\n+ *     rusulting commitment to the host\n+ *  3. The host replies with the randomness generated in step 1.\n+ *  4. The client signs with `schnorrsig_sign` using the host provided randomness as `s2c_data` and\n+ *     sends the signature and opening to the host.\n+ *  5. The host checks that the signature contains an sign-to-contract commitment to the randomness\n+ *     by calling `secp256k1_schnorrsig_anti_nonce_sidechan_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ */\n+\n+/** Create a randomness commitment on the host as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(\n+    secp256k1_context *ctx,\n+    unsigned char *rand_commitment32,\n+    const unsigned char *rand32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Compute commitment on the client as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. This is the public nonce before doing the\n+ *                       sign-to-contract commitment to the hosts randomness (cannot\n+ *                       be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(",
      "path": "include/secp256k1_schnorrsig.h",
      "position": 123,
      "original_position": 52,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": 292405880,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you call `sign` twice your wasting a lot of time producing a signature that's unnecessary?",
      "created_at": "2019-06-11T21:26:27Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r292666855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292666855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292670200",
      "pull_request_review_id": 248451144,
      "id": 292670200,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY3MDIwMA==",
      "diff_hunk": "@@ -56,6 +56,85 @@ SECP256K1_API int secp256k1_schnorrsig_parse(\n     const unsigned char *in64\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Anti Nonce Sidechannel Protocol\n+ *\n+ *  The next functions can be used to prevent a signing device from exfiltrating the secret signing\n+ *  keys through biased signature nonces. The general idea is that a host provides additional\n+ *  randomness to the signing device client and the client commits to the randomness in the nonce\n+ *  using sign-to-contract.\n+ *  In order to make the randomness unpredictable, the host and client must engage in a\n+ *  commit-reveal protocol as follows:\n+ *  1. The host draws the randomness, commits to it with the `anti_nonce_sidechan_host_commit`\n+ *     function and sends the commitment to the client.\n+ *  2. The client commits to its sign-to-contract original nonce (which is the nonce without the\n+ *     sign-to-contract tweak) using the hosts commitment by calling the\n+ *     `secp256k1_schnorrsig_anti_nonce_sidechan_client_commit` function. The client sends the\n+ *     rusulting commitment to the host\n+ *  3. The host replies with the randomness generated in step 1.\n+ *  4. The client signs with `schnorrsig_sign` using the host provided randomness as `s2c_data` and\n+ *     sends the signature and opening to the host.\n+ *  5. The host checks that the signature contains an sign-to-contract commitment to the randomness\n+ *     by calling `secp256k1_schnorrsig_anti_nonce_sidechan_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ */\n+\n+/** Create a randomness commitment on the host as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(\n+    secp256k1_context *ctx,\n+    unsigned char *rand_commitment32,\n+    const unsigned char *rand32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Compute commitment on the client as part of the Anti Nonce Sidechannel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. This is the public nonce before doing the\n+ *                       sign-to-contract commitment to the hosts randomness (cannot\n+ *                       be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(",
      "path": "include/secp256k1_schnorrsig.h",
      "position": 123,
      "original_position": 52,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": 292405880,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":+1: I see. ",
      "created_at": "2019-06-11T21:36:13Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r292670200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292670200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294077822",
      "pull_request_review_id": 250225812,
      "id": 294077822,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA3NzgyMg==",
      "diff_hunk": "@@ -0,0 +1,466 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_verify_s2c_commit(const secp256k1_context* ctx, const secp256k1_schnorrsig *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_fe rx;\n+    secp256k1_ge R;\n+    secp256k1_pubkey pubnonce;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_fe_set_b32(&rx, &sig->data[0])) {\n+        return 0;\n+    }\n+    if (!secp256k1_ge_set_xquad(&R, &rx)) {\n+        return 0;\n+    }\n+    if (opening->nonce_is_negated) {\n+        secp256k1_ge_neg(&R, &R);\n+    }\n+    secp256k1_pubkey_save(&pubnonce, &R);\n+    return secp256k1_ec_commit_verify(ctx, &pubnonce, &opening->original_pubnonce, data32, 32);\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(secp256k1_context *ctx, unsigned char *rand_commitment32, const unsigned char *rand32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+    ARG_CHECK(rand32 != NULL);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rand32, 32);\n+    secp256k1_sha256_finalize(&sha, rand_commitment32);\n+\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(secp256k1_context *ctx, secp256k1_pubkey *client_commit, const unsigned char *msg32, const unsigned char *seckey32, unsigned char *rand_commitment32) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+    if (!secp256k1_nonce_function_bipschnorr(nonce32, msg32, seckey32, NULL, rand_commitment32, 0)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(&k, nonce32, NULL);",
      "path": "src/modules/schnorrsig/main_impl.h",
      "position": 87,
      "original_position": 87,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there an overflow check missing here?\r\n\r\n",
      "created_at": "2019-06-16T10:41:12Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r294077822",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294077822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294091559",
      "pull_request_review_id": 250239837,
      "id": 294091559,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA5MTU1OQ==",
      "diff_hunk": "@@ -0,0 +1,466 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_verify_s2c_commit(const secp256k1_context* ctx, const secp256k1_schnorrsig *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_fe rx;\n+    secp256k1_ge R;\n+    secp256k1_pubkey pubnonce;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_fe_set_b32(&rx, &sig->data[0])) {\n+        return 0;\n+    }\n+    if (!secp256k1_ge_set_xquad(&R, &rx)) {\n+        return 0;\n+    }\n+    if (opening->nonce_is_negated) {\n+        secp256k1_ge_neg(&R, &R);\n+    }\n+    secp256k1_pubkey_save(&pubnonce, &R);\n+    return secp256k1_ec_commit_verify(ctx, &pubnonce, &opening->original_pubnonce, data32, 32);\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(secp256k1_context *ctx, unsigned char *rand_commitment32, const unsigned char *rand32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+    ARG_CHECK(rand32 != NULL);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rand32, 32);\n+    secp256k1_sha256_finalize(&sha, rand_commitment32);\n+\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(secp256k1_context *ctx, secp256k1_pubkey *client_commit, const unsigned char *msg32, const unsigned char *seckey32, unsigned char *rand_commitment32) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+    if (!secp256k1_nonce_function_bipschnorr(nonce32, msg32, seckey32, NULL, rand_commitment32, 0)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(&k, nonce32, NULL);",
      "path": "src/modules/schnorrsig/main_impl.h",
      "position": 87,
      "original_position": 87,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": 294077822,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, the BIP draft intentionally does not check for overflow here. (It happens with negligible probability.) ",
      "created_at": "2019-06-16T16:30:23Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r294091559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294091559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294091737",
      "pull_request_review_id": 250240002,
      "id": 294091737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA5MTczNw==",
      "diff_hunk": "@@ -0,0 +1,466 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_verify_s2c_commit(const secp256k1_context* ctx, const secp256k1_schnorrsig *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_fe rx;\n+    secp256k1_ge R;\n+    secp256k1_pubkey pubnonce;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_fe_set_b32(&rx, &sig->data[0])) {\n+        return 0;\n+    }\n+    if (!secp256k1_ge_set_xquad(&R, &rx)) {\n+        return 0;\n+    }\n+    if (opening->nonce_is_negated) {\n+        secp256k1_ge_neg(&R, &R);\n+    }\n+    secp256k1_pubkey_save(&pubnonce, &R);\n+    return secp256k1_ec_commit_verify(ctx, &pubnonce, &opening->original_pubnonce, data32, 32);\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(secp256k1_context *ctx, unsigned char *rand_commitment32, const unsigned char *rand32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+    ARG_CHECK(rand32 != NULL);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rand32, 32);\n+    secp256k1_sha256_finalize(&sha, rand_commitment32);\n+\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(secp256k1_context *ctx, secp256k1_pubkey *client_commit, const unsigned char *msg32, const unsigned char *seckey32, unsigned char *rand_commitment32) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+    if (!secp256k1_nonce_function_bipschnorr(nonce32, msg32, seckey32, NULL, rand_commitment32, 0)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(&k, nonce32, NULL);",
      "path": "src/modules/schnorrsig/main_impl.h",
      "position": 87,
      "original_position": 87,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ae5fb7f8f143244de07e17fee6671e0dd68c81a6",
      "in_reply_to_id": 294077822,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":+1: ",
      "created_at": "2019-06-16T16:35:21Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r294091737",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294091737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/304995453",
      "pull_request_review_id": 263755081,
      "id": 304995453,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDk5NTQ1Mw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_verify_s2c_commit(const secp256k1_context* ctx, const secp256k1_schnorrsig *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_fe rx;\n+    secp256k1_ge R;\n+    secp256k1_pubkey pubnonce;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_fe_set_b32(&rx, &sig->data[0])) {\n+        return 0;\n+    }\n+    if (!secp256k1_ge_set_xquad(&R, &rx)) {\n+        return 0;\n+    }\n+    if (opening->nonce_is_negated) {\n+        secp256k1_ge_neg(&R, &R);\n+    }\n+    secp256k1_pubkey_save(&pubnonce, &R);\n+    return secp256k1_ec_commit_verify(ctx, &pubnonce, &opening->original_pubnonce, data32, 32);\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_host_commit(secp256k1_context *ctx, unsigned char *rand_commitment32, const unsigned char *rand32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+    ARG_CHECK(rand32 != NULL);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rand32, 32);\n+    secp256k1_sha256_finalize(&sha, rand_commitment32);\n+\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_anti_nonce_sidechan_client_commit(secp256k1_context *ctx, secp256k1_pubkey *client_commit, const unsigned char *msg32, const unsigned char *seckey32, unsigned char *rand_commitment32) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+    if (!secp256k1_nonce_function_bipschnorr(nonce32, msg32, seckey32, NULL, rand_commitment32, 0)) {",
      "path": "src/modules/schnorrsig/main_impl.h",
      "position": 83,
      "original_position": 83,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~since `secp256k1_schnorrsig_sign` accepts `ndata` and `s2c_data32` and combines them as input to the nonce function, would it make sense that this client_commit function also gets an `ndata` param which is mixed in in the same way?~\r\n\r\npls disregard ;) of course this is impossible here, as only the caller can do this with the preimage :see_no_evil: ",
      "created_at": "2019-07-18T15:57:10Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r304995453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/304995453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307983717",
      "pull_request_review_id": 267488399,
      "id": 307983717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk4MzcxNw==",
      "diff_hunk": "@@ -681,10 +705,130 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);",
      "path": "src/secp256k1.c",
      "position": 118,
      "original_position": 118,
      "commit_id": "bdad1402f1d7c3efe772fdd2ef726de4ee2e587c",
      "original_commit_id": "ed4add7ec2255f6d4b7098a1597fe7cdfb98fa64",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can use `secp256k1_gej_set_ge()` instead of setting to infinity and adding ",
      "created_at": "2019-07-28T03:15:32Z",
      "updated_at": "2019-07-31T08:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/590#discussion_r307983717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307983717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 784,
      "original_line": 784,
      "side": "RIGHT"
    }
  ]
}