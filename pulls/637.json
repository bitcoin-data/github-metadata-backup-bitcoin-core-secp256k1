{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637",
    "id": 287045803,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg3MDQ1ODAz",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/637.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/637.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/18cb43550307ea1846c873531351ef05a8f28e09",
    "number": 637,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "ecdsa sign-to-contract module, with anti nonce covert chan util functions",
    "user": {
      "login": "benma",
      "id": 1225267,
      "node_id": "MDQ6VXNlcjEyMjUyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benma",
      "html_url": "https://github.com/benma",
      "followers_url": "https://api.github.com/users/benma/followers",
      "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
      "organizations_url": "https://api.github.com/users/benma/orgs",
      "repos_url": "https://api.github.com/users/benma/repos",
      "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/benma/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is based on the description of the fix by Stepan: https://medium.com/cryptoadvance/hardware-wallets-can-be-hacked-but-this-is-fine-a6156bbd199\r\n\r\n\r\nThe protocol wording and functions are copied/adapted from Jonas\r\nNick's PRs which do the same for BIP-Schnorr:\r\n\r\nhttps://github.com/bitcoin-core/secp256k1/pull/590\r\n\r\nhttps://github.com/bitcoin-core/secp256k1/pull/590/commits/ae5fb7f8f143244de07e17fee6671e0dd68c81a6#diff-b19c5ee427283d4d82bc5beb4e2f4777R59\r\n\r\nhttps://github.com/bitcoin-core/secp256k1/pull/590/commits/ae5fb7f8f143244de07e17fee6671e0dd68c81a6#diff-313ca26f0048bc16a608709915d0111eR70\r\n\r\n1.\r\nAdd secp256k1_ecdsa_anti_nonce_sidechan_client_commit to return the\r\ncurve point committing to the signing client nonce.\r\n\r\nThis is a convenience function and can technically be emulated by\r\ncalling secp256k1_ecdsa_sign() and reconstructing the curve point from\r\nthe signature r/s values.\r\n\r\n2.\r\n\r\nsecp256k1_ecdsa_sign_nonce_tweak_add, which is the same as\r\nsecp256k1_ecdsa_sign_nonce, but with an additional optional tweak parameter to\r\nadd to the nonce.\r\n\r\nThe nicer way to do this is to redefine `secp256k1_nonce_function` to\r\nhave a tweak param, but this would break API compatiblity. The way it\r\nis implemented is fully backwards compatible.",
    "labels": [],
    "created_at": "2019-06-11T11:33:00Z",
    "updated_at": "2019-12-20T14:09:18Z",
    "closed_at": "2019-12-20T14:09:17Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "cffa7585f204dc41fb8284591a87687ad16fd942",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "benma:ecdsa_nonce_sidechan",
      "ref": "ecdsa_nonce_sidechan",
      "sha": "18cb43550307ea1846c873531351ef05a8f28e09",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 191352053,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTEzNTIwNTM=",
        "name": "secp256k1",
        "full_name": "benma/secp256k1",
        "owner": {
          "login": "benma",
          "id": 1225267,
          "node_id": "MDQ6VXNlcjEyMjUyNjc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/benma",
          "html_url": "https://github.com/benma",
          "followers_url": "https://api.github.com/users/benma/followers",
          "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
          "organizations_url": "https://api.github.com/users/benma/orgs",
          "repos_url": "https://api.github.com/users/benma/repos",
          "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/benma/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/benma/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/benma/secp256k1",
        "archive_url": "https://api.github.com/repos/benma/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/benma/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/benma/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/benma/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/benma/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/benma/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/benma/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/benma/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/benma/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/benma/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/benma/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/benma/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/benma/secp256k1/events",
        "forks_url": "https://api.github.com/repos/benma/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/benma/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/benma/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/benma/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/benma/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/benma/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/benma/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/benma/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/benma/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/benma/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/benma/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/benma/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/benma/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/benma/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/benma/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/benma/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:benma/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/benma/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/benma/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/benma/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/benma/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/benma/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/benma/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/benma/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/benma/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/benma/secp256k1/hooks",
        "svn_url": "https://github.com/benma/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 10459,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-29T22:34:20Z",
        "created_at": "2019-06-11T10:50:34Z",
        "updated_at": "2019-06-11T10:50:37Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "96cd94e385f64c1936abf0d1e303d12d0f5da980",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1127,
    "deletions": 23,
    "changed_files": 10,
    "commits": 4,
    "review_comments": 38,
    "comments": 8
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 2403813536,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQwMzgxMzUzNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2403813536",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-11T11:34:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2403887836,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQwMzg4NzgzNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2403887836",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-11T12:02:52Z"
    },
    {
      "event": "commented",
      "id": 500811236,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDgxMTIzNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/500811236",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-11T12:04:02Z",
      "updated_at": "2019-06-11T12:04:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "cc @jonasnick \r\n\r\nIs this the right direction? If so I can add the host functions and some unit tests.",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-500811236",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "mentioned",
      "id": 2403890884,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQwMzg5MDg4NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2403890884",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-11T12:04:02Z"
    },
    {
      "event": "subscribed",
      "id": 2403890886,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0MDM4OTA4ODY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2403890886",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-11T12:04:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2404035173,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQwNDAzNTE3Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2404035173",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-11T12:53:59Z"
    },
    {
      "event": "reviewed",
      "id": 248434493,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ4NDM0NDkz",
      "url": null,
      "actor": null,
      "commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm happy to see that someone cares about this for ECDSA. Backwards compatibility is important, so creating a new signing function is the right way to go. We should probably replace the word sidechan with covertchan because it's more precise. Fwiw your naming it's only semi-consistent with mine ;P",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#pullrequestreview-248434493",
      "submitted_at": "2019-06-11T21:46:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2415598152,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQxNTU5ODE1Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2415598152",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-15T21:23:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2415603032,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQxNTYwMzAzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2415603032",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-15T21:38:38Z"
    },
    {
      "event": "reviewed",
      "id": 258549133,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTQ5MTMz",
      "url": null,
      "actor": null,
      "commit_id": "8c1c940dfef18b9c7fd8e12f9ccec36812529e67",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "It looks like this is missing a verification function for ecdsa sign-to-contract.\r\n\r\nI know that this PR is an experiment but to move forward this PR needs API tests and functionality tests that should cover every reachable line.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#pullrequestreview-258549133",
      "submitted_at": "2019-07-05T21:33:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
    },
    {
      "event": "commented",
      "id": 508866396,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg2NjM5Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/508866396",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T21:34:05Z",
      "updated_at": "2019-07-05T21:34:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "By the way feel free to squash.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-508866396",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "commented",
      "id": 508949378,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODk0OTM3OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/508949378",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T19:43:19Z",
      "updated_at": "2019-07-06T19:43:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It looks like this is missing a verification function for ecdsa sign-to-contract.\r\n\r\n> I know that this PR is an experiment but to move forward this PR needs API tests and functionality tests that should cover every reachable line.\r\n\r\nI am very much interested in moving this from an experiment to production, so I will definitely add those. I will only get a chance to work on it after next week.\r\n\r\nShould I move all of this over to a new module? I assume modifications directly to `secp256k1_ecdsa_sign` should be avoided, right?",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-508949378",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "commented",
      "id": 510886779,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDg4Njc3OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/510886779",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T13:29:36Z",
      "updated_at": "2019-07-12T13:29:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Should I move all of this over to a new module?\r\n\r\nI think that's a good idea. Having this as an experimental module would probably reduce the barrier for getting merged",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-510886779",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2493389887,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5MzM4OTg4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2493389887",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T16:57:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2494985725,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5NDk4NTcyNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2494985725",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T07:34:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2495019077,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5NTAxOTA3Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2495019077",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T07:48:55Z"
    },
    {
      "event": "renamed",
      "id": 2495647580,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjQ5NTY0NzU4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2495647580",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T12:12:26Z",
      "rename": {
        "from": "[experiment/wip] ecdsa nonce anti sidechan util functions",
        "to": "[experiment/wip] ecdsa sign-to-contract module, with anti nonce covert chan util functions"
      }
    },
    {
      "event": "referenced",
      "id": 2495734473,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0OTU3MzQ0NzM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2495734473",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4b9e8035a2c097c6224f840b78b8275a92a78d9f",
      "commit_url": "https://api.github.com/repos/digitalbitbox/libwally-core/commits/4b9e8035a2c097c6224f840b78b8275a92a78d9f",
      "created_at": "2019-07-19T12:48:28Z"
    },
    {
      "event": "referenced",
      "id": 2495903935,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0OTU5MDM5MzU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2495903935",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6cc0975c2d34c0c5e99e32adf770c3bbb75f56a6",
      "commit_url": "https://api.github.com/repos/digitalbitbox/libwally-core/commits/6cc0975c2d34c0c5e99e32adf770c3bbb75f56a6",
      "created_at": "2019-07-19T13:50:00Z"
    },
    {
      "event": "referenced",
      "id": 2495910948,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0OTU5MTA5NDg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2495910948",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "642d5bea3838584290719184ffd7ed57002a84cb",
      "commit_url": "https://api.github.com/repos/digitalbitbox/libwally-core/commits/642d5bea3838584290719184ffd7ed57002a84cb",
      "created_at": "2019-07-19T13:52:26Z"
    },
    {
      "event": "commented",
      "id": 513701719,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzcwMTcxOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/513701719",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-22T08:50:07Z",
      "updated_at": "2019-07-22T08:50:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonasnick I pushed a re-do, please take a look.\r\n\r\n1. Since most of my PR is based on your Schnorr PR and your help, I added your name to the copyright header. Let me know if you are okay with this.\r\n1. It now lives in the ecdsa_sign_to_contract module: `./configure --enable-module-ecdsa-sign-to-contract --enable-experimental`\r\n1. Using \"covert channel\" instead of \"side channel\" now according to your comment in your PR.\r\n1. I cherry-picked two of your commits to pull in the opening struct/functions and `secp256k1_ec_commit_seckey`\r\n1. Tests added for commit/verify and the anti nonce covert channel workflow\r\n1. `secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_commit` is literally the same as the one in the schnorr module, but copied since it's a module function (can think adding a module_common.c or similar at some point)\r\n\r\n:warning: my biggest question mark is: the host verify function is slightly different to the Schnorr version: it checks that the x coordinate of `R1 + H(R1, k2)` matches `r` of the signature, whereas in in the Schnorr module, the check is for the full `R`, not just the `x`-coordinate. \r\nRationale: reconstructing `R` from `(r,s)` is a [lot more involved](https://github.com/bitcoin-core/secp256k1/blob/master/src/ecdsa_impl.h#L221-L227) in ecdsa, and also needs the message, which the host does not need to know otherwise. Also, [Stepan's article](https://medium.com/cryptoadvance/hardware-wallets-can-be-hacked-but-this-is-fine-a6156bbd199) describes the verification like this.\r\n\r\nIs this sufficient for security? Otherwise, we'd need to do one of:\r\n- calculate the full `R` anyway like linked above\r\n- encode the sign of the `R` (not the original pubnonce `R1`) in `opening->nonce_is_negated`\r\n- ?\r\n\r\n",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-513701719",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "mentioned",
      "id": 2499076471,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ5OTA3NjQ3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2499076471",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-22T08:50:07Z"
    },
    {
      "event": "subscribed",
      "id": 2499076473,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0OTkwNzY0NzM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2499076473",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-22T08:50:07Z"
    },
    {
      "event": "reviewed",
      "id": 267480442,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY3NDgwNDQy",
      "url": null,
      "actor": null,
      "commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I did another relatively shallow review round without taking a look at the covert channel protection. It would make sense to split the ecdsa_s2c and anti_covert_chan things into two commits.\r\n\r\n> Is this sufficient for security?\r\n\r\nYes, it's still binding. Informally, to break the binding property an attacker would need to find `data` and `original_pubnonce` for a given `R` such that `R = commit(data, original_pubnonce) = original_pubnonce + hash(original_pubnonce, data)*G`. Since we're just comparing x-coordinates here, the attacker would have to find `x(R) = x(commit(data, original_pubnonce))` which is not asymptotically easier because there are only two points with the same x-coordinates.\r\nAlso, since we can't batch verify these commitments anyway comparing the x-coordinates is just fine.\r\n\r\nRegarding tests it seems like API tests are missing. They verify that the the right context flags are used and the correct `ARG_CHECKS` are there. Also, there need to be some negative `s2c_verify tests`, where you flip a bit in the committed data, etc. (see my PR), also a test where the opening is not initialized. Ideally you check with gcov that every line that's reachable is hit by the tests.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#pullrequestreview-267480442",
      "submitted_at": "2019-07-27T20:15:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2517207276,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUxNzIwNzI3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2517207276",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-29T17:12:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2517237518,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUxNzIzNzUxOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2517237518",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-29T17:23:53Z"
    },
    {
      "event": "commented",
      "id": 516086940,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjA4Njk0MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/516086940",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-29T17:30:40Z",
      "updated_at": "2019-07-29T17:30:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks again! I split it into two commits (s2c / nonce covert channel funcs) and added a lot of tests. There are very few lines which I'm not sure how to exercise, e.g. how to get a zero/overflowing nonce with `secp256k1_nonce_function_default`, but other than that everything should be covered.",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-516086940",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "mentioned",
      "id": 2523040317,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUyMzA0MDMxNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2523040317",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T12:34:41Z"
    },
    {
      "event": "subscribed",
      "id": 2523040318,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MjMwNDAzMTg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2523040318",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T12:34:41Z"
    },
    {
      "event": "commented",
      "id": 516829642,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjgyOTY0Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/516829642",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T12:35:52Z",
      "updated_at": "2019-07-31T12:35:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> how to get a zero/overflowing nonce with secp256k1_nonce_function_default\r\n\r\nYeah, not possible. In the future we should consistently mark unreachable lines.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-516829642",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "renamed",
      "id": 2528028346,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjUyODAyODM0Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2528028346",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-01T22:24:55Z",
      "rename": {
        "from": "[experiment/wip] ecdsa sign-to-contract module, with anti nonce covert chan util functions",
        "to": "ecdsa sign-to-contract module, with anti nonce covert chan util functions"
      }
    },
    {
      "event": "mentioned",
      "id": 2606559985,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjYwNjU1OTk4NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2606559985",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T10:51:50Z"
    },
    {
      "event": "subscribed",
      "id": 2606559990,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2MDY1NTk5OTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2606559990",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T10:51:50Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MDkyOTg1MzAzMTBlMDdiNTUyZDYzZDE2ZWViYmY4YTZhNjE4MWZiMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/09298530310e07b552d63d16eebbf8a6a6181fb1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/09298530310e07b552d63d16eebbf8a6a6181fb1",
      "tree": {
        "sha": "8b3947079ef6460462dfc9d8c973dd4577afbb48",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/8b3947079ef6460462dfc9d8c973dd4577afbb48"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8b3947079ef6460462dfc9d8c973dd4577afbb48\nparent 96cd94e385f64c1936abf0d1e303d12d0f5da980\nauthor Jonas Nick <jonasd.nick@gmail.com> 1541068284 +0000\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1570552099 +0200\n\nAdd ec_commitments which are essentially the pay-to-contract-style tweaks of public keys.\nThe functionality is not exposed.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl2cuSMWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6OSpEACgrqGSdggO9Hbr46uDBj+a+1Ys\n4g7005rLk/KkkRMD4d/PG1eaktvzrZnHwgBfgjb9I58OoMxwh9OWOXTihGWu73Mc\nAiC+VfnGsNBFnqN3e2zV5jqQsdOTUrP5uZq+uZqElQM4CiEPioM8RqDucAjzZJ80\nozAjsVMvK9v1VjtnyyXXQhqW7rhgaYF+N2fV47Xtke0Gzw51POl6DkQLEl2Z/hUJ\nFobIQoRj4iDjaTy7VCSVaecTxPSAYE2nJwdGICvfHS63XvVTxosy6NddRMg0LAxW\nQDvoHyLDVDZHBSDdauUxgLCFC4kODOz63UOA7OJcvWnYgUaoJLCXhjn/YNoECZ+t\n+tU+CFLBgtx5BEEWzcDpj/SmL2BCYH/715ig0CJMGBYcmVaBBdk3Wuz+diZBotoy\n6O4MBX1gTooqgUwvmB0t1z1/OPdRPhSOFk0TUbY2rqn8Tq32ofBB0IxdFb3iGfHg\n820vy3COOvOvFcC1ia2FmEpIj+NVAJLoM3TnVFBNRSnNU4tmht8zrPkc5c/EKPWh\nY2bQ81PIkApe4IvmYqDmaxr1+cNTS+rgFP5Ug/5aLmv58fbKzLtUAmRha5aLG6Ji\nFCif4o3N8n9mUt+HEB8t3fjlKb1vStbNBzkUAUWh8tvLBIZEokCsrenleMsIflB/\niyrYjz4ed81rhv/DUA==\n=Ci4k\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/96cd94e385f64c1936abf0d1e303d12d0f5da980",
          "sha": "96cd94e385f64c1936abf0d1e303d12d0f5da980",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/96cd94e385f64c1936abf0d1e303d12d0f5da980"
        }
      ],
      "message": "Add ec_commitments which are essentially the pay-to-contract-style tweaks of public keys.\nThe functionality is not exposed.",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-10-08T16:28:19Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-11-01T10:31:24Z"
      },
      "sha": "09298530310e07b552d63d16eebbf8a6a6181fb1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YmZiZjQxNjczZGM0MTEyODRmODc0NmU1YmUwZDIxMTFiZTVlMjZkZg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bfbf41673dc411284f8746e5be0d2111be5e26df",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bfbf41673dc411284f8746e5be0d2111be5e26df",
      "tree": {
        "sha": "e7c91e59a4dd7f50f6d2fb07b1ada326eb2de80c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e7c91e59a4dd7f50f6d2fb07b1ada326eb2de80c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e7c91e59a4dd7f50f6d2fb07b1ada326eb2de80c\nparent 09298530310e07b552d63d16eebbf8a6a6181fb1\nauthor Jonas Nick <jonasd.nick@gmail.com> 1550067323 +0000\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1570552100 +0200\n\nAdd and expose sign-to-contract opening with parse and serialize functions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl2cuSQWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6Jm9D/wIyp6brY9JNFgHh46cZWomEshZ\nnn/ufvoJTeAvwIVu9zdYCchd2P5hO2dxf3HESz4w0s+02RNYcvpHZdc+TS7wgAqC\ngldr6c61Blz/T+o5TqjqGmo89iqOLfg2kA2IJv3mC2QP6csVPFyjoDFrAO2SXAnt\nVgYoJwZJWt1JrqEBUXmB1TfO2WBayPyghJYXyRNElfd/WxnqhQf+h9CiL5rFczit\nl1cIE8jjoqPTH8Sz0G9kW6eXe2VBVJ2GBN4ZjSCN1GWTyktLPpixgMXXtPCTOxAZ\nn5GbotzYquTNaqNrr/rxkytDyu7nqBQ/yTP3SHbvyCnVc82VyR5dJjoYUeGj5d9k\nLs/xg9CVvdUM0SpZwWOGcEB246iCIcGFBx+XNZmQ/x0MlX3+rJXpIc/rsI0CV+76\nLSk8sD7qGCk3Bukg4gSRKF3ZNlv8gCkAzJPUraCHoeMEfGgXxZuaP0dVxt+NwfUN\n7lJohA91BGyd4iJX0pd3a8NKQ8IIsATDLJtCrHPlCFRmOIbQREfVCAZwo3kOJ8vF\nrr1+rNNGvaMmToEYAKHmhDeGAKJl37Y2DvCrsLCq9d2hWRkroNSpNfkgpyyJEwv8\ni3ZqtTXVArg+I6g7NhaIADw77+sKQfuui/958vGuFeKSvsbmdcEkMVIJGd4Yb20P\n2Kg7cb3EFH689oIemg==\n=tdIf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/09298530310e07b552d63d16eebbf8a6a6181fb1",
          "sha": "09298530310e07b552d63d16eebbf8a6a6181fb1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/09298530310e07b552d63d16eebbf8a6a6181fb1"
        }
      ],
      "message": "Add and expose sign-to-contract opening with parse and serialize functions",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-10-08T16:28:20Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-02-13T14:15:23Z"
      },
      "sha": "bfbf41673dc411284f8746e5be0d2111be5e26df"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OTYyY2UyM2Y4OTA0ZjRlYmQ1MDg1OWJkZjFhMWQzZDQ5ZDg0YjQ5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/962ce23f8904f4ebd50859bdf1a1d3d49d84b497",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/962ce23f8904f4ebd50859bdf1a1d3d49d84b497",
      "tree": {
        "sha": "c04dd0158f37798eb55caf6c7dfa12ff98f0b9c8",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c04dd0158f37798eb55caf6c7dfa12ff98f0b9c8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c04dd0158f37798eb55caf6c7dfa12ff98f0b9c8\nparent bfbf41673dc411284f8746e5be0d2111be5e26df\nauthor Marko Bencun <mbencun+pgp@gmail.com> 1564406568 +0200\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1570552200 +0200\n\nmodules: add ecdsa_sign_to_contract\n\nSign a message while comitting to some data at the same time by by\nadding `hash(k1*G, data)` to the rfc6979 deterministic nonce. Includes\nverification function to check that the signature commits to the data.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl2cuYgWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6GTpD/4jDnY4S8+eIp2YfvdN8jbk+fpa\nBWT7M5SHlv9ve1DYxL8+F73871z/Pw2LLelbMezxzws27dloOol0OhACZpItZIdP\n8KjWtETQUNYNuLC8IHSS/dvaZxCxMVxKnHo7AspBhQxfIOp3EmMNLIv9t8EqRsNl\niYvYUBH6OwQi7MnKM43uyVfOpDPPz0NjaQmnebZhQQksXuBGXNWR6TNd4AWDLsRY\nIqzkLQ7/82ZON7JgO+BQ+A9r5aluxZI9dn/Rst7xfaA7eDCV89Twhz6T/O1p9ItZ\nqpezW9X3UsTLn3XCQnsg39JyX3H/W4Ps4Fdxu+HardeQSpccz0w8L96N2qPBG0WS\nXTCCpUbNCtmrsXTh9gFwu1B1YVgnEmWZIBQRZh160a7TDwn3clPPZo1JSp8jIlGF\nsQVcnhRqyH2UThfOn1tUEBnvI+Wku232hZK+/SIvoEoyDrWTuaowd99WBT5mb2T+\nGXmclIgD4EeyauU0K2BeH33D4XMFrZr4ue2QWK+osT3I2rLaEBchtlVWYfuUht4D\noWWeeAT05ut0xsxfQv+Viu+YUkDtXkI8e8QUIgBnZF+adSCR2mbNFxL+GdnDcfMy\nMm74d8OaY+XVuUfl1VlPrk15k2a048q2Cf8RVR+YA22M9h+Flv1a9g0tykIxgzth\nbmhqA0pJhfz+zxnqwA==\n=zyul\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bfbf41673dc411284f8746e5be0d2111be5e26df",
          "sha": "bfbf41673dc411284f8746e5be0d2111be5e26df",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bfbf41673dc411284f8746e5be0d2111be5e26df"
        }
      ],
      "message": "modules: add ecdsa_sign_to_contract\n\nSign a message while comitting to some data at the same time by by\nadding `hash(k1*G, data)` to the rfc6979 deterministic nonce. Includes\nverification function to check that the signature commits to the data.",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-10-08T16:30:00Z"
      },
      "author": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-07-29T13:22:48Z"
      },
      "sha": "962ce23f8904f4ebd50859bdf1a1d3d49d84b497"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MThjYjQzNTUwMzA3ZWExODQ2Yzg3MzUzMTM1MWVmMDVhOGYyOGUwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/18cb43550307ea1846c873531351ef05a8f28e09",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/18cb43550307ea1846c873531351ef05a8f28e09",
      "tree": {
        "sha": "e5b6bc9db07a6ed428e458db3d6e7a8861bb0307",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e5b6bc9db07a6ed428e458db3d6e7a8861bb0307"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e5b6bc9db07a6ed428e458db3d6e7a8861bb0307\nparent 962ce23f8904f4ebd50859bdf1a1d3d49d84b497\nauthor Marko Bencun <mbencun+pgp@gmail.com> 1564406622 +0200\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1570552201 +0200\n\necdsa_sign_to_contract: add Anti Nonce Covert Channel util functions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl2cuYkWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6HORD/4+z+zbQHdRS7Lr9tCdIJNB6veO\n0HujVKN2oSuehsEtEiE4+s307fbdkAlmw5bdOPA1x06bu/7tnDee3SNq4beL3tFm\nScxsNcq5D1H05H9jG0EUsWEjJDXFa8RrrmkG0pDLFStBbBzt5i7P09Yex0Q8U8xO\ndYUxasIpzXThfDFgL2VQgDyA9aQ7IlODWhCRARY9WNUkN7iHmXDRVGHKz/A9M3AD\nJ5K5LDjzSvM0enpum/Fd10K74O+mPFa7LOcGbQ/R0mPAAn5FXHg1O9Q3Aq38FPLq\n/CUvSQOZSpHIOYcZBhGAgyKa6nxei9w8WySsFmJXt+ubOdwvVCeXSM2N/CbD3FE6\n9t9VXM88OIUDpg7KO6I54JTL2yy9VIMxh89SVn4UHjJlGI7dgj6MCfSkgVgHqCK9\nrKEgpQlKp86VNQFrVM0jVdmMr8uJGFmyn5xLJr8VwkqzH9DBV3k3/UVMeaoQxRhg\nOs5cNDJQSnfo+6LVTftW8G/3Gc1cetHVixkYWQwL0BvrNgmp9Saqd0+F5PXcpDTV\nGNH/uvz3IfUZCjwSiaLH7XGawMEf9LIaG9YIalLEsfG3mkG6943lwGN9eN4V2J7n\n8dzcaxoGsFbX3dSFyS0P6kMAoVRBUQm2r2qnYorGnqsqEYmA4LSe5/AMGSH8bph8\nYXLWTKZRlZ3Vy+Qwmg==\n=hmER\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/962ce23f8904f4ebd50859bdf1a1d3d49d84b497",
          "sha": "962ce23f8904f4ebd50859bdf1a1d3d49d84b497",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/962ce23f8904f4ebd50859bdf1a1d3d49d84b497"
        }
      ],
      "message": "ecdsa_sign_to_contract: add Anti Nonce Covert Channel util functions",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-10-08T16:30:01Z"
      },
      "author": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-07-29T13:23:42Z"
      },
      "sha": "18cb43550307ea1846c873531351ef05a8f28e09"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2696079986,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY5NjA3OTk4Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2696079986",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-08T16:30:54Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-08T16:35:01Z",
      "updated_at": "2019-10-08T16:35:01Z",
      "source": {
        "issue": {
          "id": 504151205,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzI1ODU5MzYy",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669",
          "number": 669,
          "state": "closed",
          "state_reason": null,
          "title": "ecdsa sign-to-contract module, with anti nonce covert chan util functions",
          "body": "Alternative to https://github.com/bitcoin-core/secp256k1/pull/637, where the main s2c signing function lives in `secp256k1.c`. See this thread for some discussion about this: https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976594",
          "user": {
            "login": "benma",
            "id": 1225267,
            "node_id": "MDQ6VXNlcjEyMjUyNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benma",
            "html_url": "https://github.com/benma",
            "followers_url": "https://api.github.com/users/benma/followers",
            "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
            "organizations_url": "https://api.github.com/users/benma/orgs",
            "repos_url": "https://api.github.com/users/benma/repos",
            "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/benma/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/669.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/669.patch"
          },
          "closed_at": "2020-12-16T22:23:48Z",
          "created_at": "2019-10-08T16:33:14Z",
          "updated_at": "2020-12-16T22:23:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 567936699,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzkzNjY5OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/567936699",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-20T14:09:17Z",
      "updated_at": "2019-12-20T14:09:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closing in favour of https://github.com/bitcoin-core/secp256k1/pull/669 as [discussed here](https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r332613869). Thanks for the detailed review!",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#issuecomment-567936699",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/637"
    },
    {
      "event": "closed",
      "id": 2900851802,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjkwMDg1MTgwMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2900851802",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-20T14:09:18Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "paulmillr",
        "id": 574696,
        "node_id": "MDQ6VXNlcjU3NDY5Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/574696?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paulmillr",
        "html_url": "https://github.com/paulmillr",
        "followers_url": "https://api.github.com/users/paulmillr/followers",
        "following_url": "https://api.github.com/users/paulmillr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paulmillr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paulmillr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paulmillr/subscriptions",
        "organizations_url": "https://api.github.com/users/paulmillr/orgs",
        "repos_url": "https://api.github.com/users/paulmillr/repos",
        "events_url": "https://api.github.com/users/paulmillr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paulmillr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T05:44:22Z",
      "updated_at": "2023-05-18T05:44:22Z",
      "source": {
        "issue": {
          "id": 1715020154,
          "node_id": "I_kwDOIjK8G85mOSF6",
          "url": "https://api.github.com/repos/paulmillr/noble-curves/issues/47",
          "repository_url": "https://api.github.com/repos/paulmillr/noble-curves",
          "labels_url": "https://api.github.com/repos/paulmillr/noble-curves/issues/47/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/paulmillr/noble-curves/issues/47/comments",
          "events_url": "https://api.github.com/repos/paulmillr/noble-curves/issues/47/events",
          "html_url": "https://github.com/paulmillr/noble-curves/issues/47",
          "number": 47,
          "state": "open",
          "state_reason": null,
          "title": "Implement anti-klepto protocol to protect against covert nonces",
          "body": "Not sure if the low-level library is the best place for such API, but at least some primitives need to be implemented for the anti-klepto protocol.\r\n\r\n```\r\nhot->cold: sha(k_hot)\r\ncold->hot: kP_cold = hash(tx, privkey, sha(k_hot)) * G\r\nhot->cold: k_hot\r\ncold->hot: signed_tx\r\nhot:       verify tx.R == kP_cold + k_hot*G\r\n```\r\n\r\nhttps://shiftcrypto.ch/blog/anti-klepto-explained-protection-against-leaking-private-keys/, https://github.com/bitcoin-core/secp256k1/pull/637\r\n",
          "user": {
            "login": "paulmillr",
            "id": 574696,
            "node_id": "MDQ6VXNlcjU3NDY5Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/574696?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/paulmillr",
            "html_url": "https://github.com/paulmillr",
            "followers_url": "https://api.github.com/users/paulmillr/followers",
            "following_url": "https://api.github.com/users/paulmillr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/paulmillr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/paulmillr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/paulmillr/subscriptions",
            "organizations_url": "https://api.github.com/users/paulmillr/orgs",
            "repos_url": "https://api.github.com/users/paulmillr/repos",
            "events_url": "https://api.github.com/users/paulmillr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/paulmillr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 4869266923,
              "node_id": "LA_kwDOIjK8G88AAAABIjsd6w",
              "url": "https://api.github.com/repos/paulmillr/noble-curves/labels/enhancement",
              "name": "enhancement",
              "description": "New feature or request",
              "color": "a2eeef",
              "default": true
            }
          ],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 1,
          "created_at": "2023-05-18T05:44:22Z",
          "updated_at": "2023-06-27T14:51:07Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292657201",
      "pull_request_review_id": 248434493,
      "id": 292657201,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY1NzIwMQ==",
      "diff_hunk": "@@ -526,6 +526,37 @@ SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_rfc\n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_default;\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Sidechannel Protocol.\n+ *\n+ * ECDSA Anti Nonce Sidechannel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to it's original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_nonce_sidechan_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client checks that the host commitment from step 1 commits to `k2` from step 3 and signs",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The client actually doesn't need to check that it matches because it derives its nonce using the hosts randomness commitment. If the randomness commitment doesn't match hash(k2) then it will derive a different \"original\" nonce and the host will not be able to verify the sign-to-contract commitment. The only reason of the host commitment is to allow the client to derive a unique nonce for every host randomness.",
      "created_at": "2019-06-11T20:58:32Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r292657201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292657201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292658968",
      "pull_request_review_id": 248434493,
      "id": 292658968,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY1ODk2OA==",
      "diff_hunk": "@@ -526,6 +526,37 @@ SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_rfc\n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_default;\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Sidechannel Protocol.\n+ *\n+ * ECDSA Anti Nonce Sidechannel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to it's original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_nonce_sidechan_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client checks that the host commitment from step 1 commits to `k2` from step 3 and signs\n+ *    with `secp256k1_ecdsa_sign_nonce_tweak_add`, using the `k2` as the tweak and the host\n+ *    commitment as additional noncedata and sends the signature to the host.\n+ * 5. The host reconstructs the curve point `R` from the signature and verifies that `R = R1 + k2*G`.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. (cannot be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *              noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    secp256k1_nonce_function noncefp,",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 31,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The reason why I'm not supporting arbitrary noncefps in my PR is to avoid giving a nonce function that doesn't make use of the `noncedata`. In the Schnorr case that would lead to nonce reuse and allows the host to extract the secret key. I suspect the same is true for ECDSA.",
      "created_at": "2019-06-11T21:03:26Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r292658968",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292658968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292670213",
      "pull_request_review_id": 248434493,
      "id": 292670213,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY3MDIxMw==",
      "diff_hunk": "@@ -446,9 +446,52 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n+int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    secp256k1_nonce_function noncefp,\n+    unsigned char *rand_commitment32\n+) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+\n+    if (!noncefp(nonce32, msg32, seckey32, NULL, rand_commitment32, 0)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(&k, nonce32, NULL);\n+    if (secp256k1_scalar_is_zero(&k)) {\n+        return 0;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+    secp256k1_pubkey_save(client_commit, &r);\n+    return 1;\n+}\n+\n int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    return secp256k1_ecdsa_sign_nonce_tweak_add(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n+}\n+\n+int secp256k1_ecdsa_sign_nonce_tweak_add(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata, const unsigned char* nonce_tweak32) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 47,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If this function assumes that the caller gives a matching noncedata to the nonce_tweak instead of deriving the host commitment from the nonce_tweak by hashing it, the caller can't be stateless.",
      "created_at": "2019-06-11T21:36:15Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r292670213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292670213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292671081",
      "pull_request_review_id": 248434493,
      "id": 292671081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY3MTA4MQ==",
      "diff_hunk": "@@ -472,6 +522,9 @@ int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature\n                 break;\n             }\n             secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            if (nonce_tweak32 != NULL) {\n+                secp256k1_scalar_add(&non, &non, &nonce_tweak);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 73,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is not a sign-to-contract commitment, but it works for the anti nonce covertchan because the host already has the nonce. I think it would be much better if `ecdsa_sign` would generally support sign to contract commitments and not only this protocol. Sign to contract would be `R = R1 + H(R1, k2)*G`.",
      "created_at": "2019-06-11T21:38:50Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r292671081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292671081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292672362",
      "pull_request_review_id": 248434493,
      "id": 292672362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjY3MjM2Mg==",
      "diff_hunk": "@@ -526,6 +526,37 @@ SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_rfc\n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_default;\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Sidechannel Protocol.\n+ *\n+ * ECDSA Anti Nonce Sidechannel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to it's original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_nonce_sidechan_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client checks that the host commitment from step 1 commits to `k2` from step 3 and signs\n+ *    with `secp256k1_ecdsa_sign_nonce_tweak_add`, using the `k2` as the tweak and the host",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 13,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In general I'm trying to avoid the name `tweak` because it carries little information.",
      "created_at": "2019-06-11T21:42:49Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r292672362",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/292672362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294049711",
      "pull_request_review_id": 250195546,
      "id": 294049711,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA0OTcxMQ==",
      "diff_hunk": "@@ -472,6 +522,9 @@ int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature\n                 break;\n             }\n             secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            if (nonce_tweak32 != NULL) {\n+                secp256k1_scalar_add(&non, &non, &nonce_tweak);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 73,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292671081,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks a lot for the great review! \r\n\r\nI can try to make a general sign to contract ecdsa sign function.\r\n\r\nPeeking at your Schnorr implementation of it, I am unsure about a few things:\r\n\r\n1. There is `secp256k1_s2c_opening`, which seems to return the original `R1` from the sign function. Why is this needed when there is already a function to produce the same commitment (`secp256k1_(schnorrsig|ecdsa)_anti_nonce_sidechan_client_commit`) beforehand?\r\n\r\n~2. What is `nonce_is_negated` and when is it set? [Here](https://github.com/bitcoin-core/secp256k1/pull/590/files#diff-313ca26f0048bc16a608709915d0111eR206) the check is `if (!secp256k1_fe_is_quad_var(&r.y)) {`, but I don't know what this means. Does it apply for ecdsa?~\r\n\r\nIn the ecdsa case, do I need to add all of that, or is just adding `H(R1, k2)` instead of `k2` sufficient? ",
      "created_at": "2019-06-15T14:48:20Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r294049711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294049711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059485",
      "pull_request_review_id": 250206790,
      "id": 294059485,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA1OTQ4NQ==",
      "diff_hunk": "@@ -526,6 +526,37 @@ SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_rfc\n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_default;\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Sidechannel Protocol.\n+ *\n+ * ECDSA Anti Nonce Sidechannel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to it's original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_nonce_sidechan_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client checks that the host commitment from step 1 commits to `k2` from step 3 and signs",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292657201,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":+1: fixed",
      "created_at": "2019-06-15T21:04:05Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r294059485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059488",
      "pull_request_review_id": 250206797,
      "id": 294059488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA1OTQ4OA==",
      "diff_hunk": "@@ -526,6 +526,37 @@ SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_rfc\n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_default;\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Sidechannel Protocol.\n+ *\n+ * ECDSA Anti Nonce Sidechannel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to it's original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_nonce_sidechan_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client checks that the host commitment from step 1 commits to `k2` from step 3 and signs\n+ *    with `secp256k1_ecdsa_sign_nonce_tweak_add`, using the `k2` as the tweak and the host",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 13,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292672362,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-06-15T21:04:13Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r294059488",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059490",
      "pull_request_review_id": 250206801,
      "id": 294059490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA1OTQ5MA==",
      "diff_hunk": "@@ -526,6 +526,37 @@ SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_rfc\n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_default;\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Sidechannel Protocol.\n+ *\n+ * ECDSA Anti Nonce Sidechannel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to it's original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_nonce_sidechan_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client checks that the host commitment from step 1 commits to `k2` from step 3 and signs\n+ *    with `secp256k1_ecdsa_sign_nonce_tweak_add`, using the `k2` as the tweak and the host\n+ *    commitment as additional noncedata and sends the signature to the host.\n+ * 5. The host reconstructs the curve point `R` from the signature and verifies that `R = R1 + k2*G`.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. (cannot be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *              noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    secp256k1_nonce_function noncefp,",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 31,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292658968,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-06-15T21:04:20Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r294059490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059521",
      "pull_request_review_id": 250206842,
      "id": 294059521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA1OTUyMQ==",
      "diff_hunk": "@@ -446,9 +446,52 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n+int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    secp256k1_nonce_function noncefp,\n+    unsigned char *rand_commitment32\n+) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+\n+    if (!noncefp(nonce32, msg32, seckey32, NULL, rand_commitment32, 0)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(&k, nonce32, NULL);\n+    if (secp256k1_scalar_is_zero(&k)) {\n+        return 0;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+    secp256k1_pubkey_save(client_commit, &r);\n+    return 1;\n+}\n+\n int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    return secp256k1_ecdsa_sign_nonce_tweak_add(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n+}\n+\n+int secp256k1_ecdsa_sign_nonce_tweak_add(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata, const unsigned char* nonce_tweak32) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 47,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292670213,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed (copied the solution from your PR).",
      "created_at": "2019-06-15T21:05:31Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r294059521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294059521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294060045",
      "pull_request_review_id": 250207468,
      "id": 294060045,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA2MDA0NQ==",
      "diff_hunk": "@@ -472,6 +522,9 @@ int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature\n                 break;\n             }\n             secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            if (nonce_tweak32 != NULL) {\n+                secp256k1_scalar_add(&non, &non, &nonce_tweak);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 73,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292671081,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I now pushed a commit which simply adds `H(R1, k2)` to the nonce `k1` to produce `R = (k1 + H(R1, k2))*G`. Seemed less intrusive and more efficient than computing `R2` and adding it to `R1` to get `R = R1 + R2`.\r\n\r\n",
      "created_at": "2019-06-15T21:31:18Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r294060045",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294060045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294254399",
      "pull_request_review_id": 250440536,
      "id": 294254399,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDI1NDM5OQ==",
      "diff_hunk": "@@ -472,6 +522,9 @@ int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature\n                 break;\n             }\n             secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            if (nonce_tweak32 != NULL) {\n+                secp256k1_scalar_add(&non, &non, &nonce_tweak);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 73,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292671081,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question 2. is resolved by reading [BIP-Schnorr](https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki). Unless I misunderstand, it seems that it does not apply to ecdsa.",
      "created_at": "2019-06-17T11:34:16Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r294254399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/294254399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300735920",
      "pull_request_review_id": 258473290,
      "id": 300735920,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDczNTkyMA==",
      "diff_hunk": "@@ -472,6 +522,9 @@ int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature\n                 break;\n             }\n             secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            if (nonce_tweak32 != NULL) {\n+                secp256k1_scalar_add(&non, &non, &nonce_tweak);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 73,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "ba34c6efd30cd238b11377322570b08e830a0a4a",
      "in_reply_to_id": 292671081,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To question 1: True, but if you want sign-to-contract outside of the anti-nonce-sidechan context then it's much simpler to just have a single opening structure that contains the negated nonce and original nonce and that you can just give to s2c_verify.",
      "created_at": "2019-07-05T16:04:00Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r300735920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300735920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300796054",
      "pull_request_review_id": 258549133,
      "id": 300796054,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5NjA1NA==",
      "diff_hunk": "@@ -580,16 +579,17 @@ SECP256K1_API int secp256k1_ecdsa_sign(\n     const void *ndata\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/** Same as secp256k1_ecdsa_sign, but nonce_tweak32 is added to the nonce generated by noncefp.\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to\n+    the nonce generated by noncefp, with `ndata=hash(s2c_data32, ndata)`.\n  */\n-SECP256K1_API int secp256k1_ecdsa_sign_nonce_tweak_add(\n+SECP256K1_API int secp256k1_ecdsa_sign_to_contract(\n     const secp256k1_context* ctx,\n     secp256k1_ecdsa_signature *sig,\n     const unsigned char *msg32,\n     const unsigned char *seckey,\n     secp256k1_nonce_function noncefp,\n     const void *ndata,\n-    const unsigned char* nonce_tweak32\n+    const unsigned char* s2c_data32",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 43,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "8c1c940dfef18b9c7fd8e12f9ccec36812529e67",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: we should standardize on the position (in my PR it's before the noncefp, but I don't really care which way it is).",
      "created_at": "2019-07-05T21:04:51Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r300796054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300796054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 592,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300796338",
      "pull_request_review_id": 258549133,
      "id": 300796338,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5NjMzOA==",
      "diff_hunk": "@@ -486,14 +482,56 @@ int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n }\n \n int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n-    return secp256k1_ecdsa_sign_nonce_tweak_add(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n+    return secp256k1_ecdsa_sign_to_contract(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n }\n \n-int secp256k1_ecdsa_sign_nonce_tweak_add(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata, const unsigned char* nonce_tweak32) {\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 33,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "8c1c940dfef18b9c7fd8e12f9ccec36812529e67",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this is copy and pasted from my commit. Why not cherry-pick them? Would be easier to review.",
      "created_at": "2019-07-05T21:06:30Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r300796338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300796338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 489,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300799575",
      "pull_request_review_id": 258549133,
      "id": 300799575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc5OTU3NQ==",
      "diff_hunk": "@@ -446,11 +446,91 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n+int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    unsigned char *rand_commitment32\n+) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+    unsigned int count = 0;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+\n+    while (1) {\n+        int overflow = 0;\n+        if (!secp256k1_nonce_function_default(nonce32, msg32, seckey32, NULL, rand_commitment32, count)) {\n+            return 0;\n+        }\n+\n+        secp256k1_scalar_set_b32(&k, nonce32, &overflow);\n+        if (!overflow && !secp256k1_scalar_is_zero(&k)) {\n+            break;\n+        }\n+        count++;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+    secp256k1_pubkey_save(client_commit, &r);\n+    return 1;\n+}\n+\n int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    return secp256k1_ecdsa_sign_to_contract(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n+}\n+\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(unsigned char *tweak32, const secp256k1_ge *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p = *pubkey;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak_from_seckey(\n+    const secp256k1_context *ctx,\n+    unsigned char *tweak32,\n+    const secp256k1_scalar *seckey,\n+    const unsigned char *data,\n+    size_t data_size) {\n+    secp256k1_gej rp;\n+    secp256k1_ge r;\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rp, seckey);\n+    secp256k1_ge_set_gej(&r, &rp);\n+    return secp256k1_ec_commit_tweak(tweak32, &r, data, data_size);\n+}\n+\n+int secp256k1_ecdsa_sign_to_contract(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata, const unsigned char* s2c_data32) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 81,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "013526b893b80800ec0f5666ca6294ae250dd3f5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So right now you can't get the original nonce when using pure sign-to-contract, unless you do `secp256k1_ecdsa_anti_nonce_sidechan_client_commit` ?",
      "created_at": "2019-07-05T21:29:59Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r300799575",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300799575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300840402",
      "pull_request_review_id": 258599760,
      "id": 300840402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MDQwMg==",
      "diff_hunk": "@@ -486,14 +482,56 @@ int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n }\n \n int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n-    return secp256k1_ecdsa_sign_nonce_tweak_add(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n+    return secp256k1_ecdsa_sign_to_contract(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n }\n \n-int secp256k1_ecdsa_sign_nonce_tweak_add(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata, const unsigned char* nonce_tweak32) {\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 33,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "8c1c940dfef18b9c7fd8e12f9ccec36812529e67",
      "in_reply_to_id": 300796338,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess I only needed this function and not the rest, though now I see the commit is not that much bigger than this (https://github.com/bitcoin-core/secp256k1/commit/0b4bef4527e2b4694a83306f495ca61d574d2c1f), so I can do it anyway",
      "created_at": "2019-07-06T19:29:18Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r300840402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300840402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 489,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300840632",
      "pull_request_review_id": 258599988,
      "id": 300840632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MDYzMg==",
      "diff_hunk": "@@ -446,11 +446,91 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n+int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    unsigned char *rand_commitment32\n+) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+    unsigned int count = 0;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+\n+    while (1) {\n+        int overflow = 0;\n+        if (!secp256k1_nonce_function_default(nonce32, msg32, seckey32, NULL, rand_commitment32, count)) {\n+            return 0;\n+        }\n+\n+        secp256k1_scalar_set_b32(&k, nonce32, &overflow);\n+        if (!overflow && !secp256k1_scalar_is_zero(&k)) {\n+            break;\n+        }\n+        count++;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+    secp256k1_pubkey_save(client_commit, &r);\n+    return 1;\n+}\n+\n int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    return secp256k1_ecdsa_sign_to_contract(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n+}\n+\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(unsigned char *tweak32, const secp256k1_ge *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p = *pubkey;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak_from_seckey(\n+    const secp256k1_context *ctx,\n+    unsigned char *tweak32,\n+    const secp256k1_scalar *seckey,\n+    const unsigned char *data,\n+    size_t data_size) {\n+    secp256k1_gej rp;\n+    secp256k1_ge r;\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rp, seckey);\n+    secp256k1_ge_set_gej(&r, &rp);\n+    return secp256k1_ec_commit_tweak(tweak32, &r, data, data_size);\n+}\n+\n+int secp256k1_ecdsa_sign_to_contract(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata, const unsigned char* s2c_data32) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 81,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "013526b893b80800ec0f5666ca6294ae250dd3f5",
      "in_reply_to_id": 300799575,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, Part of it is that it seemed redundant, and part of it is that I am not very knowledgeable about sign-to-contract, e.g. what other uses of it there are where one would not use something akin to `secp256k1_ecdsa_anti_nonce_sidechan_client_commit` beforehand anyway.\r\n\r\nI can add an opening struct here too if you think it will be helpful, let me know.",
      "created_at": "2019-07-06T19:37:48Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r300840632",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/300840632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/302980780",
      "pull_request_review_id": 261255819,
      "id": 302980780,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjk4MDc4MA==",
      "diff_hunk": "@@ -446,11 +446,91 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n+int secp256k1_ecdsa_anti_nonce_sidechan_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    unsigned char *rand_commitment32\n+) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+    unsigned int count = 0;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+\n+    while (1) {\n+        int overflow = 0;\n+        if (!secp256k1_nonce_function_default(nonce32, msg32, seckey32, NULL, rand_commitment32, count)) {\n+            return 0;\n+        }\n+\n+        secp256k1_scalar_set_b32(&k, nonce32, &overflow);\n+        if (!overflow && !secp256k1_scalar_is_zero(&k)) {\n+            break;\n+        }\n+        count++;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+    secp256k1_pubkey_save(client_commit, &r);\n+    return 1;\n+}\n+\n int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    return secp256k1_ecdsa_sign_to_contract(ctx, signature, msg32, seckey, noncefp, noncedata, NULL);\n+}\n+\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(unsigned char *tweak32, const secp256k1_ge *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p = *pubkey;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak_from_seckey(\n+    const secp256k1_context *ctx,\n+    unsigned char *tweak32,\n+    const secp256k1_scalar *seckey,\n+    const unsigned char *data,\n+    size_t data_size) {\n+    secp256k1_gej rp;\n+    secp256k1_ge r;\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rp, seckey);\n+    secp256k1_ge_set_gej(&r, &rp);\n+    return secp256k1_ec_commit_tweak(tweak32, &r, data, data_size);\n+}\n+\n+int secp256k1_ecdsa_sign_to_contract(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata, const unsigned char* s2c_data32) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 81,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "013526b893b80800ec0f5666ca6294ae250dd3f5",
      "in_reply_to_id": 300799575,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't know a specific application for s2c besides the anti nonce sidechannel and committing to the signer set in threshold signatures. I'd add an opening struct argument.",
      "created_at": "2019-07-12T13:27:43Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r302980780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/302980780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976076",
      "pull_request_review_id": 267480442,
      "id": 307976076,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk3NjA3Ng==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#ifndef SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+#define SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to\n+ *  the nonce generated by noncefp, with `ndata=hash(s2c_data32, ndata)`.",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: The `with [...]` part is a bit difficult to understand. Also noncefp is always `secp256k1_nonce_function_default`. Perhaps for this function we can remove the `noncefp` and `ndata` argument because they don't have a purpose anyway.",
      "created_at": "2019-07-27T19:53:51Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976076",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976115",
      "pull_request_review_id": 267480442,
      "id": 307976115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk3NjExNQ==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#ifndef SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+#define SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to\n+ *  the nonce generated by noncefp, with `ndata=hash(s2c_data32, ndata)`.\n+ *  Returns: 1: signature created\n+ *           0: the nonce generation function failed, or the private key was invalid.\n+ *  Args:    ctx:  pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig:  pointer to an array where the signature will be placed (cannot be NULL)\n+ *   s2c_opening:  pointer to an secp256k1_s2c_opening structure which can be\n+ *                 NULL but is required to be not NULL if this signature creates\n+ *                 a sign-to-contract commitment (i.e. the `s2c_data` argument\n+ *                 is not NULL). nonce_is_negated is always 0 for ecdsa.",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 19,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`nonce_is_negated` is irrelevant because users of this API should never look into `s2c_opening` structs.",
      "created_at": "2019-07-27T19:55:34Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976141",
      "pull_request_review_id": 267480442,
      "id": 307976141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk3NjE0MQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Imo much easier to read if it was consistent with the rest of secp where the function signature is a single line.",
      "created_at": "2019-07-27T19:56:31Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976141",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976150",
      "pull_request_review_id": 267480442,
      "id": 307976150,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk3NjE1MA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(\n+    const secp256k1_context *ctx,\n+    secp256k1_ecdsa_signature *signature,\n+    secp256k1_s2c_opening *s2c_opening,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    const unsigned char* s2c_data32,\n+    secp256k1_nonce_function noncefp,\n+    const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    secp256k1_sha256 sha;\n+    int ret = 0;\n+    int overflow = 0;\n+    int is_zero = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {\n+        /* Provide s2c_data32 and ndata (if not NULL) to the the nonce function\n+         * as additional data to derive the nonce from. If both pointers are\n+         * not NULL, they need to be hashed to get the nonce data 32 bytes.\n+         * Even if only s2c_data32 is not NULL, it's hashed because it should\n+         * be possible to derive nonces even if only a SHA256 commitment to the\n+         * data is known.  This is for example important in the\n+         * anti-nonce-sidechannel protocol.\n+         */\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, s2c_data32, 32);\n+        if (noncedata != NULL) {\n+            secp256k1_sha256_write(&sha, noncedata, 32);\n+        }\n+        secp256k1_sha256_finalize(&sha, ndata);\n+        noncedata = &ndata;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned char nonce32[32];\n+        unsigned int count = 0;\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n+            if (!ret) {\n+                break;\n+            }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            is_zero = secp256k1_scalar_is_zero(&non);\n+            if (!overflow && !is_zero) {\n+                if (s2c_data32 != NULL) {\n+                    secp256k1_gej nonce_pj;\n+                    secp256k1_ge nonce_p;\n+\n+                    /* Compute original nonce commitment/pubkey */\n+                    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &nonce_pj, &non);\n+                    secp256k1_ge_set_gej(&nonce_p, &nonce_pj);\n+                    secp256k1_pubkey_save(&s2c_opening->original_pubnonce, &nonce_p);\n+\n+                    /* Tweak nonce with s2c commitment. */\n+                    if (!secp256k1_ec_commit_seckey(ctx, nonce32, &s2c_opening->original_pubnonce, s2c_data32, 32)) {\n+                        return 0;\n+                    }\n+                    secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+                    is_zero = secp256k1_scalar_is_zero(&non);\n+                }\n+\n+                if (!overflow && !is_zero) {\n+                    if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {\n+                        break;\n+                    }\n+                }\n+            }\n+            count++;\n+        }\n+        memset(nonce32, 0, 32);\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n+    }\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(signature, &r, &s);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 117,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "misses `VERIFY` and `ARG_CHECK`s.",
      "created_at": "2019-07-27T19:57:03Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976175",
      "pull_request_review_id": 267480442,
      "id": 307976175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk3NjE3NQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(\n+    const secp256k1_context *ctx,\n+    secp256k1_ecdsa_signature *signature,\n+    secp256k1_s2c_opening *s2c_opening,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    const unsigned char* s2c_data32,\n+    secp256k1_nonce_function noncefp,\n+    const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    secp256k1_sha256 sha;\n+    int ret = 0;\n+    int overflow = 0;\n+    int is_zero = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {\n+        /* Provide s2c_data32 and ndata (if not NULL) to the the nonce function\n+         * as additional data to derive the nonce from. If both pointers are\n+         * not NULL, they need to be hashed to get the nonce data 32 bytes.\n+         * Even if only s2c_data32 is not NULL, it's hashed because it should\n+         * be possible to derive nonces even if only a SHA256 commitment to the\n+         * data is known.  This is for example important in the\n+         * anti-nonce-sidechannel protocol.\n+         */\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, s2c_data32, 32);\n+        if (noncedata != NULL) {\n+            secp256k1_sha256_write(&sha, noncedata, 32);\n+        }\n+        secp256k1_sha256_finalize(&sha, ndata);\n+        noncedata = &ndata;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned char nonce32[32];\n+        unsigned int count = 0;\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n+            if (!ret) {\n+                break;\n+            }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            is_zero = secp256k1_scalar_is_zero(&non);\n+            if (!overflow && !is_zero) {\n+                if (s2c_data32 != NULL) {\n+                    secp256k1_gej nonce_pj;\n+                    secp256k1_ge nonce_p;\n+\n+                    /* Compute original nonce commitment/pubkey */\n+                    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &nonce_pj, &non);\n+                    secp256k1_ge_set_gej(&nonce_p, &nonce_pj);\n+                    secp256k1_pubkey_save(&s2c_opening->original_pubnonce, &nonce_p);\n+\n+                    /* Tweak nonce with s2c commitment. */\n+                    if (!secp256k1_ec_commit_seckey(ctx, nonce32, &s2c_opening->original_pubnonce, s2c_data32, 32)) {\n+                        return 0;\n+                    }\n+                    secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+                    is_zero = secp256k1_scalar_is_zero(&non);\n+                }\n+\n+                if (!overflow && !is_zero) {\n+                    if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {\n+                        break;\n+                    }\n+                }\n+            }\n+            count++;\n+        }\n+        memset(nonce32, 0, 32);\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n+    }\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(signature, &r, &s);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(\n+    const secp256k1_context* ctx,\n+    const secp256k1_ecdsa_signature *sig,\n+    const unsigned char *data32,\n+    const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char b[32];\n+    secp256k1_scalar computed_r;\n+    secp256k1_scalar sigr, sigs;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */\n+    secp256k1_ecdsa_signature_load(ctx, &sigr, &sigs, sig);\n+\n+    secp256k1_pubkey_load(ctx, &commitment_ge, &commitment);",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 135,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Return value should be checked.",
      "created_at": "2019-07-27T19:57:44Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976213",
      "pull_request_review_id": 267480442,
      "id": 307976213,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk3NjIxMw==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(\n+    const secp256k1_context *ctx,\n+    secp256k1_ecdsa_signature *signature,\n+    secp256k1_s2c_opening *s2c_opening,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    const unsigned char* s2c_data32,\n+    secp256k1_nonce_function noncefp,\n+    const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    secp256k1_sha256 sha;\n+    int ret = 0;\n+    int overflow = 0;\n+    int is_zero = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {\n+        /* Provide s2c_data32 and ndata (if not NULL) to the the nonce function\n+         * as additional data to derive the nonce from. If both pointers are\n+         * not NULL, they need to be hashed to get the nonce data 32 bytes.\n+         * Even if only s2c_data32 is not NULL, it's hashed because it should\n+         * be possible to derive nonces even if only a SHA256 commitment to the\n+         * data is known.  This is for example important in the\n+         * anti-nonce-sidechannel protocol.\n+         */\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, s2c_data32, 32);\n+        if (noncedata != NULL) {\n+            secp256k1_sha256_write(&sha, noncedata, 32);\n+        }\n+        secp256k1_sha256_finalize(&sha, ndata);\n+        noncedata = &ndata;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned char nonce32[32];\n+        unsigned int count = 0;\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n+            if (!ret) {\n+                break;\n+            }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            is_zero = secp256k1_scalar_is_zero(&non);\n+            if (!overflow && !is_zero) {\n+                if (s2c_data32 != NULL) {\n+                    secp256k1_gej nonce_pj;\n+                    secp256k1_ge nonce_p;\n+\n+                    /* Compute original nonce commitment/pubkey */\n+                    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &nonce_pj, &non);\n+                    secp256k1_ge_set_gej(&nonce_p, &nonce_pj);\n+                    secp256k1_pubkey_save(&s2c_opening->original_pubnonce, &nonce_p);\n+\n+                    /* Tweak nonce with s2c commitment. */\n+                    if (!secp256k1_ec_commit_seckey(ctx, nonce32, &s2c_opening->original_pubnonce, s2c_data32, 32)) {\n+                        return 0;\n+                    }\n+                    secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+                    is_zero = secp256k1_scalar_is_zero(&non);\n+                }\n+\n+                if (!overflow && !is_zero) {\n+                    if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {\n+                        break;\n+                    }\n+                }\n+            }\n+            count++;\n+        }\n+        memset(nonce32, 0, 32);\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n+    }\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(signature, &r, &s);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(\n+    const secp256k1_context* ctx,\n+    const secp256k1_ecdsa_signature *sig,\n+    const unsigned char *data32,\n+    const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char b[32];\n+    secp256k1_scalar computed_r;\n+    secp256k1_scalar sigr, sigs;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */\n+    secp256k1_ecdsa_signature_load(ctx, &sigr, &sigs, sig);\n+\n+    secp256k1_pubkey_load(ctx, &commitment_ge, &commitment);\n+    secp256k1_fe_normalize(&commitment_ge.x);\n+    secp256k1_fe_get_b32(b, &commitment_ge.x);\n+    secp256k1_scalar_set_b32(&computed_r, b, NULL);",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 138,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's avoid having to deal with subtle issues regarding modular reduction and either check the `overflow` argument or compare `b` with `scalar_get_b32(sigr)` using `memcmp`. ",
      "created_at": "2019-07-27T19:59:34Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976594",
      "pull_request_review_id": 267480442,
      "id": 307976594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk3NjU5NA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The previous version in this PR was easier to review. I don't remember how exactly it looked like but you'd get there by doing something like this: \r\n* move this function to `secp256k1.c` and rename it to `secp256k1_ecdsa_sign_helper`. \r\n* change regular `ecdsa_sign` function to just call `ecdsa_sign_helper` function but with `s2c_data` and `s2c_opening` set to NULL.\r\n\r\nThen we wouldn't have all this code duplication. The downside is that we wouldn't be able to fully test  `ecdsa_sign_helper` without enabling the s2c module.",
      "created_at": "2019-07-27T20:14:30Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/307976594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308253688",
      "pull_request_review_id": 267812193,
      "id": 308253688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODI1MzY4OA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976594,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I copied it to the module with the goal of not touching `secp256k1_ecdsa_sign`. I thought that was the goal, otherwise wouldn't this nullify the purpose of an experimental module and increase the barrier to merge? \r\n\r\nFor comparison, [the recoverable module also copied the whole function](https://github.com/bitcoin-core/secp256k1/blob/fa3301713549d118e57ebe6551d062903ddd6b63/src/modules/recovery/main_impl.h#L123) with the minimal change of extracting the `recid`.\r\n\r\nHere, it is also a copy except for the `if(s2c_data32 != NULL) {` clauses and s2c_data32 related arg checks.\r\n\r\nImho it would make sense to postpone this refactoring to a future PR, and also cover the recoverable module. Since the tests for the helper and the main signing functions would overlap  >90%, the tests should also be refactored to not copy all the tests with slightly different call signature.",
      "created_at": "2019-07-29T14:14:55Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r308253688",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308253688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308278875",
      "pull_request_review_id": 267843437,
      "id": 308278875,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODI3ODg3NQ==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#ifndef SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+#define SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to\n+ *  the nonce generated by noncefp, with `ndata=hash(s2c_data32, ndata)`.",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976076,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are we sure that there is no use case for `ndata` when you could also provide `s2c_data`? I am not familiar with uses of `ndata` in general, but if `s2c_data` alone is enough for all cases, then `ndata` could also be removed from `secp256k1_schnorrsig_sign`?\r\n\r\nI can remove `noncefp`, but we could also keep it so other functions could be allowed in the future without breaking API compatibility.",
      "created_at": "2019-07-29T14:59:20Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r308278875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308278875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308340949",
      "pull_request_review_id": 267920331,
      "id": 308340949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM0MDk0OQ==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#ifndef SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+#define SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to\n+ *  the nonce generated by noncefp, with `ndata=hash(s2c_data32, ndata)`.\n+ *  Returns: 1: signature created\n+ *           0: the nonce generation function failed, or the private key was invalid.\n+ *  Args:    ctx:  pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig:  pointer to an array where the signature will be placed (cannot be NULL)\n+ *   s2c_opening:  pointer to an secp256k1_s2c_opening structure which can be\n+ *                 NULL but is required to be not NULL if this signature creates\n+ *                 a sign-to-contract commitment (i.e. the `s2c_data` argument\n+ *                 is not NULL). nonce_is_negated is always 0 for ecdsa.",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 19,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976115,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed mention of it",
      "created_at": "2019-07-29T17:12:53Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r308340949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308340949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308341188",
      "pull_request_review_id": 267920651,
      "id": 308341188,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM0MTE4OA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976141,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "imho long lines are less readable, but consistency first :+1: fixed",
      "created_at": "2019-07-29T17:13:32Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r308341188",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308341188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308341368",
      "pull_request_review_id": 267920878,
      "id": 308341368,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM0MTM2OA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(\n+    const secp256k1_context *ctx,\n+    secp256k1_ecdsa_signature *signature,\n+    secp256k1_s2c_opening *s2c_opening,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    const unsigned char* s2c_data32,\n+    secp256k1_nonce_function noncefp,\n+    const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    secp256k1_sha256 sha;\n+    int ret = 0;\n+    int overflow = 0;\n+    int is_zero = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {\n+        /* Provide s2c_data32 and ndata (if not NULL) to the the nonce function\n+         * as additional data to derive the nonce from. If both pointers are\n+         * not NULL, they need to be hashed to get the nonce data 32 bytes.\n+         * Even if only s2c_data32 is not NULL, it's hashed because it should\n+         * be possible to derive nonces even if only a SHA256 commitment to the\n+         * data is known.  This is for example important in the\n+         * anti-nonce-sidechannel protocol.\n+         */\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, s2c_data32, 32);\n+        if (noncedata != NULL) {\n+            secp256k1_sha256_write(&sha, noncedata, 32);\n+        }\n+        secp256k1_sha256_finalize(&sha, ndata);\n+        noncedata = &ndata;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned char nonce32[32];\n+        unsigned int count = 0;\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n+            if (!ret) {\n+                break;\n+            }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            is_zero = secp256k1_scalar_is_zero(&non);\n+            if (!overflow && !is_zero) {\n+                if (s2c_data32 != NULL) {\n+                    secp256k1_gej nonce_pj;\n+                    secp256k1_ge nonce_p;\n+\n+                    /* Compute original nonce commitment/pubkey */\n+                    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &nonce_pj, &non);\n+                    secp256k1_ge_set_gej(&nonce_p, &nonce_pj);\n+                    secp256k1_pubkey_save(&s2c_opening->original_pubnonce, &nonce_p);\n+\n+                    /* Tweak nonce with s2c commitment. */\n+                    if (!secp256k1_ec_commit_seckey(ctx, nonce32, &s2c_opening->original_pubnonce, s2c_data32, 32)) {\n+                        return 0;\n+                    }\n+                    secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+                    is_zero = secp256k1_scalar_is_zero(&non);\n+                }\n+\n+                if (!overflow && !is_zero) {\n+                    if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {\n+                        break;\n+                    }\n+                }\n+            }\n+            count++;\n+        }\n+        memset(nonce32, 0, 32);\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n+    }\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(signature, &r, &s);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 117,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976150,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-07-29T17:13:56Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r308341368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308341368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308342469",
      "pull_request_review_id": 267922232,
      "id": 308342469,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM0MjQ2OQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(\n+    const secp256k1_context *ctx,\n+    secp256k1_ecdsa_signature *signature,\n+    secp256k1_s2c_opening *s2c_opening,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    const unsigned char* s2c_data32,\n+    secp256k1_nonce_function noncefp,\n+    const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    secp256k1_sha256 sha;\n+    int ret = 0;\n+    int overflow = 0;\n+    int is_zero = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {\n+        /* Provide s2c_data32 and ndata (if not NULL) to the the nonce function\n+         * as additional data to derive the nonce from. If both pointers are\n+         * not NULL, they need to be hashed to get the nonce data 32 bytes.\n+         * Even if only s2c_data32 is not NULL, it's hashed because it should\n+         * be possible to derive nonces even if only a SHA256 commitment to the\n+         * data is known.  This is for example important in the\n+         * anti-nonce-sidechannel protocol.\n+         */\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, s2c_data32, 32);\n+        if (noncedata != NULL) {\n+            secp256k1_sha256_write(&sha, noncedata, 32);\n+        }\n+        secp256k1_sha256_finalize(&sha, ndata);\n+        noncedata = &ndata;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned char nonce32[32];\n+        unsigned int count = 0;\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n+            if (!ret) {\n+                break;\n+            }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            is_zero = secp256k1_scalar_is_zero(&non);\n+            if (!overflow && !is_zero) {\n+                if (s2c_data32 != NULL) {\n+                    secp256k1_gej nonce_pj;\n+                    secp256k1_ge nonce_p;\n+\n+                    /* Compute original nonce commitment/pubkey */\n+                    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &nonce_pj, &non);\n+                    secp256k1_ge_set_gej(&nonce_p, &nonce_pj);\n+                    secp256k1_pubkey_save(&s2c_opening->original_pubnonce, &nonce_p);\n+\n+                    /* Tweak nonce with s2c commitment. */\n+                    if (!secp256k1_ec_commit_seckey(ctx, nonce32, &s2c_opening->original_pubnonce, s2c_data32, 32)) {\n+                        return 0;\n+                    }\n+                    secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+                    is_zero = secp256k1_scalar_is_zero(&non);\n+                }\n+\n+                if (!overflow && !is_zero) {\n+                    if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {\n+                        break;\n+                    }\n+                }\n+            }\n+            count++;\n+        }\n+        memset(nonce32, 0, 32);\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n+    }\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(signature, &r, &s);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(\n+    const secp256k1_context* ctx,\n+    const secp256k1_ecdsa_signature *sig,\n+    const unsigned char *data32,\n+    const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char b[32];\n+    secp256k1_scalar computed_r;\n+    secp256k1_scalar sigr, sigs;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */\n+    secp256k1_ecdsa_signature_load(ctx, &sigr, &sigs, sig);\n+\n+    secp256k1_pubkey_load(ctx, &commitment_ge, &commitment);",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 135,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976175,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed, though the negative branch cannot be hit I think, as `secp256k1_ec_commit()` always produces a valid pubkey.",
      "created_at": "2019-07-29T17:16:45Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r308342469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308342469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308345701",
      "pull_request_review_id": 267926369,
      "id": 308345701,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM0NTcwMQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(\n+    const secp256k1_context *ctx,\n+    secp256k1_ecdsa_signature *signature,\n+    secp256k1_s2c_opening *s2c_opening,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    const unsigned char* s2c_data32,\n+    secp256k1_nonce_function noncefp,\n+    const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    secp256k1_sha256 sha;\n+    int ret = 0;\n+    int overflow = 0;\n+    int is_zero = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {\n+        /* Provide s2c_data32 and ndata (if not NULL) to the the nonce function\n+         * as additional data to derive the nonce from. If both pointers are\n+         * not NULL, they need to be hashed to get the nonce data 32 bytes.\n+         * Even if only s2c_data32 is not NULL, it's hashed because it should\n+         * be possible to derive nonces even if only a SHA256 commitment to the\n+         * data is known.  This is for example important in the\n+         * anti-nonce-sidechannel protocol.\n+         */\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, s2c_data32, 32);\n+        if (noncedata != NULL) {\n+            secp256k1_sha256_write(&sha, noncedata, 32);\n+        }\n+        secp256k1_sha256_finalize(&sha, ndata);\n+        noncedata = &ndata;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned char nonce32[32];\n+        unsigned int count = 0;\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n+            if (!ret) {\n+                break;\n+            }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            is_zero = secp256k1_scalar_is_zero(&non);\n+            if (!overflow && !is_zero) {\n+                if (s2c_data32 != NULL) {\n+                    secp256k1_gej nonce_pj;\n+                    secp256k1_ge nonce_p;\n+\n+                    /* Compute original nonce commitment/pubkey */\n+                    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &nonce_pj, &non);\n+                    secp256k1_ge_set_gej(&nonce_p, &nonce_pj);\n+                    secp256k1_pubkey_save(&s2c_opening->original_pubnonce, &nonce_p);\n+\n+                    /* Tweak nonce with s2c commitment. */\n+                    if (!secp256k1_ec_commit_seckey(ctx, nonce32, &s2c_opening->original_pubnonce, s2c_data32, 32)) {\n+                        return 0;\n+                    }\n+                    secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+                    is_zero = secp256k1_scalar_is_zero(&non);\n+                }\n+\n+                if (!overflow && !is_zero) {\n+                    if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {\n+                        break;\n+                    }\n+                }\n+            }\n+            count++;\n+        }\n+        memset(nonce32, 0, 32);\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n+    }\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(signature, &r, &s);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(\n+    const secp256k1_context* ctx,\n+    const secp256k1_ecdsa_signature *sig,\n+    const unsigned char *data32,\n+    const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char b[32];\n+    secp256k1_scalar computed_r;\n+    secp256k1_scalar sigr, sigs;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */\n+    secp256k1_ecdsa_signature_load(ctx, &sigr, &sigs, sig);\n+\n+    secp256k1_pubkey_load(ctx, &commitment_ge, &commitment);\n+    secp256k1_fe_normalize(&commitment_ge.x);\n+    secp256k1_fe_get_b32(b, &commitment_ge.x);\n+    secp256k1_scalar_set_b32(&computed_r, b, NULL);",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 138,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976213,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, went with `memcmp`",
      "created_at": "2019-07-29T17:24:32Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r308345701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/308345701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/309190430",
      "pull_request_review_id": 268973447,
      "id": 309190430,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTE5MDQzMA==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#ifndef SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+#define SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to\n+ *  the nonce generated by noncefp, with `ndata=hash(s2c_data32, ndata)`.",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976076,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`ndata` is for giving additional information to the nonce function. Since it is hashed with `s2c_data` I don't see how you'd transmit usable information to the nonce function in that way. `ndata` shouldn't be removed from `schnorrsig_sign` because `schnorrsig_sign` can be used with other nonce functions than just the default. Imo, simpler is better than optimizing for some unknown future usecase.",
      "created_at": "2019-07-31T12:26:24Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r309190430",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/309190430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/309193824",
      "pull_request_review_id": 268977907,
      "id": 309193824,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTE5MzgyNA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976594,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> wouldn't this nullify the purpose of an experimental module and increase the barrier to merge?\r\n\r\nNo because the point is that people can use sign-to-contract only if they pass the `--enable-experimental-modules` option. That the helper doesn't change ecdsa signing if s2c_data is not set is much easier to check in review than having to diff ecdsa_sign and ecdsa_s2c_sign.\r\n\r\n@sipa Summarizing above discussion, do you prefer copying the ecdsa code into the ecdsa_s2c module or should we make the main ecdsa function accept `s2c_data` but don't expose the argument in secp256k1.h - only in secp256k1_ecdsa_sign_to_contract?",
      "created_at": "2019-07-31T12:34:41Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r309193824",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/309193824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/320694496",
      "pull_request_review_id": 283531549,
      "id": 320694496,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDY5NDQ5Ng==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976594,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just to give a quick update: I have been a bit busy the past weeks, but I still intend to move this to production on the bitbox02 (prototype already working).\r\n\r\nI will happily refactor the current code like you suggested, then we can compare. I expect to be able to do this two weeks from now.\r\n\r\nIn the meantime, I'd still be eager to hear @sipa's opinion on how to best structure this.",
      "created_at": "2019-09-04T10:51:50Z",
      "updated_at": "2019-10-08T16:30:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r320694496",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/320694496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/332613869",
      "pull_request_review_id": 298895301,
      "id": 332613869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjYxMzg2OQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976594,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I rebased this PR, and made PR to compare both alternatives: https://github.com/bitcoin-core/secp256k1/pull/669",
      "created_at": "2019-10-08T16:33:46Z",
      "updated_at": "2019-10-08T16:33:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r332613869",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/332613869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/333095470",
      "pull_request_review_id": 299518992,
      "id": 333095470,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA5NTQ3MA==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#ifndef SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+#define SECP256K1_ECDSA_ANTI_COVERT_CHANNEL_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to\n+ *  the nonce generated by noncefp, with `ndata=hash(s2c_data32, ndata)`.",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "18cb43550307ea1846c873531351ef05a8f28e09",
      "original_commit_id": "5408a2f7ba850fe744ecb5f29f0dc1f9d18f733f",
      "in_reply_to_id": 307976076,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropped the `noncefp` and `ndata` params from the function in the alternative [here](https://github.com/bitcoin-core/secp256k1/pull/669). Can also do it for this version if we choose this alternative over the other.",
      "created_at": "2019-10-09T15:53:51Z",
      "updated_at": "2019-10-09T15:53:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r333095470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/333095470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/637"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    }
  ]
}