{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134",
    "id": 1031997216,
    "node_id": "PR_kwDOAP4Jqs49gwcg",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1134.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1134.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/569c06f2af7f94f452855fe86117c1713a35e104",
    "number": 1134,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Add an experimental batch module",
    "user": {
      "login": "siv2r",
      "id": 56887198,
      "node_id": "MDQ6VXNlcjU2ODg3MTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siv2r",
      "html_url": "https://github.com/siv2r",
      "followers_url": "https://api.github.com/users/siv2r/followers",
      "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
      "organizations_url": "https://api.github.com/users/siv2r/orgs",
      "repos_url": "https://api.github.com/users/siv2r/repos",
      "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/siv2r/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "### Overview\r\n\r\nThis PR adds support for batch verifying Schnorr signatures and tweaked x-only public key checks. It is based on the work of @jonasnick in #760. \r\n\r\n### Batch Verification\r\n\r\nThis implementation does not strictly follow the [BIP340 batch verification spec](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#batch-verification). The API design is loosely based on this suggestion: https://github.com/bitcoin-core/secp256k1/pull/760#issuecomment-809242311. Prior development discussion of this PR can be found in siv2r/secp256k1#2.\r\n\r\n### Speed Up\r\n - batch verifying Schnorr signatures is **_20% faster_** - [graph here](https://github.com/bitcoin-core/secp256k1/pull/1134/files#diff-583efe34fcab54bf7e5296bf65e522adc2345b3580e2a50ad5cccbd91dd82032)\r\n - batch verifying tweak pubkey checks is **_50% faster_** - [graph here](https://github.com/bitcoin-core/secp256k1/pull/1134/files#diff-1e73547c6cfbb18febec26224f0389d8ed1893ec7883f485a97caa583609b16b)\r\n\r\nFixes #1087",
    "labels": [
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      },
      {
        "id": 4975389731,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI5sIw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/performance",
        "name": "performance",
        "description": "",
        "color": "DE3CCC",
        "default": false
      }
    ],
    "created_at": "2022-08-21T08:55:46Z",
    "updated_at": "2025-10-20T15:31:46Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "siv2r:batch-verify-interface",
      "ref": "batch-verify-interface",
      "sha": "569c06f2af7f94f452855fe86117c1713a35e104",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 385684881,
        "node_id": "MDEwOlJlcG9zaXRvcnkzODU2ODQ4ODE=",
        "name": "secp256k1",
        "full_name": "siv2r/secp256k1",
        "owner": {
          "login": "siv2r",
          "id": 56887198,
          "node_id": "MDQ6VXNlcjU2ODg3MTk4",
          "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/siv2r",
          "html_url": "https://github.com/siv2r",
          "followers_url": "https://api.github.com/users/siv2r/followers",
          "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
          "organizations_url": "https://api.github.com/users/siv2r/orgs",
          "repos_url": "https://api.github.com/users/siv2r/repos",
          "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/siv2r/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/siv2r/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/siv2r/secp256k1",
        "archive_url": "https://api.github.com/repos/siv2r/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/siv2r/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/siv2r/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/siv2r/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/siv2r/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/siv2r/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/siv2r/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/siv2r/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/siv2r/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/siv2r/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/siv2r/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/siv2r/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/siv2r/secp256k1/events",
        "forks_url": "https://api.github.com/repos/siv2r/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/siv2r/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/siv2r/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/siv2r/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/siv2r/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/siv2r/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/siv2r/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/siv2r/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/siv2r/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/siv2r/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/siv2r/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/siv2r/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/siv2r/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/siv2r/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/siv2r/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/siv2r/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:siv2r/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/siv2r/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/siv2r/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/siv2r/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/siv2r/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/siv2r/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/siv2r/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/siv2r/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/siv2r/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/siv2r/secp256k1/hooks",
        "svn_url": "https://github.com/siv2r/secp256k1",
        "language": "C",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 12942,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-19T14:08:32Z",
        "created_at": "2021-07-13T17:30:10Z",
        "updated_at": "2025-08-10T15:11:22Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "e523e4f90e1b1c0fba49cd8a08016e1a8dff9232",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 1094,
        "stargazers_count": 2322,
        "watchers_count": 2322,
        "size": 12733,
        "default_branch": "master",
        "open_issues_count": 153,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-17T07:09:52Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2025-10-19T19:51:47Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 2272,
    "deletions": 75,
    "changed_files": 38,
    "commits": 11,
    "review_comments": 25,
    "comments": 11
  },
  "events": [
    {
      "event": "mentioned",
      "id": 7227424167,
      "node_id": "MEE_lADOAP4Jqs5QMZmPzwAAAAGuyb2n",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7227424167",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-21T08:55:47Z"
    },
    {
      "event": "subscribed",
      "id": 7227424170,
      "node_id": "SE_lADOAP4Jqs5QMZmPzwAAAAGuyb2q",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7227424170",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-21T08:55:47Z"
    },
    {
      "event": "commented",
      "id": 1221503112,
      "node_id": "IC_kwDOAP4Jqs5IzqiI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1221503112",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-21T09:02:36Z",
      "updated_at": "2022-08-23T08:24:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This implementation does not strictly follow the [BIP340 batch verification spec](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#batch-verification).\r\n\r\nFor example,\r\n- the random numbers (or randomizers) aren’t generated by passing a seed (hash of all inputs) to CSPRNG\r\n- allows mixing of schnorrsig and tweak checks\r\n- uses the tag *“BIP0340/batch”* for initializing the sha256 obj (not in the BIP340 specs)\r\n\r\n### Alternative Design Options\r\n\r\n- batch module design\r\n    - the current code has: (new batch module)\r\n        - `create`, `destroy`, and `verify` APIs in the batch module\r\n        - `batch_add_*` APIs in schnorrsig and extrakeys modules (with `#ifdef ENABLE_MODULE_BATCH`)\r\n    - alternate option 1: (new batch module)\r\n        - place the `batch_add_*` APIs in the batch module (with schnorrsig and extrakeys header guards)\r\n    - alternate option 2: (no module)\r\n        - place `create`, `destroy`, and `verify` in `src/secp256k1.c`\r\n        - place `batch_add_*` APIs in schnorrsig and extrakeys modules\r\n    - relevant discussions: \r\n        - https://github.com/siv2r/secp256k1/pull/2#issuecomment-1134938298\r\n        - https://github.com/siv2r/secp256k1/pull/2#issuecomment-1162522289\r\n- Delayed randomizer generation\r\n    - the current code generates a randomizer just after a user enters input (in `_batch_add_*`)\r\n    - we could instead generate them (in `batch_verify`) after the user enters all their input\r\n    - Pros: follows bip340 specs. Cons: consumes more memory.\r\n    - more info: https://github.com/bitcoin-core/secp256k1/issues/1087#issuecomment-1067276801 and [here](https://siv2r.notion.site/siv2r/Batch-Verification-Interface-Proposal-4b41080bd3de4c59a37ad9279d562155#898b8bcc5dc64aa994e5accaa5c3ab2c)\r\n- Use BLAKE256 instead of SHA256 for generating randomizers (to improve speed).\r\n- In `_batch_create`, we could:\r\n    - Get memory size instead of `max_terms`.\r\n    - Provide pre-determined sizes (small, medium, and large) instead of `max_terms`.\r\n        - Better test coverage?",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-1221503112",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "commented",
      "id": 1221503310,
      "node_id": "IC_kwDOAP4Jqs5IzqlO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1221503310",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-21T09:03:50Z",
      "updated_at": "2022-08-21T09:03:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "### Questions\r\n- Streaming batch API (this PR) vs Single call batch API?\r\n- Is transparent verification required?\r\n    - the current code implements transparent verification (inside `batch_add_*` APIs)\r\n    - without transparent verification, the user needs to check for space in the batch before calling `_batch_add` APIs:\r\n    ```c\r\n    if (batch_enough_space_for_schnorrsig) {\r\n      batch_add_schnorrsig()\r\n    }\r\n    ```\r\n- On an empty batch, Should `_batch_verify` return 0 or 1?\r\n    - the current code returns 1\r\n        - simple implementation\r\n    - if we want to return 0\r\n        - needs an extra param in batch to avoid ANDing the result with its initial value\r\n        - provides better security?\r\n- `xonly_pubkey_tweak_add_check` recommends `ctx` to be initialized for verification, but it can work even if `ctx` is initialized as none.\r\n    - Since `batch_add_tweak_xonlypub_check` is based on `tweak_add_check`, should it also recommend that `ctx` be initialized for verification?\r\n    - Can it recommend that `ctx` be initialized for none instead?\r\n- A better name for `secp256k1_batch_usable`?\r\n    - the current name is confusing\r\n    - here, *“usable”* means if the batch can be used by the `batch_add_*` functions",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-1221503310",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7227524052,
      "node_id": "HRFPE_lADOAP4Jqs5QMZmPzwAAAAGuy0PU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7227524052",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "commit_url": "https://api.github.com/repos/siv2r/secp256k1/commits/eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "created_at": "2022-08-21T10:33:59Z"
    },
    {
      "event": "commented",
      "id": 1221519090,
      "node_id": "IC_kwDOAP4Jqs5Izuby",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1221519090",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-21T10:35:46Z",
      "updated_at": "2022-08-21T10:35:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "In `extrakeys/bench_impl.h`, cast pointers to `(void *)` before freeing to avoid MSVC warning.",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-1221519090",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "reviewed",
      "id": 1082558327,
      "node_id": "PRR_kwDOAP4Jqs5Ahod3",
      "url": null,
      "actor": null,
      "commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2022-08-23T17:11:47Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-1082558327",
      "submitted_at": "2022-08-23T17:11:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
    },
    {
      "event": "reviewed",
      "id": 1083948472,
      "node_id": "PRR_kwDOAP4Jqs5Am724",
      "url": null,
      "actor": null,
      "commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2022-08-24T14:43:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This implementation does not strictly follow the BIP340 batch verification spec. [...] the random numbers (or randomizers) aren’t generated by passing a seed (hash of all inputs) to CSPRNG\r\n\r\nThe [security argument](https://github.com/sipa/bips/issues/219#issuecomment-815575754) for batch verification should relatively easily translate to the approach in this PR.\r\n\r\n> Is transparent verification required?\r\n\r\nI initially wasn't a fan of transparent verification because developers generally want to know how long a certain function call takes and don't want to be surprised by some `batch_add` calls taking much longer than others. But I changed my mind on this.\r\n\r\nThe batch verification API right now is used as follows:\r\n```\r\nfor (i = 0; i < N_SIGS; i++) {\r\n    if(!batch_usable(batch) || !batch_add_schnorrsig(batch, sig[i], msg[i], sizeof(msg[i]), &pk)) {\r\n        return 0;\r\n    }\r\n}\r\nif(!batch_verify(ctx, batch)) {\r\n    return 0;\r\n}\r\n```\r\n\r\nWithout TV, then one option is to have the user create a batch that is large enough. Of course that's not alway possible because the batch can get larger than the available memory. Moreover, this would require adding an API that, given a number of schnorrsigs and tweaks (and more in the future) returns the size of the required batch. That seems way more complicated than TV.\r\n\r\nIf there's no TV and the batch is not guaranteed to be large enough, then users need to essentially reimplement something like transparent verification:\r\n```\r\nfor (i = 0; i < N_SIGS; i++) {\r\n    if(!schnorrsig_batch_has_space(batch)) {\r\n        if(!batch_verify(batch)) {\r\n            return 0;\r\n        }\r\n    }\r\n    if (!batch_add_schnorrsig(batch, sig[i], msg[i], sizeof(msg[i]), &pk)) {\r\n        return 0;\r\n    }\r\n}\r\nif(!batch_verify(ctx, batch)) {\r\n    return 0;\r\n}\r\n```\r\n\r\n1. This is more code compared to having TV built into `batch_add`.\r\n2. `*_batch_has_space` is specific to whatever you're trying to add to the batch, i.e., we would also have to add `tweak_has_space`, for example.\r\n3. The `batch_usable` function in the current implementation (with TV) only allows for earlier aborts and is not essential (unless you want to determine if a `batch_add` failed because its input is obviously malformed or because the previous `batch_add` triggered a `batch_verify` that failed).\r\n4. If users don't want to use TV (for whatever reason), then they don't have to - even in the current implementation. This requires counting the terms that have been added to the batch and verifying before it's full (perhaps we can make this simpler).\r\n\r\n> xonly_pubkey_tweak_add_check recommends ctx to be initialized for verification, but it can work even if ctx is initialized as none. [...] Since batch_add_tweak_xonlypub_check is based on tweak_add_check, should it also recommend that ctx be initialized for verification?\r\n\r\nI don't think so. #1126 removes \"initialized for verification\" from the API docs of `xonly_pubkey_tweak_add_check`. For consistency it would be better if you'd remove \"(can be initialized for none)\" from the API doc.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-1083948472",
      "submitted_at": "2022-08-24T14:43:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
    },
    {
      "event": "commented",
      "id": 1226112337,
      "node_id": "IC_kwDOAP4Jqs5JFP1R",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1226112337",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T18:54:59Z",
      "updated_at": "2022-08-24T18:54:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "I haven't had a closer look yet but I agree with @jonasnick's comments about TV. ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-1226112337",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "mentioned",
      "id": 7253515396,
      "node_id": "MEE_lADOAP4Jqs5QMZmPzwAAAAGwV9yE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7253515396",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T18:54:59Z"
    },
    {
      "event": "subscribed",
      "id": 7253515410,
      "node_id": "SE_lADOAP4Jqs5QMZmPzwAAAAGwV9yS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7253515410",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T18:54:59Z"
    },
    {
      "event": "commented",
      "id": 1364730862,
      "node_id": "IC_kwDOAP4Jqs5RWCPu",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1364730862",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-25T19:54:27Z",
      "updated_at": "2022-12-25T19:54:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "@siv2r Are you still working on this topic? Do you plan to address @jonasnick 's comments?",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-1364730862",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "mentioned",
      "id": 8108717213,
      "node_id": "MEE_lADOAP4Jqs5QMZmPzwAAAAHjUTSd",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8108717213",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-25T19:54:28Z"
    },
    {
      "event": "subscribed",
      "id": 8108717214,
      "node_id": "SE_lADOAP4Jqs5QMZmPzwAAAAHjUTSe",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8108717214",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-25T19:54:28Z"
    },
    {
      "event": "mentioned",
      "id": 8108717215,
      "node_id": "MEE_lADOAP4Jqs5QMZmPzwAAAAHjUTSf",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8108717215",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-25T19:54:28Z"
    },
    {
      "event": "subscribed",
      "id": 8108717216,
      "node_id": "SE_lADOAP4Jqs5QMZmPzwAAAAHjUTSg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8108717216",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-25T19:54:28Z"
    },
    {
      "event": "commented",
      "id": 1364933417,
      "node_id": "IC_kwDOAP4Jqs5RWzsp",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1364933417",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-26T06:34:40Z",
      "updated_at": "2022-12-26T06:34:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fjahr, this PR needs review from other contributors regarding the (batch API) design decision made here. The https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-1083948472 comment showed its support for the \"Transparent Verification\" feature, which was implemented.\r\n\r\nIIRC, two documentation changes are required (at the time of writing):\r\n- remove \"initialized for verification\" from the `batch_add_tweak_xonlypub_check` doc.\r\n- document that `batch_verify_1` is slower than `schnorrsig_verify` (see [#1134 (comment)](https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r952908842)).\r\n\r\nI avoided making these changes immediately to keep the commit history clean for reviewers. I would be happy to work on any required changes after it gets enough review.",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-1364933417",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "mentioned",
      "id": 8109873535,
      "node_id": "MEE_lADOAP4Jqs5QMZmPzwAAAAHjYtl_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8109873535",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-26T06:34:40Z"
    },
    {
      "event": "subscribed",
      "id": 8109873536,
      "node_id": "SE_lADOAP4Jqs5QMZmPzwAAAAHjYtmA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8109873536",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-26T06:34:40Z"
    },
    {
      "event": "reviewed",
      "id": 1905035503,
      "node_id": "PRR_kwDOAP4Jqs5xjIjv",
      "url": null,
      "actor": null,
      "commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-02-28T00:02:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have opened a draft PR for using this in bitcoin core: https://github.com/bitcoin/bitcoin/pull/29491\r\n\r\nHere is a rebased branch of the code that I am using: https://github.com/fjahr/secp256k1/tree/pr1134-rebase-2024\r\n\r\nI hope this can create some new interest and motivate people to review here as well.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-1905035503",
      "submitted_at": "2024-02-28T00:02:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
    },
    {
      "event": "labeled",
      "id": 11952565797,
      "node_id": "LE_lADOAP4Jqs5QMZmPzwAAAALIba4l",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11952565797",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T14:29:06Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    },
    {
      "event": "labeled",
      "id": 11952565806,
      "node_id": "LE_lADOAP4Jqs5QMZmPzwAAAALIba4u",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11952565806",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T14:29:06Z",
      "label": {
        "name": "performance",
        "color": "DE3CCC"
      }
    },
    {
      "event": "reviewed",
      "id": 1906554262,
      "node_id": "PRR_kwDOAP4Jqs5xo7WW",
      "url": null,
      "actor": null,
      "commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-02-28T15:21:38Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-1906554262",
      "submitted_at": "2024-02-28T15:21:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
    },
    {
      "event": "commented",
      "id": 2515648899,
      "node_id": "IC_kwDOAP4Jqs6V8cGD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2515648899",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T22:07:19Z",
      "updated_at": "2024-12-03T22:07:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Here is a rebased branch of the code that I am using: https://github.com/fjahr/secp256k1/tree/pr1134-rebase-2024\r\n\r\nFWIW, I have updated the rebased code recently and also added the changes necessary to build the module with cmake.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-2515648899",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "referenced",
      "id": 16944354493,
      "node_id": "REFE_lADOAP4Jqs5QMZmPzwAAAAPx9lS9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16944354493",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b9c281011b77e5b4899bdf835767e45c4fab96e1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c281011b77e5b4899bdf835767e45c4fab96e1",
      "created_at": "2025-03-23T13:03:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18466274949,
      "node_id": "HRFPE_lADOAP4Jqs5QMZmPzwAAAARMrP6F",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/18466274949",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "commit_url": "https://api.github.com/repos/siv2r/secp256k1/commits/410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "created_at": "2025-07-04T07:35:09Z"
    },
    {
      "event": "commented",
      "id": 3034852907,
      "node_id": "IC_kwDOAP4Jqs605C4r",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3034852907",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T07:41:50Z",
      "updated_at": "2025-07-04T07:41:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Just updated the PR on top of the current master and added a CMake build option. Planning to work on Pippenger next. Would appreciate any reviews in the meantime. I’ll fix the failed CI checks soon.",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-3034852907",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "reviewed",
      "id": 2991555532,
      "node_id": "PRR_kwDOAP4Jqs6yT4PM",
      "url": null,
      "actor": null,
      "commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-06T19:37:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the update @siv2r! Leaving a few comments from a superficial read-through. I will integrate the latest code into the Bitcoin Core PR and take a deeper look soon.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-2991555532",
      "submitted_at": "2025-07-06T19:37:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGExMWNlMzAxMzRmZTI1ODA5ODA0ZWQ0OTMxN2FhZWNhYTMyMzExNjc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a11ce30134fe25809804ed49317aaecaa3231167",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a11ce30134fe25809804ed49317aaecaa3231167",
      "tree": {
        "sha": "40b7ddf864e21906ae04d28adb5c4cec1050eb6d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/40b7ddf864e21906ae04d28adb5c4cec1050eb6d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e523e4f90e1b1c0fba49cd8a08016e1a8dff9232",
          "sha": "e523e4f90e1b1c0fba49cd8a08016e1a8dff9232",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e523e4f90e1b1c0fba49cd8a08016e1a8dff9232"
        }
      ],
      "message": "batch: Initialize an experimental batch module\n\nThis commit adds the foundational configuration, build scripts,\nand an initial structure for experimental batch module.",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:03Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-06-30T12:30:06Z"
      },
      "sha": "a11ce30134fe25809804ed49317aaecaa3231167"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGQ5Y2I1N2ZjMTAxN2Q0ZTMwZGVkYzMxZDBmZjgzNTJhMGZmNDlhZWE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d9cb57fc1017d4e30dedc31d0ff8352a0ff49aea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d9cb57fc1017d4e30dedc31d0ff8352a0ff49aea",
      "tree": {
        "sha": "062855e71092bd4cf37dd8b41aa535ae56e5ff9c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/062855e71092bd4cf37dd8b41aa535ae56e5ff9c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a11ce30134fe25809804ed49317aaecaa3231167",
          "sha": "a11ce30134fe25809804ed49317aaecaa3231167",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a11ce30134fe25809804ed49317aaecaa3231167"
        }
      ],
      "message": "batch: Add create and destroy APIs\n\nThis commit adds the batch_create and batch_destroy APIs.\nRelevant Links:\n1. batch_scratch_size allocation formula is taken from bench ecmult:\nhttps://github.com/bitcoin-core/secp256k1/blob/694ce8fb2d1fd8a3d641d7c33705691d41a2a860/src/bench_ecmult.c#L312.\n2. aux_rand16 param in batch_create enables synthetic randomness for\nrandomizer generation: https://github.com/sipa/bips/issues/204.",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:03Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-06-30T13:10:45Z"
      },
      "sha": "d9cb57fc1017d4e30dedc31d0ff8352a0ff49aea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGUwMWZjZGFlOTVkOTZhMGU4YTg3MDkyZDJhNGM4MTFmYTY0ZWFlYjI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e01fcdae95d96a0e8a87092d2a4c811fa64eaeb2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e01fcdae95d96a0e8a87092d2a4c811fa64eaeb2",
      "tree": {
        "sha": "68c194134e8c140c8243db725c9f6b4a53e350e4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/68c194134e8c140c8243db725c9f6b4a53e350e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d9cb57fc1017d4e30dedc31d0ff8352a0ff49aea",
          "sha": "d9cb57fc1017d4e30dedc31d0ff8352a0ff49aea",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d9cb57fc1017d4e30dedc31d0ff8352a0ff49aea"
        }
      ],
      "message": "batch, ecmult: Add batch_verify and refactor strauss_batch\n\nThis commit refactors ecmult_strauss_batch and adds _batch_verify API.\n\nThe current ecmult_strauss_batch only works on empty scratch space. To\nmake batch_verify compatible, we need ecmult_strauss_batch to support a\nscratch space pre-filled with scalars and points. So, it was refactored\nto do exactly that.\n\nThe batch_verify API always uses the Strauss algorithm. It doesn't switch\nto Pippenger (unlike ecmult_multi_var). ecmult_pippenger_batch represents\npoints as secp256k1_ge whereas ecmult_strauss_batch represents points as\nsecp256k1_gej. This makes supporting both Pippenger and Strauss difficult\n(at least with the current batch object design). Hence, batch_verify only\nsupports Strauss for simplicity.",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:03Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-06-30T14:59:04Z"
      },
      "sha": "e01fcdae95d96a0e8a87092d2a4c811fa64eaeb2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGYxYmY5OTM3OThlNmY4NDQ2YzFiZjBlYTUwNDQ1ZDQ0YzQ0NDc4Mzg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f1bf993798e6f8446c1bf0ea50445d44c4447838",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f1bf993798e6f8446c1bf0ea50445d44c4447838",
      "tree": {
        "sha": "aeb757d598b26d8d5797d3cd12c2fac952b0ff0c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/aeb757d598b26d8d5797d3cd12c2fac952b0ff0c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e01fcdae95d96a0e8a87092d2a4c811fa64eaeb2",
          "sha": "e01fcdae95d96a0e8a87092d2a4c811fa64eaeb2",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e01fcdae95d96a0e8a87092d2a4c811fa64eaeb2"
        }
      ],
      "message": "batch: Add batch_add_* APIs\n\nThis commit adds the batch APIs:\n\n1. batch_add_schnorrsig\n    Adds a Schnorr signature to the batch.\n\n2. batch_add_xonlypub_tweak_check\n\tAdds a tweaked x-only pubkey check to the batch.\n\n3. batch_usable\n\tChecks if a batch can be used by _batch_add_* APIs.\n\n**Side Note:**\nExposing batch_add_schnorrsig in the secp256k1_schnorrsig.h header\nfile (with batch module header guards) will force the user to define\nENABLE_MODULE_BATCH during their code compilation. Hence, it is in a\nstandalone secp256k1_schnorrsig_batch.h header file. A similar argument\ncould be made for batch_add_xonlypub_tweak_check.",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:03Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-06-30T16:39:23Z"
      },
      "sha": "f1bf993798e6f8446c1bf0ea50445d44c4447838"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGZmOWVhM2JkZGRjNWJjNzNhZmYxOWM4MzBlZjhiMjhmNjFlOWFmOWQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ff9ea3bdddc5bc73aff19c830ef8b28f61e9af9d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ff9ea3bdddc5bc73aff19c830ef8b28f61e9af9d",
      "tree": {
        "sha": "1d6769f7602bb6a0e118c796c0a1ae23146e5b8d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1d6769f7602bb6a0e118c796c0a1ae23146e5b8d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f1bf993798e6f8446c1bf0ea50445d44c4447838",
          "sha": "f1bf993798e6f8446c1bf0ea50445d44c4447838",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f1bf993798e6f8446c1bf0ea50445d44c4447838"
        }
      ],
      "message": "batch: Add example\n\nThis commit adds an example C program using the batch API.\n\nGNU Autotools and CMake will compile this example only if both batch and\nschnorrsig modules are enabled.",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:03Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-06-30T17:05:28Z"
      },
      "sha": "ff9ea3bdddc5bc73aff19c830ef8b28f61e9af9d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGIyNThiNzRkMjk0NWNiNGI3NzA4MzZmMzM2MTgzOTQ2OTJjMmJjYWE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b258b74d2945cb4b770836f33618394692c2bcaa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b258b74d2945cb4b770836f33618394692c2bcaa",
      "tree": {
        "sha": "a80f7f122685e33f0fec3e55aa275d5177aef005",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a80f7f122685e33f0fec3e55aa275d5177aef005"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ff9ea3bdddc5bc73aff19c830ef8b28f61e9af9d",
          "sha": "ff9ea3bdddc5bc73aff19c830ef8b28f61e9af9d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ff9ea3bdddc5bc73aff19c830ef8b28f61e9af9d"
        }
      ],
      "message": "batch,ecmult: Add tests for core batch APIs and strauss_batch refactor\n\nThis commit adds the following tests:\n\t1. GitHub workflow\n\t2. Batch API tests (ordered)\n\t3. Tagged SHA256 test\n\t4. BIP340 test vectors: https://github.com/bitcoin/bips/blob/master/bip-0340/test-vectors.csv\n\t5. Large random test for `strauss_batch` refactor",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:03Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-07-02T11:04:24Z"
      },
      "sha": "b258b74d2945cb4b770836f33618394692c2bcaa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDA4NmQxYjZiZTFlMzEzOGM2M2IzNTlhYzEzNDQ4ZjkxY2U1NTUyNWE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/086d1b6be1e3138c63b359ac13448f91ce55525a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/086d1b6be1e3138c63b359ac13448f91ce55525a",
      "tree": {
        "sha": "41d0fd024ba649869c62322a8487803c531dc144",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/41d0fd024ba649869c62322a8487803c531dc144"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b258b74d2945cb4b770836f33618394692c2bcaa",
          "sha": "b258b74d2945cb4b770836f33618394692c2bcaa",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b258b74d2945cb4b770836f33618394692c2bcaa"
        }
      ],
      "message": "batch: Add tests for batch_add_* APIs\n\nThis commit adds the following tests:\n\t1. Random bitflip test for randomizer generating function\n\t2. Random bitflip in Schnorr Signature (batch_add_schnorrsig test)\n\t3. NULL arg tests (for both batch_add APIs)",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:03Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-07-02T12:39:58Z"
      },
      "sha": "086d1b6be1e3138c63b359ac13448f91ce55525a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDAwYzY5NTBhNjY2OWRiOTRjZjQ0Y2I5ZTIzODVjNzFhNDJiMDdkODQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/00c6950a6669db94cf44cb9e2385c71a42b07d84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/00c6950a6669db94cf44cb9e2385c71a42b07d84",
      "tree": {
        "sha": "d6808f9e5815a524d6fa93ed49080308bdfbc417",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d6808f9e5815a524d6fa93ed49080308bdfbc417"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/086d1b6be1e3138c63b359ac13448f91ce55525a",
          "sha": "086d1b6be1e3138c63b359ac13448f91ce55525a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/086d1b6be1e3138c63b359ac13448f91ce55525a"
        }
      ],
      "message": "batch, extrakeys: Add benchmarks\n\nThis commit adds benchmarks for:\n    1. Batch verifying Schnorr signatures\n    2. Batch verifying tweaked pubkey checks\n    3. Normal tweaked pubkey check in extrakeys module\n\nFor batch verify benchmark, the number of sigs (or checks) in the batch\nvaries from 1 to SECP256K1_BENCH_ITERS with a 20% increment.",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:04Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-07-03T09:27:30Z"
      },
      "sha": "00c6950a6669db94cf44cb9e2385c71a42b07d84"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGJmODE2OTk1NGNkODZlNDY1ZmIzNTZjYTkwNTdhMzViYWRmMmFmNGE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bf8169954cd86e465fb356ca9057a35badf2af4a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bf8169954cd86e465fb356ca9057a35badf2af4a",
      "tree": {
        "sha": "8a266a16444d83842e78fe8015a7364a1007070e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/8a266a16444d83842e78fe8015a7364a1007070e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/00c6950a6669db94cf44cb9e2385c71a42b07d84",
          "sha": "00c6950a6669db94cf44cb9e2385c71a42b07d84",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/00c6950a6669db94cf44cb9e2385c71a42b07d84"
        }
      ],
      "message": "batch: Generate speedup graphs\n\nThis commit generates two semi-log graphs that visualize the batch\nverification speed up over single verification (y-axis) wrt the number\nof signatures (or tweak checks) in the batch (x-axis). The input data\npoints are taken from the batch verify benchmark.\n\nGNU plot was used to generate these graphs (plot.gp file). The instructions\nto reproduce these graphs (on your local machine) are given in\ndoc/speedup-batch.md file.\n\nThe value of `STRAUSS_MAX_TERMS_PER_BATCH` was calculated (approx) from\nthe generated graphs.\nRelevant discussion: https://github.com/siv2r/secp256k1/pull/2#issuecomment-1211585236",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:04Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-07-03T16:05:10Z"
      },
      "sha": "bf8169954cd86e465fb356ca9057a35badf2af4a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDhkNWNmODJmMmM4YmUxMjUyNzg0MDg5ZDBhNmY1M2VkNTY5ZTkyYzY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8d5cf82f2c8be1252784089d0a6f53ed569e92c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8d5cf82f2c8be1252784089d0a6f53ed569e92c6",
      "tree": {
        "sha": "304d856471242636d0f5715c4aed8e567cddbce3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/304d856471242636d0f5715c4aed8e567cddbce3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bf8169954cd86e465fb356ca9057a35badf2af4a",
          "sha": "bf8169954cd86e465fb356ca9057a35badf2af4a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bf8169954cd86e465fb356ca9057a35badf2af4a"
        }
      ],
      "message": "test: fix ci failures",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-08-10T15:10:04Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-07-29T16:47:08Z"
      },
      "sha": "8d5cf82f2c8be1252784089d0a6f53ed569e92c6"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19077019814,
      "node_id": "HRFPE_lADOAP4Jqs5QMZmPzwAAAARxFDim",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19077019814",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8d5cf82f2c8be1252784089d0a6f53ed569e92c6",
      "commit_url": "https://api.github.com/repos/siv2r/secp256k1/commits/8d5cf82f2c8be1252784089d0a6f53ed569e92c6",
      "created_at": "2025-08-10T17:29:51Z"
    },
    {
      "event": "commented",
      "id": 3253838971,
      "node_id": "IC_kwDOAP4Jqs7B8aR7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3253838971",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T13:51:41Z",
      "updated_at": "2025-09-07T15:05:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "@siv2r I think you can drop the experimental status of the module from this PR. The flag is signalling potential API instability and while that is certainly still the case within this PR now, I think this will not be the case anymore once this PR is in a position to be merged. Once it is merged, we might start using it in Bitcoin Core soon after and dealing with the experimental flag would be annoying in this case and arguably once the code here is used for block validation it should probably not be considered experimental anymore. For comparison: The silent payments module PR also doesn't mark the module experimental at the moment.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-3253838971",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "mentioned",
      "id": 19505537820,
      "node_id": "MEE_lADOAP4Jqs5QMZmPzwAAAASKnuMc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19505537820",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T13:51:42Z"
    },
    {
      "event": "subscribed",
      "id": 19505537852,
      "node_id": "SE_lADOAP4Jqs5QMZmPzwAAAASKnuM8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19505537852",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T13:51:42Z"
    },
    {
      "event": "commented",
      "id": 3254655783,
      "node_id": "IC_kwDOAP4Jqs7B_hsn",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3254655783",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T17:10:26Z",
      "updated_at": "2025-09-04T17:10:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "I agree. I was wondering whether it should be removed or not, and your points make a lot of sense. Will remove it.",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-3254655783",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDU2OWMwNmYyYWY3Zjk0ZjQ1Mjg1NWZlODYxMTdjMTcxM2EzNWUxMDQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/569c06f2af7f94f452855fe86117c1713a35e104",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/569c06f2af7f94f452855fe86117c1713a35e104",
      "tree": {
        "sha": "7f279a6f62bc416250cefb457a6e3febfd5eafd4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7f279a6f62bc416250cefb457a6e3febfd5eafd4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8d5cf82f2c8be1252784089d0a6f53ed569e92c6",
          "sha": "8d5cf82f2c8be1252784089d0a6f53ed569e92c6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8d5cf82f2c8be1252784089d0a6f53ed569e92c6"
        }
      ],
      "message": "batch: remove experimental status",
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-09-19T14:04:28Z"
      },
      "author": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2025-09-19T14:04:28Z"
      },
      "sha": "569c06f2af7f94f452855fe86117c1713a35e104"
    },
    {
      "event": "commented",
      "id": 3335204251,
      "node_id": "IC_kwDOAP4Jqs7Gyy2b",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3335204251",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-25T17:35:38Z",
      "updated_at": "2025-09-26T09:36:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "I’m re-thinking some of the earlier design choices. Would appreciate some feedback on them.\r\n<details>\r\n<summary>Some Context on Batch API workflow</summary>\r\n\r\nHere’s how it currently works:\r\n\r\n1. User creates a batch object with `create`\r\n2. Adds verification checks using `add_schnorrsig` and `add_tweak_check`\r\n    - These store scalar-point pairs from Schnorr signature checks (`s*G = R + e*P`) and tweak checks (`Q = P + t*G`)\r\n3. Runs verification with `batch_verify`\r\n\r\nThere are a couple features:\r\n\r\n- Transparent Verification: When the batch object gets full and user tries to add more schnorrsig/tweak checks, it automatically runs verification, stores the result, and clears the scratch space so they can keep adding more checks.\r\n- Pre defined sizes (suggested by @jonasnick, not implemented yet): Instead of letting users create batch objects with any arbitrary `n` value, we could offer preset sizes like `SMALL`, `MEDIUM`, and `LARGE`.\r\n</details>\r\n\r\nRight now the batch module only supports Strauss (it calls `ecmult_strauss_batch` internally), and I'm exploring how to add Pippenger support.  \r\n\r\nMy first thought was: what if we just call `ecmult_multi_var` directly in the `batch_verify` API? This would let `ecmult_multi_var` handle choosing between Strauss or Pippenger, which seems like it would solve our problem pretty cleanly.\r\n\r\nBut there's an issue - our current batch object doesn't meet the requirements that `ecmult_multi_var` expects. The function needs an empty scratch space from its callers, but our batch object pre-fills the scratch space with `n` scalar-point pairs, and `ecmult_multi_var` doesn't recognize these pre-filled scalar-point pairs.\r\n<details>\r\n<summary>Some Context on `ecmult_multi_var` Caller Requirements</summary>\r\n\r\nWhen we want to multi-multiply `n` scalar-point pairs using `ecmult_multi_var`, our caller needs to provide three things:\r\n\r\n1. **Callback data (`cbdata`)**: A caller-defined data structure that stores the `n` scalar-point pairs (in whatever format works for the caller)\r\n2. **Callback function**: A caller-defined function that extracts a single scalar-point pair from `cbdata` for each index `i < n`\r\n3. **Empty scratch space**: `ecmult_multi_var` partitions the `n` inputs into batches that fit in this scratch space. It then runs either Strauss or Pippenger per batch. These algorithms stream `n_batch_points` scalar-point pairs into the scratch space by repeatedly calling the callback function on `cbdata` with incremental indices.\r\n</details>\r\n\r\n---\r\n\r\nWe have two ways of designing the batch object:\r\n\r\n**Design 1**: Have only one scratch space that is pre-filled with scalar-point pairs and call `strauss_ecmult_batch` or `pippenger_ecmult_batch` internally. This pull request attempts this design.\r\n\r\n**Design 2**: Have two scratch spaces - one that is pre-filled with scalar-point pairs and another that stays empty. Now we can call `ecmult_multi_var` with the empty scratch space and use the pre-filled scratch space as our `cbdata`.\r\n\r\nAt first glance, Design 1 seems more memory efficient since it only uses one scratch space. I started implementing this design without much hesitation, but it has some problems.\r\n\r\nIt's not straightforward to design a pre-filled scratch space that works with both `ecmult_strauss_batch` and `ecmult_pippenger_batch`. Strauss stores the `n` scalar-point pairs as-is in the scratch space, while Pippenger splits each pair (GLV endomorphism), so it stores `2n+2` points in the scratch space. Trying to create a generic scratch space that handles both feels like re-implementing the `ecmult_multi_var` function all over again.\r\n\r\nSo, are we better off implementing Design 2?\r\n\r\nAlternatively, we could refactor `ecmult_multi_var` to recognize a pre-filled scratch space, though I'm not sure about the implementation details. My concern is that this might make the API more complicated.\r\n\r\nThe issue with Design 2 is that it seems to copy data from one scratch space to another. When we give `ecmult_multi_var` two scratch spaces, it copies the `n` scalar-point pairs from the pre-filled one to the empty one using our callback function. Though with Pippenger, it's not a direct copy since it splits each pair first. But maybe we're okay with this overhead?\r\n\r\n**TLDR**: Is Design 2 the way to go? Or should we consider refactoring `ecmult_multi_var`?",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#issuecomment-3335204251",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134"
    },
    {
      "event": "mentioned",
      "id": 19925575135,
      "node_id": "MEE_lADOAP4Jqs5QMZmPzwAAAASjqCXf",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19925575135",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-25T17:35:39Z"
    },
    {
      "event": "subscribed",
      "id": 19925575161,
      "node_id": "SE_lADOAP4Jqs5QMZmPzwAAAASjqCX5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19925575161",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-25T17:35:39Z"
    },
    {
      "event": "reviewed",
      "id": 3350982498,
      "node_id": "PRR_kwDOAP4Jqs7Hu-9i",
      "url": null,
      "actor": null,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-20T13:04:23Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-3350982498",
      "submitted_at": "2025-10-20T13:04:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
    },
    {
      "event": "reviewed",
      "id": 3356937935,
      "node_id": "PRR_kwDOAP4Jqs7IFs7P",
      "url": null,
      "actor": null,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-20T15:31:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "I noticed that @fjahr's PR to Core redefines our internal macro `STRAUSS_MAX_TERMS_PER_BATCH` and doesn't use the transparent verification feature, which may indicate that we can improve our API design or documentation.\r\n\r\n```\r\n// This is the maximum number of scalar-point pairs on the batch for which\r\n// Strauss' algorithm, which is used in the secp256k1 implementation, is\r\n// still efficient. TODO: This will be changed when Pippenger algorithm is\r\n// being used in the secp implementation too.\r\nconst size_t MAX_BATCH_SIZE{106};\r\n\r\nBatchSchnorrVerifier::BatchSchnorrVerifier() {\r\n    unsigned char rnd[16];\r\n    GetRandBytes(rnd);\r\n    secp256k1_batch* batch{secp256k1_batch_create(secp256k1_context_static, MAX_BATCH_SIZE, rnd)};\r\n    m_batch = batch;\r\n}\r\n```",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#pullrequestreview-3356937935",
      "submitted_at": "2025-10-20T15:31:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/952908842",
      "pull_request_review_id": 1082558327,
      "id": 952908842,
      "node_id": "PRRC_kwDOAP4Jqs44zDwq",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+Benchmark                          ,    Min(us)    ,    Avg(us)    ,    Max(us)    \n+\n+schnorrsig_sign                    ,    50.4       ,    50.5       ,    50.7    \n+schnorrsig_verify                  ,    89.1       ,    89.2       ,    89.3    \n+schnorrsig_batch_verify_1          ,   104.0       ,   104.0       ,   104.0    ",
      "path": "doc/speedup-batch/bench_output.txt",
      "position": 1,
      "original_position": 5,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "batch_verify_1 shouldn't be slower than non-batch verify. Is it possible to revert to using non-batch validation logic for this case?",
      "created_at": "2022-08-23T17:11:47Z",
      "updated_at": "2022-08-23T17:12:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r952908842",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/952908842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/953161088",
      "pull_request_review_id": 1082913011,
      "id": 953161088,
      "node_id": "PRRC_kwDOAP4Jqs440BWA",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+Benchmark                          ,    Min(us)    ,    Avg(us)    ,    Max(us)    \n+\n+schnorrsig_sign                    ,    50.4       ,    50.5       ,    50.7    \n+schnorrsig_verify                  ,    89.1       ,    89.2       ,    89.3    \n+schnorrsig_batch_verify_1          ,   104.0       ,   104.0       ,   104.0    ",
      "path": "doc/speedup-batch/bench_output.txt",
      "position": 1,
      "original_position": 5,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": 952908842,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not possible with the current design. \r\n\r\nThe non-batch validation (`secp256k1_schnorrsig_verify`) logic looks something like this:\r\n - calc `rj` using `secp256k1_ecmult`: Rj = s*G - e*P\r\n - convert `rj` (gej) to `r` (ge)\r\n - check if the `r.x = sig[0:32]` and `r.y = even`\r\n\r\none schnorrsig occupies two points in the batch, and one tweak check occupies one point in the batch. If a batch contains two points, there is no guarantee that they are from a schnorrsig (R, P). It could be from two tweak checks. So, we can't use the `r.y = even` check.\r\n\r\nHence, I tried implementing a slightly modified `schnorrsig_verify` logic (not implement in this PR):\r\n - calc `neg_rj` using `secp256k1_ecmult`: `neg_Rj = -s*G + batch.scalars[1]*batch.points[1]`\r\n - check if `neg_rj + batch.points[0] == inf` using `_gej_add_var`\r\n     - `batch.scalars[0] = 1` always. So, we don't need to use `ecmult` again \r\n\r\nThis gives somewhat better benchmarks than before:\r\n```bash\r\nBenchmark                          ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nschnorrsig_sign                    ,    49.1       ,    50.1       ,    53.4    \r\nschnorrsig_verify                  ,    86.6       ,    87.2       ,    88.4    \r\nschnorrsig_batch_verify_1          ,    94.7       ,    95.0       ,    95.2 \r\n```\r\nBut `schnorrsig_batch_verify_1` is still slower than `schnorrsig_verify`.\r\n ",
      "created_at": "2022-08-23T22:29:40Z",
      "updated_at": "2023-08-30T04:05:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r953161088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/953161088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1505159671",
      "pull_request_review_id": 1905035503,
      "id": 1505159671,
      "node_id": "PRRC_kwDOAP4Jqs5Ztun3",
      "diff_hunk": "@@ -0,0 +1,206 @@\n+#ifndef SECP256K1_MODULE_BATCH_MAIN_H\n+#define SECP256K1_MODULE_BATCH_MAIN_H\n+\n+#include \"include/secp256k1_batch.h\"\n+\n+/* Maximum number of scalar-point pairs on the batch\n+ * for which `secp256k1_batch_verify` remains efficient */\n+#define STRAUSS_MAX_TERMS_PER_BATCH 106\n+\n+/* Assume two batch objects (batch1 and batch2) and we call\n+ * `batch_add_tweak_check` on batch1 and `batch_add_schnorrsig` on batch2.\n+ * In this case, the same randomizer will be generated if the input bytes to\n+ * batch1 and batch2 are the same (even though we use different `batch_add_` funcs).\n+ * Including this tag during randomizer generation (to differentiate btw\n+ * `batch_add_` funcs) will prevent such mishaps. */\n+enum batch_add_type {schnorrsig = 1, tweak_check = 2};\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  Members:\n+ *       data: scratch space object that contains points (_gej) and their\n+ *             respective scalars. To be used in Multi-Scalar Multiplication\n+ *             algorithms such as Strauss and Pippenger.\n+ *    scalars: pointer to scalars allocated on the scratch space.\n+ *     points: pointer to points allocated on the scratch space.\n+ *       sc_g: scalar corresponding to the generator point (G) in Multi-Scalar\n+ *             Multiplication equation.\n+ *     sha256: contains hash of all the inputs (schnorrsig/tweaks) present in\n+ *             the batch object, expect the first input. Used for generating a random secp256k1_scalar\n+ *             for each term added by secp256k1_batch_add_*.\n+ *     sha256: contains hash of all inputs (except the first one) present in the batch.\n+ *             `secp256k1_batch_add_` APIs use these for randomizing the scalar (i.e., multiplying\n+ *             it with a newly generated scalar) before adding it to the batch.\n+ *        len: number of scalar-point pairs present in the batch.\n+ *   capacity: max number of scalar-point pairs that the batch can hold.\n+ *     result: tells whether the given set of inputs (schnorrsigs or tweak checks) is valid\n+ *             or invalid. 1 = valid and 0 = invalid. By default, this is set to 1\n+ *             during batch object creation (i.e., `secp256k1_batch_create`).\n+ *\n+ *  The following struct name is typdef as secp256k1_batch (in include/secp256k1_batch.h).\n+ */\n+struct secp256k1_batch_struct{\n+    secp256k1_scratch *data;\n+    secp256k1_scalar *scalars;\n+    secp256k1_gej *points;\n+    secp256k1_scalar sc_g;\n+    secp256k1_sha256 sha256;\n+    size_t len;\n+    size_t capacity;\n+    int result;\n+};\n+\n+static size_t secp256k1_batch_scratch_size(int max_terms) {\n+    size_t ret = secp256k1_strauss_scratch_size(max_terms) + STRAUSS_SCRATCH_OBJECTS*16;\n+    VERIFY_CHECK(ret != 0);\n+\n+    return ret;\n+}\n+\n+/** Clears the scalar and points allocated on the batch object's scratch space */\n+static void secp256k1_batch_scratch_clear(secp256k1_batch* batch) {\n+    secp256k1_scalar_clear(&batch->sc_g);\n+    /* setting the len = 0 will suffice (instead of clearing the memory)\n+     * since, there are no secrets stored on the scratch space */\n+    batch->len = 0;\n+}\n+\n+/** Allocates space for `batch->capacity` number of scalars and points on batch\n+ *  object's scratch space */\n+static int secp256k1_batch_scratch_alloc(const secp256k1_callback* error_callback, secp256k1_batch* batch) {\n+    size_t checkpoint = secp256k1_scratch_checkpoint(error_callback, batch->data);\n+    size_t count = batch->capacity;\n+\n+    VERIFY_CHECK(count > 0);\n+\n+    batch->scalars = (secp256k1_scalar*)secp256k1_scratch_alloc(error_callback, batch->data, count*sizeof(secp256k1_scalar));\n+    batch->points = (secp256k1_gej*)secp256k1_scratch_alloc(error_callback, batch->data, count*sizeof(secp256k1_gej));\n+\n+    /* If scalar or point allocation fails, restore scratch space to previous state */\n+    if (batch->scalars == NULL || batch->points == NULL) {\n+        secp256k1_scratch_apply_checkpoint(error_callback, batch->data, checkpoint);\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0340/batch\")||SHA256(\"BIP0340/batch\"). */\n+static void secp256k1_batch_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x79e3e0d2ul;\n+    sha->s[1] = 0x12284f32ul;\n+    sha->s[2] = 0xd7d89e1cul;\n+    sha->s[3] = 0x6491ea9aul;\n+    sha->s[4] = 0xad823b2ful;\n+    sha->s[5] = 0xfacfe0b6ul;\n+    sha->s[6] = 0x342b78baul;\n+    sha->s[7] = 0x12ece87cul;\n+\n+    sha->bytes = 64;\n+}\n+\n+secp256k1_batch* secp256k1_batch_create(const secp256k1_context* ctx, size_t max_terms, const unsigned char *aux_rand16) {\n+    size_t batch_size;\n+    secp256k1_batch* batch;\n+    size_t batch_scratch_size;\n+    unsigned char zeros[16] = {0};\n+    /* max number of scalar-point pairs on scratch up to which Strauss multi multiplication is efficient */\n+    if (max_terms > STRAUSS_MAX_TERMS_PER_BATCH) {\n+        max_terms = STRAUSS_MAX_TERMS_PER_BATCH;\n+    }\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(max_terms != 0);\n+\n+    batch_size = sizeof(secp256k1_batch);\n+    batch = (secp256k1_batch *)checked_malloc(&ctx->error_callback, batch_size);\n+    batch_scratch_size = secp256k1_batch_scratch_size(max_terms);\n+    if (batch != NULL) {\n+        /* create scratch space inside batch object, if that fails return NULL*/\n+        batch->data = secp256k1_scratch_create(&ctx->error_callback, batch_scratch_size);\n+        if (batch->data == NULL) {\n+            return NULL;\n+        }\n+        /* allocate memeory for `max_terms` number of scalars and points on scratch space */\n+        batch->capacity = max_terms;\n+        if (!secp256k1_batch_scratch_alloc(&ctx->error_callback, batch)) {\n+            /* if scratch memory allocation fails, free all the previous the allocated memory\n+            and return NULL */\n+            secp256k1_scratch_destroy(&ctx->error_callback, batch->data);\n+            free(batch);\n+            return NULL;\n+        }\n+\n+        /* set remaining data members */\n+        secp256k1_scalar_clear(&batch->sc_g);\n+        secp256k1_batch_sha256_tagged(&batch->sha256);\n+        if (aux_rand16 != NULL) {\n+            secp256k1_sha256_write(&batch->sha256, aux_rand16, 16);\n+        } else {\n+            /* use 16 bytes of 0x0000...000, if no fresh randomness provided */\n+            secp256k1_sha256_write(&batch->sha256, zeros, 16);\n+        }\n+        batch->len = 0;\n+        batch->result = 1;\n+    }\n+\n+    return batch;\n+}\n+\n+void secp256k1_batch_destroy(const secp256k1_context *ctx, secp256k1_batch *batch) {\n+    VERIFY_CHECK(ctx != NULL);\n+\n+    if (batch != NULL) {\n+        if(batch->data != NULL) {\n+            /* can't destroy a scratch space with non-zero size */\n+            secp256k1_scratch_apply_checkpoint(&ctx->error_callback, batch->data, 0);\n+            secp256k1_scratch_destroy(&ctx->error_callback, batch->data);\n+        }\n+        free(batch);\n+    }\n+}\n+\n+int secp256k1_batch_usable(const secp256k1_context *ctx, const secp256k1_batch *batch) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(batch != NULL);\n+\n+    return batch->result;\n+}\n+\n+/** verifies the inputs (schnorrsig or tweak_check) by performing multi-scalar point\n+ *  multiplication on the scalars (`batch->scalars`) and points (`batch->points`)\n+ *  present in the batch. Uses `secp256k1_ecmult_strauss_batch_internal` to perform\n+ *  the multi-multiplication.\n+ *\n+ * Fails if:\n+ * 0 != -(s1 + a2*s2 + ... + au*su)G\n+ *      + R1 + a2*R2 + ... + au*Ru + e1*P1 + (a2*e2)P2 + ... + (au*eu)Pu.\n+ */\n+int secp256k1_batch_verify(const secp256k1_context *ctx, secp256k1_batch *batch) {\n+    secp256k1_gej resj;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(batch != NULL);\n+\n+    if(batch->result == 0) {\n+        return 0;\n+    }\n+\n+    if (batch->len > 0) {\n+        int strauss_ret = secp256k1_ecmult_strauss_batch_internal(&ctx->error_callback, batch->data, &resj, batch->scalars, batch->points, &batch->sc_g, batch->len);\n+        int mid_res = secp256k1_gej_is_infinity(&resj);\n+\n+        /* `_strauss_batch_internal` should not fail due to insufficient memory.\n+         * `batch_create` will allocate memeory needed by `_strauss_batch_internal`. */\n+        VERIFY_CHECK(strauss_ret != 0);",
      "path": "src/modules/batch/main_impl.h",
      "position": 197,
      "original_position": 197,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Getting an unused variable warning about `strauss_ret` here when building this as part of bitcoin core, probably because the check is removed with optimizations?",
      "created_at": "2024-02-27T23:57:54Z",
      "updated_at": "2024-02-28T00:02:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1505159671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1505159671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 197,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1505160540",
      "pull_request_review_id": 1905035503,
      "id": 1505160540,
      "node_id": "PRRC_kwDOAP4Jqs5Ztu1c",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvemtn Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;",
      "path": "include/secp256k1_batch.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`secp256k1_batch` isn't part of the API yet it seems.\r\n\r\n```\r\nSECP256K1_API const secp256k1_batch *secp256k1_batch_struct;\r\n```",
      "created_at": "2024-02-27T23:59:27Z",
      "updated_at": "2024-02-28T00:02:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1505160540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1505160540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1505929407",
      "pull_request_review_id": 1906215194,
      "id": 1505929407,
      "node_id": "PRRC_kwDOAP4Jqs5Zwqi_",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvemtn Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;",
      "path": "include/secp256k1_batch.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": 1505160540,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why do we need this? Currently, users can only create pointers to the `secp256k1_batch` object, which is the intended functionality of opaque objects, right?",
      "created_at": "2024-02-28T13:01:59Z",
      "updated_at": "2024-02-28T13:01:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1505929407",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1505929407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1506054760",
      "pull_request_review_id": 1906420231,
      "id": 1506054760,
      "node_id": "PRRC_kwDOAP4Jqs5ZxJJo",
      "diff_hunk": "@@ -0,0 +1,206 @@\n+#ifndef SECP256K1_MODULE_BATCH_MAIN_H\n+#define SECP256K1_MODULE_BATCH_MAIN_H\n+\n+#include \"include/secp256k1_batch.h\"\n+\n+/* Maximum number of scalar-point pairs on the batch\n+ * for which `secp256k1_batch_verify` remains efficient */\n+#define STRAUSS_MAX_TERMS_PER_BATCH 106\n+\n+/* Assume two batch objects (batch1 and batch2) and we call\n+ * `batch_add_tweak_check` on batch1 and `batch_add_schnorrsig` on batch2.\n+ * In this case, the same randomizer will be generated if the input bytes to\n+ * batch1 and batch2 are the same (even though we use different `batch_add_` funcs).\n+ * Including this tag during randomizer generation (to differentiate btw\n+ * `batch_add_` funcs) will prevent such mishaps. */\n+enum batch_add_type {schnorrsig = 1, tweak_check = 2};\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  Members:\n+ *       data: scratch space object that contains points (_gej) and their\n+ *             respective scalars. To be used in Multi-Scalar Multiplication\n+ *             algorithms such as Strauss and Pippenger.\n+ *    scalars: pointer to scalars allocated on the scratch space.\n+ *     points: pointer to points allocated on the scratch space.\n+ *       sc_g: scalar corresponding to the generator point (G) in Multi-Scalar\n+ *             Multiplication equation.\n+ *     sha256: contains hash of all the inputs (schnorrsig/tweaks) present in\n+ *             the batch object, expect the first input. Used for generating a random secp256k1_scalar\n+ *             for each term added by secp256k1_batch_add_*.\n+ *     sha256: contains hash of all inputs (except the first one) present in the batch.\n+ *             `secp256k1_batch_add_` APIs use these for randomizing the scalar (i.e., multiplying\n+ *             it with a newly generated scalar) before adding it to the batch.\n+ *        len: number of scalar-point pairs present in the batch.\n+ *   capacity: max number of scalar-point pairs that the batch can hold.\n+ *     result: tells whether the given set of inputs (schnorrsigs or tweak checks) is valid\n+ *             or invalid. 1 = valid and 0 = invalid. By default, this is set to 1\n+ *             during batch object creation (i.e., `secp256k1_batch_create`).\n+ *\n+ *  The following struct name is typdef as secp256k1_batch (in include/secp256k1_batch.h).\n+ */\n+struct secp256k1_batch_struct{\n+    secp256k1_scratch *data;\n+    secp256k1_scalar *scalars;\n+    secp256k1_gej *points;\n+    secp256k1_scalar sc_g;\n+    secp256k1_sha256 sha256;\n+    size_t len;\n+    size_t capacity;\n+    int result;\n+};\n+\n+static size_t secp256k1_batch_scratch_size(int max_terms) {\n+    size_t ret = secp256k1_strauss_scratch_size(max_terms) + STRAUSS_SCRATCH_OBJECTS*16;\n+    VERIFY_CHECK(ret != 0);\n+\n+    return ret;\n+}\n+\n+/** Clears the scalar and points allocated on the batch object's scratch space */\n+static void secp256k1_batch_scratch_clear(secp256k1_batch* batch) {\n+    secp256k1_scalar_clear(&batch->sc_g);\n+    /* setting the len = 0 will suffice (instead of clearing the memory)\n+     * since, there are no secrets stored on the scratch space */\n+    batch->len = 0;\n+}\n+\n+/** Allocates space for `batch->capacity` number of scalars and points on batch\n+ *  object's scratch space */\n+static int secp256k1_batch_scratch_alloc(const secp256k1_callback* error_callback, secp256k1_batch* batch) {\n+    size_t checkpoint = secp256k1_scratch_checkpoint(error_callback, batch->data);\n+    size_t count = batch->capacity;\n+\n+    VERIFY_CHECK(count > 0);\n+\n+    batch->scalars = (secp256k1_scalar*)secp256k1_scratch_alloc(error_callback, batch->data, count*sizeof(secp256k1_scalar));\n+    batch->points = (secp256k1_gej*)secp256k1_scratch_alloc(error_callback, batch->data, count*sizeof(secp256k1_gej));\n+\n+    /* If scalar or point allocation fails, restore scratch space to previous state */\n+    if (batch->scalars == NULL || batch->points == NULL) {\n+        secp256k1_scratch_apply_checkpoint(error_callback, batch->data, checkpoint);\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0340/batch\")||SHA256(\"BIP0340/batch\"). */\n+static void secp256k1_batch_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x79e3e0d2ul;\n+    sha->s[1] = 0x12284f32ul;\n+    sha->s[2] = 0xd7d89e1cul;\n+    sha->s[3] = 0x6491ea9aul;\n+    sha->s[4] = 0xad823b2ful;\n+    sha->s[5] = 0xfacfe0b6ul;\n+    sha->s[6] = 0x342b78baul;\n+    sha->s[7] = 0x12ece87cul;\n+\n+    sha->bytes = 64;\n+}\n+\n+secp256k1_batch* secp256k1_batch_create(const secp256k1_context* ctx, size_t max_terms, const unsigned char *aux_rand16) {\n+    size_t batch_size;\n+    secp256k1_batch* batch;\n+    size_t batch_scratch_size;\n+    unsigned char zeros[16] = {0};\n+    /* max number of scalar-point pairs on scratch up to which Strauss multi multiplication is efficient */\n+    if (max_terms > STRAUSS_MAX_TERMS_PER_BATCH) {\n+        max_terms = STRAUSS_MAX_TERMS_PER_BATCH;\n+    }\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(max_terms != 0);\n+\n+    batch_size = sizeof(secp256k1_batch);\n+    batch = (secp256k1_batch *)checked_malloc(&ctx->error_callback, batch_size);\n+    batch_scratch_size = secp256k1_batch_scratch_size(max_terms);\n+    if (batch != NULL) {\n+        /* create scratch space inside batch object, if that fails return NULL*/\n+        batch->data = secp256k1_scratch_create(&ctx->error_callback, batch_scratch_size);\n+        if (batch->data == NULL) {\n+            return NULL;\n+        }\n+        /* allocate memeory for `max_terms` number of scalars and points on scratch space */\n+        batch->capacity = max_terms;\n+        if (!secp256k1_batch_scratch_alloc(&ctx->error_callback, batch)) {\n+            /* if scratch memory allocation fails, free all the previous the allocated memory\n+            and return NULL */\n+            secp256k1_scratch_destroy(&ctx->error_callback, batch->data);\n+            free(batch);\n+            return NULL;\n+        }\n+\n+        /* set remaining data members */\n+        secp256k1_scalar_clear(&batch->sc_g);\n+        secp256k1_batch_sha256_tagged(&batch->sha256);\n+        if (aux_rand16 != NULL) {\n+            secp256k1_sha256_write(&batch->sha256, aux_rand16, 16);\n+        } else {\n+            /* use 16 bytes of 0x0000...000, if no fresh randomness provided */\n+            secp256k1_sha256_write(&batch->sha256, zeros, 16);\n+        }\n+        batch->len = 0;\n+        batch->result = 1;\n+    }\n+\n+    return batch;\n+}\n+\n+void secp256k1_batch_destroy(const secp256k1_context *ctx, secp256k1_batch *batch) {\n+    VERIFY_CHECK(ctx != NULL);\n+\n+    if (batch != NULL) {\n+        if(batch->data != NULL) {\n+            /* can't destroy a scratch space with non-zero size */\n+            secp256k1_scratch_apply_checkpoint(&ctx->error_callback, batch->data, 0);\n+            secp256k1_scratch_destroy(&ctx->error_callback, batch->data);\n+        }\n+        free(batch);\n+    }\n+}\n+\n+int secp256k1_batch_usable(const secp256k1_context *ctx, const secp256k1_batch *batch) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(batch != NULL);\n+\n+    return batch->result;\n+}\n+\n+/** verifies the inputs (schnorrsig or tweak_check) by performing multi-scalar point\n+ *  multiplication on the scalars (`batch->scalars`) and points (`batch->points`)\n+ *  present in the batch. Uses `secp256k1_ecmult_strauss_batch_internal` to perform\n+ *  the multi-multiplication.\n+ *\n+ * Fails if:\n+ * 0 != -(s1 + a2*s2 + ... + au*su)G\n+ *      + R1 + a2*R2 + ... + au*Ru + e1*P1 + (a2*e2)P2 + ... + (au*eu)Pu.\n+ */\n+int secp256k1_batch_verify(const secp256k1_context *ctx, secp256k1_batch *batch) {\n+    secp256k1_gej resj;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(batch != NULL);\n+\n+    if(batch->result == 0) {\n+        return 0;\n+    }\n+\n+    if (batch->len > 0) {\n+        int strauss_ret = secp256k1_ecmult_strauss_batch_internal(&ctx->error_callback, batch->data, &resj, batch->scalars, batch->points, &batch->sc_g, batch->len);\n+        int mid_res = secp256k1_gej_is_infinity(&resj);\n+\n+        /* `_strauss_batch_internal` should not fail due to insufficient memory.\n+         * `batch_create` will allocate memeory needed by `_strauss_batch_internal`. */\n+        VERIFY_CHECK(strauss_ret != 0);",
      "path": "src/modules/batch/main_impl.h",
      "position": 197,
      "original_position": 197,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": 1505159671,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The macro `VERIFY_CHECK(code)` is defined to be the empty string in production builds, that's why you need to suppress the warning using `(void)strauss_ret;`. ",
      "created_at": "2024-02-28T14:28:29Z",
      "updated_at": "2024-02-28T14:28:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1506054760",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1506054760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 197,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1506136896",
      "pull_request_review_id": 1906550202,
      "id": 1506136896,
      "node_id": "PRRC_kwDOAP4Jqs5ZxdNA",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvemtn Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;",
      "path": "include/secp256k1_batch.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": 1505160540,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hm, never mind, it seems it's not needed anymore with the latest version of my bitcoin core code.",
      "created_at": "2024-02-28T15:20:01Z",
      "updated_at": "2024-02-28T15:20:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1506136896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1506136896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1506139410",
      "pull_request_review_id": 1906554262,
      "id": 1506139410,
      "node_id": "PRRC_kwDOAP4Jqs5Zxd0S",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+#ifndef SECP256K1_MODULE_BATCH_TESTS_H\n+#define SECP256K1_MODULE_BATCH_TESTS_H\n+\n+#include \"../../../include/secp256k1_batch.h\"\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"../../../include/secp256k1_schnorrsig.h\"\n+#include \"../../../include/secp256k1_schnorrsig_batch.h\"\n+#endif\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"../../../include/secp256k1_extrakeys.h\"\n+#include \"../../../include/secp256k1_tweak_check_batch.h\"\n+#endif\n+\n+/* Tests for the equality of two sha256 structs. This function only produces a\n+ * correct result if an integer multiple of 64 many bytes have been written\n+ * into the hash functions. */\n+void test_batch_sha256_eq(const secp256k1_sha256 *sha1, const secp256k1_sha256 *sha2) {\n+    /* Is buffer fully consumed? */\n+    CHECK((sha1->bytes & 0x3F) == 0);\n+\n+    CHECK(sha1->bytes == sha2->bytes);\n+    CHECK(secp256k1_memcmp_var(sha1->s, sha2->s, sizeof(sha1->s)) == 0);\n+}\n+\n+/* Checks that hash initialized by secp256k1_batch_sha256_tagged has the\n+ * expected state. */\n+void test_batch_sha256_tagged(void) {\n+    unsigned char tag[13] = \"BIP0340/batch\";\n+    secp256k1_sha256 sha;\n+    secp256k1_sha256 sha_optimized;\n+\n+    secp256k1_sha256_initialize_tagged(&sha, (unsigned char *) tag, sizeof(tag));\n+    secp256k1_batch_sha256_tagged(&sha_optimized);\n+    test_batch_sha256_eq(&sha, &sha_optimized);\n+}\n+\n+#define N_SIGS 10\n+#define N_TWK_CHECKS 10\n+#define N_TERMS (N_TWK_CHECKS + 2*N_SIGS)\n+void test_batch_api(void) {\n+\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+    unsigned char sk[32];\n+    secp256k1_keypair keypair;\n+    secp256k1_xonly_pubkey pk;\n+    /* xonly pubkey tweak checks data */\n+    unsigned char tweaked_pk[N_TWK_CHECKS][32];\n+    int tweaked_pk_parity[N_TWK_CHECKS];\n+    unsigned char tweak[N_TWK_CHECKS][32];\n+    secp256k1_pubkey tmp_pk;\n+    secp256k1_xonly_pubkey tmp_xonly_pk;\n+    size_t i;\n+#endif\n+\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+    /* schnorr verification data */\n+    unsigned char msg[N_SIGS][32];\n+    unsigned char sig[N_SIGS][64];\n+#endif\n+    /* context and batch setup */\n+    secp256k1_context *none = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    secp256k1_context *sign = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    secp256k1_context *vrfy = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *both = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *sttc = secp256k1_context_clone(secp256k1_context_no_precomp);\n+    secp256k1_batch *batch_none;\n+    secp256k1_batch *batch_sign;\n+    secp256k1_batch *batch_vrfy;\n+    secp256k1_batch *batch_both;\n+    secp256k1_batch *batch_sttc;\n+    unsigned char aux_rand16[32];",
      "path": "src/modules/batch/tests_impl.h",
      "position": 62,
      "original_position": 71,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Getting another warning here when compiling together with Bitcoin Core:\r\n\r\n```\r\nsrc/modules/batch/tests_impl.h:68:19: warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]\r\n    unsigned char aux_rand16[32];\r\n                  ^\r\n``` ",
      "created_at": "2024-02-28T15:21:38Z",
      "updated_at": "2024-02-28T15:21:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1506139410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1506139410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1874507232",
      "pull_request_review_id": 2486617651,
      "id": 1874507232,
      "node_id": "PRRC_kwDOAP4Jqs5vurXg",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+#ifndef SECP256K1_MODULE_BATCH_TESTS_H\n+#define SECP256K1_MODULE_BATCH_TESTS_H\n+\n+#include \"../../../include/secp256k1_batch.h\"\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"../../../include/secp256k1_schnorrsig.h\"\n+#include \"../../../include/secp256k1_schnorrsig_batch.h\"\n+#endif\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"../../../include/secp256k1_extrakeys.h\"\n+#include \"../../../include/secp256k1_tweak_check_batch.h\"\n+#endif\n+\n+/* Tests for the equality of two sha256 structs. This function only produces a\n+ * correct result if an integer multiple of 64 many bytes have been written\n+ * into the hash functions. */\n+void test_batch_sha256_eq(const secp256k1_sha256 *sha1, const secp256k1_sha256 *sha2) {\n+    /* Is buffer fully consumed? */\n+    CHECK((sha1->bytes & 0x3F) == 0);\n+\n+    CHECK(sha1->bytes == sha2->bytes);\n+    CHECK(secp256k1_memcmp_var(sha1->s, sha2->s, sizeof(sha1->s)) == 0);\n+}\n+\n+/* Checks that hash initialized by secp256k1_batch_sha256_tagged has the\n+ * expected state. */\n+void test_batch_sha256_tagged(void) {\n+    unsigned char tag[13] = \"BIP0340/batch\";\n+    secp256k1_sha256 sha;\n+    secp256k1_sha256 sha_optimized;\n+\n+    secp256k1_sha256_initialize_tagged(&sha, (unsigned char *) tag, sizeof(tag));\n+    secp256k1_batch_sha256_tagged(&sha_optimized);\n+    test_batch_sha256_eq(&sha, &sha_optimized);\n+}\n+\n+#define N_SIGS 10\n+#define N_TWK_CHECKS 10\n+#define N_TERMS (N_TWK_CHECKS + 2*N_SIGS)\n+void test_batch_api(void) {\n+\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+    unsigned char sk[32];\n+    secp256k1_keypair keypair;\n+    secp256k1_xonly_pubkey pk;\n+    /* xonly pubkey tweak checks data */\n+    unsigned char tweaked_pk[N_TWK_CHECKS][32];\n+    int tweaked_pk_parity[N_TWK_CHECKS];\n+    unsigned char tweak[N_TWK_CHECKS][32];\n+    secp256k1_pubkey tmp_pk;\n+    secp256k1_xonly_pubkey tmp_xonly_pk;\n+    size_t i;\n+#endif\n+\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+    /* schnorr verification data */\n+    unsigned char msg[N_SIGS][32];\n+    unsigned char sig[N_SIGS][64];\n+#endif\n+    /* context and batch setup */\n+    secp256k1_context *none = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    secp256k1_context *sign = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    secp256k1_context *vrfy = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *both = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *sttc = secp256k1_context_clone(secp256k1_context_no_precomp);\n+    secp256k1_batch *batch_none;\n+    secp256k1_batch *batch_sign;\n+    secp256k1_batch *batch_vrfy;\n+    secp256k1_batch *batch_both;\n+    secp256k1_batch *batch_sttc;\n+    unsigned char aux_rand16[32];",
      "path": "src/modules/batch/tests_impl.h",
      "position": 62,
      "original_position": 71,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": 1506139410,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In C89 all the variable declarations must precede statements within any block.",
      "created_at": "2024-12-07T15:42:33Z",
      "updated_at": "2024-12-07T15:42:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1874507232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1874507232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1874552662",
      "pull_request_review_id": 2486674795,
      "id": 1874552662,
      "node_id": "PRRC_kwDOAP4Jqs5vu2dW",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+#ifndef SECP256K1_MODULE_BATCH_TESTS_H\n+#define SECP256K1_MODULE_BATCH_TESTS_H\n+\n+#include \"../../../include/secp256k1_batch.h\"\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+#include \"../../../include/secp256k1_schnorrsig.h\"\n+#include \"../../../include/secp256k1_schnorrsig_batch.h\"\n+#endif\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+#include \"../../../include/secp256k1_extrakeys.h\"\n+#include \"../../../include/secp256k1_tweak_check_batch.h\"\n+#endif\n+\n+/* Tests for the equality of two sha256 structs. This function only produces a\n+ * correct result if an integer multiple of 64 many bytes have been written\n+ * into the hash functions. */\n+void test_batch_sha256_eq(const secp256k1_sha256 *sha1, const secp256k1_sha256 *sha2) {\n+    /* Is buffer fully consumed? */\n+    CHECK((sha1->bytes & 0x3F) == 0);\n+\n+    CHECK(sha1->bytes == sha2->bytes);\n+    CHECK(secp256k1_memcmp_var(sha1->s, sha2->s, sizeof(sha1->s)) == 0);\n+}\n+\n+/* Checks that hash initialized by secp256k1_batch_sha256_tagged has the\n+ * expected state. */\n+void test_batch_sha256_tagged(void) {\n+    unsigned char tag[13] = \"BIP0340/batch\";\n+    secp256k1_sha256 sha;\n+    secp256k1_sha256 sha_optimized;\n+\n+    secp256k1_sha256_initialize_tagged(&sha, (unsigned char *) tag, sizeof(tag));\n+    secp256k1_batch_sha256_tagged(&sha_optimized);\n+    test_batch_sha256_eq(&sha, &sha_optimized);\n+}\n+\n+#define N_SIGS 10\n+#define N_TWK_CHECKS 10\n+#define N_TERMS (N_TWK_CHECKS + 2*N_SIGS)\n+void test_batch_api(void) {\n+\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+    unsigned char sk[32];\n+    secp256k1_keypair keypair;\n+    secp256k1_xonly_pubkey pk;\n+    /* xonly pubkey tweak checks data */\n+    unsigned char tweaked_pk[N_TWK_CHECKS][32];\n+    int tweaked_pk_parity[N_TWK_CHECKS];\n+    unsigned char tweak[N_TWK_CHECKS][32];\n+    secp256k1_pubkey tmp_pk;\n+    secp256k1_xonly_pubkey tmp_xonly_pk;\n+    size_t i;\n+#endif\n+\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+    /* schnorr verification data */\n+    unsigned char msg[N_SIGS][32];\n+    unsigned char sig[N_SIGS][64];\n+#endif\n+    /* context and batch setup */\n+    secp256k1_context *none = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    secp256k1_context *sign = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    secp256k1_context *vrfy = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *both = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *sttc = secp256k1_context_clone(secp256k1_context_no_precomp);\n+    secp256k1_batch *batch_none;\n+    secp256k1_batch *batch_sign;\n+    secp256k1_batch *batch_vrfy;\n+    secp256k1_batch *batch_both;\n+    secp256k1_batch *batch_sttc;\n+    unsigned char aux_rand16[32];",
      "path": "src/modules/batch/tests_impl.h",
      "position": 62,
      "original_position": 71,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "eb49e93b50b3e40498789a500e2db8d9a20debbf",
      "in_reply_to_id": 1506139410,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks @sipa, yeah, I should have added that I have this fixed now in my rebase branch: https://github.com/fjahr/secp256k1/commit/7c6b9df9ec8fe20fb228ead90d494e95f18c8344#diff-fa3fe2044a5385d080fb813c89c9d0707b50ec7083cef9cd9c114b1f2e5483c3R41",
      "created_at": "2024-12-07T19:31:29Z",
      "updated_at": "2024-12-07T19:31:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r1874552662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1874552662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188506773",
      "pull_request_review_id": 2991555532,
      "id": 2188506773,
      "node_id": "PRRC_kwDOAP4Jqs6CcfaV",
      "diff_hunk": "@@ -22,6 +22,7 @@ Features:\n * Optional module for Schnorr signatures according to [BIP-340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n * Optional module for ElligatorSwift key exchange according to [BIP-324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki).\n * Optional module for MuSig2 Schnorr multi-signatures according to [BIP-327](https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki).\n+* Optional module for Batch Verification (experimental).",
      "path": "README.md",
      "position": 1,
      "original_position": 4,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could also mention \"according to BIP340\" here since batch verification is also specified there.",
      "created_at": "2025-07-06T18:12:21Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188506773",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188506773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188508820",
      "pull_request_review_id": 2991555532,
      "id": 2188508820,
      "node_id": "PRRC_kwDOAP4Jqs6Ccf6U",
      "diff_hunk": "@@ -80,6 +80,7 @@ esac\n     --enable-module-extrakeys=\"$EXTRAKEYS\" \\\n     --enable-module-schnorrsig=\"$SCHNORRSIG\" \\\n     --enable-module-musig=\"$MUSIG\" \\\n+    --enable-module-batch=\"$BATCH\"",
      "path": "ci/ci.sh",
      "position": 1,
      "original_position": 13,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Missing `\\` here?",
      "created_at": "2025-07-06T18:17:59Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188508820",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188508820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188512599",
      "pull_request_review_id": 2991555532,
      "id": 2188512599,
      "node_id": "PRRC_kwDOAP4Jqs6Ccg1X",
      "diff_hunk": "@@ -5026,6 +5003,54 @@ static int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n         }\n     }\n \n+    /* number of (scalars, points) inputs generated */\n+    *inp_len = filled;\n+    /* number of non-zero (scalars, points) inputs */\n+    *nonzero_inp_len = num_nonzero;\n+    /* ptr to g_scalar*/\n+    g_scalar = g_scalar_ptr;\n+    /* is mulciplicand of g nonzero? */",
      "path": "src/tests.c",
      "position": 92,
      "original_position": 92,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: typo\r\n\r\n```suggestion\r\n    /* is multiplicand of g nonzero? */\r\n```",
      "created_at": "2025-07-06T18:29:58Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188512599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188512599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5012,
      "original_line": 5012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188513805",
      "pull_request_review_id": 2991555532,
      "id": 2188513805,
      "node_id": "PRRC_kwDOAP4Jqs6CchIN",
      "diff_hunk": "@@ -242,6 +263,9 @@ static void test_schnorrsig_bip_vectors(void) {\n         };\n         test_schnorrsig_bip_vectors_check_signing(sk, pk, aux_rand, msg, sizeof(msg), sig);\n         test_schnorrsig_bip_vectors_check_verify(pk, msg, sizeof(msg), sig, 1);\n+        #ifdef ENABLE_MODULE_BATCH",
      "path": "src/modules/schnorrsig/tests_impl.h",
      "position": 48,
      "original_position": 48,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Not sure if that is something that would be popular but I think you could limit these ifdefs to just the test function itself by just having the function body be enclosed in an batch ifdef. At least that would save a few lines of code. Just an idea though, this doesn't bother me much.",
      "created_at": "2025-07-06T18:36:02Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188513805",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188513805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 266,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188522324",
      "pull_request_review_id": 2991555532,
      "id": 2188522324,
      "node_id": "PRRC_kwDOAP4Jqs6CcjNU",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#ifndef SECP256K1_MODULE_BATCH_MAIN_H\n+#define SECP256K1_MODULE_BATCH_MAIN_H\n+\n+#include \"../../../include/secp256k1_batch.h\"\n+\n+/* Maximum number of scalar-point pairs on the batch\n+ * for which `secp256k1_batch_verify` remains efficient */\n+#define STRAUSS_MAX_TERMS_PER_BATCH 106\n+\n+/* Assume two batch objects (batch1 and batch2) and we call\n+ * `batch_add_tweak_check` on batch1 and `batch_add_schnorrsig` on batch2.\n+ * In this case, the same randomizer will be generated if the input bytes to\n+ * batch1 and batch2 are the same (even though we use different `batch_add_` funcs).\n+ * Including this tag during randomizer generation (to differentiate btw\n+ * `batch_add_` funcs) will prevent such mishaps. */\n+enum batch_add_type {schnorrsig = 1, tweak_check = 2};\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  Members:\n+ *       data: scratch space object that contains points (_gej) and their\n+ *             respective scalars. To be used in Multi-Scalar Multiplication\n+ *             algorithms such as Strauss and Pippenger.\n+ *    scalars: pointer to scalars allocated on the scratch space.\n+ *     points: pointer to points allocated on the scratch space.\n+ *       sc_g: scalar corresponding to the generator point (G) in Multi-Scalar\n+ *             Multiplication equation.\n+ *     sha256: contains hash of all the inputs (schnorrsig/tweaks) present in\n+ *             the batch object, expect the first input. Used for generating a random secp256k1_scalar\n+ *             for each term added by secp256k1_batch_add_*.\n+ *     sha256: contains hash of all inputs (except the first one) present in the batch.",
      "path": "src/modules/batch/main_impl.h",
      "position": 31,
      "original_position": 31,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`sha256` arg is listed twice here",
      "created_at": "2025-07-06T19:14:55Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188522324",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188522324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188522423",
      "pull_request_review_id": 2991555532,
      "id": 2188522423,
      "node_id": "PRRC_kwDOAP4Jqs6CcjO3",
      "diff_hunk": "@@ -0,0 +1,208 @@\n+#ifndef SECP256K1_MODULE_BATCH_MAIN_H\n+#define SECP256K1_MODULE_BATCH_MAIN_H\n+\n+#include \"../../../include/secp256k1_batch.h\"\n+\n+/* Maximum number of scalar-point pairs on the batch\n+ * for which `secp256k1_batch_verify` remains efficient */\n+#define STRAUSS_MAX_TERMS_PER_BATCH 106\n+\n+/* Assume two batch objects (batch1 and batch2) and we call\n+ * `batch_add_tweak_check` on batch1 and `batch_add_schnorrsig` on batch2.\n+ * In this case, the same randomizer will be generated if the input bytes to\n+ * batch1 and batch2 are the same (even though we use different `batch_add_` funcs).\n+ * Including this tag during randomizer generation (to differentiate btw\n+ * `batch_add_` funcs) will prevent such mishaps. */\n+enum batch_add_type {schnorrsig = 1, tweak_check = 2};\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  Members:\n+ *       data: scratch space object that contains points (_gej) and their\n+ *             respective scalars. To be used in Multi-Scalar Multiplication\n+ *             algorithms such as Strauss and Pippenger.\n+ *    scalars: pointer to scalars allocated on the scratch space.\n+ *     points: pointer to points allocated on the scratch space.\n+ *       sc_g: scalar corresponding to the generator point (G) in Multi-Scalar\n+ *             Multiplication equation.\n+ *     sha256: contains hash of all the inputs (schnorrsig/tweaks) present in\n+ *             the batch object, expect the first input. Used for generating a random secp256k1_scalar\n+ *             for each term added by secp256k1_batch_add_*.\n+ *     sha256: contains hash of all inputs (except the first one) present in the batch.\n+ *             `secp256k1_batch_add_` APIs use these for randomizing the scalar (i.e., multiplying\n+ *             it with a newly generated scalar) before adding it to the batch.\n+ *        len: number of scalar-point pairs present in the batch.\n+ *   capacity: max number of scalar-point pairs that the batch can hold.\n+ *     result: tells whether the given set of inputs (schnorrsigs or tweak checks) is valid\n+ *             or invalid. 1 = valid and 0 = invalid. By default, this is set to 1\n+ *             during batch object creation (i.e., `secp256k1_batch_create`).\n+ *\n+ *  The following struct name is typedef as secp256k1_batch (in include/secp256k1_batch.h).\n+ */\n+struct secp256k1_batch_struct{\n+    secp256k1_scratch *data;\n+    secp256k1_scalar *scalars;\n+    secp256k1_gej *points;\n+    secp256k1_scalar sc_g;\n+    secp256k1_sha256 sha256;\n+    size_t len;\n+    size_t capacity;\n+    int result;\n+};\n+\n+static size_t secp256k1_batch_scratch_size(int max_terms) {\n+    size_t ret = secp256k1_strauss_scratch_size(max_terms) + STRAUSS_SCRATCH_OBJECTS*16;\n+    VERIFY_CHECK(ret != 0);\n+\n+    return ret;\n+}\n+\n+/** Clears the scalar and points allocated on the batch object's scratch space */\n+static void secp256k1_batch_scratch_clear(secp256k1_batch* batch) {\n+    secp256k1_scalar_clear(&batch->sc_g);\n+    /* setting the len = 0 will suffice (instead of clearing the memory)\n+     * since, there are no secrets stored on the scratch space */\n+    batch->len = 0;\n+}\n+\n+/** Allocates space for `batch->capacity` number of scalars and points on batch\n+ *  object's scratch space */\n+static int secp256k1_batch_scratch_alloc(const secp256k1_callback* error_callback, secp256k1_batch* batch) {\n+    size_t checkpoint = secp256k1_scratch_checkpoint(error_callback, batch->data);\n+    size_t count = batch->capacity;\n+\n+    VERIFY_CHECK(count > 0);\n+\n+    batch->scalars = (secp256k1_scalar*)secp256k1_scratch_alloc(error_callback, batch->data, count*sizeof(secp256k1_scalar));\n+    batch->points = (secp256k1_gej*)secp256k1_scratch_alloc(error_callback, batch->data, count*sizeof(secp256k1_gej));\n+\n+    /* If scalar or point allocation fails, restore scratch space to previous state */\n+    if (batch->scalars == NULL || batch->points == NULL) {\n+        secp256k1_scratch_apply_checkpoint(error_callback, batch->data, checkpoint);\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0340/batch\")||SHA256(\"BIP0340/batch\"). */\n+static void secp256k1_batch_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x79e3e0d2ul;\n+    sha->s[1] = 0x12284f32ul;\n+    sha->s[2] = 0xd7d89e1cul;\n+    sha->s[3] = 0x6491ea9aul;\n+    sha->s[4] = 0xad823b2ful;\n+    sha->s[5] = 0xfacfe0b6ul;\n+    sha->s[6] = 0x342b78baul;\n+    sha->s[7] = 0x12ece87cul;\n+\n+    sha->bytes = 64;\n+}\n+\n+secp256k1_batch* secp256k1_batch_create(const secp256k1_context* ctx, size_t max_terms, const unsigned char *aux_rand16) {\n+    size_t batch_size;\n+    secp256k1_batch* batch;\n+    size_t batch_scratch_size;\n+    unsigned char zeros[16] = {0};\n+    /* max number of scalar-point pairs on scratch up to which Strauss multi multiplication is efficient */\n+    if (max_terms > STRAUSS_MAX_TERMS_PER_BATCH) {\n+        max_terms = STRAUSS_MAX_TERMS_PER_BATCH;\n+    }\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(max_terms != 0);\n+\n+    batch_size = sizeof(secp256k1_batch);\n+    batch = (secp256k1_batch *)checked_malloc(&ctx->error_callback, batch_size);\n+    batch_scratch_size = secp256k1_batch_scratch_size(max_terms);\n+    if (batch != NULL) {\n+        /* create scratch space inside batch object, if that fails return NULL*/\n+        batch->data = secp256k1_scratch_create(&ctx->error_callback, batch_scratch_size);\n+        if (batch->data == NULL) {\n+            return NULL;\n+        }\n+        /* allocate memeory for `max_terms` number of scalars and points on scratch space */",
      "path": "src/modules/batch/main_impl.h",
      "position": 126,
      "original_position": 126,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit\r\n\r\n```suggestion\r\n        /* allocate memory for `max_terms` number of scalars and points on scratch space */\r\n```",
      "created_at": "2025-07-06T19:15:27Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188522423",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188522423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188522868",
      "pull_request_review_id": 2991555532,
      "id": 2188522868,
      "node_id": "PRRC_kwDOAP4Jqs6CcjV0",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvement Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;\n+\n+/** Create a secp256k1 batch object object (in dynamically allocated memory).\n+ *\n+ *  This function uses malloc to allocate memory. It is guaranteed that malloc is\n+ *  called at most twice for every call of this function.\n+ *\n+ *  Returns: a newly created batch object.\n+ *  Args:        ctx: an existing `secp256k1_context` object. Not to be confused\n+ *                    with the batch object object that this function creates.\n+ *  In:    max_terms: Max number of (scalar, curve point) pairs that the batch\n+ *                    object can store.\n+ *                    1. `batch_add_schnorrsig`         - adds two scalar-point pairs to the batch\n+ *                    2. `batch_add_xonpub_tweak_check` - adds one scalar-point pair to the batch\n+ *                    Hence, for adding n schnorrsigs and m tweak checks, `max_terms`\n+ *                    should be set to 2*n + m.\n+ *        aux_rand16: 16 bytes of fresh randomness. While recommended to provide\n+ *                    this, it is only supplemental to security and can be NULL. A\n+ *                    NULL argument is treated the same as an all-zero one.\n+ */\n+SECP256K1_API secp256k1_batch* secp256k1_batch_create(\n+    const secp256k1_context* ctx,\n+    size_t max_terms,\n+    const unsigned char *aux_rand16\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_WARN_UNUSED_RESULT;\n+\n+/** Destroy a secp256k1 batch object (created in dynamically allocated memory).\n+ *\n+ *  The batch object's pointer may not be used afterwards.\n+ *\n+ *  Args:       ctx: a secp256k1 context object.\n+ *            batch: an existing batch object to destroy, constructed\n+ *                   using `secp256k1_batch_create`\n+ */\n+SECP256K1_API void secp256k1_batch_destroy(\n+    const secp256k1_context* ctx,\n+    secp256k1_batch* batch\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+\n+/** Checks if a batch can be used by the `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Returns: 1: batch can be used by `secp256k1_batch_add_*` APIs.\n+ *           0: batch cannot be used by `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Args:    ctx: a secp256k1 context object (can be initialized for none).\n+ *         batch: a secp256k1 batch object that contains a set of schnorrsigs/tweaks.\n+ *\n+ *  You are advised to check if `secp256k1_batch_usable` returns 1 before calling\n+ *  any `secp256k1_batch_add_*` API. We recommend this because `secp256k1_batch_add_*`\n+ *  will fail in two cases:\n+ *       - case 1: unparsable input (schnorrsig or tweak check)\n+ *       - case 2: unusable (or invalid) batch\n+ *  Calling `secp256k1_batch_usable` beforehand helps eliminate case 2 if\n+ *  `secp256k1_batch_add_*` fails.\n+ *\n+ *  If you ignore the above advice, all the secp256k1_batch APIs will still\n+ *  work correctly. It simply makes it hard to understand the reason behind\n+ *  `secp256k1_batch_add_*` failure (if occurs).\n+ */\n+SECP256K1_API int secp256k1_batch_usable(\n+    const secp256k1_context *ctx,\n+    const secp256k1_batch *batch\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+\n+/** Verify the set of schnorr signatures or tweaked pubkeys present in the secp256k1_batch.\n+ *\n+ *  Returns: 1: every schnorrsig/tweak (in batch) is valid\n+ *           0: atleaset one of the schnorrsig/tweak (in batch) is invalid",
      "path": "include/secp256k1_batch.h",
      "position": 94,
      "original_position": 94,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit\r\n\r\n```suggestion\r\n *           0: at least one of the schnorrsig/tweak (in batch) is invalid\r\n```",
      "created_at": "2025-07-06T19:17:38Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188522868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188522868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188525783",
      "pull_request_review_id": 2991555532,
      "id": 2188525783,
      "node_id": "PRRC_kwDOAP4Jqs6CckDX",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvement Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;\n+\n+/** Create a secp256k1 batch object object (in dynamically allocated memory).\n+ *\n+ *  This function uses malloc to allocate memory. It is guaranteed that malloc is\n+ *  called at most twice for every call of this function.\n+ *\n+ *  Returns: a newly created batch object.\n+ *  Args:        ctx: an existing `secp256k1_context` object. Not to be confused\n+ *                    with the batch object object that this function creates.\n+ *  In:    max_terms: Max number of (scalar, curve point) pairs that the batch\n+ *                    object can store.\n+ *                    1. `batch_add_schnorrsig`         - adds two scalar-point pairs to the batch\n+ *                    2. `batch_add_xonpub_tweak_check` - adds one scalar-point pair to the batch\n+ *                    Hence, for adding n schnorrsigs and m tweak checks, `max_terms`\n+ *                    should be set to 2*n + m.\n+ *        aux_rand16: 16 bytes of fresh randomness. While recommended to provide\n+ *                    this, it is only supplemental to security and can be NULL. A\n+ *                    NULL argument is treated the same as an all-zero one.\n+ */\n+SECP256K1_API secp256k1_batch* secp256k1_batch_create(\n+    const secp256k1_context* ctx,\n+    size_t max_terms,\n+    const unsigned char *aux_rand16\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_WARN_UNUSED_RESULT;\n+\n+/** Destroy a secp256k1 batch object (created in dynamically allocated memory).\n+ *\n+ *  The batch object's pointer may not be used afterwards.\n+ *\n+ *  Args:       ctx: a secp256k1 context object.\n+ *            batch: an existing batch object to destroy, constructed\n+ *                   using `secp256k1_batch_create`\n+ */\n+SECP256K1_API void secp256k1_batch_destroy(\n+    const secp256k1_context* ctx,\n+    secp256k1_batch* batch\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+\n+/** Checks if a batch can be used by the `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Returns: 1: batch can be used by `secp256k1_batch_add_*` APIs.\n+ *           0: batch cannot be used by `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Args:    ctx: a secp256k1 context object (can be initialized for none).\n+ *         batch: a secp256k1 batch object that contains a set of schnorrsigs/tweaks.\n+ *\n+ *  You are advised to check if `secp256k1_batch_usable` returns 1 before calling\n+ *  any `secp256k1_batch_add_*` API. We recommend this because `secp256k1_batch_add_*`\n+ *  will fail in two cases:\n+ *       - case 1: unparsable input (schnorrsig or tweak check)\n+ *       - case 2: unusable (or invalid) batch\n+ *  Calling `secp256k1_batch_usable` beforehand helps eliminate case 2 if\n+ *  `secp256k1_batch_add_*` fails.\n+ *\n+ *  If you ignore the above advice, all the secp256k1_batch APIs will still\n+ *  work correctly. It simply makes it hard to understand the reason behind\n+ *  `secp256k1_batch_add_*` failure (if occurs).\n+ */\n+SECP256K1_API int secp256k1_batch_usable(",
      "path": "include/secp256k1_batch.h",
      "position": 86,
      "original_position": 86,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand the rationale given here but I am still not sure we really need this function. As far as I understand this only returns what result is set to and only the verify function could set result to false. So this means for this to be useful, the user would first need to have called verify and ignored the result. I am not sure in which context this would really be needed, maybe in some concurrency scenarios? But even then it feels like users should be handling that differently. Happy to be convinced otherwise but currently I would vote to remove it if there isn't some use case I am missing.",
      "created_at": "2025-07-06T19:29:00Z",
      "updated_at": "2025-07-06T19:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2188525783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2188525783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2240498291",
      "pull_request_review_id": 3068512641,
      "id": 2240498291,
      "node_id": "PRRC_kwDOAP4Jqs6Fi0pz",
      "diff_hunk": "@@ -80,6 +80,7 @@ esac\n     --enable-module-extrakeys=\"$EXTRAKEYS\" \\\n     --enable-module-schnorrsig=\"$SCHNORRSIG\" \\\n     --enable-module-musig=\"$MUSIG\" \\\n+    --enable-module-batch=\"$BATCH\"",
      "path": "ci/ci.sh",
      "position": 1,
      "original_position": 13,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": 2188508820,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, yes. This is one of the reasons the CI fails. Thanks!",
      "created_at": "2025-07-29T17:23:41Z",
      "updated_at": "2025-07-29T17:23:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2240498291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2240498291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381296407",
      "pull_request_review_id": 3270751419,
      "id": 2381296407,
      "node_id": "PRRC_kwDOAP4Jqs6N77MX",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvement Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;\n+\n+/** Create a secp256k1 batch object object (in dynamically allocated memory).\n+ *\n+ *  This function uses malloc to allocate memory. It is guaranteed that malloc is\n+ *  called at most twice for every call of this function.\n+ *\n+ *  Returns: a newly created batch object.\n+ *  Args:        ctx: an existing `secp256k1_context` object. Not to be confused\n+ *                    with the batch object object that this function creates.\n+ *  In:    max_terms: Max number of (scalar, curve point) pairs that the batch\n+ *                    object can store.\n+ *                    1. `batch_add_schnorrsig`         - adds two scalar-point pairs to the batch\n+ *                    2. `batch_add_xonpub_tweak_check` - adds one scalar-point pair to the batch\n+ *                    Hence, for adding n schnorrsigs and m tweak checks, `max_terms`\n+ *                    should be set to 2*n + m.\n+ *        aux_rand16: 16 bytes of fresh randomness. While recommended to provide\n+ *                    this, it is only supplemental to security and can be NULL. A\n+ *                    NULL argument is treated the same as an all-zero one.\n+ */\n+SECP256K1_API secp256k1_batch* secp256k1_batch_create(\n+    const secp256k1_context* ctx,\n+    size_t max_terms,\n+    const unsigned char *aux_rand16\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_WARN_UNUSED_RESULT;\n+\n+/** Destroy a secp256k1 batch object (created in dynamically allocated memory).\n+ *\n+ *  The batch object's pointer may not be used afterwards.\n+ *\n+ *  Args:       ctx: a secp256k1 context object.\n+ *            batch: an existing batch object to destroy, constructed\n+ *                   using `secp256k1_batch_create`\n+ */\n+SECP256K1_API void secp256k1_batch_destroy(\n+    const secp256k1_context* ctx,\n+    secp256k1_batch* batch\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+\n+/** Checks if a batch can be used by the `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Returns: 1: batch can be used by `secp256k1_batch_add_*` APIs.\n+ *           0: batch cannot be used by `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Args:    ctx: a secp256k1 context object (can be initialized for none).\n+ *         batch: a secp256k1 batch object that contains a set of schnorrsigs/tweaks.\n+ *\n+ *  You are advised to check if `secp256k1_batch_usable` returns 1 before calling\n+ *  any `secp256k1_batch_add_*` API. We recommend this because `secp256k1_batch_add_*`\n+ *  will fail in two cases:\n+ *       - case 1: unparsable input (schnorrsig or tweak check)\n+ *       - case 2: unusable (or invalid) batch\n+ *  Calling `secp256k1_batch_usable` beforehand helps eliminate case 2 if\n+ *  `secp256k1_batch_add_*` fails.\n+ *\n+ *  If you ignore the above advice, all the secp256k1_batch APIs will still\n+ *  work correctly. It simply makes it hard to understand the reason behind\n+ *  `secp256k1_batch_add_*` failure (if occurs).\n+ */\n+SECP256K1_API int secp256k1_batch_usable(",
      "path": "include/secp256k1_batch.h",
      "position": 86,
      "original_position": 86,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": 2188525783,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good question! The verify function isn't just called by users - it can also be called internally by the `batch_add_` APIs. We call this transparent verification.\r\n\r\nHere's how it works: when a user creates a batch with `batch_create`, they specify a capacity for `n` items (schnorrsig or tweak checks). If they try to add more items than the capacity, the `batch_add_` APIs automatically run verification and clear out the batch object so the user can keep adding items.\r\n\r\nNow, if this intermediate verification call fails, there's no point in continuing to add more items to the batch object because the final verify (that the user will call) is going to fail anyway. With this API, users can detect the intermediate verification failure and abort early.\r\n\r\nBeyond this scenario, the API doesn't have much practical use. Users who know they'll stay within their batch capacity probably won't need this API. Since we don't provide a `batch_storage_left` API to show how many more items they can add, users might accidentally exceed the capacity without realizing it?",
      "created_at": "2025-09-26T08:09:01Z",
      "updated_at": "2025-09-26T09:24:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2381296407",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381296407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381296956",
      "pull_request_review_id": 3270752264,
      "id": 2381296956,
      "node_id": "PRRC_kwDOAP4Jqs6N77U8",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvement Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;\n+\n+/** Create a secp256k1 batch object object (in dynamically allocated memory).\n+ *\n+ *  This function uses malloc to allocate memory. It is guaranteed that malloc is\n+ *  called at most twice for every call of this function.\n+ *\n+ *  Returns: a newly created batch object.\n+ *  Args:        ctx: an existing `secp256k1_context` object. Not to be confused\n+ *                    with the batch object object that this function creates.\n+ *  In:    max_terms: Max number of (scalar, curve point) pairs that the batch\n+ *                    object can store.\n+ *                    1. `batch_add_schnorrsig`         - adds two scalar-point pairs to the batch\n+ *                    2. `batch_add_xonpub_tweak_check` - adds one scalar-point pair to the batch\n+ *                    Hence, for adding n schnorrsigs and m tweak checks, `max_terms`\n+ *                    should be set to 2*n + m.\n+ *        aux_rand16: 16 bytes of fresh randomness. While recommended to provide\n+ *                    this, it is only supplemental to security and can be NULL. A\n+ *                    NULL argument is treated the same as an all-zero one.\n+ */\n+SECP256K1_API secp256k1_batch* secp256k1_batch_create(\n+    const secp256k1_context* ctx,\n+    size_t max_terms,\n+    const unsigned char *aux_rand16\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_WARN_UNUSED_RESULT;\n+\n+/** Destroy a secp256k1 batch object (created in dynamically allocated memory).\n+ *\n+ *  The batch object's pointer may not be used afterwards.\n+ *\n+ *  Args:       ctx: a secp256k1 context object.\n+ *            batch: an existing batch object to destroy, constructed\n+ *                   using `secp256k1_batch_create`\n+ */\n+SECP256K1_API void secp256k1_batch_destroy(\n+    const secp256k1_context* ctx,\n+    secp256k1_batch* batch\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+\n+/** Checks if a batch can be used by the `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Returns: 1: batch can be used by `secp256k1_batch_add_*` APIs.\n+ *           0: batch cannot be used by `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Args:    ctx: a secp256k1 context object (can be initialized for none).\n+ *         batch: a secp256k1 batch object that contains a set of schnorrsigs/tweaks.\n+ *\n+ *  You are advised to check if `secp256k1_batch_usable` returns 1 before calling\n+ *  any `secp256k1_batch_add_*` API. We recommend this because `secp256k1_batch_add_*`\n+ *  will fail in two cases:\n+ *       - case 1: unparsable input (schnorrsig or tweak check)\n+ *       - case 2: unusable (or invalid) batch\n+ *  Calling `secp256k1_batch_usable` beforehand helps eliminate case 2 if\n+ *  `secp256k1_batch_add_*` fails.\n+ *\n+ *  If you ignore the above advice, all the secp256k1_batch APIs will still\n+ *  work correctly. It simply makes it hard to understand the reason behind\n+ *  `secp256k1_batch_add_*` failure (if occurs).\n+ */\n+SECP256K1_API int secp256k1_batch_usable(",
      "path": "include/secp256k1_batch.h",
      "position": 86,
      "original_position": 86,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": 2188525783,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the documentation doesn't explain this properly. I'll be sure to update them.",
      "created_at": "2025-09-26T08:09:14Z",
      "updated_at": "2025-09-26T08:09:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2381296956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381296956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381375849",
      "pull_request_review_id": 3270862483,
      "id": 2381375849,
      "node_id": "PRRC_kwDOAP4Jqs6N8Olp",
      "diff_hunk": "@@ -22,6 +22,7 @@ Features:\n * Optional module for Schnorr signatures according to [BIP-340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n * Optional module for ElligatorSwift key exchange according to [BIP-324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki).\n * Optional module for MuSig2 Schnorr multi-signatures according to [BIP-327](https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki).\n+* Optional module for Batch Verification (experimental).",
      "path": "README.md",
      "position": 1,
      "original_position": 4,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": 2188506773,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks. I'll update this to say \"BIP340-compatible batch verification\".\r\n\r\nThe main reason I didn't mention BIP340 initially was that this module doesn't strictly follow the specification. BIP340 requires generating randomizers by seeding ChaCha20 with the hash of all inputs, but with our API design, we don't know all the inputs beforehand. So we simply hash whatever inputs we have at the time.\r\n\r\nWe could technically defer randomizer generation until the verify function runs, so we'd know all inputs before creating the randomizer. But with transparent verification involved, there's no guarantee that users will stop adding inputs after the verify function is called. So, I don't see any huge benefit.",
      "created_at": "2025-09-26T08:32:36Z",
      "updated_at": "2025-09-26T08:32:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2381375849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381375849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2440489854",
      "pull_request_review_id": 3350982498,
      "id": 2440489854,
      "node_id": "PRRC_kwDOAP4Jqs6Rdut-",
      "diff_hunk": "@@ -0,0 +1,13 @@\n+#!/bin/bash",
      "path": "doc/speedup-batch/bench.sh",
      "position": 1,
      "original_position": 1,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n#!/usr/bin/env bash\r\n```",
      "created_at": "2025-10-17T16:06:52Z",
      "updated_at": "2025-10-20T13:04:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2440489854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2440489854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2444894063",
      "pull_request_review_id": 3350982498,
      "id": 2444894063,
      "node_id": "PRRC_kwDOAP4Jqs6Ruh9v",
      "diff_hunk": "@@ -45,6 +54,23 @@ static void bench_schnorrsig_verify(void* arg, int iters) {\n     }\n }\n \n+#ifdef ENABLE_MODULE_BATCH\n+static void bench_schnorrsig_verify_n(void* arg, int iters) {\n+    bench_schnorrsig_data *data = (bench_schnorrsig_data *)arg;\n+    int i, j;\n+\n+    for (j = 0; j < iters/data->n; j++) {\n+        for (i = 0; i < data->n; i++) {\n+            secp256k1_xonly_pubkey pk;\n+            CHECK(secp256k1_xonly_pubkey_parse(data->ctx, &pk, data->pk[j+i]) == 1);\n+            CHECK(secp256k1_batch_usable(data->ctx, data->batch) == 1);\n+            CHECK(secp256k1_batch_add_schnorrsig(data->ctx, data->batch, data->sigs[j+i], data->msgs[j+i], MSGLEN, &pk) == 1);",
      "path": "src/modules/schnorrsig/bench_impl.h",
      "position": 36,
      "original_position": 36,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't the array elements in this block be indexed as `[j*data->n + i]` (same for tweak checks)?",
      "created_at": "2025-10-20T12:38:45Z",
      "updated_at": "2025-10-20T13:04:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2444894063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2444894063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": 64,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2444956500",
      "pull_request_review_id": 3350982498,
      "id": 2444956500,
      "node_id": "PRRC_kwDOAP4Jqs6RuxNU",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+#ifndef SECP256K1_BATCH_H\n+#define SECP256K1_BATCH_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a Batch Verification object that supports:\n+ *\n+ *  1. Schnorr signatures compliant with Bitcoin Improvement Proposal 340\n+ *     \"Schnorr Signatures for secp256k1\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n+ *\n+ *  2. Taproot commitments compliant with Bitcoin Improvement Proposal 341\n+ *     \"Taproot: SegWit version 1 spending rules\"\n+ *     (https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds information required for the batch verification.\n+ *\n+ *  The purpose of this structure is to store elliptic curve points, their scalar\n+ *  coefficients, and scalar coefficient of generator point participating in Multi-Scalar\n+ *  Point Multiplication computation, which is done by `secp256k1_ecmult_strauss_batch_internal`\n+ */\n+typedef struct secp256k1_batch_struct secp256k1_batch;\n+\n+/** Create a secp256k1 batch object object (in dynamically allocated memory).\n+ *\n+ *  This function uses malloc to allocate memory. It is guaranteed that malloc is\n+ *  called at most twice for every call of this function.\n+ *\n+ *  Returns: a newly created batch object.\n+ *  Args:        ctx: an existing `secp256k1_context` object. Not to be confused\n+ *                    with the batch object object that this function creates.\n+ *  In:    max_terms: Max number of (scalar, curve point) pairs that the batch\n+ *                    object can store.\n+ *                    1. `batch_add_schnorrsig`         - adds two scalar-point pairs to the batch\n+ *                    2. `batch_add_xonpub_tweak_check` - adds one scalar-point pair to the batch\n+ *                    Hence, for adding n schnorrsigs and m tweak checks, `max_terms`\n+ *                    should be set to 2*n + m.\n+ *        aux_rand16: 16 bytes of fresh randomness. While recommended to provide\n+ *                    this, it is only supplemental to security and can be NULL. A\n+ *                    NULL argument is treated the same as an all-zero one.\n+ */\n+SECP256K1_API secp256k1_batch* secp256k1_batch_create(\n+    const secp256k1_context* ctx,\n+    size_t max_terms,\n+    const unsigned char *aux_rand16\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_WARN_UNUSED_RESULT;\n+\n+/** Destroy a secp256k1 batch object (created in dynamically allocated memory).\n+ *\n+ *  The batch object's pointer may not be used afterwards.\n+ *\n+ *  Args:       ctx: a secp256k1 context object.\n+ *            batch: an existing batch object to destroy, constructed\n+ *                   using `secp256k1_batch_create`\n+ */\n+SECP256K1_API void secp256k1_batch_destroy(\n+    const secp256k1_context* ctx,\n+    secp256k1_batch* batch\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+\n+/** Checks if a batch can be used by the `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Returns: 1: batch can be used by `secp256k1_batch_add_*` APIs.\n+ *           0: batch cannot be used by `secp256k1_batch_add_*` APIs.\n+ *\n+ *  Args:    ctx: a secp256k1 context object (can be initialized for none).\n+ *         batch: a secp256k1 batch object that contains a set of schnorrsigs/tweaks.\n+ *\n+ *  You are advised to check if `secp256k1_batch_usable` returns 1 before calling\n+ *  any `secp256k1_batch_add_*` API. We recommend this because `secp256k1_batch_add_*`\n+ *  will fail in two cases:\n+ *       - case 1: unparsable input (schnorrsig or tweak check)\n+ *       - case 2: unusable (or invalid) batch\n+ *  Calling `secp256k1_batch_usable` beforehand helps eliminate case 2 if\n+ *  `secp256k1_batch_add_*` fails.\n+ *\n+ *  If you ignore the above advice, all the secp256k1_batch APIs will still\n+ *  work correctly. It simply makes it hard to understand the reason behind\n+ *  `secp256k1_batch_add_*` failure (if occurs).\n+ */\n+SECP256K1_API int secp256k1_batch_usable(",
      "path": "include/secp256k1_batch.h",
      "position": 86,
      "original_position": 86,
      "commit_id": "569c06f2af7f94f452855fe86117c1713a35e104",
      "original_commit_id": "410abb205a93b5c84a00a4e9e478c852b6dc6d69",
      "in_reply_to_id": 2188525783,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Now, if this intermediate verification call fails, there's no point in continuing to add more items to the batch object because the final verify (that the user will call) is going to fail anyway. With this API, users can detect the intermediate verification failure and abort early.\r\n\r\nIf there is intermediate verification failure, wouldn't users already detect that because the *_add function fails? There is already a branch right at the start of `secp256k1_batch_add_schnorrsig` that makes the function fail if the intermediate result is 0:\r\nhttps://github.com/bitcoin-core/secp256k1/blob/569c06f2af7f94f452855fe86117c1713a35e104/src/modules/schnorrsig/batch_add_impl.h#L93-L95\r\n\r\nWhat appears to be inconsistent right now is when `secp256k1_batch_add_schnorrsig` does internal verification of the batch, the return value is ignored.\r\nhttps://github.com/bitcoin-core/secp256k1/blob/569c06f2af7f94f452855fe86117c1713a35e104/src/modules/schnorrsig/batch_add_impl.h#L113-L115\r\n\r\nIf `secp256k1_batch_add_schnorrsig` would return 0 in that case, I don't see a use for `batch_unusable`.",
      "created_at": "2025-10-20T13:03:26Z",
      "updated_at": "2025-10-20T13:04:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134#discussion_r2444956500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2444956500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    }
  ]
}