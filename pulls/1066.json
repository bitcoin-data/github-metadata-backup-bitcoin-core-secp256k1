{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066",
    "id": 834927183,
    "node_id": "PR_kwDOAP4Jqs4xw_pP",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1066.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1066.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
    "number": 1066,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Abstract out and merge all the magnitude/normalized logic",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right now, all the logic for propagating/computing the magnitude/normalized fields in `secp256k1_fe` (when `VERIFY` is defined) and the code for checking it, is duplicated across the two field implementations. I believe that is undesirable, as these properties should purely be a function of the performed fe_ functions, and not of the choice of field implementation. This becomes even uglier with #967, which would copy all that, and even needs an additional dimension that would then need to be added to the two other fields. It's also related to #1001, which I think will become easier if it doesn't need to be done/reasoned about separately for every field.\r\n\r\nThis PR moves all logic around these fields (collectively called field verification) to implementations in field_impl.h, which dispatch to renamed functions in field_*_impl.h for the actual implementation.\r\n\r\nFixes #1060.",
    "labels": [],
    "created_at": "2022-01-29T00:41:36Z",
    "updated_at": "2023-05-11T12:24:11Z",
    "closed_at": "2023-05-11T12:24:11Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-05-11T12:24:11Z",
    "merge_commit_sha": "c63ec88ebf9652e8fb559d996436ad83d77ad226",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:202201_uniform_fe_rules",
      "ref": "202201_uniform_fe_rules",
      "sha": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 16648672,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODY3Mg==",
        "name": "secp256k1",
        "full_name": "sipa/secp256k1",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/secp256k1",
        "archive_url": "https://api.github.com/repos/sipa/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/sipa/secp256k1/events",
        "forks_url": "https://api.github.com/repos/sipa/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/sipa/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/sipa/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/sipa/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/sipa/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/sipa/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/sipa/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/sipa/secp256k1/hooks",
        "svn_url": "https://github.com/sipa/secp256k1",
        "language": "C",
        "forks_count": 20,
        "stargazers_count": 43,
        "watchers_count": 43,
        "size": 11487,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T17:42:23Z",
        "created_at": "2014-02-08T17:33:30Z",
        "updated_at": "2023-05-11T11:08:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "341cc197264da60019a6f70fb54e657a19b46f8f",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 948,
        "stargazers_count": 1768,
        "watchers_count": 1768,
        "size": 10062,
        "default_branch": "master",
        "open_issues_count": 142,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-12T16:38:48Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-06-12T17:38:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 665,
    "deletions": 523,
    "changed_files": 6,
    "commits": 29,
    "review_comments": 80,
    "comments": 11
  },
  "events": [
    {
      "event": "reviewed",
      "id": 867229311,
      "node_id": "PRR_kwDOAP4Jqs4zsN5_",
      "url": null,
      "actor": null,
      "commit_id": "cda9763adbdb3dbe6a8a0dfebc9693000a0848c5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "PR looks good to me otherwise. Net negative diff :tada:",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-867229311",
      "submitted_at": "2022-01-30T22:56:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 868334174,
      "node_id": "PRR_kwDOAP4Jqs4zwbpe",
      "url": null,
      "actor": null,
      "commit_id": "cda9763adbdb3dbe6a8a0dfebc9693000a0848c5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThe process you used (rename `fe_` to `fe_impl`, move verification into new `fe_` functions in `field_impl.h`) makes sense.\r\n\r\nI don't see any other relevant `#ifdef VERIFY` in `field_10x26_impl.h` or `field_5x52_impl.h` so it seems like you covered everything.\r\n\r\nI just have a few clarifying questions, and then I want to do one final pass (maybe there's (1) some easy semi-automated way to check/reproduce the changes or (2) some more macros that can make `field_impl.h` shorter).",
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-868334174",
      "submitted_at": "2022-01-31T20:25:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5984605701,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAFktdYF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5984605701",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-31T23:40:22Z"
    },
    {
      "event": "commented",
      "id": 1026322605,
      "node_id": "IC_kwDOAP4Jqs49LHCt",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1026322605",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-31T23:40:51Z",
      "updated_at": "2022-01-31T23:40:51Z",
      "author_association": "MEMBER",
      "body": "Made some significant changes here, and addressed some of the comments.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1026322605",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "reviewed",
      "id": 868593568,
      "node_id": "PRR_kwDOAP4Jqs4zxa-g",
      "url": null,
      "actor": null,
      "commit_id": "8df6f751653333a0ca3a91ffb3508b8ca0a6e6df",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "New approach makes a lot of sense and commits are very well structured. Looks good overall, I just have a few cosmetic comments (feel free not to apply all of them).",
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-868593568",
      "submitted_at": "2022-02-01T03:34:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "commented",
      "id": 1026781626,
      "node_id": "IC_kwDOAP4Jqs49M3G6",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1026781626",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T12:16:16Z",
      "updated_at": "2022-02-01T12:16:16Z",
      "author_association": "MEMBER",
      "body": "Concept ACK \r\n\r\nBut is there you reason why you prefer to do this before #1001? (@peterdettman  and I argued to in #1060 that it may make sense to solve #1001.)\r\n\r\nI haven't looked at the details here but I think this will non-trivially conflict with https://github.com/bitcoin-core/secp256k1/pull/1062. @sipa can you have a look and suggest how we should move forward?\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1026781626",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "mentioned",
      "id": 5987768310,
      "node_id": "MEE_lADOAP4Jqs5CovIlzwAAAAFk5hf2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5987768310",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T12:16:16Z"
    },
    {
      "event": "subscribed",
      "id": 5987768317,
      "node_id": "SE_lADOAP4Jqs5CovIlzwAAAAFk5hf9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5987768317",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T12:16:16Z"
    },
    {
      "event": "mentioned",
      "id": 5987768326,
      "node_id": "MEE_lADOAP4Jqs5CovIlzwAAAAFk5hgG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5987768326",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T12:16:16Z"
    },
    {
      "event": "subscribed",
      "id": 5987768330,
      "node_id": "SE_lADOAP4Jqs5CovIlzwAAAAFk5hgK",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5987768330",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T12:16:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5989224615,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAFk_FCn",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989224615",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T15:41:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5989265007,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAFk_O5v",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989265007",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T15:47:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5989698604,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAFlA4ws",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989698604",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T16:44:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5989867770,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAFlBiD6",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989867770",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:07:50Z"
    },
    {
      "event": "commented",
      "id": 1027084693,
      "node_id": "IC_kwDOAP4Jqs49OBGV",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1027084693",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:12:11Z",
      "updated_at": "2022-02-01T17:12:11Z",
      "author_association": "MEMBER",
      "body": "@real-or-random \r\n\r\n> But is there you reason why you prefer to do this before #1001? (@peterdettman and I argued to in #1060 that it may make sense to solve #1001.)\r\n\r\nThe impetus for this is really that I want to bring #967 up-to-date and more production-ready, and doing it properly I think would be very unclear without a change like this (having details from the \"old\" fields leak into the verify checks of the new one etc).\r\n\r\nI'll comment in #1060, but I think this PR makes it at least obvious in what places norm/mag are not compile-time constants.\r\n\r\n> I haven't looked at the details here but I think this will non-trivially conflict with #1062. @sipa can you have a look and suggest how we should move forward?\r\n\r\nIt will. That's one of the reasons why I kept the changes for each function in separate commits. So I'm happy to rebase this after #1062, or otherwise incorporate the commits here.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1027084693",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "mentioned",
      "id": 5989898374,
      "node_id": "MEE_lADOAP4Jqs5CovIlzwAAAAFlBpiG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989898374",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:12:11Z"
    },
    {
      "event": "subscribed",
      "id": 5989898382,
      "node_id": "SE_lADOAP4Jqs5CovIlzwAAAAFlBpiO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989898382",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:12:11Z"
    },
    {
      "event": "mentioned",
      "id": 5989898392,
      "node_id": "MEE_lADOAP4Jqs5CovIlzwAAAAFlBpiY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989898392",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:12:11Z"
    },
    {
      "event": "subscribed",
      "id": 5989898400,
      "node_id": "SE_lADOAP4Jqs5CovIlzwAAAAFlBpig",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989898400",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:12:12Z"
    },
    {
      "event": "mentioned",
      "id": 5989898418,
      "node_id": "MEE_lADOAP4Jqs5CovIlzwAAAAFlBpiy",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989898418",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:12:12Z"
    },
    {
      "event": "subscribed",
      "id": 5989898423,
      "node_id": "SE_lADOAP4Jqs5CovIlzwAAAAFlBpi3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5989898423",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T17:12:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6772431783,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAGTqxun",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6772431783",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-08T19:05:09Z"
    },
    {
      "event": "commented",
      "id": 1150290014,
      "node_id": "IC_kwDOAP4Jqs5EkAhe",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1150290014",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-08T19:05:28Z",
      "updated_at": "2022-06-08T19:05:28Z",
      "author_association": "MEMBER",
      "body": "Rebased.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1150290014",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6772479391,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAGTq9Wf",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6772479391",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-08T19:13:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7835672647,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAHTCuBH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7835672647",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-17T16:31:01Z"
    },
    {
      "event": "commented",
      "id": 1318895915,
      "node_id": "IC_kwDOAP4Jqs5OnMEr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1318895915",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-17T16:31:14Z",
      "updated_at": "2022-11-17T16:31:14Z",
      "author_association": "MEMBER",
      "body": "Rebased, adding an abstraction for `secp256k1_fe_half`.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1318895915",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8164024466,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAHmnSCS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8164024466",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-05T21:15:35Z"
    },
    {
      "event": "commented",
      "id": 1372781091,
      "node_id": "IC_kwDOAP4Jqs5R0voj",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1372781091",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-05T21:16:52Z",
      "updated_at": "2023-01-05T21:16:52Z",
      "author_association": "MEMBER",
      "body": "Rebased after merge of #1178.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1372781091",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9218859912,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlfKOI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9218859912",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T07:29:00Z"
    },
    {
      "event": "commented",
      "id": 1543478837,
      "node_id": "IC_kwDOAP4Jqs5b_541",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1543478837",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T07:30:15Z",
      "updated_at": "2023-05-11T07:30:15Z",
      "author_association": "MEMBER",
      "body": "Rebased after #1299, #1217, #979.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1543478837",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9218959790,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlfimu",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9218959790",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T07:40:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9219002901,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlftIV",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9219002901",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T07:45:07Z"
    },
    {
      "event": "reviewed",
      "id": 1421966043,
      "node_id": "PRR_kwDOAP4Jqs5UwXrb",
      "url": null,
      "actor": null,
      "commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1421966043",
      "submitted_at": "2023-05-11T08:20:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGIyOTU2NmM1MWIyYTQ3MTM5ZDYxMGJmNjg2ZTA5YWU5ZjlkMjQwMDE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b29566c51b2a47139d610bf686e09ae9f9d24001",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b29566c51b2a47139d610bf686e09ae9f9d24001",
      "tree": {
        "sha": "3139ea8da421ff5b917c2f179de111438127b5e2",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3139ea8da421ff5b917c2f179de111438127b5e2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/341cc197264da60019a6f70fb54e657a19b46f8f",
          "sha": "341cc197264da60019a6f70fb54e657a19b46f8f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/341cc197264da60019a6f70fb54e657a19b46f8f"
        }
      ],
      "message": "Merge magnitude/normalized fields, move/improve comments\n\nAlso split secp256k1_fe_verify into a generic and an implementation\nspecific part.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T08:25:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T22:39:30Z"
      },
      "sha": "b29566c51b2a47139d610bf686e09ae9f9d24001"
    },
    {
      "event": "reviewed",
      "id": 1422023613,
      "node_id": "PRR_kwDOAP4Jqs5Uwlu9",
      "url": null,
      "actor": null,
      "commit_id": "8c2745ac500d382e52ea0d5172ee0c966f451567",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422023613",
      "submitted_at": "2023-05-11T08:26:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422026874,
      "node_id": "PRR_kwDOAP4Jqs5Uwmh6",
      "url": null,
      "actor": null,
      "commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422026874",
      "submitted_at": "2023-05-11T08:28:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422037372,
      "node_id": "PRR_kwDOAP4Jqs5UwpF8",
      "url": null,
      "actor": null,
      "commit_id": "93bcf6587239e804794d21283f39da6078108f9c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422037372",
      "submitted_at": "2023-05-11T08:31:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422054092,
      "node_id": "PRR_kwDOAP4Jqs5UwtLM",
      "url": null,
      "actor": null,
      "commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422054092",
      "submitted_at": "2023-05-11T08:37:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422074085,
      "node_id": "PRR_kwDOAP4Jqs5UwyDl",
      "url": null,
      "actor": null,
      "commit_id": "8a95a15990f953236252cc41011fed822e4435a8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422074085",
      "submitted_at": "2023-05-11T08:43:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422075025,
      "node_id": "PRR_kwDOAP4Jqs5UwySR",
      "url": null,
      "actor": null,
      "commit_id": "83ca155c17ef929f1ceb9f08c5e77f450a2691fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422075025",
      "submitted_at": "2023-05-11T08:43:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422078077,
      "node_id": "PRR_kwDOAP4Jqs5UwzB9",
      "url": null,
      "actor": null,
      "commit_id": "df113a38c7c06a2d2ae32aa03d5d51720ee7d8a8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422078077",
      "submitted_at": "2023-05-11T08:45:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422090928,
      "node_id": "PRR_kwDOAP4Jqs5Uw2Kw",
      "url": null,
      "actor": null,
      "commit_id": "e0341e1a513d2c87c877cac04ce492195428e222",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422090928",
      "submitted_at": "2023-05-11T08:51:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9219859123,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIli-Kz",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9219859123",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:04:25Z"
    },
    {
      "event": "commented",
      "id": 1543620773,
      "node_id": "IC_kwDOAP4Jqs5cAcil",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1543620773",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:05:07Z",
      "updated_at": "2023-05-11T09:05:07Z",
      "author_association": "MEMBER",
      "body": "Made the following changes:\r\n\r\n```patch\r\nindex 3bf4810c..1a060203 100644\r\n--- a/src/field.h\r\n+++ b/src/field.h\r\n@@ -56,7 +56,13 @@\r\n #define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\r\n #endif\r\n \r\n-/* SECP256K1_FE_CONST_INNER is provided by the field implementation */\r\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\r\n+ *\r\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\r\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\r\n+ *\r\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\r\n+ */\r\n #define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\r\n \r\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\r\n@@ -95,7 +101,7 @@ static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\r\n #  define secp256k1_fe_half secp256k1_fe_impl_half\r\n #  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\r\n #  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\r\n-#endif /* defined(VERIFY) */\r\n+#endif /* !defined(VERIFY) */\r\n \r\n /** Normalize a field element.\r\n  *\r\n@@ -119,7 +125,7 @@ static void secp256k1_fe_normalize_var(secp256k1_fe *r);\r\n \r\n /** Determine whether r represents field element 0.\r\n  *\r\n- * On input r must be a valid field element.\r\n+ * On input, r must be a valid field element.\r\n  * Returns whether r = 0 (mod p).\r\n  */\r\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\r\n@@ -139,14 +145,14 @@ static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\r\n \r\n /** Set a field element to 0.\r\n  *\r\n- * On input, r does not need to be initialized.\r\n- * On output, r represents 0, is normalized and has magnitude 0.\r\n+ * On input, a does not need to be initialized.\r\n+ * On output, a represents 0, is normalized and has magnitude 0.\r\n  */\r\n static void secp256k1_fe_clear(secp256k1_fe *a);\r\n \r\n /** Determine whether a represents field element 0.\r\n  *\r\n- * On input a must be a valid normalized field element.\r\n+ * On input, a must be a valid normalized field element.\r\n  * Returns whether a = 0 (mod p).\r\n  *\r\n  * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\r\n@@ -156,7 +162,7 @@ static int secp256k1_fe_is_zero(const secp256k1_fe *a);\r\n \r\n /** Determine whether a (mod p) is odd.\r\n  *\r\n- * On input a must be a valid normalized field element.\r\n+ * On input, a must be a valid normalized field element.\r\n  * Returns (int(a) mod p) & 1.\r\n  */\r\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\r\n@@ -178,8 +184,8 @@ static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\r\n /** Compare the values represented by 2 field elements, without constant-time guarantee.\r\n  *\r\n  * On input, a and b must be valid normalized field elements.\r\n- * Let va = int(a) mod p, vb = int(v) mod p. Returns 1 if va > vb,\r\n- * -1 if va < vb, and 0 if va = vb.\r\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\r\n+ * in range 0..p-1).\r\n  */\r\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\r\n \r\n@@ -238,7 +244,7 @@ static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\r\n  *\r\n  * On input, a and b must be valid field elements; r does not need to be initialized.\r\n  * r and a may point to the same object, but neither can be equal to b. The magnitudes\r\n- * of a and b cannot exceed 8.\r\n+ * of a and b must not exceed 8.\r\n  * Performs {r = a * b}\r\n  * On output, r will have magnitude 1, but won't be normalized.\r\n  */\r\n@@ -257,10 +263,10 @@ static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\r\n  *\r\n  * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\r\n  * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\r\n- * represented by r will be a square itself. R and a cannot point to the same object.\r\n+ * represented by r will be a square itself. Variables r and a cannot point to the same object.\r\n  * On output, r will have magnitude 1 but will not be normalized.\r\n  */\r\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\r\n+static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe * SECP256K1_RESTRICT a);\r\n \r\n /** Compute the modular inverse of a field element.\r\n  *\r\ndiff --git a/src/field_10x26_impl.h b/src/field_10x26_impl.h\r\nindex 30a541f2..11838a36 100644\r\n--- a/src/field_10x26_impl.h\r\n+++ b/src/field_10x26_impl.h\r\n@@ -15,26 +15,25 @@\r\n #ifdef VERIFY\r\n static void secp256k1_fe_impl_verify(const secp256k1_fe *a) {\r\n     const uint32_t *d = a->n;\r\n-    int m = a->normalized ? 1 : 2 * a->magnitude, r = 1;\r\n-    r &= (d[0] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[1] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[2] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[3] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[4] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[5] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[6] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[7] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[8] <= 0x3FFFFFFUL * m);\r\n-    r &= (d[9] <= 0x03FFFFFUL * m);\r\n+    int m = a->normalized ? 1 : 2 * a->magnitude;\r\n+    VERIFY_CHECK(d[0] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[1] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[2] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[3] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[4] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[5] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[6] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[7] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[8] <= 0x3FFFFFFUL * m);\r\n+    VERIFY_CHECK(d[9] <= 0x03FFFFFUL * m);\r\n     if (a->normalized) {\r\n-        if (r && (d[9] == 0x03FFFFFUL)) {\r\n+        if (d[9] == 0x03FFFFFUL) {\r\n             uint32_t mid = d[8] & d[7] & d[6] & d[5] & d[4] & d[3] & d[2];\r\n             if (mid == 0x3FFFFFFUL) {\r\n-                r &= ((d[1] + 0x40UL + ((d[0] + 0x3D1UL) >> 26)) <= 0x3FFFFFFUL);\r\n+                VERIFY_CHECK((d[1] + 0x40UL + ((d[0] + 0x3D1UL) >> 26)) <= 0x3FFFFFFUL);\r\n             }\r\n         }\r\n     }\r\n-    VERIFY_CHECK(r == 1);\r\n }\r\n #endif\r\n \r\ndiff --git a/src/field_5x52.h b/src/field_5x52.h\r\nindex 309f998c..f20c246f 100644\r\n--- a/src/field_5x52.h\r\n+++ b/src/field_5x52.h\r\n@@ -42,8 +42,6 @@ typedef struct {\r\n     ((uint64_t)(d6) >> 16) | (((uint64_t)(d7)) << 16) \\\r\n }\r\n \r\n-#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\r\n-\r\n typedef struct {\r\n     uint64_t n[4];\r\n } secp256k1_fe_storage;\r\ndiff --git a/src/field_5x52_impl.h b/src/field_5x52_impl.h\r\nindex 7839e650..1e9d0c5b 100644\r\n--- a/src/field_5x52_impl.h\r\n+++ b/src/field_5x52_impl.h\r\n@@ -21,19 +21,18 @@\r\n #ifdef VERIFY\r\n static void secp256k1_fe_impl_verify(const secp256k1_fe *a) {\r\n     const uint64_t *d = a->n;\r\n-    int m = a->normalized ? 1 : 2 * a->magnitude, r = 1;\r\n+    int m = a->normalized ? 1 : 2 * a->magnitude;\r\n    /* secp256k1 'p' value defined in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1. */\r\n-    r &= (d[0] <= 0xFFFFFFFFFFFFFULL * m);\r\n-    r &= (d[1] <= 0xFFFFFFFFFFFFFULL * m);\r\n-    r &= (d[2] <= 0xFFFFFFFFFFFFFULL * m);\r\n-    r &= (d[3] <= 0xFFFFFFFFFFFFFULL * m);\r\n-    r &= (d[4] <= 0x0FFFFFFFFFFFFULL * m);\r\n+    VERIFY_CHECK(d[0] <= 0xFFFFFFFFFFFFFULL * m);\r\n+    VERIFY_CHECK(d[1] <= 0xFFFFFFFFFFFFFULL * m);\r\n+    VERIFY_CHECK(d[2] <= 0xFFFFFFFFFFFFFULL * m);\r\n+    VERIFY_CHECK(d[3] <= 0xFFFFFFFFFFFFFULL * m);\r\n+    VERIFY_CHECK(d[4] <= 0x0FFFFFFFFFFFFULL * m);\r\n     if (a->normalized) {\r\n-        if (r && (d[4] == 0x0FFFFFFFFFFFFULL) && ((d[3] & d[2] & d[1]) == 0xFFFFFFFFFFFFFULL)) {\r\n-            r &= (d[0] < 0xFFFFEFFFFFC2FULL);\r\n+        if ((d[4] == 0x0FFFFFFFFFFFFULL) && ((d[3] & d[2] & d[1]) == 0xFFFFFFFFFFFFFULL)) {\r\n+            VERIFY_CHECK(d[0] < 0xFFFFEFFFFFC2FULL);\r\n         }\r\n     }\r\n-    VERIFY_CHECK(r == 1);\r\n }\r\n #endif\r\n \r\ndiff --git a/src/field_impl.h b/src/field_impl.h\r\nindex 37fb1377..630c9dca 100644\r\n--- a/src/field_impl.h\r\n+++ b/src/field_impl.h\r\n@@ -154,12 +154,11 @@ static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }\r\n static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\r\n static void secp256k1_fe_verify(const secp256k1_fe *a) {\r\n     /* Magnitude between 0 and 32. */\r\n-    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\r\n+    VERIFY_CHECK((a->magnitude >= 0) && (a->magnitude <= 32));\r\n     /* Normalized is 0 or 1. */\r\n-    r &= (a->normalized == 0) | (a->normalized == 1);\r\n+    VERIFY_CHECK((a->normalized == 0) || (a->normalized == 1));\r\n     /* If normalized, magnitude must be 0 or 1. */\r\n-    if (a->normalized) r &= (a->magnitude <= 1);\r\n-    VERIFY_CHECK(r == 1);\r\n+    if (a->normalized) VERIFY_CHECK(a->magnitude <= 1);\r\n     /* Invoke implementation-specific checks. */\r\n     secp256k1_fe_impl_verify(a);\r\n }\r\n@@ -226,6 +225,7 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {\r\n     a->magnitude = 0;\r\n     a->normalized = 1;\r\n     secp256k1_fe_impl_clear(a);\r\n+    secp256k1_fe_verify(a);\r\n }\r\n \r\n static int secp256k1_fe_impl_is_zero(const secp256k1_fe *a);\r\n```",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1543620773",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9220097977,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlj4e5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9220097977",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:27:06Z"
    },
    {
      "event": "commented",
      "id": 1543653546,
      "node_id": "IC_kwDOAP4Jqs5cAkiq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1543653546",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:27:22Z",
      "updated_at": "2023-05-11T09:29:07Z",
      "author_association": "MEMBER",
      "body": "Made the following changes:\r\n\r\n```diff\r\nindex 1a060203..4ff8d938 100644\r\n--- a/src/field.h\r\n+++ b/src/field.h\r\n@@ -253,7 +253,7 @@ static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp2\r\n /** Square a field element.\r\n  *\r\n  * On input, a must be a valid field element; r does not need to be initialized. The magnitude\r\n- * of a cannot exceed 8.\r\n+ * of a must not exceed 8.\r\n  * Performs {r = a**2}\r\n  * On output, r will have magnitude 1, but won't be normalized.\r\n  */\r\n@@ -263,10 +263,10 @@ static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\r\n  *\r\n  * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\r\n  * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\r\n- * represented by r will be a square itself. Variables r and a cannot point to the same object.\r\n+ * represented by r will be a square itself. Variables r and a must not point to the same object.\r\n  * On output, r will have magnitude 1 but will not be normalized.\r\n  */\r\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe * SECP256K1_RESTRICT a);\r\n+static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a);\r\n \r\n /** Compute the modular inverse of a field element.\r\n  *\r\n```",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1543653546",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9220114212,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlj8ck",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9220114212",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:28:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9220190926,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlkPLO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9220190926",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:36:03Z"
    },
    {
      "event": "commented",
      "id": 1543669028,
      "node_id": "IC_kwDOAP4Jqs5cAoUk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1543669028",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:36:22Z",
      "updated_at": "2023-05-11T09:37:52Z",
      "author_association": "MEMBER",
      "body": "Made the following changes:\r\n\r\n```diff\r\ndiff --git a/src/field_10x26_impl.h b/src/field_10x26_impl.h\r\nindex 11838a36..0dacd596 100644\r\n--- a/src/field_10x26_impl.h\r\n+++ b/src/field_10x26_impl.h\r\n@@ -342,13 +342,14 @@ static void secp256k1_fe_impl_get_b32(unsigned char *r, const secp256k1_fe *a) {\r\n }\r\n \r\n SECP256K1_INLINE static void secp256k1_fe_impl_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {\r\n-    /* Verify that for each limb, the value we'll subtract from is larger than\r\n-     * the maximum permitted value for that limb. */\r\n+    /* For all legal values of m (0..31), the following properties hold: */\r\n     VERIFY_CHECK(0x3FFFC2FUL * 2 * (m + 1) >= 0x3FFFFFFUL * 2 * m);\r\n     VERIFY_CHECK(0x3FFFFBFUL * 2 * (m + 1) >= 0x3FFFFFFUL * 2 * m);\r\n     VERIFY_CHECK(0x3FFFFFFUL * 2 * (m + 1) >= 0x3FFFFFFUL * 2 * m);\r\n     VERIFY_CHECK(0x03FFFFFUL * 2 * (m + 1) >= 0x03FFFFFUL * 2 * m);\r\n \r\n+    /* Due to the properties above, the left hand in the subtractions below is never less than\r\n+     * the right hand. */\r\n     r->n[0] = 0x3FFFC2FUL * 2 * (m + 1) - a->n[0];\r\n     r->n[1] = 0x3FFFFBFUL * 2 * (m + 1) - a->n[1];\r\n     r->n[2] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[2];\r\ndiff --git a/src/field_5x52_impl.h b/src/field_5x52_impl.h\r\nindex 1e9d0c5b..2ac39bdd 100644\r\n--- a/src/field_5x52_impl.h\r\n+++ b/src/field_5x52_impl.h\r\n@@ -311,12 +311,13 @@ static void secp256k1_fe_impl_get_b32(unsigned char *r, const secp256k1_fe *a) {\r\n }\r\n \r\n SECP256K1_INLINE static void secp256k1_fe_impl_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {\r\n-    /* Verify that for each limb, the value we'll subtract from is larger than\r\n-     * the maximum permitted value for that limb. */\r\n+    /* For all legal values of m (0..31), the following properties hold: */\r\n     VERIFY_CHECK(0xFFFFEFFFFFC2FULL * 2 * (m + 1) >= 0xFFFFFFFFFFFFFULL * 2 * m);\r\n     VERIFY_CHECK(0xFFFFFFFFFFFFFULL * 2 * (m + 1) >= 0xFFFFFFFFFFFFFULL * 2 * m);\r\n     VERIFY_CHECK(0x0FFFFFFFFFFFFULL * 2 * (m + 1) >= 0x0FFFFFFFFFFFFULL * 2 * m);\r\n \r\n+    /* Due to the properties above, the left hand in the subtractions below is never less than\r\n+     * the right hand. */\r\n     r->n[0] = 0xFFFFEFFFFFC2FULL * 2 * (m + 1) - a->n[0];\r\n     r->n[1] = 0xFFFFFFFFFFFFFULL * 2 * (m + 1) - a->n[1];\r\n     r->n[2] = 0xFFFFFFFFFFFFFULL * 2 * (m + 1) - a->n[2];\r\n ```",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1543669028",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9220207163,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlkTI7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9220207163",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T09:37:38Z"
    },
    {
      "event": "reviewed",
      "id": 1422207692,
      "node_id": "PRR_kwDOAP4Jqs5UxSrM",
      "url": null,
      "actor": null,
      "commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422207692",
      "submitted_at": "2023-05-11T10:15:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdmYTUxOTU1NTkyY2NmNGZiNDI0YTdhNTM4MzcyYWQxNTllNzcyOTM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7fa51955592ccf4fb424a7a538372ad159e77293",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7fa51955592ccf4fb424a7a538372ad159e77293",
      "tree": {
        "sha": "03f42eb9d9a8cc0685cfdb004c07dfb18e9ce7f5",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/03f42eb9d9a8cc0685cfdb004c07dfb18e9ce7f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b29566c51b2a47139d610bf686e09ae9f9d24001",
          "sha": "b29566c51b2a47139d610bf686e09ae9f9d24001",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b29566c51b2a47139d610bf686e09ae9f9d24001"
        }
      ],
      "message": "Bugfix: correct SECP256K1_FE_CONST mag/norm fields",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:37Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-02-01T16:15:09Z"
      },
      "sha": "7fa51955592ccf4fb424a7a538372ad159e77293"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGI2YjZmOWNiOTdmNmM5MzEzODcxYzI3OGVjNzNmMjA5ZWY1MzdhNDQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b6b6f9cb97f6c9313871c278ec73f209ef537a44",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b6b6f9cb97f6c9313871c278ec73f209ef537a44",
      "tree": {
        "sha": "4df42ea4b7afe64b15279d552943a6788a4d4425",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4df42ea4b7afe64b15279d552943a6788a4d4425"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7fa51955592ccf4fb424a7a538372ad159e77293",
          "sha": "7fa51955592ccf4fb424a7a538372ad159e77293",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7fa51955592ccf4fb424a7a538372ad159e77293"
        }
      ],
      "message": "Abstract out verify logic for fe_normalize",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T22:51:12Z"
      },
      "sha": "b6b6f9cb97f6c9313871c278ec73f209ef537a44"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGUyOGI1MWY1MjI1NGI5MzgwNTM1MDM1NDU2N2E5NDRjYTRkNzlhZTI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e28b51f52254b93805350354567a944ca4d79ae2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e28b51f52254b93805350354567a944ca4d79ae2",
      "tree": {
        "sha": "f6b89975ce4e0f263c2590904e91119bf3601605",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/f6b89975ce4e0f263c2590904e91119bf3601605"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b6b6f9cb97f6c9313871c278ec73f209ef537a44",
          "sha": "b6b6f9cb97f6c9313871c278ec73f209ef537a44",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b6b6f9cb97f6c9313871c278ec73f209ef537a44"
        }
      ],
      "message": "Abstract out verify logic for fe_normalize_weak",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T22:54:22Z"
      },
      "sha": "e28b51f52254b93805350354567a944ca4d79ae2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDZjMzEzNzExMjBiYjg1YTM5N2JmMWNhYTczZmQxYzliODQwNWQzNWU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6c31371120bb85a397bf1caa73fd1c9b8405d35e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6c31371120bb85a397bf1caa73fd1c9b8405d35e",
      "tree": {
        "sha": "33f6d90424402ba78fdfb218394e37258187d4c1",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/33f6d90424402ba78fdfb218394e37258187d4c1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e28b51f52254b93805350354567a944ca4d79ae2",
          "sha": "e28b51f52254b93805350354567a944ca4d79ae2",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e28b51f52254b93805350354567a944ca4d79ae2"
        }
      ],
      "message": "Abstract out verify logic for fe_normalize_var",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T22:59:36Z"
      },
      "sha": "6c31371120bb85a397bf1caa73fd1c9b8405d35e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDg2NGY5ZGI0OTFiNGUxMjA0ZmRhNTE2ODE3NGIyMzVmOWVlZmI1NmU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/864f9db491b4e1204fda5168174b235f9eefb56e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/864f9db491b4e1204fda5168174b235f9eefb56e",
      "tree": {
        "sha": "7d64120aca7aa0bf71d2244f8d0f26c9a725c425",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7d64120aca7aa0bf71d2244f8d0f26c9a725c425"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6c31371120bb85a397bf1caa73fd1c9b8405d35e",
          "sha": "6c31371120bb85a397bf1caa73fd1c9b8405d35e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6c31371120bb85a397bf1caa73fd1c9b8405d35e"
        }
      ],
      "message": "Abstract out verify logic for fe_normalizes_to_zero{,_var}",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-31T21:51:10Z"
      },
      "sha": "864f9db491b4e1204fda5168174b235f9eefb56e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDE5YTJiZmVlZWFjNDI3NGJiZWNhN2Y4NzU3YTJlZTczYmRmMDM4OTU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/19a2bfeeeac4274bbeca7f8757a2ee73bdf03895",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/19a2bfeeeac4274bbeca7f8757a2ee73bdf03895",
      "tree": {
        "sha": "dffb5c609724ca57e54493b1ab8827410d4b5f58",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/dffb5c609724ca57e54493b1ab8827410d4b5f58"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/864f9db491b4e1204fda5168174b235f9eefb56e",
          "sha": "864f9db491b4e1204fda5168174b235f9eefb56e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/864f9db491b4e1204fda5168174b235f9eefb56e"
        }
      ],
      "message": "Abstract out verify logic for fe_set_int",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:04:15Z"
      },
      "sha": "19a2bfeeeac4274bbeca7f8757a2ee73bdf03895"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM3MDFkOWE0NzE5YWRmZjIwZmE4MzUxMWY5NDZlNGFiYmQ0ZDhjZGE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c701d9a4719adff20fa83511f946e4abbd4d8cda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c701d9a4719adff20fa83511f946e4abbd4d8cda",
      "tree": {
        "sha": "cbfa8c13e630e948c565ff1eb2fc36f379cca4d4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/cbfa8c13e630e948c565ff1eb2fc36f379cca4d4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/19a2bfeeeac4274bbeca7f8757a2ee73bdf03895",
          "sha": "19a2bfeeeac4274bbeca7f8757a2ee73bdf03895",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/19a2bfeeeac4274bbeca7f8757a2ee73bdf03895"
        }
      ],
      "message": "Abstract out verify logic for fe_clear",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-31T22:15:41Z"
      },
      "sha": "c701d9a4719adff20fa83511f946e4abbd4d8cda"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGQzZjNmZTg2MTZkMDJiZDFjNjIzNzZjMTMxOGJlNjljNjRlZWE5ODI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d3f3fe8616d02bd1c62376c1318be69c64eea982",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d3f3fe8616d02bd1c62376c1318be69c64eea982",
      "tree": {
        "sha": "0b642b431d104e3e0dc1f2a3bba667b25164a00c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0b642b431d104e3e0dc1f2a3bba667b25164a00c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c701d9a4719adff20fa83511f946e4abbd4d8cda",
          "sha": "c701d9a4719adff20fa83511f946e4abbd4d8cda",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c701d9a4719adff20fa83511f946e4abbd4d8cda"
        }
      ],
      "message": "Abstract out verify logic for fe_is_zero",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:07:55Z"
      },
      "sha": "d3f3fe8616d02bd1c62376c1318be69c64eea982"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM1ZTc4OGQ2NzJkNzgzMTVlNzI2OWZkMzc0M2VhZGFlNjQyODQ2OGU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c5e788d672d78315e7269fd3743eadae6428468e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c5e788d672d78315e7269fd3743eadae6428468e",
      "tree": {
        "sha": "5c638fdef658d4b658dd2ca401ab12cb489d9ac2",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/5c638fdef658d4b658dd2ca401ab12cb489d9ac2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d3f3fe8616d02bd1c62376c1318be69c64eea982",
          "sha": "d3f3fe8616d02bd1c62376c1318be69c64eea982",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d3f3fe8616d02bd1c62376c1318be69c64eea982"
        }
      ],
      "message": "Abstract out verify logic for fe_is_odd",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:11:21Z"
      },
      "sha": "c5e788d672d78315e7269fd3743eadae6428468e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdkN2Q0M2M2ZGQyNzQxODUzZGU0NjMxODgxZDc3YWUzOGExNGNkMjM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7d7d43c6dd2741853de4631881d77ae38a14cd23",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7d7d43c6dd2741853de4631881d77ae38a14cd23",
      "tree": {
        "sha": "0c8dc0c1551e31810c65a263c2ca7ccc1c963adf",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0c8dc0c1551e31810c65a263c2ca7ccc1c963adf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c5e788d672d78315e7269fd3743eadae6428468e",
          "sha": "c5e788d672d78315e7269fd3743eadae6428468e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c5e788d672d78315e7269fd3743eadae6428468e"
        }
      ],
      "message": "Improve comments/check for fe_equal{,_var}",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-31T22:34:36Z"
      },
      "sha": "7d7d43c6dd2741853de4631881d77ae38a14cd23"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGNlNGQyMDkzZTg2ZmVkY2E2NzZkYmJlNTliNTBiZGNmOGM1OTk3MDQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ce4d2093e86fedca676dbbe59b50bdcf8c599704",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ce4d2093e86fedca676dbbe59b50bdcf8c599704",
      "tree": {
        "sha": "d282ee07034d4d633003068655516ba85ff6cd4b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d282ee07034d4d633003068655516ba85ff6cd4b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7d7d43c6dd2741853de4631881d77ae38a14cd23",
          "sha": "7d7d43c6dd2741853de4631881d77ae38a14cd23",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7d7d43c6dd2741853de4631881d77ae38a14cd23"
        }
      ],
      "message": "Abstract out verify logic for fe_cmp_var",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:16:16Z"
      },
      "sha": "ce4d2093e86fedca676dbbe59b50bdcf8c599704"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGY3YTc2NjZhZWI4ZGI5MmI5MTcxZjQ3NjVmN2Q0MDViN2I3M2Q5NDY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f7a7666aeb8db92b9171f4765f7d405b7b73d946",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f7a7666aeb8db92b9171f4765f7d405b7b73d946",
      "tree": {
        "sha": "2f09c779467c338f58ce3de15422f7cebdef223d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/2f09c779467c338f58ce3de15422f7cebdef223d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ce4d2093e86fedca676dbbe59b50bdcf8c599704",
          "sha": "ce4d2093e86fedca676dbbe59b50bdcf8c599704",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ce4d2093e86fedca676dbbe59b50bdcf8c599704"
        }
      ],
      "message": "Abstract out verify logic for fe_set_b32",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:19:00Z"
      },
      "sha": "f7a7666aeb8db92b9171f4765f7d405b7b73d946"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDE0NDY3MDg5M2VjY2Q4NGQ2Mzg5NTFmNmM1YmFlNDNmYzk3ZTNjN2I",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/144670893eccd84d638951f6c5bae43fc97e3c7b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/144670893eccd84d638951f6c5bae43fc97e3c7b",
      "tree": {
        "sha": "074ccb273b9cfbef37ae262e6a97acabaf573e29",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/074ccb273b9cfbef37ae262e6a97acabaf573e29"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f7a7666aeb8db92b9171f4765f7d405b7b73d946",
          "sha": "f7a7666aeb8db92b9171f4765f7d405b7b73d946",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f7a7666aeb8db92b9171f4765f7d405b7b73d946"
        }
      ],
      "message": "Abstract out verify logic for fe_get_b32",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:23:54Z"
      },
      "sha": "144670893eccd84d638951f6c5bae43fc97e3c7b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDY1ZDgyYTM0NDUyNjU3NjczNzUzODNhNWI2OGI1ZjYxYWVhZGVmY2E",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/65d82a3445265767375383a5b68b5f61aeadefca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/65d82a3445265767375383a5b68b5f61aeadefca",
      "tree": {
        "sha": "21523a05371cbd4deec6d25a97159d894c528e92",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/21523a05371cbd4deec6d25a97159d894c528e92"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/144670893eccd84d638951f6c5bae43fc97e3c7b",
          "sha": "144670893eccd84d638951f6c5bae43fc97e3c7b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/144670893eccd84d638951f6c5bae43fc97e3c7b"
        }
      ],
      "message": "Abstract out verify logic for fe_negate",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:27:38Z"
      },
      "sha": "65d82a3445265767375383a5b68b5f61aeadefca"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdlN2FkN2ZmNTcwNjQ1MzA0NDU5MjQyMTA0NDA2ZDZlMWY3OTg1N2M",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7e7ad7ff570645304459242104406d6e1f79857c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7e7ad7ff570645304459242104406d6e1f79857c",
      "tree": {
        "sha": "6486c8bfdc02231645b176079b10f7dbb91d2855",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6486c8bfdc02231645b176079b10f7dbb91d2855"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/65d82a3445265767375383a5b68b5f61aeadefca",
          "sha": "65d82a3445265767375383a5b68b5f61aeadefca",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/65d82a3445265767375383a5b68b5f61aeadefca"
        }
      ],
      "message": "Abstract out verify logic for fe_mul_int",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:33:45Z"
      },
      "sha": "7e7ad7ff570645304459242104406d6e1f79857c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGUxNzllNjUxY2JiMjAwMzE5MDVlMDFmMzc1OTZlMjBlYzJjYjc4OGE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e179e651cbb20031905e01f37596e20ec2cb788a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e179e651cbb20031905e01f37596e20ec2cb788a",
      "tree": {
        "sha": "381ac0972d6a7d1359438d73072e95145dacebca",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/381ac0972d6a7d1359438d73072e95145dacebca"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7e7ad7ff570645304459242104406d6e1f79857c",
          "sha": "7e7ad7ff570645304459242104406d6e1f79857c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7e7ad7ff570645304459242104406d6e1f79857c"
        }
      ],
      "message": "Abstract out verify logic for fe_add",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:36:13Z"
      },
      "sha": "e179e651cbb20031905e01f37596e20ec2cb788a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDRjMjVmNmVmYmQ1ZjhiNDczOGMxYzE2ZGFmNzM5MDZkNDVjNWY1Nzk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4c25f6efbd5f8b4738c1c16daf73906d45c5f579",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4c25f6efbd5f8b4738c1c16daf73906d45c5f579",
      "tree": {
        "sha": "76fc7b2d2387b6ab2f881d8178e6622f214d0ab9",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/76fc7b2d2387b6ab2f881d8178e6622f214d0ab9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e179e651cbb20031905e01f37596e20ec2cb788a",
          "sha": "e179e651cbb20031905e01f37596e20ec2cb788a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e179e651cbb20031905e01f37596e20ec2cb788a"
        }
      ],
      "message": "Abstract out verify logic for fe_mul",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:40:33Z"
      },
      "sha": "4c25f6efbd5f8b4738c1c16daf73906d45c5f579"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDZhYjM1MDgyZWZlOTA0Y2JiN2NhNTIyNTEzNGExZDM2NDdlMzUzODg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6ab35082efe904cbb7ca5225134a1d3647e35388",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6ab35082efe904cbb7ca5225134a1d3647e35388",
      "tree": {
        "sha": "9c0b1a29f481af2d3928a4b23d643d00a50e171b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9c0b1a29f481af2d3928a4b23d643d00a50e171b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4c25f6efbd5f8b4738c1c16daf73906d45c5f579",
          "sha": "4c25f6efbd5f8b4738c1c16daf73906d45c5f579",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4c25f6efbd5f8b4738c1c16daf73906d45c5f579"
        }
      ],
      "message": "Abstract out verify logic for fe_sqr",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:18:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:42:47Z"
      },
      "sha": "6ab35082efe904cbb7ca5225134a1d3647e35388"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGJlODJiZDhlMDM0N2UwOTAwMzdmZjFkMzBhMjJhOWQ2MTRkYjhjOWY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/be82bd8e0347e090037ff1d30a22a9d614db8c9f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/be82bd8e0347e090037ff1d30a22a9d614db8c9f",
      "tree": {
        "sha": "536ee93fcecc9dfed2ef545e6b7229a98127b362",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/536ee93fcecc9dfed2ef545e6b7229a98127b362"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6ab35082efe904cbb7ca5225134a1d3647e35388",
          "sha": "6ab35082efe904cbb7ca5225134a1d3647e35388",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6ab35082efe904cbb7ca5225134a1d3647e35388"
        }
      ],
      "message": "Improve comments/checks for fe_sqrt",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:24:22Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-31T23:19:45Z"
      },
      "sha": "be82bd8e0347e090037ff1d30a22a9d614db8c9f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDFlNjg5NGJkZDc0YzBiOTQyMjRmMjg5MWM5ZjU1MDFhYzdhM2I4N2E",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1e6894bdd74c0b94224f2891c9f5501ac7a3b87a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1e6894bdd74c0b94224f2891c9f5501ac7a3b87a",
      "tree": {
        "sha": "4fe8a79cfae76f6aff47ab174aa4f43796e6aee7",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4fe8a79cfae76f6aff47ab174aa4f43796e6aee7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/be82bd8e0347e090037ff1d30a22a9d614db8c9f",
          "sha": "be82bd8e0347e090037ff1d30a22a9d614db8c9f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/be82bd8e0347e090037ff1d30a22a9d614db8c9f"
        }
      ],
      "message": "Abstract out verify logic for fe_cmov",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:24:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:45:42Z"
      },
      "sha": "1e6894bdd74c0b94224f2891c9f5501ac7a3b87a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDc2ZDMxZTUwNDdjMWQ4ZGZiODNiMjc3NDIxZjExNDYwZjUxMjZhMDM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/76d31e5047c1d8dfb83b277421f11460f5126a03",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/76d31e5047c1d8dfb83b277421f11460f5126a03",
      "tree": {
        "sha": "c4fc04bc14d81cc6993e935e28d868f275766a58",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c4fc04bc14d81cc6993e935e28d868f275766a58"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1e6894bdd74c0b94224f2891c9f5501ac7a3b87a",
          "sha": "1e6894bdd74c0b94224f2891c9f5501ac7a3b87a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1e6894bdd74c0b94224f2891c9f5501ac7a3b87a"
        }
      ],
      "message": "Abstract out verify logic for fe_to_storage",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:24:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-28T23:56:54Z"
      },
      "sha": "76d31e5047c1d8dfb83b277421f11460f5126a03"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDMxNjc2NDYwNzI1NzA4NGU3MTQ4OThlMDcyMzRmZGM1MzE1MGI1N2E",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/316764607257084e714898e07234fdc53150b57a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/316764607257084e714898e07234fdc53150b57a",
      "tree": {
        "sha": "38dbd88e79e858667d2956d4aeb6e0202d3cf8e7",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/38dbd88e79e858667d2956d4aeb6e0202d3cf8e7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/76d31e5047c1d8dfb83b277421f11460f5126a03",
          "sha": "76d31e5047c1d8dfb83b277421f11460f5126a03",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/76d31e5047c1d8dfb83b277421f11460f5126a03"
        }
      ],
      "message": "Abstract out verify logic for fe_from_storage",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:24:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-29T00:02:03Z"
      },
      "sha": "316764607257084e714898e07234fdc53150b57a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGQ1YWEyZjAzNTgwMjA0N2M0NTYwNWJmYTY5ZmI0NjcwMDBlOTI4OGY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d5aa2f035802047c45605bfa69fb467000e9288f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d5aa2f035802047c45605bfa69fb467000e9288f",
      "tree": {
        "sha": "a47c5c185bc831cf977ae859607e9514dad689b2",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a47c5c185bc831cf977ae859607e9514dad689b2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/316764607257084e714898e07234fdc53150b57a",
          "sha": "316764607257084e714898e07234fdc53150b57a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/316764607257084e714898e07234fdc53150b57a"
        }
      ],
      "message": "Abstract out verify logic for fe_inv{,_var}",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:24:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-29T00:20:51Z"
      },
      "sha": "d5aa2f035802047c45605bfa69fb467000e9288f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDI4M2NkODBhYjQ3MWJjY2I5OTU5MjVlYjU1ODY1ZjA0ZTM4NTY2ZjQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/283cd80ab471bccb995925eb55865f04e38566f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/283cd80ab471bccb995925eb55865f04e38566f4",
      "tree": {
        "sha": "bae75596426ab6297bfbf39bfe7a5db87f78da8a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/bae75596426ab6297bfbf39bfe7a5db87f78da8a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d5aa2f035802047c45605bfa69fb467000e9288f",
          "sha": "d5aa2f035802047c45605bfa69fb467000e9288f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d5aa2f035802047c45605bfa69fb467000e9288f"
        }
      ],
      "message": "Abstract out verify logic for fe_get_bounds",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:24:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-06-08T19:04:49Z"
      },
      "sha": "283cd80ab471bccb995925eb55865f04e38566f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDg5ZTMyNGM2YjlkMWM3NGQzNjM2YjRlZjViMWU1NDA0ZTNlMjA1M2I",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/89e324c6b9d1c74d3636b4ef5b1e5404e3e2053b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/89e324c6b9d1c74d3636b4ef5b1e5404e3e2053b",
      "tree": {
        "sha": "393869e926b8a9f2fe730748b9ca442113267fab",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/393869e926b8a9f2fe730748b9ca442113267fab"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/283cd80ab471bccb995925eb55865f04e38566f4",
          "sha": "283cd80ab471bccb995925eb55865f04e38566f4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/283cd80ab471bccb995925eb55865f04e38566f4"
        }
      ],
      "message": "Abstract out verify logic for fe_half",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:25:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-11-17T16:28:49Z"
      },
      "sha": "89e324c6b9d1c74d3636b4ef5b1e5404e3e2053b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQzNzFmOTgzNDZiMGE1MGMwYTc3ZTkzOTQ4ZmU1ZTIxZDkzNDZkMDY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4371f98346b0a50c0a77e93948fe5e21d9346d06",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4371f98346b0a50c0a77e93948fe5e21d9346d06",
      "tree": {
        "sha": "fbfa81fd4cf7532f6916ea682d536b047e41d397",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/fbfa81fd4cf7532f6916ea682d536b047e41d397"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/89e324c6b9d1c74d3636b4ef5b1e5404e3e2053b",
          "sha": "89e324c6b9d1c74d3636b4ef5b1e5404e3e2053b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/89e324c6b9d1c74d3636b4ef5b1e5404e3e2053b"
        }
      ],
      "message": "Abstract out verify logic for fe_add_int",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:25:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T07:05:35Z"
      },
      "sha": "4371f98346b0a50c0a77e93948fe5e21d9346d06"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDRlMTc2YWQ1Yjk0Zjk4OWQ1ZTJjNmNkZjliMjc2MWE2ZjZhOTcxZTU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4e176ad5b94f989d5e2c6cdf9b2761a6f6a971e5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4e176ad5b94f989d5e2c6cdf9b2761a6f6a971e5",
      "tree": {
        "sha": "5403c32aa8c3b3b6b857d41d3c8c8630d95d9377",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/5403c32aa8c3b3b6b857d41d3c8c8630d95d9377"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4371f98346b0a50c0a77e93948fe5e21d9346d06",
          "sha": "4371f98346b0a50c0a77e93948fe5e21d9346d06",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4371f98346b0a50c0a77e93948fe5e21d9346d06"
        }
      ],
      "message": "Abstract out verify logic for fe_is_square_var",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:25:56Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T07:16:00Z"
      },
      "sha": "4e176ad5b94f989d5e2c6cdf9b2761a6f6a971e5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdmYzY0MmZhMjVhZDAzZWJkOTVjZmUyMzdiNjI1ZGZiNmRmZGZhOTQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "tree": {
        "sha": "b95e28e0746e7d3a9095785e40a33ed74370b94b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b95e28e0746e7d3a9095785e40a33ed74370b94b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4e176ad5b94f989d5e2c6cdf9b2761a6f6a971e5",
          "sha": "4e176ad5b94f989d5e2c6cdf9b2761a6f6a971e5",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4e176ad5b94f989d5e2c6cdf9b2761a6f6a971e5"
        }
      ],
      "message": "Simplify secp256k1_fe_{impl_,}verify",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T10:25:59Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-05-11T08:42:09Z"
      },
      "sha": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9220720363,
      "node_id": "HRFPE_lADOAP4Jqs5CovIlzwAAAAIlmQbr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9220720363",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T10:26:57Z"
    },
    {
      "event": "commented",
      "id": 1543740091,
      "node_id": "IC_kwDOAP4Jqs5cA5q7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1543740091",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T10:27:07Z",
      "updated_at": "2023-05-11T10:27:07Z",
      "author_association": "MEMBER",
      "body": "Made these changes:\r\n\r\n```patch\r\ndiff --git a/src/field.h b/src/field.h\r\nindex 72e562e1..2c8fbc28 100644\r\n--- a/src/field.h\r\n+++ b/src/field.h\r\n@@ -56,7 +56,7 @@\r\n #define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\r\n #endif\r\n \r\n-/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\r\n+/** This expands to an initializer for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\r\n  *\r\n  * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\r\n  * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\r\n@@ -227,14 +227,14 @@ static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\r\n  * On input, r must be a valid field element. a must be an integer in [0,32].\r\n  * The magnitude of r times a must not exceed 32.\r\n  * Performs {r *= a}.\r\n- * On output, r's magnitude is multiplied by a, and normalized is cleared.\r\n+ * On output, r's magnitude is multiplied by a, and r will not be normalized.\r\n  */\r\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\r\n \r\n /** Increment a field element by another.\r\n  *\r\n  * On input, r and a must be valid field elements, not necessarily normalized.\r\n- * The sum of their magnitudes may not exceed 32.\r\n+ * The sum of their magnitudes must not exceed 32.\r\n  * Performs {r += a}.\r\n  * On output, r will not be normalized, and will have magnitude incremented by a's.\r\n  */\r\n@@ -309,9 +309,12 @@ static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_f\r\n  */\r\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\r\n \r\n-/** Halves the value of a field element modulo the field prime. Constant-time.\r\n- *  For an input magnitude 'm', the output magnitude is set to 'floor(m/2) + 1'.\r\n- *  The output is not guaranteed to be normalized, regardless of the input. */\r\n+/** Halve the value of a field element modulo the field prime in constant-time.\r\n+ *\r\n+ * On input, r must be a valid field element.\r\n+ * On output, r will be normalized and have magnitude floor(m/2) + 1 where m is\r\n+ * the magnitude of r on input.\r\n+ */\r\n static void secp256k1_fe_half(secp256k1_fe *r);\r\n \r\n /** Sets r to a field element with magnitude m, normalized if (and only if) m==0.\r\n@@ -319,7 +322,10 @@ static void secp256k1_fe_half(secp256k1_fe *r);\r\n  *  internal overflows. */\r\n static void secp256k1_fe_get_bounds(secp256k1_fe *r, int m);\r\n \r\n-/** Determine whether a is a square (modulo p). */\r\n+/** Determine whether a is a square (modulo p).\r\n+ *\r\n+ * On input, a must be a valid field element.\r\n+ */\r\n static int secp256k1_fe_is_square_var(const secp256k1_fe *a);\r\n \r\n /** Check invariants on a field element (no-op unless VERIFY is enabled). */\r\ndiff --git a/src/field_impl.h b/src/field_impl.h\r\nindex 630c9dca..c082d8f5 100644\r\n--- a/src/field_impl.h\r\n+++ b/src/field_impl.h\r\n@@ -55,7 +55,7 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\r\n      *  itself always a square (a ** ((p+1)/4) is the square of a ** ((p+1)/8)).\r\n      */\r\n     secp256k1_fe x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\r\n-    int j;\r\n+    int j, ret;\r\n \r\n #ifdef VERIFY\r\n     VERIFY_CHECK(r != a);\r\n@@ -145,7 +145,16 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\r\n     /* Check that a square root was actually calculated */\r\n \r\n     secp256k1_fe_sqr(&t1, r);\r\n-    return secp256k1_fe_equal(&t1, a);\r\n+    ret = secp256k1_fe_equal(&t1, a);\r\n+\r\n+#ifdef VERIFY\r\n+    if (!ret) {\r\n+        secp256k1_fe_negate(&t1, &t1, 1);\r\n+        secp256k1_fe_normalize_var(&t1);\r\n+        VERIFY_CHECK(secp256k1_fe_equal_var(&t1, a));\r\n+    }\r\n+#endif\r\n+    return ret;\r\n }\r\n \r\n #ifndef VERIFY\r\n```",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#issuecomment-1543740091",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1066"
    },
    {
      "event": "reviewed",
      "id": 1422477004,
      "node_id": "PRR_kwDOAP4Jqs5UyUbM",
      "url": null,
      "actor": null,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422477004",
      "submitted_at": "2023-05-11T12:16:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "reviewed",
      "id": 1422483517,
      "node_id": "PRR_kwDOAP4Jqs5UyWA9",
      "url": null,
      "actor": null,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#pullrequestreview-1422483517",
      "submitted_at": "2023-05-11T12:20:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
    },
    {
      "event": "merged",
      "id": 9221832332,
      "node_id": "ME_lADOAP4Jqs5CovIlzwAAAAIlqf6M",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9221832332",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c63ec88ebf9652e8fb559d996436ad83d77ad226",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/c63ec88ebf9652e8fb559d996436ad83d77ad226",
      "created_at": "2023-05-11T12:24:11Z"
    },
    {
      "event": "closed",
      "id": 9221832389,
      "node_id": "CE_lADOAP4Jqs5CovIlzwAAAAIlqf7F",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9221832389",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T12:24:11Z"
    },
    {
      "event": "unsubscribed",
      "id": 9222659697,
      "node_id": "UE_lADOAP4Jqs5CovIlzwAAAAIltp5x",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9222659697",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T13:50:27Z"
    },
    {
      "event": "referenced",
      "id": 9229256290,
      "node_id": "REFE_lADOAP4Jqs5CovIlzwAAAAImG0Zi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9229256290",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b4eb644b6cba0820812fe6248df9c844021ebf50",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/b4eb644b6cba0820812fe6248df9c844021ebf50",
      "created_at": "2023-05-12T06:02:11Z"
    },
    {
      "event": "referenced",
      "id": 9238321132,
      "node_id": "REFE_lADOAP4Jqs5CovIlzwAAAAImpZfs",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9238321132",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "49c52ea2b132b4234743380b3572e76a58bae82f",
      "commit_url": "https://api.github.com/repos/hebasto/secp256k1-CMake-example/commits/49c52ea2b132b4234743380b3572e76a58bae82f",
      "created_at": "2023-05-13T10:25:20Z"
    },
    {
      "event": "referenced",
      "id": 9396897064,
      "node_id": "REFE_lADOAP4Jqs5CovIlzwAAAAIwGUUo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9396897064",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "605e07e3657e4ff8d11893ee680a0446febf73a1",
      "commit_url": "https://api.github.com/repos/theStack/secp256k1/commits/605e07e3657e4ff8d11893ee680a0446febf73a1",
      "created_at": "2023-06-01T00:59:51Z"
    },
    {
      "event": "referenced",
      "id": 9399541318,
      "node_id": "REFE_lADOAP4Jqs5CovIlzwAAAAIwQZ5G",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9399541318",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bf29f8d0a63c5af628f904e6d11c56578bf63861",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/bf29f8d0a63c5af628f904e6d11c56578bf63861",
      "created_at": "2023-06-01T07:39:00Z"
    },
    {
      "event": "referenced",
      "id": 9425177649,
      "node_id": "REFE_lADOAP4Jqs5CovIlzwAAAAIxyMwx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9425177649",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "created_at": "2023-06-04T15:42:03Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/795262998",
      "pull_request_review_id": 867229311,
      "id": 795262998,
      "node_id": "PRRC_kwDOAP4Jqs4vZsAW",
      "diff_hunk": "@@ -9,15 +9,22 @@\n \n #include <stdint.h>\n \n+/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n+ *  represented as 10 uint64_t's in base 2^26, least significant first. Note that the limbs are allowed to\n+ *  contain >26 bits each. */\n typedef struct {\n     /* X = sum(i=0..9, n[i]*2^(i*26)) mod p\n      * where p = 2^256 - 0x1000003D1\n      */\n     uint32_t n[10];\n-#ifdef VERIFY\n-    int magnitude;\n-    int normalized;\n-#endif\n+    /*\n+     * Magnitude m implies n[i] <= 2*m*0x3FFFFFF for i=0..8, and\n+     * n[9] <= 2*m*0x3FFFFF (a factor 16 smaller).\n+     *\n+     * Normalized requires magnitude 1, all n[i] <= 0x3FFFFFF, and",
      "path": "src/field_10x26.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "cda9763adbdb3dbe6a8a0dfebc9693000a0848c5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"requires magnitude <= 1\"?",
      "created_at": "2022-01-30T22:48:46Z",
      "updated_at": "2022-01-30T22:56:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r795262998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/795262998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/795263472",
      "pull_request_review_id": 867229311,
      "id": 795263472,
      "node_id": "PRRC_kwDOAP4Jqs4vZsHw",
      "diff_hunk": "@@ -9,15 +9,22 @@\n \n #include <stdint.h>\n \n+/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n+ *  represented as 10 uint64_t's in base 2^26, least significant first. Note that the limbs are allowed to\n+ *  contain >26 bits each. */\n typedef struct {\n     /* X = sum(i=0..9, n[i]*2^(i*26)) mod p\n      * where p = 2^256 - 0x1000003D1\n      */\n     uint32_t n[10];\n-#ifdef VERIFY\n-    int magnitude;\n-    int normalized;\n-#endif\n+    /*\n+     * Magnitude m implies n[i] <= 2*m*0x3FFFFFF for i=0..8, and\n+     * n[9] <= 2*m*0x3FFFFF (a factor 16 smaller).",
      "path": "src/field_10x26.h",
      "position": null,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "cda9763adbdb3dbe6a8a0dfebc9693000a0848c5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: that wording sounds to me like `0x3FFFFF*16 = 0x3FFFFFF` but that's false.",
      "created_at": "2022-01-30T22:53:15Z",
      "updated_at": "2022-01-30T22:56:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r795263472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/795263472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796003654",
      "pull_request_review_id": 868334174,
      "id": 796003654,
      "node_id": "PRRC_kwDOAP4Jqs4vcg1G",
      "diff_hunk": "@@ -9,15 +9,22 @@\n \n #include <stdint.h>\n \n+/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n+ *  represented as 10 uint64_t's in base 2^26, least significant first. Note that the limbs are allowed to\n+ *  contain >26 bits each. */\n typedef struct {\n     /* X = sum(i=0..9, n[i]*2^(i*26)) mod p\n      * where p = 2^256 - 0x1000003D1\n      */\n     uint32_t n[10];\n-#ifdef VERIFY\n-    int magnitude;\n-    int normalized;\n-#endif\n+    /*\n+     * Magnitude m implies n[i] <= 2*m*0x3FFFFFF for i=0..8, and\n+     * n[9] <= 2*m*0x3FFFFF (a factor 16 smaller).",
      "path": "src/field_10x26.h",
      "position": null,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "cda9763adbdb3dbe6a8a0dfebc9693000a0848c5",
      "in_reply_to_id": 795263472,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe something like this then (similarly for field_5x52.h below)?\r\n\r\n```c\r\n    /*\r\n     * Magnitude m implies:\r\n     *     n[i] <= 2*m*0x3FFFFFF for i=0..8\r\n     *     n[9] <= 2*m*0x03FFFFF\r\n     *\r\n     * Normalized requires:\r\n     *     magnitude 0 or 1\r\n     *     all n[i] <= 0x3FFFFFF\r\n     *     sum(i=0..9, n[i]*2^(i*26)) < p\r\n     */\r\n```",
      "created_at": "2022-01-31T19:38:24Z",
      "updated_at": "2022-01-31T20:25:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796003654",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796003654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796012520",
      "pull_request_review_id": 868334174,
      "id": 796012520,
      "node_id": "PRRC_kwDOAP4Jqs4vci_o",
      "diff_hunk": "@@ -331,15 +331,7 @@ static void secp256k1_fe_impl_get_b32(unsigned char *r, const secp256k1_fe *a) {\n     r[31] = a->n[0] & 0xff;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->magnitude <= m);\n-    secp256k1_fe_verify(a);\n-    VERIFY_CHECK(0x3FFFC2FUL * 2 * (m + 1) >= 0x3FFFFFFUL * 2 * m);",
      "path": "src/field_10x26_impl.h",
      "position": 243,
      "original_position": 8,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "7716a9650776fca8851b51437c5be886492f86a9",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why remove these (they came from #816 which was recently merged)?",
      "created_at": "2022-01-31T19:51:05Z",
      "updated_at": "2022-01-31T20:25:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796012520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796012520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 421,
      "original_line": 421,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796022520",
      "pull_request_review_id": 868334174,
      "id": 796022520,
      "node_id": "PRRC_kwDOAP4Jqs4vclb4",
      "diff_hunk": "@@ -1081,23 +1081,13 @@ static void secp256k1_fe_from_signed30(secp256k1_fe *r, const secp256k1_modinv32\n     r->n[7] = (a6 >>  2           ) & M26;\n     r->n[8] = (a6 >> 28 | a7 <<  2) & M26;\n     r->n[9] = (a7 >> 24 | a8 <<  6);\n-\n-#ifdef VERIFY\n-    r->magnitude = 1;\n-    r->normalized = 1;\n-    secp256k1_fe_verify(r);\n-#endif\n }\n \n static void secp256k1_fe_to_signed30(secp256k1_modinv32_signed30 *r, const secp256k1_fe *a) {\n     const uint32_t M30 = UINT32_MAX >> 2;\n     const uint64_t a0 = a->n[0], a1 = a->n[1], a2 = a->n[2], a3 = a->n[3], a4 = a->n[4],\n                    a5 = a->n[5], a6 = a->n[6], a7 = a->n[7], a8 = a->n[8], a9 = a->n[9];\n \n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);",
      "path": "src/field_10x26_impl.h",
      "position": 455,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "a746648ab81be2bef0661677913fdcc1a9fafa43",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(No action needed) I agree this can be removed because `fe_to_signed30` is static and only ever called after `fe_normalize{_var}`; similarly with `fe_to_signed62` below.",
      "created_at": "2022-01-31T20:05:13Z",
      "updated_at": "2022-01-31T20:25:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796022520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796022520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1331,
      "original_line": 1331,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796029750",
      "pull_request_review_id": 868334174,
      "id": 796029750,
      "node_id": "PRRC_kwDOAP4Jqs4vcnM2",
      "diff_hunk": "@@ -336,4 +336,32 @@ SECP256K1_INLINE static void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_impl_inv(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *x) {\n+#ifdef VERIFY\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+#endif\n+    secp256k1_fe_impl_inv(r, x);\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    r->magnitude = x->magnitude > 0;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_impl_inv_var(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {\n+#ifdef VERIFY\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+#endif\n+    secp256k1_fe_impl_inv_var(r, x);\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    r->magnitude = x->magnitude > 0;",
      "path": "src/field_impl.h",
      "position": 286,
      "original_position": 26,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "a746648ab81be2bef0661677913fdcc1a9fafa43",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Before this PR, how could `r->magnitude` have ended up as 0?",
      "created_at": "2022-01-31T20:15:40Z",
      "updated_at": "2022-01-31T20:25:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796029750",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796029750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796159249",
      "pull_request_review_id": 868545045,
      "id": 796159249,
      "node_id": "PRRC_kwDOAP4Jqs4vdG0R",
      "diff_hunk": "@@ -336,4 +336,32 @@ SECP256K1_INLINE static void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_impl_inv(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *x) {\n+#ifdef VERIFY\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+#endif\n+    secp256k1_fe_impl_inv(r, x);\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    r->magnitude = x->magnitude > 0;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_impl_inv_var(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {\n+#ifdef VERIFY\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+#endif\n+    secp256k1_fe_impl_inv_var(r, x);\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    r->magnitude = x->magnitude > 0;",
      "path": "src/field_impl.h",
      "position": 286,
      "original_position": 26,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "a746648ab81be2bef0661677913fdcc1a9fafa43",
      "in_reply_to_id": 796029750,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It couldn't; the new logic is slightly more precise.",
      "created_at": "2022-01-31T23:43:09Z",
      "updated_at": "2022-01-31T23:43:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796159249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796159249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796198252",
      "pull_request_review_id": 868593568,
      "id": 796198252,
      "node_id": "PRRC_kwDOAP4Jqs4vdQVs",
      "diff_hunk": "@@ -7,23 +7,36 @@\n #ifndef SECP256K1_FIELD_H\n #define SECP256K1_FIELD_H\n \n-/** Field element module.\n- *\n- *  Field elements can be represented in several ways, but code accessing\n- *  it (and implementations) need to take certain properties into account:\n- *  - Each field element can be normalized or not.\n- *  - Each field element has a magnitude, which represents how far away\n- *    its representation is away from normalization. Normalized elements\n- *    always have a magnitude of 0 or 1, but a magnitude of 1 doesn't\n- *    imply normality.\n- */\n-\n+/** Field element module. */\n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n #endif\n \n #include \"util.h\"\n \n+/* All field elements (secp256k1_fe objects) have implicit properties that\n+ * determine what operations are permitted on it. These are purely a function\n+ * of what secp256k1_fe_ operations are applied on it, generally (implicitly)\n+ * fixed or known at compile time, and do not depend on the chosen field\n+ * implementation. Despite that, what these properties actually entail for\n+ * the field representation values depends on the chosen field implementation.\n+ * See the field_*.h files included below for details. They are:\n+ * - magnitude: an integer in [0,32]\n+ * - normalized: 0 or 1; normalized=1 implies magnitude <= 1.\n+ *\n+ * In VERIFY mode, they are materialzed explicitly as fields in the struct,\n+ * allowing run-time verification of these properties. In that case, the\n+ * field implementation also provides a secp256k1_fe_check routine to",
      "path": "src/field.h",
      "position": null,
      "original_position": 34,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8df6f751653333a0ca3a91ffb3508b8ca0a6e6df",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * field implementation also provides a secp256k1_fe_verify routine to\r\n```",
      "created_at": "2022-02-01T01:23:00Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796198252",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796198252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796201335",
      "pull_request_review_id": 868593568,
      "id": 796201335,
      "node_id": "PRRC_kwDOAP4Jqs4vdRF3",
      "diff_hunk": "@@ -6733,7 +6733,7 @@ void fe_cmov_test(void) {\n     static const secp256k1_fe one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n     static const secp256k1_fe max = SECP256K1_FE_CONST(\n         0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL,\n-        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL\n+        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL, 0xFFFFFC2EUL",
      "path": "src/tests.c",
      "position": null,
      "original_position": 5,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8df6f751653333a0ca3a91ffb3508b8ca0a6e6df",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why only change this test (a few more below still use 2^256 - 1)?",
      "created_at": "2022-02-01T01:30:37Z",
      "updated_at": "2022-02-01T03:35:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796201335",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796201335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796207022",
      "pull_request_review_id": 868593568,
      "id": 796207022,
      "node_id": "PRRC_kwDOAP4Jqs4vdSeu",
      "diff_hunk": "@@ -135,4 +136,19 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifdef VERIFY\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);\n+    VERIFY_CHECK(r == 1);\n+    /* Invoke field specific checks. */",
      "path": "src/field_impl.h",
      "position": null,
      "original_position": 22,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    /* Invoke implementation-specific checks. */\r\n```",
      "created_at": "2022-02-01T01:38:20Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796207022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796207022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796208710",
      "pull_request_review_id": 868593568,
      "id": 796208710,
      "node_id": "PRRC_kwDOAP4Jqs4vdS5G",
      "diff_hunk": "@@ -7,23 +7,36 @@\n #ifndef SECP256K1_FIELD_H\n #define SECP256K1_FIELD_H\n \n-/** Field element module.\n- *\n- *  Field elements can be represented in several ways, but code accessing\n- *  it (and implementations) need to take certain properties into account:\n- *  - Each field element can be normalized or not.\n- *  - Each field element has a magnitude, which represents how far away\n- *    its representation is away from normalization. Normalized elements\n- *    always have a magnitude of 0 or 1, but a magnitude of 1 doesn't\n- *    imply normality.\n- */\n-\n+/** Field element module. */\n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n #endif\n \n #include \"util.h\"\n \n+/* All field elements (secp256k1_fe objects) have implicit properties that\n+ * determine what operations are permitted on it. These are purely a function\n+ * of what secp256k1_fe_ operations are applied on it, generally (implicitly)\n+ * fixed or known at compile time, and do not depend on the chosen field\n+ * implementation. Despite that, what these properties actually entail for\n+ * the field representation values depends on the chosen field implementation.\n+ * See the field_*.h files included below for details. They are:\n+ * - magnitude: an integer in [0,32]\n+ * - normalized: 0 or 1; normalized=1 implies magnitude <= 1.\n+ *\n+ * In VERIFY mode, they are materialzed explicitly as fields in the struct,",
      "path": "src/field.h",
      "position": null,
      "original_position": 32,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * In VERIFY mode, they are materialized explicitly as fields in the struct,\r\n```",
      "created_at": "2022-02-01T01:40:23Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796208710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796208710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796209984",
      "pull_request_review_id": 868593568,
      "id": 796209984,
      "node_id": "PRRC_kwDOAP4Jqs4vdTNA",
      "diff_hunk": "@@ -7,23 +7,36 @@\n #ifndef SECP256K1_FIELD_H\n #define SECP256K1_FIELD_H\n \n-/** Field element module.\n- *\n- *  Field elements can be represented in several ways, but code accessing\n- *  it (and implementations) need to take certain properties into account:\n- *  - Each field element can be normalized or not.\n- *  - Each field element has a magnitude, which represents how far away\n- *    its representation is away from normalization. Normalized elements\n- *    always have a magnitude of 0 or 1, but a magnitude of 1 doesn't\n- *    imply normality.\n- */\n-\n+/** Field element module. */\n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n #endif\n \n #include \"util.h\"\n \n+/* All field elements (secp256k1_fe objects) have implicit properties that\n+ * determine what operations are permitted on it. These are purely a function\n+ * of what secp256k1_fe_ operations are applied on it, generally (implicitly)\n+ * fixed or known at compile time, and do not depend on the chosen field\n+ * implementation. Despite that, what these properties actually entail for\n+ * the field representation values depends on the chosen field implementation.\n+ * See the field_*.h files included below for details. They are:\n+ * - magnitude: an integer in [0,32]\n+ * - normalized: 0 or 1; normalized=1 implies magnitude <= 1.\n+ *\n+ * In VERIFY mode, they are materialzed explicitly as fields in the struct,\n+ * allowing run-time verification of these properties. In that case, the\n+ * field implementation also provides a secp256k1_fe_check routine to\n+ * verify that these fields match the run-time value and internal consistency\n+ * checks. */",
      "path": "src/field.h",
      "position": null,
      "original_position": 36,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * verify that these fields match the run-time value and perform internal\r\n * consistency checks. */\r\n ```",
      "created_at": "2022-02-01T01:42:01Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796209984",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796209984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796216163",
      "pull_request_review_id": 868593568,
      "id": 796216163,
      "node_id": "PRRC_kwDOAP4Jqs4vdUtj",
      "diff_hunk": "@@ -9,15 +9,25 @@\n \n #include <stdint.h>\n \n+/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n+ *  represented as 5 uint64_t's in base 2^52, least significant first. Note that the limbs are allowed to\n+ *  contain >52 bits each. */\n typedef struct {\n-    /* X = sum(i=0..4, n[i]*2^(i*52)) mod p\n+    /* X = sum(i=0..4, n[i] << (i*52)) mod p\n      * where p = 2^256 - 0x1000003D1\n      */\n     uint64_t n[5];\n-#ifdef VERIFY\n-    int magnitude;\n-    int normalized;\n-#endif\n+    /*\n+     * Magnitude m requires:\n+     *     n[i] <= 2 * m * (2^26 - 1) for i=0..8\n+     *     n[9] <= 2 * m * (2^22 - 1)\n+     *\n+     * Normalized requires:\n+     *     n[i] <= (2^26 - 1) for i=0..8\n+     *     sum(i=0..9, n[i] << (i*26)) < p\n+     *     (together these imply n[9] <= 2^22 - 1)\n+     */",
      "path": "src/field_5x52.h",
      "position": 31,
      "original_position": 26,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did you swap the comments for 5x52 and 10x26?",
      "created_at": "2022-02-01T02:01:21Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796216163",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796216163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796217733",
      "pull_request_review_id": 868593568,
      "id": 796217733,
      "node_id": "PRRC_kwDOAP4Jqs4vdVGF",
      "diff_hunk": "@@ -59,10 +59,13 @@ static void secp256k1_fe_verify(const secp256k1_fe *a);\n /* In non-VERIFY mode, we #define the fe operations to be identical to their\n  * internal field implementation, to avoid the potential overhead of a\n  * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n #endif /* defined(VERIFY) */\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.",
      "path": "src/field.h",
      "position": 115,
      "original_position": 12,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "663a73d8a6f511f7b7b85ffb21953574df1dabf4",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * On output, r represents the same value but has normalized=1 and magnitude=1,\r\n * and is reduced modulo the field size `p`.\r\n```",
      "created_at": "2022-02-01T02:06:41Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796217733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796217733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 109,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796219535",
      "pull_request_review_id": 868593568,
      "id": 796219535,
      "node_id": "PRRC_kwDOAP4Jqs4vdViP",
      "diff_hunk": "@@ -84,11 +86,17 @@ static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n  */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents value 0.",
      "path": "src/field.h",
      "position": null,
      "original_position": 14,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "2cbafa18f0bbc804219d588dff286cb6263b7a4c",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n/** Determine whether r represents field element 0.\r\n```",
      "created_at": "2022-02-01T02:13:02Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796219535",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796219535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796221174",
      "pull_request_review_id": 868593568,
      "id": 796221174,
      "node_id": "PRRC_kwDOAP4Jqs4vdV72",
      "diff_hunk": "@@ -115,7 +116,14 @@ static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n  */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents value 0.\n+ *\n+ * On input a must be a valid normalized field element.\n+ * Returns whether a  = 0 (mod p).",
      "path": "src/field.h",
      "position": null,
      "original_position": 16,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "a3e03ddce018eecdd860d6dc0a4443827465a614",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * Returns whether a = 0 (mod p).\r\n```",
      "created_at": "2022-02-01T02:18:35Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796221174",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796221174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796222563",
      "pull_request_review_id": 868593568,
      "id": 796222563,
      "node_id": "PRRC_kwDOAP4Jqs4vdWRj",
      "diff_hunk": "@@ -148,7 +149,13 @@ static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n  */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements.",
      "path": "src/field.h",
      "position": null,
      "original_position": 13,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "afe66236b6a5a04b25285c5187b5e35ff3e5e21c",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n/** Compare the values represented by 2 field elements, ​without constant-time guarantee.\r\n```",
      "created_at": "2022-02-01T02:23:17Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796222563",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796222563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796224560",
      "pull_request_review_id": 868593568,
      "id": 796224560,
      "node_id": "PRRC_kwDOAP4Jqs4vdWww",
      "diff_hunk": "@@ -187,8 +188,13 @@ static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n  */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a.",
      "path": "src/field.h",
      "position": null,
      "original_position": 19,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "6cf718569f839dcbda9bc9fe4c3fb3f4cfdffaa6",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * On output, r's magnitude is multiplied by a and normalized is cleared.\r\n```",
      "created_at": "2022-02-01T02:30:11Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796224560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796224560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796224678",
      "pull_request_review_id": 868593568,
      "id": 796224678,
      "node_id": "PRRC_kwDOAP4Jqs4vdWym",
      "diff_hunk": "@@ -265,6 +265,17 @@ SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k\n     r->normalized = 0;\n     secp256k1_fe_verify(r);\n }\n+\n+static void secp256k1_fe_impl_mul_int(secp256k1_fe *r, int a);\n+SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {\n+    secp256k1_fe_verify(r);\n+    VERIFY_CHECK(a >= 0 && a <= 32);\n+    VERIFY_CHECK(a*r->magnitude <= 32);\n+    secp256k1_fe_impl_mul_int(r, a);\n+    r->magnitude *= a;\n+    r->normalized = 0;",
      "path": "src/field_impl.h",
      "position": 203,
      "original_position": 12,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "6cf718569f839dcbda9bc9fe4c3fb3f4cfdffaa6",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Not this PR) Should `normalized` only be cleared if `a > 1`?",
      "created_at": "2022-02-01T02:30:36Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796224678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796224678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 297,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796225147",
      "pull_request_review_id": 868593568,
      "id": 796225147,
      "node_id": "PRRC_kwDOAP4Jqs4vdW57",
      "diff_hunk": "@@ -197,7 +198,13 @@ static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n  */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements. The sum of their magnitudes\n+ * may not exceed 32.",
      "path": "src/field.h",
      "position": null,
      "original_position": 16,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "ec4b3d70eabd97f2cb8d09509624be3672e53020",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * On input, r and a must be valid field elements, not necessarily normalized.\r\n * The sum of their magnitudes may not exceed 32.\r\n```",
      "created_at": "2022-02-01T02:32:05Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796225147",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796225147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 203,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796234753",
      "pull_request_review_id": 868593568,
      "id": 796234753,
      "node_id": "PRRC_kwDOAP4Jqs4vdZQB",
      "diff_hunk": "@@ -240,11 +242,18 @@ static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n  */\n static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n- *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Compute the modular inverse of a field element.\n+ *\n+ * On input, a must be a valid field element; r need not be initialized.\n+ * Performs {r = 1/a}.",
      "path": "src/field.h",
      "position": null,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8df6f751653333a0ca3a91ffb3508b8ca0a6e6df",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * Performs {r = 1/a} if a is nonzero, {r = 0} otherwise.\r\n```",
      "created_at": "2022-02-01T03:06:22Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796234753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796234753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796237380",
      "pull_request_review_id": 868593568,
      "id": 796237380,
      "node_id": "PRRC_kwDOAP4Jqs4vdZ5E",
      "diff_hunk": "@@ -331,15 +331,7 @@ static void secp256k1_fe_impl_get_b32(unsigned char *r, const secp256k1_fe *a) {\n     r[31] = a->n[0] & 0xff;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->magnitude <= m);\n-    secp256k1_fe_verify(a);\n-    VERIFY_CHECK(0x3FFFC2FUL * 2 * (m + 1) >= 0x3FFFFFFUL * 2 * m);",
      "path": "src/field_10x26_impl.h",
      "position": 243,
      "original_position": 8,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "7716a9650776fca8851b51437c5be886492f86a9",
      "in_reply_to_id": 796012520,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I guess you no longer need these now that you have `secp256k1_fe_verify(a)` together with `a->magnitude <= m <= 31`?",
      "created_at": "2022-02-01T03:15:55Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796237380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796237380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 421,
      "original_line": 421,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796241104",
      "pull_request_review_id": 868593568,
      "id": 796241104,
      "node_id": "PRRC_kwDOAP4Jqs4vdazQ",
      "diff_hunk": "@@ -336,4 +336,32 @@ SECP256K1_INLINE static void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_impl_inv(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *x) {\n+#ifdef VERIFY\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+#endif\n+    secp256k1_fe_impl_inv(r, x);\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    r->magnitude = x->magnitude > 0;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_impl_inv_var(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {\n+#ifdef VERIFY\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+#endif\n+    secp256k1_fe_impl_inv_var(r, x);\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    r->magnitude = x->magnitude > 0;",
      "path": "src/field_impl.h",
      "position": 286,
      "original_position": 26,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "a746648ab81be2bef0661677913fdcc1a9fafa43",
      "in_reply_to_id": 796029750,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense now, I didn't realize before that `secp256k1_fe_impl_inv{_var}` returns zero if the input was zero.",
      "created_at": "2022-02-01T03:30:48Z",
      "updated_at": "2022-02-01T03:34:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796241104",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796241104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796708235",
      "pull_request_review_id": 869290162,
      "id": 796708235,
      "node_id": "PRRC_kwDOAP4Jqs4vfM2L",
      "diff_hunk": "@@ -9,15 +9,22 @@\n \n #include <stdint.h>\n \n+/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n+ *  represented as 10 uint64_t's in base 2^26, least significant first. Note that the limbs are allowed to\n+ *  contain >26 bits each. */\n typedef struct {\n     /* X = sum(i=0..9, n[i]*2^(i*26)) mod p\n      * where p = 2^256 - 0x1000003D1\n      */\n     uint32_t n[10];\n-#ifdef VERIFY\n-    int magnitude;\n-    int normalized;\n-#endif\n+    /*\n+     * Magnitude m implies n[i] <= 2*m*0x3FFFFFF for i=0..8, and\n+     * n[9] <= 2*m*0x3FFFFF (a factor 16 smaller).\n+     *\n+     * Normalized requires magnitude 1, all n[i] <= 0x3FFFFFF, and",
      "path": "src/field_10x26.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "cda9763adbdb3dbe6a8a0dfebc9693000a0848c5",
      "in_reply_to_id": 795262998,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This has been changed significantly; the rule that normalized implies magnitude 0 or 1 has now been added to field.h itself (it's in fact a rule that must hold for all users of field.h, independent of which field implementation was used).",
      "created_at": "2022-02-01T15:24:09Z",
      "updated_at": "2022-02-01T15:24:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796708235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796708235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796727185",
      "pull_request_review_id": 869317523,
      "id": 796727185,
      "node_id": "PRRC_kwDOAP4Jqs4vfReR",
      "diff_hunk": "@@ -9,15 +9,22 @@\n \n #include <stdint.h>\n \n+/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n+ *  represented as 10 uint64_t's in base 2^26, least significant first. Note that the limbs are allowed to\n+ *  contain >26 bits each. */\n typedef struct {\n     /* X = sum(i=0..9, n[i]*2^(i*26)) mod p\n      * where p = 2^256 - 0x1000003D1\n      */\n     uint32_t n[10];\n-#ifdef VERIFY\n-    int magnitude;\n-    int normalized;\n-#endif\n+    /*\n+     * Magnitude m implies n[i] <= 2*m*0x3FFFFFF for i=0..8, and\n+     * n[9] <= 2*m*0x3FFFFF (a factor 16 smaller).",
      "path": "src/field_10x26.h",
      "position": null,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "cda9763adbdb3dbe6a8a0dfebc9693000a0848c5",
      "in_reply_to_id": 795263472,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done something like this (and now also placed it in the right file).",
      "created_at": "2022-02-01T15:42:10Z",
      "updated_at": "2022-02-01T15:42:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796727185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796727185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796732934",
      "pull_request_review_id": 869325571,
      "id": 796732934,
      "node_id": "PRRC_kwDOAP4Jqs4vfS4G",
      "diff_hunk": "@@ -331,15 +331,7 @@ static void secp256k1_fe_impl_get_b32(unsigned char *r, const secp256k1_fe *a) {\n     r[31] = a->n[0] & 0xff;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->magnitude <= m);\n-    secp256k1_fe_verify(a);\n-    VERIFY_CHECK(0x3FFFC2FUL * 2 * (m + 1) >= 0x3FFFFFFUL * 2 * m);",
      "path": "src/field_10x26_impl.h",
      "position": 243,
      "original_position": 8,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "7716a9650776fca8851b51437c5be886492f86a9",
      "in_reply_to_id": 796012520,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've reinstituted them; they're certainly implied, but still clarify why the logic below is legal.",
      "created_at": "2022-02-01T15:47:41Z",
      "updated_at": "2022-02-01T15:47:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796732934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796732934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 421,
      "original_line": 421,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796734980",
      "pull_request_review_id": 869328530,
      "id": 796734980,
      "node_id": "PRRC_kwDOAP4Jqs4vfTYE",
      "diff_hunk": "@@ -1081,23 +1081,13 @@ static void secp256k1_fe_from_signed30(secp256k1_fe *r, const secp256k1_modinv32\n     r->n[7] = (a6 >>  2           ) & M26;\n     r->n[8] = (a6 >> 28 | a7 <<  2) & M26;\n     r->n[9] = (a7 >> 24 | a8 <<  6);\n-\n-#ifdef VERIFY\n-    r->magnitude = 1;\n-    r->normalized = 1;\n-    secp256k1_fe_verify(r);\n-#endif\n }\n \n static void secp256k1_fe_to_signed30(secp256k1_modinv32_signed30 *r, const secp256k1_fe *a) {\n     const uint32_t M30 = UINT32_MAX >> 2;\n     const uint64_t a0 = a->n[0], a1 = a->n[1], a2 = a->n[2], a3 = a->n[3], a4 = a->n[4],\n                    a5 = a->n[5], a6 = a->n[6], a7 = a->n[7], a8 = a->n[8], a9 = a->n[9];\n \n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);",
      "path": "src/field_10x26_impl.h",
      "position": 455,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "a746648ab81be2bef0661677913fdcc1a9fafa43",
      "in_reply_to_id": 796022520,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So just to explain what's going on here: what this PR does is move the responsibility for checking that inputs/outpts to the field implementation's code satisfy the normalized/magnitude rules to field.h and field_impl.h. That's why I removed it here, because whatever rules we want to hold should apply for all fields, not just this specific one. And this to_signed30 and from_signed30 functions are internal implementation details.",
      "created_at": "2022-02-01T15:49:37Z",
      "updated_at": "2022-02-01T15:49:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796734980",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796734980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1331,
      "original_line": 1331,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796735714",
      "pull_request_review_id": 869329484,
      "id": 796735714,
      "node_id": "PRRC_kwDOAP4Jqs4vfTji",
      "diff_hunk": "@@ -7,23 +7,36 @@\n #ifndef SECP256K1_FIELD_H\n #define SECP256K1_FIELD_H\n \n-/** Field element module.\n- *\n- *  Field elements can be represented in several ways, but code accessing\n- *  it (and implementations) need to take certain properties into account:\n- *  - Each field element can be normalized or not.\n- *  - Each field element has a magnitude, which represents how far away\n- *    its representation is away from normalization. Normalized elements\n- *    always have a magnitude of 0 or 1, but a magnitude of 1 doesn't\n- *    imply normality.\n- */\n-\n+/** Field element module. */\n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n #endif\n \n #include \"util.h\"\n \n+/* All field elements (secp256k1_fe objects) have implicit properties that\n+ * determine what operations are permitted on it. These are purely a function\n+ * of what secp256k1_fe_ operations are applied on it, generally (implicitly)\n+ * fixed or known at compile time, and do not depend on the chosen field\n+ * implementation. Despite that, what these properties actually entail for\n+ * the field representation values depends on the chosen field implementation.\n+ * See the field_*.h files included below for details. They are:\n+ * - magnitude: an integer in [0,32]\n+ * - normalized: 0 or 1; normalized=1 implies magnitude <= 1.\n+ *\n+ * In VERIFY mode, they are materialzed explicitly as fields in the struct,\n+ * allowing run-time verification of these properties. In that case, the\n+ * field implementation also provides a secp256k1_fe_check routine to",
      "path": "src/field.h",
      "position": null,
      "original_position": 34,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8df6f751653333a0ca3a91ffb3508b8ca0a6e6df",
      "in_reply_to_id": 796198252,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-02-01T15:50:18Z",
      "updated_at": "2022-02-01T15:50:19Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796735714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796735714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796792562",
      "pull_request_review_id": 869434032,
      "id": 796792562,
      "node_id": "PRRC_kwDOAP4Jqs4vfhby",
      "diff_hunk": "@@ -6733,7 +6733,7 @@ void fe_cmov_test(void) {\n     static const secp256k1_fe one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n     static const secp256k1_fe max = SECP256K1_FE_CONST(\n         0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL,\n-        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL\n+        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL, 0xFFFFFC2EUL",
      "path": "src/tests.c",
      "position": null,
      "original_position": 5,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8df6f751653333a0ca3a91ffb3508b8ca0a6e6df",
      "in_reply_to_id": 796201335,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've instead added a commit that actually sets the magnitude/normalized fields correctly for SECP256K1_FE_CONST, instead of assuming \",1,1\".",
      "created_at": "2022-02-01T16:45:49Z",
      "updated_at": "2022-02-01T16:45:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796792562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796792562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796793453",
      "pull_request_review_id": 869435858,
      "id": 796793453,
      "node_id": "PRRC_kwDOAP4Jqs4vfhpt",
      "diff_hunk": "@@ -135,4 +136,19 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifdef VERIFY\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);\n+    VERIFY_CHECK(r == 1);\n+    /* Invoke field specific checks. */",
      "path": "src/field_impl.h",
      "position": null,
      "original_position": 22,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": 796207022,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-02-01T16:46:43Z",
      "updated_at": "2022-02-01T16:46:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796793453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796793453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796794046",
      "pull_request_review_id": 869437048,
      "id": 796794046,
      "node_id": "PRRC_kwDOAP4Jqs4vfhy-",
      "diff_hunk": "@@ -7,23 +7,36 @@\n #ifndef SECP256K1_FIELD_H\n #define SECP256K1_FIELD_H\n \n-/** Field element module.\n- *\n- *  Field elements can be represented in several ways, but code accessing\n- *  it (and implementations) need to take certain properties into account:\n- *  - Each field element can be normalized or not.\n- *  - Each field element has a magnitude, which represents how far away\n- *    its representation is away from normalization. Normalized elements\n- *    always have a magnitude of 0 or 1, but a magnitude of 1 doesn't\n- *    imply normality.\n- */\n-\n+/** Field element module. */\n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n #endif\n \n #include \"util.h\"\n \n+/* All field elements (secp256k1_fe objects) have implicit properties that\n+ * determine what operations are permitted on it. These are purely a function\n+ * of what secp256k1_fe_ operations are applied on it, generally (implicitly)\n+ * fixed or known at compile time, and do not depend on the chosen field\n+ * implementation. Despite that, what these properties actually entail for\n+ * the field representation values depends on the chosen field implementation.\n+ * See the field_*.h files included below for details. They are:\n+ * - magnitude: an integer in [0,32]\n+ * - normalized: 0 or 1; normalized=1 implies magnitude <= 1.\n+ *\n+ * In VERIFY mode, they are materialzed explicitly as fields in the struct,",
      "path": "src/field.h",
      "position": null,
      "original_position": 32,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": 796208710,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-02-01T16:47:20Z",
      "updated_at": "2022-02-01T16:47:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796794046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796794046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796795012",
      "pull_request_review_id": 869438971,
      "id": 796795012,
      "node_id": "PRRC_kwDOAP4Jqs4vfiCE",
      "diff_hunk": "@@ -7,23 +7,36 @@\n #ifndef SECP256K1_FIELD_H\n #define SECP256K1_FIELD_H\n \n-/** Field element module.\n- *\n- *  Field elements can be represented in several ways, but code accessing\n- *  it (and implementations) need to take certain properties into account:\n- *  - Each field element can be normalized or not.\n- *  - Each field element has a magnitude, which represents how far away\n- *    its representation is away from normalization. Normalized elements\n- *    always have a magnitude of 0 or 1, but a magnitude of 1 doesn't\n- *    imply normality.\n- */\n-\n+/** Field element module. */\n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n #endif\n \n #include \"util.h\"\n \n+/* All field elements (secp256k1_fe objects) have implicit properties that\n+ * determine what operations are permitted on it. These are purely a function\n+ * of what secp256k1_fe_ operations are applied on it, generally (implicitly)\n+ * fixed or known at compile time, and do not depend on the chosen field\n+ * implementation. Despite that, what these properties actually entail for\n+ * the field representation values depends on the chosen field implementation.\n+ * See the field_*.h files included below for details. They are:\n+ * - magnitude: an integer in [0,32]\n+ * - normalized: 0 or 1; normalized=1 implies magnitude <= 1.\n+ *\n+ * In VERIFY mode, they are materialzed explicitly as fields in the struct,\n+ * allowing run-time verification of these properties. In that case, the\n+ * field implementation also provides a secp256k1_fe_check routine to\n+ * verify that these fields match the run-time value and internal consistency\n+ * checks. */",
      "path": "src/field.h",
      "position": null,
      "original_position": 36,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": 796209984,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (in next push).",
      "created_at": "2022-02-01T16:48:19Z",
      "updated_at": "2022-02-01T16:48:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796795012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796795012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796795206",
      "pull_request_review_id": 869439361,
      "id": 796795206,
      "node_id": "PRRC_kwDOAP4Jqs4vfiFG",
      "diff_hunk": "@@ -9,15 +9,25 @@\n \n #include <stdint.h>\n \n+/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n+ *  represented as 5 uint64_t's in base 2^52, least significant first. Note that the limbs are allowed to\n+ *  contain >52 bits each. */\n typedef struct {\n-    /* X = sum(i=0..4, n[i]*2^(i*52)) mod p\n+    /* X = sum(i=0..4, n[i] << (i*52)) mod p\n      * where p = 2^256 - 0x1000003D1\n      */\n     uint64_t n[5];\n-#ifdef VERIFY\n-    int magnitude;\n-    int normalized;\n-#endif\n+    /*\n+     * Magnitude m requires:\n+     *     n[i] <= 2 * m * (2^26 - 1) for i=0..8\n+     *     n[9] <= 2 * m * (2^22 - 1)\n+     *\n+     * Normalized requires:\n+     *     n[i] <= (2^26 - 1) for i=0..8\n+     *     sum(i=0..9, n[i] << (i*26)) < p\n+     *     (together these imply n[9] <= 2^22 - 1)\n+     */",
      "path": "src/field_5x52.h",
      "position": 31,
      "original_position": 26,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "9461ee29dc02e036c302187cec9cfcf78ef45309",
      "in_reply_to_id": 796216163,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I did. Fixed.",
      "created_at": "2022-02-01T16:48:31Z",
      "updated_at": "2022-02-01T16:48:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796795206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796795206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796798385",
      "pull_request_review_id": 869445610,
      "id": 796798385,
      "node_id": "PRRC_kwDOAP4Jqs4vfi2x",
      "diff_hunk": "@@ -59,10 +59,13 @@ static void secp256k1_fe_verify(const secp256k1_fe *a);\n /* In non-VERIFY mode, we #define the fe operations to be identical to their\n  * internal field implementation, to avoid the potential overhead of a\n  * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n #endif /* defined(VERIFY) */\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.",
      "path": "src/field.h",
      "position": 115,
      "original_position": 12,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "663a73d8a6f511f7b7b85ffb21953574df1dabf4",
      "in_reply_to_id": 796217733,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So what I'm trying to do in this PR is define a generic interface for field elements, which has well-defined and verified rules at the field layer, independent of the implementation.\r\n\r\nField elements don't have an observable notion of \"reduced modulo\" - they are elements of the field GF(2^256 - 2^32 - 977). Reducing is a concept that only appears if you're representing those field elements as integers - which is what the field implementations do.\r\n\r\nSo what's happening here is that the interface only says \"makes the field element have the normalized property\". What \"normalized\" entails for the representation is up to the specific field implementation (where you'll find a comment that the sum of the limbs has to be below p).\r\n\r\nI've tried to add a few more comments to explain this, but suggestions welcome if you think it isn't clear from the text yet.",
      "created_at": "2022-02-01T16:51:44Z",
      "updated_at": "2022-02-01T16:51:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796798385",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796798385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 109,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796801115",
      "pull_request_review_id": 869451010,
      "id": 796801115,
      "node_id": "PRRC_kwDOAP4Jqs4vfjhb",
      "diff_hunk": "@@ -84,11 +86,17 @@ static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n  */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents value 0.",
      "path": "src/field.h",
      "position": null,
      "original_position": 14,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "2cbafa18f0bbc804219d588dff286cb6263b7a4c",
      "in_reply_to_id": 796219535,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (here and further) in the next push.",
      "created_at": "2022-02-01T16:54:29Z",
      "updated_at": "2022-02-01T16:54:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796801115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796801115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796801835",
      "pull_request_review_id": 869452527,
      "id": 796801835,
      "node_id": "PRRC_kwDOAP4Jqs4vfjsr",
      "diff_hunk": "@@ -115,7 +116,14 @@ static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n  */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents value 0.\n+ *\n+ * On input a must be a valid normalized field element.\n+ * Returns whether a  = 0 (mod p).",
      "path": "src/field.h",
      "position": null,
      "original_position": 16,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "a3e03ddce018eecdd860d6dc0a4443827465a614",
      "in_reply_to_id": 796221174,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in next push.",
      "created_at": "2022-02-01T16:55:13Z",
      "updated_at": "2022-02-01T16:55:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796801835",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796801835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796804002",
      "pull_request_review_id": 869456725,
      "id": 796804002,
      "node_id": "PRRC_kwDOAP4Jqs4vfkOi",
      "diff_hunk": "@@ -148,7 +149,13 @@ static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n  */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements.",
      "path": "src/field.h",
      "position": null,
      "original_position": 13,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "afe66236b6a5a04b25285c5187b5e35ff3e5e21c",
      "in_reply_to_id": 796222563,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in next push.",
      "created_at": "2022-02-01T16:57:22Z",
      "updated_at": "2022-02-01T16:57:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796804002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796804002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796806920",
      "pull_request_review_id": 869462518,
      "id": 796806920,
      "node_id": "PRRC_kwDOAP4Jqs4vfk8I",
      "diff_hunk": "@@ -187,8 +188,13 @@ static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n  */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a.",
      "path": "src/field.h",
      "position": null,
      "original_position": 19,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "6cf718569f839dcbda9bc9fe4c3fb3f4cfdffaa6",
      "in_reply_to_id": 796224560,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in next push.",
      "created_at": "2022-02-01T17:00:16Z",
      "updated_at": "2022-02-01T17:00:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796806920",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796806920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796807564",
      "pull_request_review_id": 869463828,
      "id": 796807564,
      "node_id": "PRRC_kwDOAP4Jqs4vflGM",
      "diff_hunk": "@@ -265,6 +265,17 @@ SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k\n     r->normalized = 0;\n     secp256k1_fe_verify(r);\n }\n+\n+static void secp256k1_fe_impl_mul_int(secp256k1_fe *r, int a);\n+SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {\n+    secp256k1_fe_verify(r);\n+    VERIFY_CHECK(a >= 0 && a <= 32);\n+    VERIFY_CHECK(a*r->magnitude <= 32);\n+    secp256k1_fe_impl_mul_int(r, a);\n+    r->magnitude *= a;\n+    r->normalized = 0;",
      "path": "src/field_impl.h",
      "position": 203,
      "original_position": 12,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "6cf718569f839dcbda9bc9fe4c3fb3f4cfdffaa6",
      "in_reply_to_id": 796224678,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd instead rather add an `VERIFY_CHECK(a > 1)`, because using this function with a=0 or a=1 is dumb.",
      "created_at": "2022-02-01T17:00:54Z",
      "updated_at": "2022-02-01T17:00:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796807564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796807564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 297,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796809339",
      "pull_request_review_id": 869467319,
      "id": 796809339,
      "node_id": "PRRC_kwDOAP4Jqs4vflh7",
      "diff_hunk": "@@ -197,7 +198,13 @@ static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n  */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements. The sum of their magnitudes\n+ * may not exceed 32.",
      "path": "src/field.h",
      "position": null,
      "original_position": 16,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "ec4b3d70eabd97f2cb8d09509624be3672e53020",
      "in_reply_to_id": 796225147,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in next push.",
      "created_at": "2022-02-01T17:02:48Z",
      "updated_at": "2022-02-01T17:02:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796809339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796809339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 203,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796813471",
      "pull_request_review_id": 869475911,
      "id": 796813471,
      "node_id": "PRRC_kwDOAP4Jqs4vfmif",
      "diff_hunk": "@@ -240,11 +242,18 @@ static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n  */\n static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n- *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Compute the modular inverse of a field element.\n+ *\n+ * On input, a must be a valid field element; r need not be initialized.\n+ * Performs {r = 1/a}.",
      "path": "src/field.h",
      "position": null,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8df6f751653333a0ca3a91ffb3508b8ca0a6e6df",
      "in_reply_to_id": 796234753,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doing something like this in the next push.",
      "created_at": "2022-02-01T17:07:16Z",
      "updated_at": "2022-02-01T17:07:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r796813471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796813471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190774605",
      "pull_request_review_id": 1421966043,
      "id": 1190774605,
      "node_id": "PRRC_kwDOAP4Jqs5G-cdN",
      "diff_hunk": "@@ -28,116 +45,272 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/* SECP256K1_FE_CONST_INNER is provided by the field implementation */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* defined(VERIFY) */",
      "path": "src/field.h",
      "position": null,
      "original_position": 104,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n#endif /* !defined(VERIFY) */\r\n```",
      "created_at": "2023-05-11T07:54:42Z",
      "updated_at": "2023-05-11T08:20:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190774605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190774605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190790150",
      "pull_request_review_id": 1421966043,
      "id": 1190790150,
      "node_id": "PRRC_kwDOAP4Jqs5G-gQG",
      "diff_hunk": "@@ -131,4 +132,21 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifndef VERIFY\n+static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }\n+#else\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);",
      "path": "src/field_impl.h",
      "position": null,
      "original_position": 22,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "0cdba2cd1f079dcf2fed06f6a61fa83f72f2d5ac",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Maybe make those individual VERIFY_CHECKs. That's better for debugging because then the error message will show you which line failed. \r\n\r\nsame is true  for both instances of `secp256k1_fe_impl_verify`",
      "created_at": "2023-05-11T08:08:16Z",
      "updated_at": "2023-05-11T08:20:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190790150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190790150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 140,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190791781",
      "pull_request_review_id": 1421966043,
      "id": 1190791781,
      "node_id": "PRRC_kwDOAP4Jqs5G-gpl",
      "diff_hunk": "@@ -131,4 +132,21 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifndef VERIFY\n+static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }\n+#else\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);\n+    VERIFY_CHECK(r == 1);\n+    /* Invoke implementation-specific checks. */\n+    secp256k1_fe_impl_verify(a);\n+}\n+#endif /* defined(VERIFY) */",
      "path": "src/field_impl.h",
      "position": 323,
      "original_position": 27,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "0cdba2cd1f079dcf2fed06f6a61fa83f72f2d5ac",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`!defined(VERIFY)` ?! well in this case i don't know :D",
      "created_at": "2023-05-11T08:09:39Z",
      "updated_at": "2023-05-11T08:20:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190791781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190791781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 417,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190803849",
      "pull_request_review_id": 1421966043,
      "id": 1190803849,
      "node_id": "PRRC_kwDOAP4Jqs5G-jmJ",
      "diff_hunk": "@@ -45,6 +45,20 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/* SECP256K1_FE_CONST_INNER is provided by the field implementation */",
      "path": "src/field.h",
      "position": null,
      "original_position": 15,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "c0231d87f8a135afcd596ec3b0e1762e386f90ed",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this is part of the interface, so it should have a `/**` comment that describes the semantics (incl. mag and normalized).",
      "created_at": "2023-05-11T08:19:35Z",
      "updated_at": "2023-05-11T08:20:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190803849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190803849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190812389",
      "pull_request_review_id": 1422023613,
      "id": 1190812389,
      "node_id": "PRRC_kwDOAP4Jqs5G-lrl",
      "diff_hunk": "@@ -136,7 +137,11 @@ static void secp256k1_fe_clear(secp256k1_fe *a);\n  */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input a must be a valid normalized field element.",
      "path": "src/field.h",
      "position": null,
      "original_position": 15,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8c2745ac500d382e52ea0d5172ee0c966f451567",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"On input, a\" makes this much easier to parse for my brain. Maybe it's a good idea add commas after every \"On input\"/\"On output\"  ",
      "created_at": "2023-05-11T08:26:27Z",
      "updated_at": "2023-05-11T08:26:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190812389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190812389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190814547",
      "pull_request_review_id": 1422026874,
      "id": 1190814547,
      "node_id": "PRRC_kwDOAP4Jqs5G-mNT",
      "diff_hunk": "@@ -29,11 +42,7 @@ typedef struct {\n     ((uint64_t)(d6) >> 16) | (((uint64_t)(d7)) << 16) \\\n }\n \n-#ifdef VERIFY\n-#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)), 1, 1}\n-#else\n-#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0))}\n-#endif\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }",
      "path": "src/field_5x52.h",
      "position": null,
      "original_position": 45,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is redundant with `FE_CONST` definition in field.h",
      "created_at": "2023-05-11T08:28:09Z",
      "updated_at": "2023-05-11T08:28:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190814547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190814547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190821140",
      "pull_request_review_id": 1422037372,
      "id": 1190821140,
      "node_id": "PRRC_kwDOAP4Jqs5G-n0U",
      "diff_hunk": "@@ -158,7 +159,12 @@ static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n  */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Let va = int(a) mod p, vb = int(v) mod p. Returns 1 if va > vb,\n+ * -1 if va < vb, and 0 if va = vb.\n+ */",
      "path": "src/field.h",
      "position": null,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "93bcf6587239e804794d21283f39da6078108f9c",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: While \"values represented by 2 fields elements\" and `int(a)` etc. is technically correct, it hurts readability a bit. Maybe just identify field elements with their represented values here.  ",
      "created_at": "2023-05-11T08:31:54Z",
      "updated_at": "2023-05-11T08:32:07Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190821140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190821140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190830174",
      "pull_request_review_id": 1422054092,
      "id": 1190830174,
      "node_id": "PRRC_kwDOAP4Jqs5G-qBe",
      "diff_hunk": "@@ -28,116 +45,272 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/* SECP256K1_FE_CONST_INNER is provided by the field implementation */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, r does not need to be initialized.\n+ * On output, r represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);",
      "path": "src/field.h",
      "position": 165,
      "original_position": 159,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The argument is called `a`.",
      "created_at": "2023-05-11T08:36:32Z",
      "updated_at": "2023-05-11T08:37:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190830174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190830174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190831167",
      "pull_request_review_id": 1422054092,
      "id": 1190831167,
      "node_id": "PRRC_kwDOAP4Jqs5G-qQ_",
      "diff_hunk": "@@ -131,4 +148,263 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifndef VERIFY\n+static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }\n+#else\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);\n+    VERIFY_CHECK(r == 1);\n+    /* Invoke implementation-specific checks. */\n+    secp256k1_fe_impl_verify(a);\n+}\n+\n+static void secp256k1_fe_impl_normalize(secp256k1_fe *r);\n+SECP256K1_INLINE static void secp256k1_fe_normalize(secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_normalize(r);\n+    r->magnitude = 1;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_normalize_weak(secp256k1_fe *r);\n+SECP256K1_INLINE static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_normalize_weak(r);\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_normalize_var(secp256k1_fe *r);\n+SECP256K1_INLINE static void secp256k1_fe_normalize_var(secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_normalize_var(r);\n+    r->magnitude = 1;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static int secp256k1_fe_impl_normalizes_to_zero(const secp256k1_fe *r);\n+SECP256K1_INLINE static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    return secp256k1_fe_impl_normalizes_to_zero(r);\n+}\n+\n+static int secp256k1_fe_impl_normalizes_to_zero_var(const secp256k1_fe *r);\n+SECP256K1_INLINE static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    return secp256k1_fe_impl_normalizes_to_zero_var(r);\n+}\n+\n+static void secp256k1_fe_impl_set_int(secp256k1_fe *r, int a);\n+SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {\n+    VERIFY_CHECK(0 <= a && a <= 0x7FFF);\n+    secp256k1_fe_impl_set_int(r, a);\n+    r->magnitude = (a != 0);\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_add_int(secp256k1_fe *r, int a);\n+SECP256K1_INLINE static void secp256k1_fe_add_int(secp256k1_fe *r, int a) {\n+    VERIFY_CHECK(0 <= a && a <= 0x7FFF);\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_add_int(r, a);\n+    r->magnitude += 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_clear(secp256k1_fe *a);\n+SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {\n+    a->magnitude = 0;\n+    a->normalized = 1;\n+    secp256k1_fe_impl_clear(a);\n+}",
      "path": "src/field_impl.h",
      "position": null,
      "original_position": 128,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should verify `a` after clearning?",
      "created_at": "2023-05-11T08:37:19Z",
      "updated_at": "2023-05-11T08:37:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190831167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190831167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 225,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190837009",
      "pull_request_review_id": 1422066997,
      "id": 1190837009,
      "node_id": "PRRC_kwDOAP4Jqs5G-rsR",
      "diff_hunk": "@@ -265,6 +265,17 @@ SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k\n     r->normalized = 0;\n     secp256k1_fe_verify(r);\n }\n+\n+static void secp256k1_fe_impl_mul_int(secp256k1_fe *r, int a);\n+SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {\n+    secp256k1_fe_verify(r);\n+    VERIFY_CHECK(a >= 0 && a <= 32);\n+    VERIFY_CHECK(a*r->magnitude <= 32);\n+    secp256k1_fe_impl_mul_int(r, a);\n+    r->magnitude *= a;\n+    r->normalized = 0;",
      "path": "src/field_impl.h",
      "position": 203,
      "original_position": 12,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "6cf718569f839dcbda9bc9fe4c3fb3f4cfdffaa6",
      "in_reply_to_id": 796224678,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's fine. Making normalization depend on the value may be a step into the wrong direction (it makes magnitude less static, though the `int` argument probably doesn't matter.) \r\n\r\nAnd I don't see a good reason to VERIFY_CHECK the input. `a` may be determined at run time. For example, we currently call this with `0` (determined at run time) in the tests. If you want to add the VERIFY_CHECK, you'd need to adjust `random_field_element_magnitude`.  ",
      "created_at": "2023-05-11T08:40:52Z",
      "updated_at": "2023-05-11T08:40:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190837009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190837009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 297,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190840655",
      "pull_request_review_id": 1422074085,
      "id": 1190840655,
      "node_id": "PRRC_kwDOAP4Jqs5G-slP",
      "diff_hunk": "@@ -230,8 +231,13 @@ static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n  */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a cannot exceed 8.",
      "path": "src/field.h",
      "position": null,
      "original_position": 17,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8a95a15990f953236252cc41011fed822e4435a8",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/cannot/must not",
      "created_at": "2023-05-11T08:43:25Z",
      "updated_at": "2023-05-11T08:43:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190840655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190840655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190841285",
      "pull_request_review_id": 1422075025,
      "id": 1190841285,
      "node_id": "PRRC_kwDOAP4Jqs5G-svF",
      "diff_hunk": "@@ -219,8 +220,14 @@ static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n  */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes",
      "path": "src/field.h",
      "position": 277,
      "original_position": 17,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "83ca155c17ef929f1ceb9f08c5e77f450a2691fd",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/cannot/must not (maybe there are more)",
      "created_at": "2023-05-11T08:43:56Z",
      "updated_at": "2023-05-11T08:43:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190841285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190841285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190841946",
      "pull_request_review_id": 1422076050,
      "id": 1190841946,
      "node_id": "PRRC_kwDOAP4Jqs5G-s5a",
      "diff_hunk": "@@ -131,4 +132,21 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifndef VERIFY\n+static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }\n+#else\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);\n+    VERIFY_CHECK(r == 1);\n+    /* Invoke implementation-specific checks. */\n+    secp256k1_fe_impl_verify(a);\n+}\n+#endif /* defined(VERIFY) */",
      "path": "src/field_impl.h",
      "position": 323,
      "original_position": 27,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "0cdba2cd1f079dcf2fed06f6a61fa83f72f2d5ac",
      "in_reply_to_id": 1190791781,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think there is a consistent interpretation for this type of comment (if refers to the code block just terminated, not the if condition that started it), for which it is correct. I also don't think it matters too much, the point is to clarify what kind of condition is being terminated - negating it or not won't do much for the reader I think.",
      "created_at": "2023-05-11T08:44:30Z",
      "updated_at": "2023-05-11T08:44:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190841946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190841946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 417,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190843201",
      "pull_request_review_id": 1422078077,
      "id": 1190843201,
      "node_id": "PRRC_kwDOAP4Jqs5G-tNB",
      "diff_hunk": "@@ -240,11 +240,13 @@ static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp2\n  */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. R and a cannot point to the same object.",
      "path": "src/field.h",
      "position": null,
      "original_position": 13,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "df113a38c7c06a2d2ae32aa03d5d51720ee7d8a8",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/R/r\r\n\r\nadd a `restrict` ? :)",
      "created_at": "2023-05-11T08:45:36Z",
      "updated_at": "2023-05-11T08:45:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190843201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190843201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190850678",
      "pull_request_review_id": 1422090928,
      "id": 1190850678,
      "node_id": "PRRC_kwDOAP4Jqs5G-vB2",
      "diff_hunk": "@@ -341,6 +341,28 @@ SECP256K1_INLINE static void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n     r->normalized = 1;\n     secp256k1_fe_verify(r);\n }\n+\n+static void secp256k1_fe_impl_inv(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *x) {\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+    secp256k1_fe_verify(x);\n+    secp256k1_fe_impl_inv(r, x);\n+    r->magnitude = x->magnitude > 0;\n+    r->normalized = 1;\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_inv_var(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);",
      "path": "src/field_impl.h",
      "position": 283,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "e0341e1a513d2c87c877cac04ce492195428e222",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`#ifdef VERIFY` here? well ok, I guess dead store elimation can handle it.\r\n\r\nsame in constant time variant.",
      "created_at": "2023-05-11T08:51:49Z",
      "updated_at": "2023-05-11T08:52:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190850678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190850678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 377,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190865080",
      "pull_request_review_id": 1422112619,
      "id": 1190865080,
      "node_id": "PRRC_kwDOAP4Jqs5G-yi4",
      "diff_hunk": "@@ -341,6 +341,28 @@ SECP256K1_INLINE static void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n     r->normalized = 1;\n     secp256k1_fe_verify(r);\n }\n+\n+static void secp256k1_fe_impl_inv(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *x) {\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);\n+    secp256k1_fe_verify(x);\n+    secp256k1_fe_impl_inv(r, x);\n+    r->magnitude = x->magnitude > 0;\n+    r->normalized = 1;\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == input_is_zero);\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_inv_var(secp256k1_fe *r, const secp256k1_fe *x);\n+SECP256K1_INLINE static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {\n+    int input_is_zero = secp256k1_fe_normalizes_to_zero(x);",
      "path": "src/field_impl.h",
      "position": 283,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "e0341e1a513d2c87c877cac04ce492195428e222",
      "in_reply_to_id": 1190850678,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This entire block of functions is inside a `#ifdef VERIFY`.",
      "created_at": "2023-05-11T09:02:27Z",
      "updated_at": "2023-05-11T09:02:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190865080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190865080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 377,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190868511",
      "pull_request_review_id": 1422117996,
      "id": 1190868511,
      "node_id": "PRRC_kwDOAP4Jqs5G-zYf",
      "diff_hunk": "@@ -28,116 +45,272 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/* SECP256K1_FE_CONST_INNER is provided by the field implementation */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* defined(VERIFY) */",
      "path": "src/field.h",
      "position": null,
      "original_position": 104,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": 1190774605,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. That was painful.",
      "created_at": "2023-05-11T09:05:27Z",
      "updated_at": "2023-05-11T09:05:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190868511",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190868511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190868734",
      "pull_request_review_id": 1422118341,
      "id": 1190868734,
      "node_id": "PRRC_kwDOAP4Jqs5G-zb-",
      "diff_hunk": "@@ -131,4 +132,21 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifndef VERIFY\n+static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }\n+#else\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);",
      "path": "src/field_impl.h",
      "position": null,
      "original_position": 22,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "0cdba2cd1f079dcf2fed06f6a61fa83f72f2d5ac",
      "in_reply_to_id": 1190790150,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, in a separate commit.",
      "created_at": "2023-05-11T09:05:38Z",
      "updated_at": "2023-05-11T09:05:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190868734",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190868734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 140,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190868899",
      "pull_request_review_id": 1422118609,
      "id": 1190868899,
      "node_id": "PRRC_kwDOAP4Jqs5G-zej",
      "diff_hunk": "@@ -45,6 +45,20 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/* SECP256K1_FE_CONST_INNER is provided by the field implementation */",
      "path": "src/field.h",
      "position": null,
      "original_position": 15,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "c0231d87f8a135afcd596ec3b0e1762e386f90ed",
      "in_reply_to_id": 1190803849,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-05-11T09:05:47Z",
      "updated_at": "2023-05-11T09:05:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190868899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190868899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869131",
      "pull_request_review_id": 1422118969,
      "id": 1190869131,
      "node_id": "PRRC_kwDOAP4Jqs5G-ziL",
      "diff_hunk": "@@ -136,7 +137,11 @@ static void secp256k1_fe_clear(secp256k1_fe *a);\n  */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input a must be a valid normalized field element.",
      "path": "src/field.h",
      "position": null,
      "original_position": 15,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8c2745ac500d382e52ea0d5172ee0c966f451567",
      "in_reply_to_id": 1190812389,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, inline in the 3 commits in which this happened.",
      "created_at": "2023-05-11T09:06:00Z",
      "updated_at": "2023-05-11T09:06:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190869131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869251",
      "pull_request_review_id": 1422119160,
      "id": 1190869251,
      "node_id": "PRRC_kwDOAP4Jqs5G-zkD",
      "diff_hunk": "@@ -29,11 +42,7 @@ typedef struct {\n     ((uint64_t)(d6) >> 16) | (((uint64_t)(d7)) << 16) \\\n }\n \n-#ifdef VERIFY\n-#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)), 1, 1}\n-#else\n-#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0))}\n-#endif\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }",
      "path": "src/field_5x52.h",
      "position": null,
      "original_position": 45,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": 1190814547,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed.",
      "created_at": "2023-05-11T09:06:06Z",
      "updated_at": "2023-05-11T09:06:07Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190869251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869589",
      "pull_request_review_id": 1422119671,
      "id": 1190869589,
      "node_id": "PRRC_kwDOAP4Jqs5G-zpV",
      "diff_hunk": "@@ -158,7 +159,12 @@ static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n  */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Let va = int(a) mod p, vb = int(v) mod p. Returns 1 if va > vb,\n+ * -1 if va < vb, and 0 if va = vb.\n+ */",
      "path": "src/field.h",
      "position": null,
      "original_position": 18,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "93bcf6587239e804794d21283f39da6078108f9c",
      "in_reply_to_id": 1190821140,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. I've described it slightly differently. Have a look.",
      "created_at": "2023-05-11T09:06:22Z",
      "updated_at": "2023-05-11T09:06:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190869589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869695",
      "pull_request_review_id": 1422119861,
      "id": 1190869695,
      "node_id": "PRRC_kwDOAP4Jqs5G-zq_",
      "diff_hunk": "@@ -28,116 +45,272 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/* SECP256K1_FE_CONST_INNER is provided by the field implementation */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, r does not need to be initialized.\n+ * On output, r represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);",
      "path": "src/field.h",
      "position": 165,
      "original_position": 159,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": 1190830174,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2023-05-11T09:06:28Z",
      "updated_at": "2023-05-11T09:06:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190869695",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869824",
      "pull_request_review_id": 1422120057,
      "id": 1190869824,
      "node_id": "PRRC_kwDOAP4Jqs5G-ztA",
      "diff_hunk": "@@ -131,4 +148,263 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n+#ifndef VERIFY\n+static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }\n+#else\n+static void secp256k1_fe_impl_verify(const secp256k1_fe *a);\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n+    /* Magnitude between 0 and 32. */\n+    int r = (a->magnitude >= 0) & (a->magnitude <= 32);\n+    /* Normalized is 0 or 1. */\n+    r &= (a->normalized == 0) | (a->normalized == 1);\n+    /* If normalized, magnitude must be 0 or 1. */\n+    if (a->normalized) r &= (a->magnitude <= 1);\n+    VERIFY_CHECK(r == 1);\n+    /* Invoke implementation-specific checks. */\n+    secp256k1_fe_impl_verify(a);\n+}\n+\n+static void secp256k1_fe_impl_normalize(secp256k1_fe *r);\n+SECP256K1_INLINE static void secp256k1_fe_normalize(secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_normalize(r);\n+    r->magnitude = 1;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_normalize_weak(secp256k1_fe *r);\n+SECP256K1_INLINE static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_normalize_weak(r);\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_normalize_var(secp256k1_fe *r);\n+SECP256K1_INLINE static void secp256k1_fe_normalize_var(secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_normalize_var(r);\n+    r->magnitude = 1;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static int secp256k1_fe_impl_normalizes_to_zero(const secp256k1_fe *r);\n+SECP256K1_INLINE static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    return secp256k1_fe_impl_normalizes_to_zero(r);\n+}\n+\n+static int secp256k1_fe_impl_normalizes_to_zero_var(const secp256k1_fe *r);\n+SECP256K1_INLINE static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r) {\n+    secp256k1_fe_verify(r);\n+    return secp256k1_fe_impl_normalizes_to_zero_var(r);\n+}\n+\n+static void secp256k1_fe_impl_set_int(secp256k1_fe *r, int a);\n+SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {\n+    VERIFY_CHECK(0 <= a && a <= 0x7FFF);\n+    secp256k1_fe_impl_set_int(r, a);\n+    r->magnitude = (a != 0);\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_add_int(secp256k1_fe *r, int a);\n+SECP256K1_INLINE static void secp256k1_fe_add_int(secp256k1_fe *r, int a) {\n+    VERIFY_CHECK(0 <= a && a <= 0x7FFF);\n+    secp256k1_fe_verify(r);\n+    secp256k1_fe_impl_add_int(r, a);\n+    r->magnitude += 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+}\n+\n+static void secp256k1_fe_impl_clear(secp256k1_fe *a);\n+SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {\n+    a->magnitude = 0;\n+    a->normalized = 1;\n+    secp256k1_fe_impl_clear(a);\n+}",
      "path": "src/field_impl.h",
      "position": null,
      "original_position": 128,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "dd5ca02bb42415fe7066a7077be4573eb50d535c",
      "in_reply_to_id": 1190831167,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-05-11T09:06:34Z",
      "updated_at": "2023-05-11T09:06:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190869824",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 225,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869960",
      "pull_request_review_id": 1422120257,
      "id": 1190869960,
      "node_id": "PRRC_kwDOAP4Jqs5G-zvI",
      "diff_hunk": "@@ -230,8 +231,13 @@ static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n  */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a cannot exceed 8.",
      "path": "src/field.h",
      "position": null,
      "original_position": 17,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "8a95a15990f953236252cc41011fed822e4435a8",
      "in_reply_to_id": 1190840655,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-05-11T09:06:41Z",
      "updated_at": "2023-05-11T09:06:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190869960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190869960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190870171",
      "pull_request_review_id": 1422120591,
      "id": 1190870171,
      "node_id": "PRRC_kwDOAP4Jqs5G-zyb",
      "diff_hunk": "@@ -219,8 +220,14 @@ static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n  */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes",
      "path": "src/field.h",
      "position": 277,
      "original_position": 17,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "83ca155c17ef929f1ceb9f08c5e77f450a2691fd",
      "in_reply_to_id": 1190841285,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. I have not checked for more.",
      "created_at": "2023-05-11T09:06:52Z",
      "updated_at": "2023-05-11T09:06:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190870171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190870171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190870340",
      "pull_request_review_id": 1422120862,
      "id": 1190870340,
      "node_id": "PRRC_kwDOAP4Jqs5G-z1E",
      "diff_hunk": "@@ -240,11 +240,13 @@ static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp2\n  */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. R and a cannot point to the same object.",
      "path": "src/field.h",
      "position": null,
      "original_position": 13,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "df113a38c7c06a2d2ae32aa03d5d51720ee7d8a8",
      "in_reply_to_id": 1190843201,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-05-11T09:07:00Z",
      "updated_at": "2023-05-11T09:07:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190870340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190870340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190927829",
      "pull_request_review_id": 1422207692,
      "id": 1190927829,
      "node_id": "PRRC_kwDOAP4Jqs5G_B3V",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.",
      "path": "src/field.h",
      "position": null,
      "original_position": 258,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably much clearer to say that `r` is normalized vs. \"normalized is cleared\".",
      "created_at": "2023-05-11T09:54:05Z",
      "updated_at": "2023-05-11T10:15:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190927829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190927829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 220,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190928954",
      "pull_request_review_id": 1422207692,
      "id": 1190928954,
      "node_id": "PRRC_kwDOAP4Jqs5G_CI6",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.",
      "path": "src/field.h",
      "position": null,
      "original_position": 266,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "may not -> must not?",
      "created_at": "2023-05-11T09:55:02Z",
      "updated_at": "2023-05-11T10:15:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190928954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190928954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190931209",
      "pull_request_review_id": 1422207692,
      "id": 1190931209,
      "node_id": "PRRC_kwDOAP4Jqs5G_CsJ",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.",
      "path": "src/field.h",
      "position": null,
      "original_position": 63,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "expands to an initialized what?",
      "created_at": "2023-05-11T09:56:57Z",
      "updated_at": "2023-05-11T10:15:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190931209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190931209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190935647",
      "pull_request_review_id": 1422207692,
      "id": 1190935647,
      "node_id": "PRRC_kwDOAP4Jqs5G_Dxf",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.\n+ * Performs {r += a}.\n+ * On output, r will not be normalized, and will have magnitude incremented by a's.\n+ */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes\n+ * of a and b must not exceed 8.\n+ * Performs {r = a * b}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a must not exceed 8.\n+ * Performs {r = a**2}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. Variables r and a must not point to the same object.\n+ * On output, r will have magnitude 1 but will not be normalized.\n+ */\n+static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a);",
      "path": "src/field.h",
      "position": 308,
      "original_position": 308,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did you intentionally skipped adding a postcondition to the `sqrt()` code (fe_verify of the square root, maybe check the magnitude and normalization).",
      "created_at": "2023-05-11T10:00:48Z",
      "updated_at": "2023-05-11T10:15:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190935647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190935647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 269,
      "original_line": 269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190949136",
      "pull_request_review_id": 1422207692,
      "id": 1190949136,
      "node_id": "PRRC_kwDOAP4Jqs5G_HEQ",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.\n+ * Performs {r += a}.\n+ * On output, r will not be normalized, and will have magnitude incremented by a's.\n+ */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes\n+ * of a and b must not exceed 8.\n+ * Performs {r = a * b}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a must not exceed 8.\n+ * Performs {r = a**2}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. Variables r and a must not point to the same object.\n+ * On output, r will have magnitude 1 but will not be normalized.\n+ */\n+static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a);\n \n-/** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n- *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Compute the modular inverse of a field element.\n+ *\n+ * On input, a must be a valid field element; r need not be initialized.\n+ * Performs {r = a**(p-2)} (which maps 0 to 0, and every other element to its\n+ * inverse).\n+ * On output, r will have magnitude (a.magnitude != 0) and be normalized.\n+ */\n static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. */\n+/** Compute the modular inverse of a field element, without constant-time guarantee.\n+ *\n+ * Behaves identically to secp256k1_fe_inv, but is not constant-time in a.\n+ */\n static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Convert a field element to the storage type. */\n+/** Convert a field element to secp256k1_fe_storage.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Performs {r = a}.\n+ */\n static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a);\n \n-/** Convert a field element back from the storage type. */\n+/** Convert a field element back from secp256k1_fe_storage.\n+ *\n+ * On input, r need not be initialized.\n+ * Performs {r = a}.\n+ * On output, r will be normalized and will have magnitude 1.\n+ */\n static void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag);\n \n-/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n+/** Conditionally move a field element in constant time.\n+ *\n+ * On input, both r and a must be valid field elements. Flag must be 0 or 1.\n+ * Performs {r = flag ? a : r}.\n+ * On output, r's magnitude and normalized will equal a's in case of flag=1, unchanged otherwise.\n+ */\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n /** Halves the value of a field element modulo the field prime. Constant-time.\n  *  For an input magnitude 'm', the output magnitude is set to 'floor(m/2) + 1'.\n  *  The output is not guaranteed to be normalized, regardless of the input. */\n static void secp256k1_fe_half(secp256k1_fe *r);",
      "path": "src/field.h",
      "position": null,
      "original_position": 360,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment didn't get updated. How about:\r\n\r\n```\r\n/** Halve the value of a field element modulo the field prime in constant-time.\r\n *\r\n * On input, r must be a valid field element.\r\n * On output, r will be normalized and have magnitude floor(m/2) + 1 where m is\r\n * the magnitude of r on input.\r\n */\r\n ```",
      "created_at": "2023-05-11T10:11:36Z",
      "updated_at": "2023-05-11T10:15:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190949136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190949136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 312,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190952534",
      "pull_request_review_id": 1422207692,
      "id": 1190952534,
      "node_id": "PRRC_kwDOAP4Jqs5G_H5W",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.\n+ * Performs {r += a}.\n+ * On output, r will not be normalized, and will have magnitude incremented by a's.\n+ */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes\n+ * of a and b must not exceed 8.\n+ * Performs {r = a * b}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a must not exceed 8.\n+ * Performs {r = a**2}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. Variables r and a must not point to the same object.\n+ * On output, r will have magnitude 1 but will not be normalized.\n+ */\n+static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a);\n \n-/** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n- *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Compute the modular inverse of a field element.\n+ *\n+ * On input, a must be a valid field element; r need not be initialized.\n+ * Performs {r = a**(p-2)} (which maps 0 to 0, and every other element to its\n+ * inverse).\n+ * On output, r will have magnitude (a.magnitude != 0) and be normalized.\n+ */\n static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. */\n+/** Compute the modular inverse of a field element, without constant-time guarantee.\n+ *\n+ * Behaves identically to secp256k1_fe_inv, but is not constant-time in a.\n+ */\n static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Convert a field element to the storage type. */\n+/** Convert a field element to secp256k1_fe_storage.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Performs {r = a}.\n+ */\n static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a);\n \n-/** Convert a field element back from the storage type. */\n+/** Convert a field element back from secp256k1_fe_storage.\n+ *\n+ * On input, r need not be initialized.\n+ * Performs {r = a}.\n+ * On output, r will be normalized and will have magnitude 1.\n+ */\n static void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag);\n \n-/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n+/** Conditionally move a field element in constant time.\n+ *\n+ * On input, both r and a must be valid field elements. Flag must be 0 or 1.\n+ * Performs {r = flag ? a : r}.\n+ * On output, r's magnitude and normalized will equal a's in case of flag=1, unchanged otherwise.\n+ */\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n /** Halves the value of a field element modulo the field prime. Constant-time.\n  *  For an input magnitude 'm', the output magnitude is set to 'floor(m/2) + 1'.\n  *  The output is not guaranteed to be normalized, regardless of the input. */\n static void secp256k1_fe_half(secp256k1_fe *r);\n \n-/** Sets each limb of 'r' to its upper bound at magnitude 'm'. The output will also have its\n- *  magnitude set to 'm' and is normalized if (and only if) 'm' is zero. */\n+/** Sets r to a field element with magnitude m, normalized if (and only if) m==0.\n+ *  The value is chosen so that it is likely to trigger edge cases related to\n+ *  internal overflows. */\n static void secp256k1_fe_get_bounds(secp256k1_fe *r, int m);\n \n /** Determine whether a is a square (modulo p). */",
      "path": "src/field.h",
      "position": null,
      "original_position": 369,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment didn't get updated: Maybe something like:\r\n```\r\n/** Determine whether a is a square (modulo p).\r\n *\r\n * On input, a must be a valid field element.\r\n */\r\n```\r\nnit: Should this function declaration be moved to the top to the other `_is_` functions?\r\n",
      "created_at": "2023-05-11T10:14:57Z",
      "updated_at": "2023-05-11T10:15:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190952534",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190952534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190966556",
      "pull_request_review_id": 1422268924,
      "id": 1190966556,
      "node_id": "PRRC_kwDOAP4Jqs5G_LUc",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.\n+ * Performs {r += a}.\n+ * On output, r will not be normalized, and will have magnitude incremented by a's.\n+ */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes\n+ * of a and b must not exceed 8.\n+ * Performs {r = a * b}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a must not exceed 8.\n+ * Performs {r = a**2}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. Variables r and a must not point to the same object.\n+ * On output, r will have magnitude 1 but will not be normalized.\n+ */\n+static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a);\n \n-/** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n- *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Compute the modular inverse of a field element.\n+ *\n+ * On input, a must be a valid field element; r need not be initialized.\n+ * Performs {r = a**(p-2)} (which maps 0 to 0, and every other element to its\n+ * inverse).\n+ * On output, r will have magnitude (a.magnitude != 0) and be normalized.\n+ */\n static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. */\n+/** Compute the modular inverse of a field element, without constant-time guarantee.\n+ *\n+ * Behaves identically to secp256k1_fe_inv, but is not constant-time in a.\n+ */\n static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Convert a field element to the storage type. */\n+/** Convert a field element to secp256k1_fe_storage.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Performs {r = a}.\n+ */\n static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a);\n \n-/** Convert a field element back from the storage type. */\n+/** Convert a field element back from secp256k1_fe_storage.\n+ *\n+ * On input, r need not be initialized.\n+ * Performs {r = a}.\n+ * On output, r will be normalized and will have magnitude 1.\n+ */\n static void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag);\n \n-/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n+/** Conditionally move a field element in constant time.\n+ *\n+ * On input, both r and a must be valid field elements. Flag must be 0 or 1.\n+ * Performs {r = flag ? a : r}.\n+ * On output, r's magnitude and normalized will equal a's in case of flag=1, unchanged otherwise.\n+ */\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n /** Halves the value of a field element modulo the field prime. Constant-time.\n  *  For an input magnitude 'm', the output magnitude is set to 'floor(m/2) + 1'.\n  *  The output is not guaranteed to be normalized, regardless of the input. */\n static void secp256k1_fe_half(secp256k1_fe *r);\n \n-/** Sets each limb of 'r' to its upper bound at magnitude 'm'. The output will also have its\n- *  magnitude set to 'm' and is normalized if (and only if) 'm' is zero. */\n+/** Sets r to a field element with magnitude m, normalized if (and only if) m==0.\n+ *  The value is chosen so that it is likely to trigger edge cases related to\n+ *  internal overflows. */\n static void secp256k1_fe_get_bounds(secp256k1_fe *r, int m);\n \n /** Determine whether a is a square (modulo p). */",
      "path": "src/field.h",
      "position": null,
      "original_position": 369,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": 1190952534,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. I didn't move it to avoid messing with the commits, but we can do that as a follow-up.",
      "created_at": "2023-05-11T10:27:48Z",
      "updated_at": "2023-05-11T10:27:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190966556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190966556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190966753",
      "pull_request_review_id": 1422269224,
      "id": 1190966753,
      "node_id": "PRRC_kwDOAP4Jqs5G_LXh",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.\n+ * Performs {r += a}.\n+ * On output, r will not be normalized, and will have magnitude incremented by a's.\n+ */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes\n+ * of a and b must not exceed 8.\n+ * Performs {r = a * b}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a must not exceed 8.\n+ * Performs {r = a**2}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. Variables r and a must not point to the same object.\n+ * On output, r will have magnitude 1 but will not be normalized.\n+ */\n+static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a);\n \n-/** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n- *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Compute the modular inverse of a field element.\n+ *\n+ * On input, a must be a valid field element; r need not be initialized.\n+ * Performs {r = a**(p-2)} (which maps 0 to 0, and every other element to its\n+ * inverse).\n+ * On output, r will have magnitude (a.magnitude != 0) and be normalized.\n+ */\n static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. */\n+/** Compute the modular inverse of a field element, without constant-time guarantee.\n+ *\n+ * Behaves identically to secp256k1_fe_inv, but is not constant-time in a.\n+ */\n static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Convert a field element to the storage type. */\n+/** Convert a field element to secp256k1_fe_storage.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Performs {r = a}.\n+ */\n static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a);\n \n-/** Convert a field element back from the storage type. */\n+/** Convert a field element back from secp256k1_fe_storage.\n+ *\n+ * On input, r need not be initialized.\n+ * Performs {r = a}.\n+ * On output, r will be normalized and will have magnitude 1.\n+ */\n static void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag);\n \n-/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time.  Both *r and *a must be initialized.*/\n+/** Conditionally move a field element in constant time.\n+ *\n+ * On input, both r and a must be valid field elements. Flag must be 0 or 1.\n+ * Performs {r = flag ? a : r}.\n+ * On output, r's magnitude and normalized will equal a's in case of flag=1, unchanged otherwise.\n+ */\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n /** Halves the value of a field element modulo the field prime. Constant-time.\n  *  For an input magnitude 'm', the output magnitude is set to 'floor(m/2) + 1'.\n  *  The output is not guaranteed to be normalized, regardless of the input. */\n static void secp256k1_fe_half(secp256k1_fe *r);",
      "path": "src/field.h",
      "position": null,
      "original_position": 360,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": 1190949136,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. Used that literally.",
      "created_at": "2023-05-11T10:28:00Z",
      "updated_at": "2023-05-11T10:28:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190966753",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190966753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 312,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190967594",
      "pull_request_review_id": 1422270535,
      "id": 1190967594,
      "node_id": "PRRC_kwDOAP4Jqs5G_Lkq",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.\n+ * Performs {r += a}.\n+ * On output, r will not be normalized, and will have magnitude incremented by a's.\n+ */\n static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Multiply two field elements.\n+ *\n+ * On input, a and b must be valid field elements; r does not need to be initialized.\n+ * r and a may point to the same object, but neither can be equal to b. The magnitudes\n+ * of a and b must not exceed 8.\n+ * Performs {r = a * b}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n-/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n- *  The output magnitude is 1 (but not guaranteed to be normalized). */\n+/** Square a field element.\n+ *\n+ * On input, a must be a valid field element; r does not need to be initialized. The magnitude\n+ * of a must not exceed 8.\n+ * Performs {r = a**2}\n+ * On output, r will have magnitude 1, but won't be normalized.\n+ */\n static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** If a has a square root, it is computed in r and 1 is returned. If a does not\n- *  have a square root, the root of its negation is computed and 0 is returned.\n- *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n- *  guaranteed to be normalized). The result in r will always be a square\n- *  itself. */\n-static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n+/** Compute a square root of a field element.\n+ *\n+ * On input, a must be a valid field element with magnitude<=8; r need not be initialized.\n+ * Performs {r = sqrt(a)} or {r = sqrt(-a)}, whichever exists. The resulting value\n+ * represented by r will be a square itself. Variables r and a must not point to the same object.\n+ * On output, r will have magnitude 1 but will not be normalized.\n+ */\n+static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a);",
      "path": "src/field.h",
      "position": 308,
      "original_position": 308,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": 1190935647,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added a VERIFY_CHECK that if sqrt returns 0, it's the sqrt of the negation.\r\n\r\nOther than that, no need for fe_verify, because it's not touching internals of field elements.",
      "created_at": "2023-05-11T10:28:50Z",
      "updated_at": "2023-05-11T10:28:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190967594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190967594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 269,
      "original_line": 269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190967840",
      "pull_request_review_id": 1422270938,
      "id": 1190967840,
      "node_id": "PRRC_kwDOAP4Jqs5G_Log",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.",
      "path": "src/field.h",
      "position": null,
      "original_position": 63,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": 1190931209,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: initializer. Fixed.",
      "created_at": "2023-05-11T10:29:03Z",
      "updated_at": "2023-05-11T10:29:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190967840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190967840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190967972",
      "pull_request_review_id": 1422271154,
      "id": 1190967972,
      "node_id": "PRRC_kwDOAP4Jqs5G_Lqk",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.\n+ */\n static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n-/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n+/** Increment a field element by another.\n+ *\n+ * On input, r and a must be valid field elements, not necessarily normalized.\n+ * The sum of their magnitudes may not exceed 32.",
      "path": "src/field.h",
      "position": null,
      "original_position": 266,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": 1190928954,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-05-11T10:29:11Z",
      "updated_at": "2023-05-11T10:29:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190967972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190967972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190968245",
      "pull_request_review_id": 1422271564,
      "id": 1190968245,
      "node_id": "PRRC_kwDOAP4Jqs5G_Lu1",
      "diff_hunk": "@@ -28,116 +45,278 @@\n #error \"Please select wide multiplication implementation\"\n #endif\n \n+#ifdef VERIFY\n+/* Magnitude and normalized value for constants. */\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0) \\\n+    /* Magnitude is 0 for constant 0; 1 otherwise. */ \\\n+    , (((d7) | (d6) | (d5) | (d4) | (d3) | (d2) | (d1) | (d0)) != 0) \\\n+    /* Normalized is 1 unless sum(d_i<<(32*i) for i=0..7) exceeds field modulus. */ \\\n+    , (!(((d7) & (d6) & (d5) & (d4) & (d3) & (d2)) == 0xfffffffful && ((d1) == 0xfffffffful || ((d1) == 0xfffffffe && (d0 >= 0xfffffc2f)))))\n+#else\n+#define SECP256K1_FE_VERIFY_CONST(d7, d6, d5, d4, d3, d2, d1, d0)\n+#endif\n+\n+/** This expands to an initialized for a secp256k1_fe valued sum((i*32) * d_i, i=0..7) mod p.\n+ *\n+ * It has magnitude 1, unless d_i are all 0, in which case the magnitude is 0.\n+ * It is normalized, unless sum(2^(i*32) * d_i, i=0..7) >= p.\n+ *\n+ * SECP256K1_FE_CONST_INNER is provided by the implementation.\n+ */\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) SECP256K1_FE_VERIFY_CONST((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)) }\n+\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n static const secp256k1_fe secp256k1_const_beta = SECP256K1_FE_CONST(\n     0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n     0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n );\n \n-/** Normalize a field element. This brings the field element to a canonical representation, reduces\n- *  its magnitude to 1, and reduces it modulo field size `p`.\n+#ifndef VERIFY\n+/* In non-VERIFY mode, we #define the fe operations to be identical to their\n+ * internal field implementation, to avoid the potential overhead of a\n+ * function call (even though presumably inlinable). */\n+#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize\n+#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak\n+#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var\n+#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero\n+#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var\n+#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int\n+#  define secp256k1_fe_clear secp256k1_fe_impl_clear\n+#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero\n+#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd\n+#  define secp256k1_fe_cmp_var secp256k1_fe_impl_cmp_var\n+#  define secp256k1_fe_set_b32 secp256k1_fe_impl_set_b32\n+#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32\n+#  define secp256k1_fe_negate secp256k1_fe_impl_negate\n+#  define secp256k1_fe_mul_int secp256k1_fe_impl_mul_int\n+#  define secp256k1_fe_add secp256k1_fe_impl_add\n+#  define secp256k1_fe_mul secp256k1_fe_impl_mul\n+#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr\n+#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov\n+#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage\n+#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage\n+#  define secp256k1_fe_inv secp256k1_fe_impl_inv\n+#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var\n+#  define secp256k1_fe_get_bounds secp256k1_fe_impl_get_bounds\n+#  define secp256k1_fe_half secp256k1_fe_impl_half\n+#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int\n+#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var\n+#endif /* !defined(VERIFY) */\n+\n+/** Normalize a field element.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has normalized=1 and magnitude=1.\n  */\n static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n-/** Weakly normalize a field element: reduce its magnitude to 1, but don't fully normalize. */\n+/** Give a field element magnitude 1.\n+ *\n+ * On input, r must be a valid field element.\n+ * On output, r represents the same value but has magnitude=1. Normalized is unchanged.\n+ */\n static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n-/** Normalize a field element, without constant-time guarantee. */\n+/** Normalize a field element, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_normalize, but not constant time in r.\n+ */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+/** Determine whether r represents field element 0.\n+ *\n+ * On input, r must be a valid field element.\n+ * Returns whether r = 0 (mod p).\n+ */\n static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n- *  without constant-time guarantee. */\n+/** Determine whether r represents field element 0, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_normalizes_to_zero, but not constant time in r.\n+ */\n static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n-/** Set a field element equal to a small (not greater than 0x7FFF), non-negative integer.\n- *  Resulting field element is normalized; it has magnitude 0 if a == 0, and magnitude 1 otherwise.\n+/** Set a field element to an integer in range [0,0x7FFF].\n+ *\n+ * On input, r does not need to be initialized, a must be in [0,0x7FFF].\n+ * On output, r represents value a, is normalized and has magnitude (a!=0).\n  */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n-/** Sets a field element equal to zero, initializing all fields. */\n+/** Set a field element to 0.\n+ *\n+ * On input, a does not need to be initialized.\n+ * On output, a represents 0, is normalized and has magnitude 0.\n+ */\n static void secp256k1_fe_clear(secp256k1_fe *a);\n \n-/** Verify whether a field element is zero. Requires the input to be normalized. */\n+/** Determine whether a represents field element 0.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns whether a = 0 (mod p).\n+ *\n+ * This behaves identical to secp256k1_normalizes_to_zero{,_var}, but requires\n+ * normalized input (and is much faster).\n+ */\n static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n-/** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n+/** Determine whether a (mod p) is odd.\n+ *\n+ * On input, a must be a valid normalized field element.\n+ * Returns (int(a) mod p) & 1.\n+ */\n static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n-/** Compare two field elements. Requires magnitude-1 inputs. */\n+/** Determine whether two field elements are equal.\n+ *\n+ * On input, a and b must be valid field elements with magnitudes not exceeding\n+ * 1 and 31, respectively.\n+ * Returns a = b (mod p).\n+ */\n static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Same as secp256k1_fe_equal, but may be variable time. */\n+/** Determine whether two field elements are equal, without constant-time guarantee.\n+ *\n+ * Identical in behavior to secp256k1_fe_equal, but not constant time in either a or b.\n+ */\n static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n+/** Compare the values represented by 2 field elements, without constant-time guarantee.\n+ *\n+ * On input, a and b must be valid normalized field elements.\n+ * Returns 1 if a > b, -1 if a < b, and 0 if a = b (comparisons are done as integers\n+ * in range 0..p-1).\n+ */\n static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value.\n- *  Returns 1 if no overflow occurred, and then the output is normalized.\n- *  Returns 0 if overflow occurred, and then the output is only weakly normalized. */\n+/** Set a field element equal to a provided 32-byte big endian value.\n+ *\n+ * On input, r does not need to be initalized. a must be a pointer to an initialized 32-byte array.\n+ * On output, r = a (mod p). It will have magnitude 1, and if (a < p), it will be normalized.\n+ * If not, it will only be weakly normalized. Returns whether (a < p).\n+ *\n+ * Note that this function is unusual in that the normalization of the output depends on the\n+ * run-time value of a.\n+ */\n static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n+/** Convert a field element to 32-byte big endian byte array.\n+ * On input, a must be a valid normalized field element, and r a pointer to a 32-byte array.\n+ * On output, r = a (mod p).\n+ */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n-/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n- *  as an argument. The magnitude of the output is one higher. */\n+/** Negate a field element.\n+ *\n+ * On input, r does not need to be initialized. a must be a valid field element with\n+ * magnitude not exceeding m. m must be an integer in [0,31].\n+ * Performs {r = -a}.\n+ * On output, r will not be normalized, and will have magnitude m+1.\n+ */\n static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n-/** Adds a small integer (up to 0x7FFF) to r. The resulting magnitude increases by one. */\n+/** Add a small integer to a field element.\n+ *\n+ * Performs {r += a}. The magnitude of r increases by 1, and normalized is cleared.\n+ * a must be in range [0,0xFFFF].\n+ */\n static void secp256k1_fe_add_int(secp256k1_fe *r, int a);\n \n-/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n- *  small integer. */\n+/** Multiply a field element with a small integer.\n+ *\n+ * On input, r must be a valid field element. a must be an integer in [0,32].\n+ * The magnitude of r times a must not exceed 32.\n+ * Performs {r *= a}.\n+ * On output, r's magnitude is multiplied by a, and normalized is cleared.",
      "path": "src/field.h",
      "position": null,
      "original_position": 258,
      "commit_id": "7fc642fa25ad03ebd95cfe237b625dfb6dfdfa94",
      "original_commit_id": "50d916364e4195aa4c5383d982a9422c88ccb36f",
      "in_reply_to_id": 1190927829,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (except it's not normalized).",
      "created_at": "2023-05-11T10:29:28Z",
      "updated_at": "2023-05-11T10:29:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1066#discussion_r1190968245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1190968245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1066"
        }
      },
      "start_line": null,
      "original_start_line": 220,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    }
  ]
}