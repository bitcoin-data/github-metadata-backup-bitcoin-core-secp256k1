{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461",
    "id": 126301487,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTI2MzAxNDg3",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/461.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/461.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
    "number": 461,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "[WIP] Aggregate signature module implementation",
    "user": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "",
    "labels": [],
    "created_at": "2017-06-19T13:22:16Z",
    "updated_at": "2022-03-25T10:02:31Z",
    "closed_at": "2022-03-25T10:02:31Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "a18009cc1475ff2f9f141d898e028721cb3018ec",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "apoelstra:newschnorr",
      "ref": "newschnorr",
      "sha": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 33787691,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMzc4NzY5MQ==",
        "name": "secp256k1",
        "full_name": "apoelstra/secp256k1",
        "owner": {
          "login": "apoelstra",
          "id": 1351933,
          "node_id": "MDQ6VXNlcjEzNTE5MzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/apoelstra",
          "html_url": "https://github.com/apoelstra",
          "followers_url": "https://api.github.com/users/apoelstra/followers",
          "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
          "organizations_url": "https://api.github.com/users/apoelstra/orgs",
          "repos_url": "https://api.github.com/users/apoelstra/repos",
          "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/apoelstra/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/apoelstra/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/apoelstra/secp256k1",
        "archive_url": "https://api.github.com/repos/apoelstra/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/apoelstra/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/apoelstra/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/apoelstra/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/apoelstra/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/apoelstra/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/apoelstra/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/apoelstra/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/apoelstra/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/apoelstra/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/apoelstra/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/apoelstra/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/apoelstra/secp256k1/events",
        "forks_url": "https://api.github.com/repos/apoelstra/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/apoelstra/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/apoelstra/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/apoelstra/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/apoelstra/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/apoelstra/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/apoelstra/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/apoelstra/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/apoelstra/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/apoelstra/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/apoelstra/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/apoelstra/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/apoelstra/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/apoelstra/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/apoelstra/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/apoelstra/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:apoelstra/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/apoelstra/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/apoelstra/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/apoelstra/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/apoelstra/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/apoelstra/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/apoelstra/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/apoelstra/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/apoelstra/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/apoelstra/secp256k1/hooks",
        "svn_url": "https://github.com/apoelstra/secp256k1",
        "language": "C",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 2888,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-05-06T18:52:16Z",
        "created_at": "2015-04-11T18:42:06Z",
        "updated_at": "2020-04-18T08:27:37Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "c77fc08597960d662eb0df9e4c670c31bdeb227e",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 758,
    "deletions": 0,
    "changed_files": 10,
    "commits": 1,
    "review_comments": 47,
    "comments": 46
  },
  "events": [
    {
      "event": "commented",
      "id": 309439623,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQzOTYyMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309439623",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-19T13:29:34Z",
      "updated_at": "2017-06-19T13:29:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "In verification I use Bos-Coster to do the multi-exp which is very fast (consistently about 830 iterations for ten random scalar/point pairs, an iteration being a point-add and a scalar-subtract). Interestingly this does not require any pre-computation. However if you use the aggregate verifier with only one or two points the performance is relatively bad, in the one-point case it just breaks down to using a binary addition ladder. Fixing this would require I change the API to require a verify-enabled secp context, which sucks to require for just a special case. Thoughts?",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309439623",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "reviewed",
      "id": 44845392,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDUzOTI=",
      "url": null,
      "actor": null,
      "commit_id": "e15404c86a145fb3ba132b36da5eedc6abb1c56c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-44845392",
      "submitted_at": "2017-06-19T13:31:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "commented",
      "id": 309451575,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQ1MTU3NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309451575",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-19T14:11:01Z",
      "updated_at": "2017-06-19T14:11:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Should state-machine violations (e.g. trying to create two partial signatures with same key/nonce) be `ARG_CHECK` errors or just return failure?",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309451575",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1129330184,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTEyOTMzMDE4NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1129330184",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-19T15:26:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1129851210,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTEyOTg1MTIxMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1129851210",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-19T20:31:41Z"
    },
    {
      "event": "commented",
      "id": 309601354,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTYwMTM1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309601354",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-19T23:28:16Z",
      "updated_at": "2017-06-19T23:28:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> verify-enabled secp context\r\n\r\nI expected it to need this for the edge case.\r\n\r\nWhat I haven't benchmarked out but think might be interesting:  switching to a boring multiexp once enough points have dropped out that bos-coster is not making much progress anymore. (though this wouldn't be the existing very code, it would be optimized for smaller number (e.g. no endomorphism, smaller precomp, perhaps \"joint-point\" precomp).\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309601354",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 309601811,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTYwMTgxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309601811",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-19T23:31:17Z",
      "updated_at": "2017-06-19T23:31:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "in your heap, I believe you will get better performance if the heap itself is on indexes to entries which themselves don't move around... your comparison code would know how to dereference the indexes.  Because you support only a max of 32 right now char would be fine. ",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309601811",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 309718381,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTcxODM4MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309718381",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-20T10:57:27Z",
      "updated_at": "2017-06-20T10:59:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Heh, yeah, on 30-key signatures using indices in the heap gives a 15%+ improvement on verification speed, which means we now take only 47% as long to verify compared to 30 individual verifications. (These numbers to be taken with salt, given I've only done a few measurements and I'm using my battery-backed laptop with a bunch of other stuff running. But they are pretty consistent.) Before we were at 57%.\r\n\r\nUsing an index-only heap not only gets rid of a bunch of copying, it lets us do swaps with the triple-xor trick (`x ^= y, y ^= x, x ^= y`). Also in `ecmult_multi` I was removing the second-to-max point, changing the point but not the scalar, and putting it back. This is an expensive no-op for a scalar-ordered heap, so I stopped doing that.\r\n\r\nNext I'll try catching scalar 1's and adding their points to a running return value rather than spamming the heap with them, and using the endomorphism, but I may be in the air for the next 10+ hours and unable to report.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309718381",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 309859423,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTg1OTQyMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309859423",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-20T19:14:26Z",
      "updated_at": "2017-06-20T19:14:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "You need a heapify: repeated insert is O(N log N) instead of O(N).\r\n\r\nWhile working on this before I came up with an optimization that halved the number of comparison operations; after googling a bunch I found it had a name, but I don't recall the name or the exact optimization and searching again is failing. :(\r\n\r\nI think (part of) it went like this: when starting pop the first element and set it aside in a separate super-root position effectively outside of the tree.    Then in each iteration, read the super-root and root,  compute the new values.  Swap the root and super-root (since the root will now be the highest value) then rebalance the root.   This saves replaces the rebalance in both the delete+insert with just a single rebalance.\r\n\r\nI keep thinking there was another optimization which came from enforcing the heap property less strongly which was possible because no insertion is needed (only delete and replace, which only sweep the heap in one direction), but I don't recall what that part was. :( \r\n\r\nIt would be useful to know what a profile looks like .. e.g. how much of the time is spent in comparisons-- this would tell how much gain there would be from optimizations like the above or from speedups in the comparison (e.g. storing the number of non-zero words in the scalars, so comparison can compare just those values or if equal start on non-zero words).\r\n\r\nFor your figures above for the 10 point case 12% of your adds will be gej+ge, so it will likely be faster to detect and switch to the special case. (stop me before I make some observation that there is some crazy effective affine trick that can be done by tracing the computation depth of each point, and putting all at the same depth on the same isomorphism)\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309859423",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 309921987,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTkyMTk4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309921987",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-20T23:42:01Z",
      "updated_at": "2017-06-20T23:42:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Very tired. Gained a fair bit by replacing the scalar subtraction with simpler code that doesn't do a modular negation, and another fair bit by hashing less stuff (pre-hashing all the constant stuff). Tried switching to native int math in a couple ways when the scalars got small enough, that had no effect I could observe.\r\n\r\nThe endomorphism helped but not as much as I wanted it to. Had some frustration with `lambda_scalar_split` giving me negative numbers, these result in putting a mix of 256-bit and 128-bit numbers into the Bos-Coster ladder, which poisons it (it gets into an effectively infinite loop repeatedly subtracting a small number from a big one). You have to detect this and negate so that everything is the same bit-size, which slows you down.\r\n\r\nAgreed profiling would be good at this point to see what's actually happening. I'm doubtful at this point that the heap is costing us a lot, but we'll see. Will try the gej+ge thing a shot, that's quick and easy to do.\r\n\r\nSpent some time thinking about effective affine, I didn't get anywhere, but maybe I'm just missing something obvious.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309921987",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 309945289,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTk0NTI4OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309945289",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-21T02:31:30Z",
      "updated_at": "2017-06-21T02:31:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re: on where my arms were waving about effective affine like tricks.     on my desktop, gej+ge is .181us faster than gej+gej,  subtracting of 0.0644us per pubkey for additional fe multiplies, it would only take a batch of 29 points that would later gej+ge to pay for the cost of a feinv to bring them back to affine. \r\n\r\nSo, e.g. as points are changed to no longer be affine they could be removed from the heap, and once half the points are removed (ratio will depend on the tradeoff in the asymptotic behavior of the algorithm), the whole thing batch inverted so everything is back at z=1.  At least that is the general direction my hands were waving, -- to get really interesting it would be useful to get rid of the inverse.\r\n\r\nHm. I thought we already handled the negating for the endo...  but I guess the wnaf code is doing that.. and manages to do it without negating the point directly but instead permuting the wnaf table entries. Cute trick. (obviously negations could be deferred here by sign tracking, but I don't see how to avoid most of them).\r\n\r\nRE: degenerate performance when the magnitudes are too different: When I first pointed out these techniques, sipa remarked: \r\n\r\n9:59 < gmaxwell> Anyone looked at using bos-coster (or other similar algorithims) for batch verification?\r\n20:00 < gmaxwell> it's kind of like extgcd... the way it works is we want to compute  aP1 + bP2 + cP3 ...  we put these scalar,point tuples in a max-heap, and pop off the two largest items (x,y) and set x = (x-y),Px y = y,(Px+Py)  then push them back into the heap (unless x becomes 0, in which case it falls out). This keeps going until at the end you have a single remaining value, which should be small, and you then use  \r\n20:00 < gmaxwell>  a coventional variable time scalar multiply for it.\r\n20:03 < gmaxwell> It would couple well with the endomorphism split, which the existing batch does not. \r\n20:22 < gmaxwell> a little toy implementation in sage, with a batch size of 512, if I split first (meaning a batch of 1024 half sized entries) I end up needing an average of 16097 point adds total. I think this compares pretty favorably what we currently do (which IIRC does ~32 adds per pubkey, plus about 16 or so to build the precomp)\r\n20:28 < gmaxwell> A really gigantic batch of 4096 gets it down to 24 adds per pubkey.\r\n22:53 < gmaxwell> (I was looking for how to compute an efficient addition chain for polysig when I ran into that)\r\n02:03 <@sipa> i guess, when x>2y, you can replace with Px+2Py\r\n02:04 <@sipa> why does ed25519 not use this?\r\n02:04 <@sipa> or does it?\r\n02:04 < gmaxwell> It doesn't. So, there is a ed25519 paper that talks about it.\r\n02:05 <@sipa> it probably only helps with very large batches?\r\n02:07 < gmaxwell> They claim in that paper that its a win at all batch sizes, though I think because of our other optimizations that it kills it probably isn't.   They also have a newer paper that goes into more detail http://cr.yp.to/badbatch.html .. but it looks as close as they have to an implementation is in python.\r\n02:08 < gmaxwell> Paper also mentions an algorithim that should be asymtopically 2x faster, due to Pippenger  -- I got the paper but my patience ran out before I managed to extract the algorithim from it. :) (the bos-coster is super trivial)\r\n02:10 < gmaxwell> The gain is greater with bigger batches (goes up with the log of the batch size).\r\n02:11 < gmaxwell> I think how well it composes with the endomorphism is pretty much required to make it a win for us, but I didn't compare that much. \r\n\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309945289",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1132116284,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEzMjExNjI4NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1132116284",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-21T02:31:31Z"
    },
    {
      "event": "subscribed",
      "id": 1132116285,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMzIxMTYyODU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1132116285",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-21T02:31:31Z"
    },
    {
      "event": "commented",
      "id": 309969257,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTk2OTI1Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/309969257",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-21T05:42:11Z",
      "updated_at": "2017-06-22T16:31:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Next I'll try catching scalar 1's and adding their points to a running return value rather than spamming the heap with them\r\n\r\nYou could generalise this by diverting \"small\" multiples (probably 2-4 bits or so) to an entry in a small-multiples table. Say it's 3 bits, so 7 (non-zero) values. This can be finished off with 3 doubles and 9 adds to get the result in the \"1\" entry, less if there are empty entries.\r\n\r\n@gmaxwell That 'replace' operation was the first thing I noticed missing from Java's PriorityQueue. In that class, the heap replaces a removed head with the last (array) element and sifts down. Then a subsequent add is placed at the end and sifted up (these operations are careful to keep a dense representation in the underlying array). A replace should be able to just remove the head, bubble up the largest children, then put the new entry in the \"hole\" and sift up (not sure Floyd's trick refers to this specifically or any case of sifting new entries up from the end).\r\n\r\nI'm somewhat skeptical that any sort of z->1 \"fix-ups\" mid-algorithm can work out; my sense is the cost is likely higher than the savings, but it obviously depends on the average number of additions you're performing on all the intermediate points. Removing points (or rather scalars) from the heap could hurt though. Assuming there is any advantage to be gained, a periodic stop-and-fix should be enough; maybe keep a counter of how many non-affine points have crept in.\r\n\r\nLooking at n1.P1 + n2.P2 + ..., with n1 >= 2^k.n2. As noted above, https://ed25519.cr.yp.to/ed25519-20110926.pdf mentions using (n1 −2^k.n2).P1 +n2.(2^k.P1 + P2). They don't use it there, because the scalars are all randomised (by 128-bit values), and it virtually never occurs. For a general multi-exp, you couldn't assume anything of course. A few thoughts:\r\n- The above formula dodges the truly worst case, but you can still end up having to (chain-)double the same P more than once.\r\n- If n1 is even, we can first double P1 until it's not (up to k times).\r\n- Maybe decompose n1 as (u.2^k + v) and (conceptually) put (u, 2^k.P1) and (v, P1) into the heap. Downside is post-construction insertions (probably bounded by the maximum scalar bits), but if the small-multiples table is used, k could be limited so that we just slice \"windows\" from the bottom of n1 to shorten it, and add P1 to the appropriate entry, keeping (u, 2^k.P1) at (super-)root.\r\n- Note that the windowing decomposition plus small-multiples table gives a reasonably efficient behaviour when you are left with (or start with!) a single scalar multiple.\r\n\r\nI'd expect the endomorphism to have a large impact for small batches, but the advantage should taper off for larger batches, and memory use is a constant factor higher (<2). I'll try and get a rough \"scale\" from my Java implementation.\r\n\r\n> storing the number of non-zero words in the scalars\r\n\r\nOr just track the \"longest length\" (hey, it's a heap), and do all comparisons to that length.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-309969257",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1132244126,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEzMjI0NDEyNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1132244126",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-21T05:42:11Z"
    },
    {
      "event": "subscribed",
      "id": 1132244127,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMzIyNDQxMjc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1132244127",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-21T05:42:11Z"
    },
    {
      "event": "reviewed",
      "id": 45719575,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTk1NzU=",
      "url": null,
      "actor": null,
      "commit_id": "6c2b341da55a2267623ed92db378f2f5a100ac1e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-45719575",
      "submitted_at": "2017-06-22T13:31:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "commented",
      "id": 310698554,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDY5ODU1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310698554",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-23T15:35:58Z",
      "updated_at": "2017-06-23T16:19:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase now, but added several commits:\r\n\r\n- change heap implementation to work only on indices rather than copying whole scalars and points around\r\n- replace heap insertions/deletions with in-place heapify and update-root\r\n- optimize some scalar operations to avoid interacting with the modulus\r\n- hash all the non-index data separately so that the per-pubkey hash has less data (hash the nonce too so the sigs are no longer forgeable ;) this was going to be a review canary once everyone stopped focusing on perf, but Jonas caught it early)\r\n- endomorphism support\r\n\r\nSome approximate perf numbers on my laptop with 30-signature aggregates:\r\n- just verifying 30 signatures w/o endomorphism: 1960us\r\n- just verifying 30 signatures with endomorphism: 1400us\r\n- first version of this PR: 1150us\r\n- current PR w/o endomorphism: 730us\r\n- current PR with endomorphism: 650us\r\n\r\nThe numbers are much less impressive with small aggregates (in fact for one or two signatures they're significantly worse) and much more impressive for very large aggregates.\r\n\r\nWe do actually need to deal with the big-number-small-number performance issues, there is a real DoS vector in the current code where if the user passes an \"aggregate signature\" with a 16-bit s value, say, the endomorphism-enabled code will spend 112 bits of iterations grinding that `s` off of some 128-bit scalar. It's even worse without the endomorphism.\r\n\r\n**Edit:** callgrind tells me we're spending 87% of our time in `gej_add_var` and 7% of our time in `heap_siftdown`, so it seems like any more gains at this point are to be had by somehow reducing the number of additions we do (or reducing the cost of additions by effective-affine or some other black magic). Comparisons etc are less than 0.1%.\r\n\r\nI don't see any obvious ways forward here, for uniformly random input this algorithm does a very good job of quickly reducing its input sizes and not repeating any work.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310698554",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 310823626,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDgyMzYyNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310823626",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-24T07:59:54Z",
      "updated_at": "2017-06-24T15:22:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "I see (every time) test failures after building (--enable-endomorphism=yes if that matters):\r\n\r\n> test count = 10\r\n> random seed = b26c06e44c9a45c5749433488fadbad7\r\n> ./src/field_5x52_impl.h:50: test condition failed: r == 1\r\n> Abort trap: 6\r\n\r\n> Edit: callgrind tells me we're spending 87% of our time in gej_add_var and 7% of our time in heap_siftdown, so it seems like any more gains at this point are to be had by somehow reducing the number of additions we do (or reducing the cost of additions by effective-affine or some other black magic). Comparisons etc are less than 0.1%.\r\n\r\nActually there are still some gains to be had in the heap implementation. I re-implemented here: https://github.com/peterdettman/secp256k1/commit/aa01f4b87118805a3cfd3ffa92ab1b02c4e981b9 . That's at least 5% faster on `bench_aggsig` numbers for me. It's mostly due to reducing the number of scalar comparisons (branch mis-predictions) I believe, by 1) managing the max element outside of the heap, and 2) using Floyd's trick of \"replacing\" that element to the bottom of the heap when it's reinserted.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310823626",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 310844782,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg0NDc4Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310844782",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-24T15:21:50Z",
      "updated_at": "2017-06-24T15:21:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "For the pathological inputs (big-small problem), just adding a binary ladder step when a single subtraction isn't enough seems to at least avoid disaster: https://github.com/peterdettman/secp256k1/commit/cea5d3a371917592f8a96b30669f9c12bc717066 .",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310844782",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 310854347,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg1NDM0Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310854347",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-24T18:03:10Z",
      "updated_at": "2017-06-24T18:03:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Very cool, my numbers also show your code performing 5% or so faster than mine. I'll maybe clean up your commit (just renaming `MY_` to `secp256k1_` and removing the `#ifdef` is probably sufficient) and cherry-pick it onto my branch. Can also confirm that the hit from doing the binary ladder step is small, if anything.\r\n\r\nWe want to use the existing `ecmult` anyway for 1- or 2-point multiexponentiations so maybe we should replace the binary ladders with that?\r\n\r\nI'm not sure what to make of your test failures, I don't see this on my code or yours, and Travis seems happy with my code at least.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310854347",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 310859576,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg1OTU3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310859576",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-24T19:01:21Z",
      "updated_at": "2017-06-24T19:13:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "I may have reproducedg dettman's crash.  looking into it, as an aside:\r\n\r\n    memset(&sc[0], 0, sizeof(sc[0]));\r\n    secp256k1_ecmult_multi(&r, sc, pt, 20);\r\n\r\nyou only zero the first one, but add 20 of them. If tests are run with ncount 0, some of the entries are uninitilized by earlier code. (looks like this error is common in the new tests, not just at this one point)",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310859576",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "reviewed",
      "id": 46136071,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzYwNzE=",
      "url": null,
      "actor": null,
      "commit_id": "45fad60ab7012c56b94fa24f581d6430173c7743",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-46136071",
      "submitted_at": "2017-06-25T00:30:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "commented",
      "id": 310884373,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg4NDM3Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310884373",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-25T05:53:00Z",
      "updated_at": "2017-06-25T05:54:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "We obviously have to handled the cases where scalars differ by large amounts, to avoid attackers making our validation slow with effort linear in the slowdown-- but it's obvious how to handle that.\r\n\r\nWhile thinking about generally adversarial scalars (stronger threat model than we need for aggregate signatures, perhaps, but it's conservative and we , how could we defend against this pattern?\r\n\r\n     n_points = 32\r\n     randa = random.randrange(2**127,2**128)\r\n     randb = random.randrange(2**127,2**128 - n_points)\r\n     scalars = [randa * (randb + x) for x in range(n_points)]\r\n\r\nThis one doesn't result in gratuitously different magnitudes but it makes the algorithm exceptionally slow to converge.\r\n\r\nShould we just have some sanity maximum for the main bos-coster iteration that detects if it is not converging and bails out to a simple straus' algorithm without precomp? Even for cases where an attacker cannot directly control the scalars except via grinding this might have give us a piece of mind in not having to prove that hard cases are cryptographically hard to reach, since even that attack could only cause a 5 times slowdown or whatever.\r\n\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310884373",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 310889243,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg4OTI0Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310889243",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-25T08:12:00Z",
      "updated_at": "2017-06-25T08:12:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell Take a look at https://github.com/peterdettman/secp256k1/commit/cea5d3a371917592f8a96b30669f9c12bc717066 (again). The handling for the big-small case is perhaps not what you assumed it is. I tried your case in equivalent Java code and it chewed it up (much faster than random cases). If I switch to the big-small handling mentioned in the eddsa paper, then yes, it's much slower. With no special case, it essentially hangs, of course.\r\n\r\nI don't yet see a need for a bail-out routine; if the main loop guarantees a minimum 1-bit shortening of the largest scalar in any given iteration (without linear number of point doublings), then AFAICT the overall worst-case is already not much worse than the average. That commit shows a simple way to achieve the 1-bit guarantee, but it can certainly be improved on if we care to.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310889243",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1137670271,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEzNzY3MDI3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1137670271",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-25T08:12:00Z"
    },
    {
      "event": "subscribed",
      "id": 1137670272,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMzc2NzAyNzI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1137670272",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-25T08:12:00Z"
    },
    {
      "event": "commented",
      "id": 310891400,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg5MTQwMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/310891400",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-25T09:06:09Z",
      "updated_at": "2017-06-25T09:07:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman  I confirm that your \"internal ladder step when the result is still bigger then the next best\" solves my killer test case.\r\n\r\nContrary to my earlier belief the simpler corner case handling ( nX + mY = (n-(2^n)m)X + m((2^n)X + Y) ) is enough to make my 'killer' case not run forever (as you observed), though its still a fair bit slower than random cases.  Your proposal is, as you note, faster than random for that input. \r\n\r\nWith your code I think the algorithm must converge exponentially and I am doubtful I can construct something that won't and I think this can be proven.\r\n\r\n(As an aside, I think switching to the binary ladder step feels a lot like the escape to bisection in dekker's root finding mechanism: https://en.wikipedia.org/wiki/Brent%27s_method#Dekker.27s_method )\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-310891400",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1137680223,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEzNzY4MDIyMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1137680223",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-25T09:06:09Z"
    },
    {
      "event": "subscribed",
      "id": 1137680224,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMzc2ODAyMjQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1137680224",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-25T09:06:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1142980196,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE0Mjk4MDE5Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1142980196",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:14:57Z"
    },
    {
      "event": "commented",
      "id": 311761431,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTc2MTQzMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/311761431",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:22:44Z",
      "updated_at": "2017-06-28T19:25:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased everything and pulled in Peter Dettmann's heap improvements.\r\n\r\nAt Greg's suggestion spent some time reading [Pippenger's Algorithm](https://cr.yp.to/papers/pippenger.pdf) by djb. Unfortunately the described algorithm appears almost certainly to be slower than Bos-Coster for our usecase (one multiexp with many bases vs many multiexps that share bases); to get the benefit of Pippenger we need to use the \"transpose\" of the described algorithm, which seems to require a lot of insight/study to obtain. ...Not to knock djb's writing, he did a phenomenal job translating the original Pippenger paper from a series of lemmas about matrix row counts (seriously) into an algorithm!\r\n\r\nNext steps:\r\n- Add benchmarks for 1- and 2-signature aggregates so we get a picture of small-aggregate performance\r\n- Special case the multiexp when there are only 1 or 2 bases, to use the existing ecmult code\r\n- Write a special sign/verify for the 1-signature case to make Schnorr signature creation easy and obviously possible.\r\n\r\nThen Greg has suggested we do something smarter about memory management than this \"maximum 32 aggregates because we want fixed stack size requirements\". Need more discussion, once we resolve that I think I can take the WIP label off.\r\n\r\n(**Edit** re-push last commit with a signature/timestamp on it)",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-311761431",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1142994864,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE0Mjk5NDg2NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1142994864",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:24:57Z"
    },
    {
      "event": "commented",
      "id": 311762074,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTc2MjA3NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/311762074",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:25:17Z",
      "updated_at": "2017-06-28T19:25:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Would it be worthwhile to separate off the multimul (we can't really call it multiexp, right?) into a separate PR. That is generally useful utility functionality (which at least @bbuenz has asked for before), while the actual signature scheme may warrant more discussion?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-311762074",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1142996324,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE0Mjk5NjMyNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1142996324",
      "actor": {
        "login": "bbuenz",
        "id": 1804397,
        "node_id": "MDQ6VXNlcjE4MDQzOTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1804397?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bbuenz",
        "html_url": "https://github.com/bbuenz",
        "followers_url": "https://api.github.com/users/bbuenz/followers",
        "following_url": "https://api.github.com/users/bbuenz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bbuenz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bbuenz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bbuenz/subscriptions",
        "organizations_url": "https://api.github.com/users/bbuenz/orgs",
        "repos_url": "https://api.github.com/users/bbuenz/repos",
        "events_url": "https://api.github.com/users/bbuenz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bbuenz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:25:57Z"
    },
    {
      "event": "subscribed",
      "id": 1142996325,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNDI5OTYzMjU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1142996325",
      "actor": {
        "login": "bbuenz",
        "id": 1804397,
        "node_id": "MDQ6VXNlcjE4MDQzOTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1804397?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bbuenz",
        "html_url": "https://github.com/bbuenz",
        "followers_url": "https://api.github.com/users/bbuenz/followers",
        "following_url": "https://api.github.com/users/bbuenz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bbuenz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bbuenz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bbuenz/subscriptions",
        "organizations_url": "https://api.github.com/users/bbuenz/orgs",
        "repos_url": "https://api.github.com/users/bbuenz/repos",
        "events_url": "https://api.github.com/users/bbuenz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bbuenz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:25:57Z"
    },
    {
      "event": "commented",
      "id": 311762611,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTc2MjYxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/311762611",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:27:29Z",
      "updated_at": "2017-06-28T19:28:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa I think so, though the aggregate signatures are (a) the only API exposure of the multimul (that feels weird :)) and (b) are also the only benchmark exposure.\r\n\r\nThough I think I might add a ecmult_benchmark anyway since we have so many different versions of that function now..",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-311762611",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1142998616,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE0Mjk5ODYxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1142998616",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:27:29Z"
    },
    {
      "event": "subscribed",
      "id": 1142998617,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNDI5OTg2MTc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1142998617",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T19:27:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1143069063,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE0MzA2OTA2Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143069063",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T20:13:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1143069978,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE0MzA2OTk3OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143069978",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T20:14:12Z"
    },
    {
      "event": "reviewed",
      "id": 46960019,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjAwMTk=",
      "url": null,
      "actor": null,
      "commit_id": "185fab9792b780352471aa3f296165d0f4821a9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-46960019",
      "submitted_at": "2017-06-28T20:35:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "commented",
      "id": 311819563,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTgxOTU2Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/311819563",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T23:25:58Z",
      "updated_at": "2017-06-28T23:25:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa so, this multiexp is not constant time.  I am doubtful that we want to offer a raw multiexp that isn't even constant time-- our public interface isn't intended to be a build your own cryptographic misadventure kit. :) ",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-311819563",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1143316286,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE0MzMxNjI4Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143316286",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T23:25:58Z"
    },
    {
      "event": "subscribed",
      "id": 1143316287,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNDMzMTYyODc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143316287",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-28T23:25:58Z"
    },
    {
      "event": "reviewed",
      "id": 47000412,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMDA0MTI=",
      "url": null,
      "actor": null,
      "commit_id": "30b66d4ebc8901939bbafeedc54d33a13a1df028",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-47000412",
      "submitted_at": "2017-06-29T00:09:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "commented",
      "id": 311827583,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTgyNzU4Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/311827583",
      "actor": {
        "login": "bbuenz",
        "id": 1804397,
        "node_id": "MDQ6VXNlcjE4MDQzOTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1804397?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bbuenz",
        "html_url": "https://github.com/bbuenz",
        "followers_url": "https://api.github.com/users/bbuenz/followers",
        "following_url": "https://api.github.com/users/bbuenz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bbuenz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bbuenz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bbuenz/subscriptions",
        "organizations_url": "https://api.github.com/users/bbuenz/orgs",
        "repos_url": "https://api.github.com/users/bbuenz/repos",
        "events_url": "https://api.github.com/users/bbuenz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bbuenz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-29T00:20:50Z",
      "updated_at": "2017-06-29T00:20:50Z",
      "author_association": "NONE",
      "body": "I would still appreciate multiexp. but don't let that be a determining factor. I guess if I understand @gmaxwell correctly then libsecp256k1 isn't even designed to build new crypto-protocols but it's only supposed to be used for a few specific protocols that it has been tested and optimized for.",
      "user": {
        "login": "bbuenz",
        "id": 1804397,
        "node_id": "MDQ6VXNlcjE4MDQzOTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1804397?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bbuenz",
        "html_url": "https://github.com/bbuenz",
        "followers_url": "https://api.github.com/users/bbuenz/followers",
        "following_url": "https://api.github.com/users/bbuenz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bbuenz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bbuenz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bbuenz/subscriptions",
        "organizations_url": "https://api.github.com/users/bbuenz/orgs",
        "repos_url": "https://api.github.com/users/bbuenz/repos",
        "events_url": "https://api.github.com/users/bbuenz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bbuenz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-311827583",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1143361522,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE0MzM2MTUyMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143361522",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-29T00:20:50Z"
    },
    {
      "event": "subscribed",
      "id": 1143361523,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNDMzNjE1MjM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143361523",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-29T00:20:50Z"
    },
    {
      "event": "reviewed",
      "id": 47014500,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTQ1MDA=",
      "url": null,
      "actor": null,
      "commit_id": "a915fa9fd40a3780122b79e52b23b527f67c41d7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-47014500",
      "submitted_at": "2017-06-29T02:29:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "mentioned",
      "id": 1143775933,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE0Mzc3NTkzMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143775933",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-29T08:39:09Z"
    },
    {
      "event": "subscribed",
      "id": 1143775934,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNDM3NzU5MzQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1143775934",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-29T08:39:09Z"
    },
    {
      "event": "reviewed",
      "id": 48496565,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTY1NjU=",
      "url": null,
      "actor": null,
      "commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-48496565",
      "submitted_at": "2017-07-07T00:20:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "reviewed",
      "id": 48534912,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzQ5MTI=",
      "url": null,
      "actor": null,
      "commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-48534912",
      "submitted_at": "2017-07-07T07:20:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "reviewed",
      "id": 48535087,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzUwODc=",
      "url": null,
      "actor": null,
      "commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-48535087",
      "submitted_at": "2017-07-07T07:22:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "reviewed",
      "id": 49087220,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODcyMjA=",
      "url": null,
      "actor": null,
      "commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-49087220",
      "submitted_at": "2017-07-11T03:54:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "reviewed",
      "id": 49088645,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODg2NDU=",
      "url": null,
      "actor": null,
      "commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-49088645",
      "submitted_at": "2017-07-11T04:12:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "reviewed",
      "id": 49088873,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODg4NzM=",
      "url": null,
      "actor": null,
      "commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-49088873",
      "submitted_at": "2017-07-11T04:16:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1162839806,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE2MjgzOTgwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1162839806",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-13T15:49:08Z"
    },
    {
      "event": "commented",
      "id": 315119556,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTExOTU1Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/315119556",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-13T15:49:10Z",
      "updated_at": "2017-07-13T16:02:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "* fix `secp256k1_aggsig_generate_nonce` doc return value\r\n* Add check for `set_xquad` failing in aggsig/main_impl.h\r\n* Change verification equation to `R == sG - sum e_ix_i`\r\n* Remove infinity check before doing the small multiply at the end of `ecmult_multi`\r\n* Add VERIFY_CHECK to `scalar_numsub` checking that there is no final carry/underflow\r\n* Fix compilation warnings when endomorphism is disabled\r\n\r\nWill add \"dispatch function\" for `ecmult_multi` that encapsulates the endomorphism code, does a copy (so that the ecmult API does not require mutable inputs), and is designed so Pieter can hook in the Strauss code there for small input sizes. Will also take the `G` scalar separately, and when calling my code it will just put it in the pile with the rest of them. But Pieter says Strauss gets a nontrivial advantage from having it be separate, so make that easy.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-315119556",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 315147795,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTE0Nzc5NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/315147795",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-13T17:32:33Z",
      "updated_at": "2017-07-13T17:32:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added a WIP/draft version of a dispatch function, @sipa what do you think about this API? I need to decide what to do about memory allocation, it's annoying that aggsig needs an arbitrary-sized scratch space and then `ecmult_multi` needs the same amount of scratch space just to make an unnecessary copy of the first data.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-315147795",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1163012902,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE2MzAxMjkwMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1163012902",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-13T17:32:33Z"
    },
    {
      "event": "subscribed",
      "id": 1163012903,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNjMwMTI5MDM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1163012903",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-13T17:32:33Z"
    },
    {
      "event": "commented",
      "id": 315409590,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQwOTU5MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/315409590",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-14T16:52:22Z",
      "updated_at": "2017-07-14T16:52:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Replaced API with a callback-based one. Now all the looping logic is removed from `aggsig_verify` into the dispatch function, which gets rid of a bunch of duplicated logic and also means that all of the variable-size-allocation stuff can stay within `ecmult_multi_impl.h`.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-315409590",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "reviewed",
      "id": 50799949,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTk5NDk=",
      "url": null,
      "actor": null,
      "commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-50799949",
      "submitted_at": "2017-07-19T04:24:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "commented",
      "id": 316398247,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjM5ODI0Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/316398247",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-19T14:04:55Z",
      "updated_at": "2017-07-19T14:04:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa re using manual carry bits for addition, my belief as to why subtraction is slower using `int128_t` is that there are 63 bits of sign-extended 1's that get repeatedly added when you do things the `scalar_add` way. So the `int128_t` code does way more work than my code. The same wouldn't be true for `scalar_add`.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-316398247",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1170301102,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE3MDMwMTEwMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1170301102",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-19T14:04:55Z"
    },
    {
      "event": "subscribed",
      "id": 1170301104,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNzAzMDExMDQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1170301104",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-19T14:04:55Z"
    },
    {
      "event": "commented",
      "id": 316467475,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjQ2NzQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/316467475",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-19T17:58:26Z",
      "updated_at": "2017-07-19T17:58:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@apoelstra But (a + b) can be rewritten as (a - (~b + 1)). If there is a means to speed up subtraction, it seems that it can be used to speed up addition too.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-316467475",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1170733158,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE3MDczMzE1OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1170733158",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-19T17:58:26Z"
    },
    {
      "event": "subscribed",
      "id": 1170733159,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNzA3MzMxNTk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1170733159",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-19T17:58:26Z"
    },
    {
      "event": "commented",
      "id": 316470409,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjQ3MDQwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/316470409",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-19T18:09:01Z",
      "updated_at": "2017-07-19T18:09:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm saying that my code and the gcc addition code are pretty-much identical for the case `a + b` because in both cases you have only one bit of carry to track and no sign extension. I expect that rewriting it as `a - (~b + 1)` (three primitive operations to do one) will be slower than both of these.\r\n\r\nI am not claiming any way to \"speed up subtraction\", only that adding unnecessary sign extensions to my existing code will slow it down.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-316470409",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 316881139,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjg4MTEzOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/316881139",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-21T02:04:06Z",
      "updated_at": "2017-07-21T02:04:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Benchmarks with Strauss (#464) and Bos-Coster (this PR):\r\n\r\n![](http://bitcoin.sipa.be/aggsig.png)\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-316881139",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 318498776,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxODQ5ODc3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/318498776",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-27T22:00:46Z",
      "updated_at": "2017-07-27T22:00:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "add support for using heap-based allocation",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-318498776",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1183839268,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE4MzgzOTI2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1183839268",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-28T16:46:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1200080984,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIwMDA4MDk4NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1200080984",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-10T00:17:28Z"
    },
    {
      "event": "commented",
      "id": 321415878,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTQxNTg3OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/321415878",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-10T00:18:18Z",
      "updated_at": "2017-08-10T00:18:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebase: separate out aggsig stuff from ecmult stuff, move ecmult stuff into `ecmult_impl.h` rather than having its own file, collapse some of the design iterations into single commits.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-321415878",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "reviewed",
      "id": 55691939,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTE5Mzk=",
      "url": null,
      "actor": null,
      "commit_id": "87691f61ba8e48fd9bc636416768a316140c39c5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-55691939",
      "submitted_at": "2017-08-10T23:42:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1201889716,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIwMTg4OTcxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1201889716",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-10T23:46:30Z"
    },
    {
      "event": "reviewed",
      "id": 55694900,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTQ5MDA=",
      "url": null,
      "actor": null,
      "commit_id": "90e1980ffc422dcadb34349dc38b97de01b75d9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-55694900",
      "submitted_at": "2017-08-11T00:02:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1201906992,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIwMTkwNjk5Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1201906992",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-11T00:07:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1202841876,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIwMjg0MTg3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1202841876",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-11T15:51:06Z"
    },
    {
      "event": "commented",
      "id": 321850014,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg1MDAxNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/321850014",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-11T15:51:58Z",
      "updated_at": "2017-08-11T15:51:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Address Pieter's nits.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-321850014",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 322108038,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjEwODAzOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/322108038",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-14T06:14:39Z",
      "updated_at": "2017-08-14T06:14:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@apoelstra This will make it easier to integrate Strauss: https://github.com/sipa/secp256k1/commit/67aa632ded9089565cde9ebe311fcbcf5072c794",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-322108038",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1204237536,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIwNDIzNzUzNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1204237536",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-14T06:14:39Z"
    },
    {
      "event": "subscribed",
      "id": 1204237537,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMDQyMzc1Mzc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1204237537",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-14T06:14:39Z"
    },
    {
      "event": "commented",
      "id": 322314048,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjMxNDA0OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/322314048",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-14T21:24:32Z",
      "updated_at": "2017-08-14T21:24:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "@apoelstra New version: https://github.com/sipa/secp256k1/commit/d22829ee4b47f5d0d3ffb02ca586c7e8f99a5328",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-322314048",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1205558203,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIwNTU1ODIwMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1205558203",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-14T21:24:32Z"
    },
    {
      "event": "subscribed",
      "id": 1205558204,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMDU1NTgyMDQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1205558204",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-14T21:24:32Z"
    },
    {
      "event": "commented",
      "id": 322314715,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjMxNDcxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/322314715",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-14T21:27:31Z",
      "updated_at": "2017-08-14T21:27:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "ok, cherry-picked",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-322314715",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 322348016,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjM0ODAxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/322348016",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-15T00:48:55Z",
      "updated_at": "2017-08-15T00:48:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "@apoelstra This adds Strauss-wNAF secp256k1_ecmult_multi (used for n < 200, much scientific, wow). https://github.com/sipa/secp256k1/commit/23602bda1bf4d4a697a262dc9077d4835e3c4142",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-322348016",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1205759638,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIwNTc1OTYzOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1205759638",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-15T00:48:55Z"
    },
    {
      "event": "subscribed",
      "id": 1205759639,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMDU3NTk2Mzk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1205759639",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-15T00:48:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1205764015,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIwNTc2NDAxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1205764015",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-15T00:55:11Z"
    },
    {
      "event": "commented",
      "id": 322348896,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjM0ODg5Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/322348896",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-15T00:55:40Z",
      "updated_at": "2017-08-15T00:55:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Cherry-picked and rebased. Need to refactor to be sure we're not putting multiple types in the scratch space (alignment) and to have better dispatch logic.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-322348896",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 322911339,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjkxMTMzOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/322911339",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-16T21:58:08Z",
      "updated_at": "2017-08-16T21:58:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "@apoelstra Squashed, restructured, and with Bos-Coster removed: https://github.com/sipa/secp256k1/commits/20170816_aggsig",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-322911339",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1209149809,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIwOTE0OTgwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1209149809",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-16T21:58:08Z"
    },
    {
      "event": "subscribed",
      "id": 1209149810,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMDkxNDk4MTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1209149810",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-16T21:58:08Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-17T01:27:59Z",
      "updated_at": "2017-08-17T01:27:59Z",
      "source": {
        "issue": {
          "id": 250804858,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTM2MTU1Nzk3",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/473",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/473/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/473/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/473/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/473",
          "number": 473,
          "state": "closed",
          "state_reason": null,
          "title": "Multi-point multiplication support",
          "body": "This uses the algorithm (Strauss with wNAF) from #464 to implement multi-multiplication, together with the API, tests, and scratch space support from #461.\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/473",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/473",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/473.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/473.patch"
          },
          "closed_at": "2017-11-13T17:45:36Z",
          "created_at": "2017-08-17T01:27:59Z",
          "updated_at": "2017-11-13T17:45:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 323159190,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzE1OTE5MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/323159190",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-17T18:41:38Z",
      "updated_at": "2017-08-17T18:41:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Superceded by #473 ",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-323159190",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "closed",
      "id": 1210685754,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTIxMDY4NTc1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1210685754",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-17T18:41:39Z"
    },
    {
      "event": "commented",
      "id": 323159680,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzE1OTY4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/323159680",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-17T18:43:34Z",
      "updated_at": "2017-08-17T18:43:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "@apoelstra No it isn't, #473 doesn't include aggsig, only ecmult_multi.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-323159680",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "mentioned",
      "id": 1210688689,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTIxMDY4ODY4OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1210688689",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-17T18:43:34Z"
    },
    {
      "event": "subscribed",
      "id": 1210688690,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEyMTA2ODg2OTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1210688690",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-17T18:43:34Z"
    },
    {
      "event": "reopened",
      "id": 1210689342,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQxMjEwNjg5MzQy",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1210689342",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-17T18:43:59Z"
    },
    {
      "event": "reviewed",
      "id": 60302526,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzMDI1MjY=",
      "url": null,
      "actor": null,
      "commit_id": "8afc544be724e08f55a96ebd65361e3fb263d1b5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#pullrequestreview-60302526",
      "submitted_at": "2017-09-03T18:53:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1237350442,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIzNzM1MDQ0Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1237350442",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-06T17:58:10Z"
    },
    {
      "event": "commented",
      "id": 327565324,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzU2NTMyNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/327565324",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-06T18:01:18Z",
      "updated_at": "2017-09-06T18:01:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated to compare x-coordinate only of R (and checking that its y-coord is a quadratic residue).",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-327565324",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1237355856,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIzNzM1NTg1Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1237355856",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-06T18:01:23Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ignopeverell",
        "id": 22927561,
        "node_id": "MDQ6VXNlcjIyOTI3NTYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22927561?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ignopeverell",
        "html_url": "https://github.com/ignopeverell",
        "followers_url": "https://api.github.com/users/ignopeverell/followers",
        "following_url": "https://api.github.com/users/ignopeverell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ignopeverell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ignopeverell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ignopeverell/subscriptions",
        "organizations_url": "https://api.github.com/users/ignopeverell/orgs",
        "repos_url": "https://api.github.com/users/ignopeverell/repos",
        "events_url": "https://api.github.com/users/ignopeverell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ignopeverell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-06T19:15:34Z",
      "updated_at": "2017-09-06T19:15:34Z",
      "source": {
        "issue": {
          "id": 240016764,
          "node_id": "MDU6SXNzdWUyNDAwMTY3NjQ=",
          "url": "https://api.github.com/repos/mimblewimble/grin/issues/71",
          "repository_url": "https://api.github.com/repos/mimblewimble/grin",
          "labels_url": "https://api.github.com/repos/mimblewimble/grin/issues/71/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/mimblewimble/grin/issues/71/comments",
          "events_url": "https://api.github.com/repos/mimblewimble/grin/issues/71/events",
          "html_url": "https://github.com/mimblewimble/grin/issues/71",
          "number": 71,
          "state": "open",
          "state_reason": null,
          "title": "Study support of vaults in grin/mimblewimble",
          "body": "Grin should already support in the near future:\r\n\r\n* multisig using aggregate (formerly Schnorr) signatures ;\r\n* time-locked transactions.\r\n\r\nUsing these primitives, figure out how to implement vaults [1] [2].\r\n\r\n[1] http://hackingdistributed.com/2016/02/26/how-to-implement-secure-bitcoin-vaults/\r\n[2] http://fc16.ifca.ai/bitcoin/papers/MES16.pdf\r\n",
          "user": {
            "login": "ignopeverell",
            "id": 22927561,
            "node_id": "MDQ6VXNlcjIyOTI3NTYx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22927561?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ignopeverell",
            "html_url": "https://github.com/ignopeverell",
            "followers_url": "https://api.github.com/users/ignopeverell/followers",
            "following_url": "https://api.github.com/users/ignopeverell/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ignopeverell/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ignopeverell/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ignopeverell/subscriptions",
            "organizations_url": "https://api.github.com/users/ignopeverell/orgs",
            "repos_url": "https://api.github.com/users/ignopeverell/repos",
            "events_url": "https://api.github.com/users/ignopeverell/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ignopeverell/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 465821398,
              "node_id": "MDU6TGFiZWw0NjU4MjEzOTg=",
              "url": "https://api.github.com/repos/mimblewimble/grin/labels/help%20wanted",
              "name": "help wanted",
              "description": "",
              "color": "00449e",
              "default": true
            },
            {
              "id": 715963323,
              "node_id": "MDU6TGFiZWw3MTU5NjMzMjM=",
              "url": "https://api.github.com/repos/mimblewimble/grin/labels/research",
              "name": "research",
              "description": "",
              "color": "5e2ca5",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "created_at": "2017-07-02T15:26:36Z",
          "updated_at": "2018-06-29T01:22:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 1374978121,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEzNzQ5NzgxMjE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1374978121",
      "actor": {
        "login": "yeastplume",
        "id": 7074070,
        "node_id": "MDQ6VXNlcjcwNzQwNzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7074070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yeastplume",
        "html_url": "https://github.com/yeastplume",
        "followers_url": "https://api.github.com/users/yeastplume/followers",
        "following_url": "https://api.github.com/users/yeastplume/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yeastplume/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yeastplume/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yeastplume/subscriptions",
        "organizations_url": "https://api.github.com/users/yeastplume/orgs",
        "repos_url": "https://api.github.com/users/yeastplume/repos",
        "events_url": "https://api.github.com/users/yeastplume/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yeastplume/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9eb90c9fd925a070fd9c865b1b26df082831e9aa",
      "commit_url": "https://api.github.com/repos/mimblewimble/secp256k1-zkp/commits/9eb90c9fd925a070fd9c865b1b26df082831e9aa",
      "created_at": "2017-12-06T15:14:24Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "yeastplume",
        "id": 7074070,
        "node_id": "MDQ6VXNlcjcwNzQwNzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7074070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yeastplume",
        "html_url": "https://github.com/yeastplume",
        "followers_url": "https://api.github.com/users/yeastplume/followers",
        "following_url": "https://api.github.com/users/yeastplume/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yeastplume/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yeastplume/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yeastplume/subscriptions",
        "organizations_url": "https://api.github.com/users/yeastplume/orgs",
        "repos_url": "https://api.github.com/users/yeastplume/repos",
        "events_url": "https://api.github.com/users/yeastplume/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yeastplume/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-06T15:22:16Z",
      "updated_at": "2017-12-06T15:22:16Z",
      "source": {
        "issue": {
          "id": 279792152,
          "node_id": "MDU6SXNzdWUyNzk3OTIxNTI=",
          "url": "https://api.github.com/repos/mimblewimble/secp256k1-zkp/issues/9",
          "repository_url": "https://api.github.com/repos/mimblewimble/secp256k1-zkp",
          "labels_url": "https://api.github.com/repos/mimblewimble/secp256k1-zkp/issues/9/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/mimblewimble/secp256k1-zkp/issues/9/comments",
          "events_url": "https://api.github.com/repos/mimblewimble/secp256k1-zkp/issues/9/events",
          "html_url": "https://github.com/mimblewimble/secp256k1-zkp/issues/9",
          "number": 9,
          "state": "closed",
          "state_reason": "completed",
          "title": "Aggsig work to date - merging",
          "body": "Just putting an issue here to keep track of this.. the /aggsig branch has been created, which is:\r\n\r\nmaster\r\n+https://github.com/bitcoin-core/secp256k1/pull/486\r\n+https://github.com/bitcoin-core/secp256k1/pull/461\r\n\r\n+Manual tweaks and fixes to get compile/test working, particularly updates to ec_mult functionality as per 486\r\n\r\nAll tests seem to run without issue. \r\n\r\nPlease don't make any changes to master without checking with me first, as it would be nice to keep this branch mergeable ... this will have the potential to get very messy if we don't manage changes here properly.",
          "user": {
            "login": "yeastplume",
            "id": 7074070,
            "node_id": "MDQ6VXNlcjcwNzQwNzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7074070?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yeastplume",
            "html_url": "https://github.com/yeastplume",
            "followers_url": "https://api.github.com/users/yeastplume/followers",
            "following_url": "https://api.github.com/users/yeastplume/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/yeastplume/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/yeastplume/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/yeastplume/subscriptions",
            "organizations_url": "https://api.github.com/users/yeastplume/orgs",
            "repos_url": "https://api.github.com/users/yeastplume/repos",
            "events_url": "https://api.github.com/users/yeastplume/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/yeastplume/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 0,
          "closed_at": "2018-03-14T09:22:19Z",
          "created_at": "2017-12-06T15:22:16Z",
          "updated_at": "2018-03-14T09:22:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NWZhNzU4OWY3NWFmYWNmY2Q4NWY5YzY0N2E2OWJiZDZiY2ZlMGYxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "tree": {
        "sha": "3c1d7ee48824c8e9f1141323e34cf49e4334e5a0",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3c1d7ee48824c8e9f1141323e34cf49e4334e5a0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c77fc08597960d662eb0df9e4c670c31bdeb227e",
          "sha": "c77fc08597960d662eb0df9e4c670c31bdeb227e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c77fc08597960d662eb0df9e4c670c31bdeb227e"
        }
      ],
      "message": "aggregate signatures: add module, implement single-user signing",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2017-12-10T21:11:31Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2017-08-09T23:48:07Z"
      },
      "sha": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1380507797,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4MDUwNzc5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1380507797",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-10T21:12:00Z"
    },
    {
      "event": "commented",
      "id": 350581968,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDU4MTk2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/350581968",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-10T21:12:37Z",
      "updated_at": "2017-12-10T21:12:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on latest master. One mild surprise is that I can't call `ecmult_multi_var` with a scratch space smaller than 4.5Kb, so I had to update the aggsig tests to use a bigger on.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-350581968",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 350764280,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDc2NDI4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/350764280",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-11T15:49:28Z",
      "updated_at": "2017-12-11T15:49:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> One mild surprise is that I can't call ecmult_multi_var with a scratch space smaller than 4.5Kb\r\n\r\nYes, if I recall correctly aggsig previously always used bos-coster and now strauss_wnaf which uses a fair amount of scratch space due to the multiplication table:\r\n* without endo `96+n_points*3656` bytes.\r\n* with endo `96+n_points*4568` bytes.\r\n",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-350764280",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 360863435,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDg2MzQzNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/360863435",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-26T18:21:03Z",
      "updated_at": "2018-01-26T18:21:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have a few minor suggestions in my branch https://github.com/jonasnick/secp256k1/commits/aggsig-module\r\n```\r\n2e75a09 Stress that seed in aggsig_context_create must be secret\r\nffeba25 Allow choosing number of signatures in bench_aggsig\r\n20ad03b Remove n_sigs argument from aggsig API\r\n1cada78 Add aggsig state machine tests\r\n```\r\n\r\n",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-360863435",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "commented",
      "id": 361294706,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTI5NDcwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/361294706",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T16:07:50Z",
      "updated_at": "2018-01-29T16:07:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "It would be helpful if users could compute the optimal scratch space for verification. I suggest https://github.com/jonasnick/secp256k1/commit/e81fc0659466b759d22751d792e48ad29d32b83d",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-361294706",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T19:37:05Z",
      "updated_at": "2018-01-29T19:37:05Z",
      "source": {
        "issue": {
          "id": 292533370,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTY1Nzk3NDUz",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/505",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/505/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/505/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/505/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505",
          "number": 505,
          "state": "closed",
          "state_reason": null,
          "title": "WIP: Add aggsig example code",
          "body": "Based on https://github.com/bitcoin-core/secp256k1/pull/461 + some things I suggested for that PR.\r\n\r\nI think it'd be a good idea to have some example code to show how to use the aggsig module. For example, the seed of the nonce RNG could be misused and it's not all that intuitive how a scratch space is used. This PR addresses this by adding an `aggsig.c` file  into an `examples/` directory and building it as `example_aggsig` (it's also run as part of `make check`).\r\n\r\nSince https://github.com/bitcoin-core/secp256k1/pull/461 does not allow for multi party signing at the moment, `aggsig.c` demonstrates single user signing and verification for now.",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/505.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/505.patch"
          },
          "closed_at": "2019-07-30T15:13:57Z",
          "created_at": "2018-01-29T19:37:05Z",
          "updated_at": "2019-07-30T15:13:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "anargle",
        "id": 37686997,
        "node_id": "MDQ6VXNlcjM3Njg2OTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37686997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/anargle",
        "html_url": "https://github.com/anargle",
        "followers_url": "https://api.github.com/users/anargle/followers",
        "following_url": "https://api.github.com/users/anargle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/anargle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/anargle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/anargle/subscriptions",
        "organizations_url": "https://api.github.com/users/anargle/orgs",
        "repos_url": "https://api.github.com/users/anargle/repos",
        "events_url": "https://api.github.com/users/anargle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/anargle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-29T16:42:48Z",
      "updated_at": "2018-05-29T16:42:48Z",
      "source": {
        "issue": {
          "id": 326711988,
          "node_id": "MDU6SXNzdWUzMjY3MTE5ODg=",
          "url": "https://api.github.com/repos/mimblewimble/grin/issues/1093",
          "repository_url": "https://api.github.com/repos/mimblewimble/grin",
          "labels_url": "https://api.github.com/repos/mimblewimble/grin/issues/1093/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/mimblewimble/grin/issues/1093/comments",
          "events_url": "https://api.github.com/repos/mimblewimble/grin/issues/1093/events",
          "html_url": "https://github.com/mimblewimble/grin/issues/1093",
          "number": 1093,
          "state": "closed",
          "state_reason": "completed",
          "title": "Kernel half-aggregation",
          "body": "As described in a bitcoin-dev [post](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014272.html) by adiabat with @apoelstra's important [fix](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014308.html) for Wagner's generalized birthday attack, Schnorr signatures such as Grin's transaction kernels can be non-interactively partially aggregated. This would reduce the long-term storage requirements of kernels.\r\n\r\nGiven a bunch of `(R, s)` signature pairs, the `R` values are needed for hashing, but the `s` values can be summed into one aggregate value. Each individual signature needs to be scaled by a hash committing to the full set of all `R` values to avoid Wagner's attack. Unfortunately, this seems to imply that it is not possible to re-aggregate kernels that have been already aggregated. Therefore, the aggregation would have to happen once at block creation time. ",
          "user": {
            "login": "anargle",
            "id": 37686997,
            "node_id": "MDQ6VXNlcjM3Njg2OTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/37686997?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/anargle",
            "html_url": "https://github.com/anargle",
            "followers_url": "https://api.github.com/users/anargle/followers",
            "following_url": "https://api.github.com/users/anargle/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/anargle/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/anargle/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/anargle/subscriptions",
            "organizations_url": "https://api.github.com/users/anargle/orgs",
            "repos_url": "https://api.github.com/users/anargle/repos",
            "events_url": "https://api.github.com/users/anargle/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/anargle/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 465821397,
              "node_id": "MDU6TGFiZWw0NjU4MjEzOTc=",
              "url": "https://api.github.com/repos/mimblewimble/grin/labels/enhancement",
              "name": "enhancement",
              "description": "",
              "color": "9eebcf",
              "default": true
            },
            {
              "id": 465821398,
              "node_id": "MDU6TGFiZWw0NjU4MjEzOTg=",
              "url": "https://api.github.com/repos/mimblewimble/grin/labels/help%20wanted",
              "name": "help wanted",
              "description": "",
              "color": "00449e",
              "default": true
            },
            {
              "id": 873585173,
              "node_id": "MDU6TGFiZWw4NzM1ODUxNzM=",
              "url": "https://api.github.com/repos/mimblewimble/grin/labels/consensus%20breaking",
              "name": "consensus breaking",
              "description": "Use for issues or PRs that will break consensus and force a hard fork",
              "color": "ffde37",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "milestone": {
            "url": "https://api.github.com/repos/mimblewimble/grin/milestones/5",
            "html_url": "https://github.com/mimblewimble/grin/milestone/5",
            "labels_url": "https://api.github.com/repos/mimblewimble/grin/milestones/5/labels",
            "id": 3219067,
            "node_id": "MDk6TWlsZXN0b25lMzIxOTA2Nw==",
            "number": 5,
            "state": "closed",
            "title": "Beta / testnet3",
            "description": "Before mainnet but more stable than testnet2.",
            "creator": {
              "login": "ignopeverell",
              "id": 22927561,
              "node_id": "MDQ6VXNlcjIyOTI3NTYx",
              "avatar_url": "https://avatars.githubusercontent.com/u/22927561?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ignopeverell",
              "html_url": "https://github.com/ignopeverell",
              "followers_url": "https://api.github.com/users/ignopeverell/followers",
              "following_url": "https://api.github.com/users/ignopeverell/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/ignopeverell/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/ignopeverell/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/ignopeverell/subscriptions",
              "organizations_url": "https://api.github.com/users/ignopeverell/orgs",
              "repos_url": "https://api.github.com/users/ignopeverell/repos",
              "events_url": "https://api.github.com/users/ignopeverell/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/ignopeverell/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 45,
            "created_at": "2018-03-26T18:16:07Z",
            "updated_at": "2018-08-24T20:39:10Z",
            "closed_at": "2018-08-24T20:39:10Z"
          },
          "locked": false,
          "comments": 9,
          "closed_at": "2018-05-30T20:25:01Z",
          "created_at": "2018-05-26T05:31:58Z",
          "updated_at": "2018-05-30T20:27:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1078854433,
      "node_id": "IC_kwDOAP4Jqs5ATgMh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1078854433",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T10:02:30Z",
      "updated_at": "2022-03-25T10:02:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm closing this because I believe it is obsolete given the recent research that led to a better understanding of multi-sigs and aggregate sigs. We can still take it as inspiration for future implementations of aggregate sigs.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#issuecomment-1078854433",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/461"
    },
    {
      "event": "closed",
      "id": 6306080567,
      "node_id": "CE_lADOAP4Jqs4OHqOXzwAAAAF33yc3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6306080567",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T10:02:31Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/122706766",
      "pull_request_review_id": 44845392,
      "id": 122706766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjcwNjc2Ng==",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+/* Heap operations: parent(i) = i/2; left_child(i) = 2*i; right_child(i) = 2*i + 1 */\n+static void secp256k1_heap_insert(secp256k1_scalar *sc, secp256k1_gej *pt, size_t *n, const secp256k1_scalar *ins_sc, const secp256k1_gej *ins_pt) {\n+    size_t ins = *n + 1;\n+    while (ins > 1 && secp256k1_scalar_cmp_var(&sc[ins / 2 - 1], ins_sc) < 0) {\n+        sc[ins - 1] = sc[ins / 2 - 1];\n+        pt[ins - 1] = pt[ins / 2 - 1];\n+        ins /= 2;\n+    }\n+    sc[ins - 1] = *ins_sc;\n+    pt[ins - 1] = *ins_pt;\n+    *n += 1;\n+}\n+\n+#define SWAP(i, j) do{\\\n+    secp256k1_scalar tmps;\\\n+    secp256k1_gej tmpj;\\\n+    tmps = sc[i];\\\n+    tmpj = pt[i];\\\n+    sc[i] = sc[j];\\\n+    pt[i] = pt[j];\\\n+    sc[j] = tmps;\\\n+    pt[j] = tmpj;\\\n+} while(0)\n+static void secp256k1_heap_remove(secp256k1_scalar *sc, secp256k1_gej *pt, size_t *n, secp256k1_scalar *out_sc, secp256k1_gej *out_pt) {\n+    size_t rem = 1;\n+    VERIFY_CHECK(*n > 0);\n+    /* swap-delete the root */\n+    *out_sc = sc[0];\n+    *out_pt = pt[0];\n+    sc[0] = sc[*n - 1];\n+    pt[0] = pt[*n - 1];\n+    /* sift the new root into the correct place */\n+    for (;;) {\n+        /* if parent < lchild... */\n+        if (2 * rem - 1 < *n && secp256k1_scalar_cmp_var(&sc[rem - 1], &sc[2 * rem - 1]) < 0) {\n+            /* ...and if lchild < rchild, then parent swap with rchild */\n+            if (2 * rem < *n && secp256k1_scalar_cmp_var(&sc[2 * rem - 1], &sc[2 * rem]) < 0) {\n+                SWAP(rem - 1, 2 * rem);\n+                rem = 2 * rem + 1;\n+            /* ...and if lchild >= rchild, then parent swap with lchild */\n+            } else {\n+                SWAP(rem - 1, 2 * rem - 1);\n+                rem = 2 * rem;\n+            }\n+        /* if parent >= lchild... */\n+        } else {\n+            /* ...and if parent < rchild, then parent swap with rchild */\n+            if (2 * rem < *n && secp256k1_scalar_cmp_var(&sc[rem - 1], &sc[2 * rem]) < 0) {\n+                SWAP(rem - 1, 2 * rem);\n+                rem = 2 * rem + 1;\n+            /* ...and if parent >= rchild, then we're done */\n+            } else {\n+                break;\n+            }\n+        }\n+    }\n+    *n -= 1;\n+}\n+#undef SWAP\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi(secp256k1_gej *r, const secp256k1_scalar *sc, const secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar heap_sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej heap_pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    size_t heap_n = 0;\n+    size_t iter_count = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    if (n == 0) {\n+        secp256k1_gej_set_infinity(r);\n+        return;\n+    }\n+\n+    while (heap_n < n) {\n+        secp256k1_heap_insert(heap_sc, heap_pt, &heap_n, &sc[heap_n], &pt[heap_n]);\n+    }\n+\n+    while (heap_n > 1) {\n+        secp256k1_scalar max_s;\n+        secp256k1_scalar max_s1;\n+        secp256k1_gej max_p;\n+        secp256k1_gej max_p1;\n+\n+iter_count++;",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 93,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "e15404c86a145fb3ba132b36da5eedc6abb1c56c",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, hanging debug code. Should I expose this somehow or just delete it?",
      "created_at": "2017-06-19T13:31:12Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r122706766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/122706766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123509931",
      "pull_request_review_id": 45719575,
      "id": 123509931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUwOTkzMQ==",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_TESTS_\n+#define _SECP256K1_MODULE_AGGSIG_TESTS_\n+\n+#include \"secp256k1_aggsig.h\"\n+\n+void test_aggsig_api(void) {\n+    /* Setup contexts that just count errors */\n+    secp256k1_context *none = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    secp256k1_context *sign = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    secp256k1_context *vrfy = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *both = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    unsigned char seckeys[5][32];\n+    secp256k1_pubkey pubkeys[5];\n+    secp256k1_aggsig_partial_signature partials[5];\n+    secp256k1_aggsig_context *aggctx;\n+    unsigned char seed[32];\n+    unsigned char sig[64];\n+    unsigned char *msg = seed;  /* shh ;) */\n+    int32_t ecount = 0;\n+    size_t i;\n+\n+    secp256k1_context_set_error_callback(none, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_error_callback(sign, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_error_callback(vrfy, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_error_callback(both, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(none, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(sign, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(vrfy, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(both, counting_illegal_callback_fn, &ecount);\n+\n+    for (i = 0; i < 5; i++) {\n+        secp256k1_scalar tmp_s;\n+        random_scalar_order_test(&tmp_s);\n+        secp256k1_scalar_get_b32(seckeys[i], &tmp_s);\n+        CHECK(secp256k1_ec_pubkey_create(ctx, &pubkeys[i], seckeys[i]) == 1);\n+    }\n+\n+    aggctx = secp256k1_aggsig_context_create(none, pubkeys, 10, seed);",
      "path": "src/modules/aggsig/tests_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "6c2b341da55a2267623ed92db378f2f5a100ac1e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line makes address sanitizer complain loudly because it is an out of bounds read (pubkeys only has 5 elements).",
      "created_at": "2017-06-22T13:31:09Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r123509931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123509931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123887972",
      "pull_request_review_id": 46136071,
      "id": 123887972,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg4Nzk3Mg==",
      "diff_hunk": "@@ -96,6 +96,13 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    r->d[3] = a->d[3] - b->d[3] - (a->d[2] < b->d[2]);\n+    r->d[2] = a->d[2] - b->d[2] - (a->d[1] < b->d[1]);\n+    r->d[1] = a->d[1] - b->d[1] - (a->d[0] < b->d[0]);\n+    r->d[0] = a->d[0] - b->d[0];\n+}\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "45fad60ab7012c56b94fa24f581d6430173c7743",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Carry propagation?",
      "created_at": "2017-06-25T00:30:50Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r123887972",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123887972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123887990",
      "pull_request_review_id": 46136094,
      "id": 123887990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg4Nzk5MA==",
      "diff_hunk": "@@ -96,6 +96,13 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    r->d[3] = a->d[3] - b->d[3] - (a->d[2] < b->d[2]);\n+    r->d[2] = a->d[2] - b->d[2] - (a->d[1] < b->d[1]);\n+    r->d[1] = a->d[1] - b->d[1] - (a->d[0] < b->d[0]);\n+    r->d[0] = a->d[0] - b->d[0];\n+}\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "45fad60ab7012c56b94fa24f581d6430173c7743",
      "in_reply_to_id": 123887972,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`a` is always greater than `b` when this function is called. Each carry is propogated, except that there is no carry to propogate to the difference of the lowest-significance words.",
      "created_at": "2017-06-25T00:33:04Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r123887990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123887990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123888139",
      "pull_request_review_id": 46136210,
      "id": 123888139,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg4ODEzOQ==",
      "diff_hunk": "@@ -96,6 +96,13 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    r->d[3] = a->d[3] - b->d[3] - (a->d[2] < b->d[2]);\n+    r->d[2] = a->d[2] - b->d[2] - (a->d[1] < b->d[1]);\n+    r->d[1] = a->d[1] - b->d[1] - (a->d[0] < b->d[0]);\n+    r->d[0] = a->d[0] - b->d[0];\n+}\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "45fad60ab7012c56b94fa24f581d6430173c7743",
      "in_reply_to_id": 123887972,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider a[0,0,0,1] - b[1,0,0,0], (so a > b), carry at lowest limb not propagated to highest.",
      "created_at": "2017-06-25T00:47:33Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r123888139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/123888139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124334270",
      "pull_request_review_id": 46613766,
      "id": 124334270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDMzNDI3MA==",
      "diff_hunk": "@@ -96,6 +96,13 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    r->d[3] = a->d[3] - b->d[3] - (a->d[2] < b->d[2]);\n+    r->d[2] = a->d[2] - b->d[2] - (a->d[1] < b->d[1]);\n+    r->d[1] = a->d[1] - b->d[1] - (a->d[0] < b->d[0]);\n+    r->d[0] = a->d[0] - b->d[0];\n+}\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "45fad60ab7012c56b94fa24f581d6430173c7743",
      "in_reply_to_id": 123887972,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I understand, thanks. I will fix this and add a testcase.",
      "created_at": "2017-06-27T16:58:29Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124334270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124334270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124649560",
      "pull_request_review_id": 46960019,
      "id": 124649560,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDY0OTU2MA==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+#ifndef _SECP256K1_AGGSIG_\n+# define _SECP256K1_AGGSIG_\n+\n+# include \"secp256k1.h\"\n+\n+# ifdef __cplusplus\n+extern \"C\" {\n+# endif\n+\n+/** Opaque data structure that holds context for the aggregated signature state machine\n+ *\n+ *  During execution of an aggregated signature this context object will contain secret\n+ *  data. It MUST be destroyed by `secp256k1_aggsig_context_destroy` to erase this data\n+ *  before freeing it. Context objects are sized based on the number of signatures to\n+ *  aggregate, and can be reused for multiple signature runs, provided that each run\n+ *  aggregates the same number of signatures.\n+ *\n+ *  Destroying and recreating a context object is essentially just deallocating and\n+ *  reallocating memory, there is no expensive precomputation as there is with the general\n+ *  libsecp256k1 context.\n+ *\n+ *  Once a context object is created with `secp256k1_aggsig_context_create` the workflow\n+ *  is as follows.\n+ *\n+ *      1. For each index controlled by the user, use `secp256k1_aggsig_generate_nonce`\n+ *         to generate a public/private nonce pair for that index. [TODO export the\n+ *         public nonce for other users]\n+ *      2. [TODO import others' public nonces]\n+ *      3. For each index controlled by the user, use `secp256k1_aggsig_partial_sign`\n+ *         to generate a partial signature that should be distributed to all peers.\n+ */\n+typedef struct secp256k1_aggsig_context_struct secp256k1_aggsig_context;\n+\n+/** Opaque data structure that holds a partial signature\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 32 bytes in size, and can be safely copied, moved.\n+ *  and transmitted as raw bytes.\n+ */\n+typedef struct {\n+    unsigned char data[32];\n+} secp256k1_aggsig_partial_signature;\n+\n+\n+/** Create an aggregated signature context object with a given size\n+ *\n+ *  Returns: a newly created context object.\n+ *  Args: ctx:  an existing context object (cannot be NULL)\n+ *  In:     pubkeys: public keys for each signature (cannot be NULL)\n+ *        n_pubkeys: number of public keys/signatures to aggregate\n+ *             seed: a 32-byte seed to use for the nonce-generating RNG (cannot be NULL)\n+ */\n+SECP256K1_API secp256k1_aggsig_context* secp256k1_aggsig_context_create(\n+    const secp256k1_context *ctx,\n+    const secp256k1_pubkey *pubkeys,\n+    size_t n_pubkeys,\n+    const unsigned char *seed\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4) SECP256K1_WARN_UNUSED_RESULT;\n+\n+\n+/** Destroy an aggregated signature context object. If passed NULL, is a no-op.\n+ *\n+ *  Args: aggctx:  an existing context object\n+ */\n+SECP256K1_API void secp256k1_aggsig_context_destroy(\n+    secp256k1_aggsig_context *aggctx\n+);\n+\n+/** Generate a nonce pair for a single signature part in an aggregated signature\n+ *\n+ *  Returns: a newly created context object.",
      "path": "include/secp256k1_aggsig.h",
      "position": null,
      "original_position": 72,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "185fab9792b780352471aa3f296165d0f4821a9b",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "returns nonce, I assume",
      "created_at": "2017-06-28T20:35:44Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124649560",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124649560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124649776",
      "pull_request_review_id": 46960264,
      "id": 124649776,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDY0OTc3Ng==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+#ifndef _SECP256K1_AGGSIG_\n+# define _SECP256K1_AGGSIG_\n+\n+# include \"secp256k1.h\"\n+\n+# ifdef __cplusplus\n+extern \"C\" {\n+# endif\n+\n+/** Opaque data structure that holds context for the aggregated signature state machine\n+ *\n+ *  During execution of an aggregated signature this context object will contain secret\n+ *  data. It MUST be destroyed by `secp256k1_aggsig_context_destroy` to erase this data\n+ *  before freeing it. Context objects are sized based on the number of signatures to\n+ *  aggregate, and can be reused for multiple signature runs, provided that each run\n+ *  aggregates the same number of signatures.\n+ *\n+ *  Destroying and recreating a context object is essentially just deallocating and\n+ *  reallocating memory, there is no expensive precomputation as there is with the general\n+ *  libsecp256k1 context.\n+ *\n+ *  Once a context object is created with `secp256k1_aggsig_context_create` the workflow\n+ *  is as follows.\n+ *\n+ *      1. For each index controlled by the user, use `secp256k1_aggsig_generate_nonce`\n+ *         to generate a public/private nonce pair for that index. [TODO export the\n+ *         public nonce for other users]\n+ *      2. [TODO import others' public nonces]\n+ *      3. For each index controlled by the user, use `secp256k1_aggsig_partial_sign`\n+ *         to generate a partial signature that should be distributed to all peers.\n+ */\n+typedef struct secp256k1_aggsig_context_struct secp256k1_aggsig_context;\n+\n+/** Opaque data structure that holds a partial signature\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 32 bytes in size, and can be safely copied, moved.\n+ *  and transmitted as raw bytes.\n+ */\n+typedef struct {\n+    unsigned char data[32];\n+} secp256k1_aggsig_partial_signature;\n+\n+\n+/** Create an aggregated signature context object with a given size\n+ *\n+ *  Returns: a newly created context object.\n+ *  Args: ctx:  an existing context object (cannot be NULL)\n+ *  In:     pubkeys: public keys for each signature (cannot be NULL)\n+ *        n_pubkeys: number of public keys/signatures to aggregate\n+ *             seed: a 32-byte seed to use for the nonce-generating RNG (cannot be NULL)\n+ */\n+SECP256K1_API secp256k1_aggsig_context* secp256k1_aggsig_context_create(\n+    const secp256k1_context *ctx,\n+    const secp256k1_pubkey *pubkeys,\n+    size_t n_pubkeys,\n+    const unsigned char *seed\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4) SECP256K1_WARN_UNUSED_RESULT;\n+\n+\n+/** Destroy an aggregated signature context object. If passed NULL, is a no-op.\n+ *\n+ *  Args: aggctx:  an existing context object\n+ */\n+SECP256K1_API void secp256k1_aggsig_context_destroy(\n+    secp256k1_aggsig_context *aggctx\n+);\n+\n+/** Generate a nonce pair for a single signature part in an aggregated signature\n+ *\n+ *  Returns: a newly created context object.",
      "path": "include/secp256k1_aggsig.h",
      "position": null,
      "original_position": 72,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "185fab9792b780352471aa3f296165d0f4821a9b",
      "in_reply_to_id": 124649560,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Lol, oops, no, it only returns an error code.",
      "created_at": "2017-06-28T20:36:44Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124649776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124649776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124686585",
      "pull_request_review_id": 47000412,
      "id": 124686585,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDY4NjU4NQ==",
      "diff_hunk": "@@ -1,112 +1,192 @@\n /**********************************************************************\n- * Copyright (c) 2017 Andrew Poelstra                                 *\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n  * Distributed under the MIT software license, see the accompanying   *\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n #include \"ecmult_multi.h\"\n \n-/* Heap operations: parent(i) = i/2; left_child(i) = 2*i; right_child(i) = 2*i + 1 */\n-#define SWAP(i, j) (idx[i] ^= idx[j], idx[j] ^= idx[i], idx[i] ^= idx[j])\n-static void secp256k1_heap_siftdown(const secp256k1_scalar *sc, unsigned char *idx, size_t n, size_t root_idx) {\n-    while (2 * root_idx <= n) {\n-        size_t swap_idx = root_idx;\n-        /* If parent < lchild, swap with lchild */\n-        if (secp256k1_scalar_cmp_var(&sc[idx[root_idx - 1]], &sc[idx[2*root_idx - 1]]) < 0) {\n-            swap_idx = 2*root_idx;\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n         }\n-        /* If parent < rchild, and lchild < rchild, swap with rchild */\n-        if (2 * root_idx + 1 <= n && secp256k1_scalar_cmp_var(&sc[idx[swap_idx - 1]], &sc[idx[2*root_idx]]) < 0) {\n-            swap_idx = 2*root_idx + 1;\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n         }\n-        /* If we're swapping, do it */\n-        if (root_idx != swap_idx) {\n-            SWAP(root_idx - 1, swap_idx - 1);\n-            root_idx = swap_idx;\n-        } else {\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n             break;\n         }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n     }\n+\n+    heap->tree[node] = index;\n }\n-#undef SWAP\n \n-static void secp256k1_heapify(const secp256k1_scalar *sc, unsigned char *idx, size_t n) {\n-    size_t i;\n-    for (i = n / 2; i > 0; i--) {\n-        secp256k1_heap_siftdown(sc, idx, n, i);\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n     }\n+\n+    secp256k1_sift_up(heap, node, index);\n }\n \n-static void secp256k1_heap_remove(const secp256k1_scalar *sc, unsigned char *idx, size_t *n) {\n-    VERIFY_CHECK(*n > 0);\n-    /* overwrite the root */\n-    idx[0] = idx[*n - 1];\n-    *n -= 1;\n-    /* sift the new root into place */\n-    secp256k1_heap_siftdown(sc, idx, *n, 1);\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 128,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "30b66d4ebc8901939bbafeedc54d33a13a1df028",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ";;",
      "created_at": "2017-06-29T00:09:17Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124686585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124686585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124686860",
      "pull_request_review_id": 47000688,
      "id": 124686860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDY4Njg2MA==",
      "diff_hunk": "@@ -1,112 +1,192 @@\n /**********************************************************************\n- * Copyright (c) 2017 Andrew Poelstra                                 *\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n  * Distributed under the MIT software license, see the accompanying   *\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n #include \"ecmult_multi.h\"\n \n-/* Heap operations: parent(i) = i/2; left_child(i) = 2*i; right_child(i) = 2*i + 1 */\n-#define SWAP(i, j) (idx[i] ^= idx[j], idx[j] ^= idx[i], idx[i] ^= idx[j])\n-static void secp256k1_heap_siftdown(const secp256k1_scalar *sc, unsigned char *idx, size_t n, size_t root_idx) {\n-    while (2 * root_idx <= n) {\n-        size_t swap_idx = root_idx;\n-        /* If parent < lchild, swap with lchild */\n-        if (secp256k1_scalar_cmp_var(&sc[idx[root_idx - 1]], &sc[idx[2*root_idx - 1]]) < 0) {\n-            swap_idx = 2*root_idx;\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n         }\n-        /* If parent < rchild, and lchild < rchild, swap with rchild */\n-        if (2 * root_idx + 1 <= n && secp256k1_scalar_cmp_var(&sc[idx[swap_idx - 1]], &sc[idx[2*root_idx]]) < 0) {\n-            swap_idx = 2*root_idx + 1;\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n         }\n-        /* If we're swapping, do it */\n-        if (root_idx != swap_idx) {\n-            SWAP(root_idx - 1, swap_idx - 1);\n-            root_idx = swap_idx;\n-        } else {\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n             break;\n         }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n     }\n+\n+    heap->tree[node] = index;\n }\n-#undef SWAP\n \n-static void secp256k1_heapify(const secp256k1_scalar *sc, unsigned char *idx, size_t n) {\n-    size_t i;\n-    for (i = n / 2; i > 0; i--) {\n-        secp256k1_heap_siftdown(sc, idx, n, i);\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n     }\n+\n+    secp256k1_sift_up(heap, node, index);\n }\n \n-static void secp256k1_heap_remove(const secp256k1_scalar *sc, unsigned char *idx, size_t *n) {\n-    VERIFY_CHECK(*n > 0);\n-    /* overwrite the root */\n-    idx[0] = idx[*n - 1];\n-    *n -= 1;\n-    /* sift the new root into place */\n-    secp256k1_heap_siftdown(sc, idx, *n, 1);\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 128,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "30b66d4ebc8901939bbafeedc54d33a13a1df028",
      "in_reply_to_id": 124686585,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks.\r\n\r\nThis is far from the first time I've done this, I wonder what I'm doing to cause it.",
      "created_at": "2017-06-29T00:11:27Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124686860",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124686860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124700096",
      "pull_request_review_id": 47014500,
      "id": 124700096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDcwMDA5Ng==",
      "diff_hunk": "@@ -159,6 +159,16 @@ static void secp256k1_ecmult_multi(secp256k1_gej *r, secp256k1_scalar *sc, secp2\n              * be small. */\n             secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n             secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_nonzero(&pt[first], &pt[first], NULL);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 13,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "a915fa9fd40a3780122b79e52b23b527f67c41d7",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://www.youtube.com/watch?v=ji1k9hZkN2I\r\n\r\nIncompatible with the gej_is_infinity bailout below.",
      "created_at": "2017-06-29T02:29:33Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124700096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124700096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124704766",
      "pull_request_review_id": 47019354,
      "id": 124704766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDcwNDc2Ng==",
      "diff_hunk": "@@ -159,6 +159,16 @@ static void secp256k1_ecmult_multi(secp256k1_gej *r, secp256k1_scalar *sc, secp2\n              * be small. */\n             secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n             secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_nonzero(&pt[first], &pt[first], NULL);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 13,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "a915fa9fd40a3780122b79e52b23b527f67c41d7",
      "in_reply_to_id": 124700096,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. As an aside, this is another case where we could do with some VERIFY infrastructure at the group level. In this case I envisage tracking a \"possible_infinity\" value in group elements. The current VERIFY_CHECK in _gej_double_nonzero doesn't achieve much.",
      "created_at": "2017-06-29T03:24:46Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124704766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124704766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124706327",
      "pull_request_review_id": 47020947,
      "id": 124706327,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDcwNjMyNw==",
      "diff_hunk": "@@ -159,6 +159,16 @@ static void secp256k1_ecmult_multi(secp256k1_gej *r, secp256k1_scalar *sc, secp2\n              * be small. */\n             secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n             secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_nonzero(&pt[first], &pt[first], NULL);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 13,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "a915fa9fd40a3780122b79e52b23b527f67c41d7",
      "in_reply_to_id": 124700096,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably we should use the exhaustive_test setup to try all 13^4 possible inputs for two keys, and perhaps 13^6 for three maybe ifdefefed off by default. .   ",
      "created_at": "2017-06-29T03:44:34Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124706327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124706327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124742125",
      "pull_request_review_id": 47059027,
      "id": 124742125,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDc0MjEyNQ==",
      "diff_hunk": "@@ -159,6 +159,16 @@ static void secp256k1_ecmult_multi(secp256k1_gej *r, secp256k1_scalar *sc, secp2\n              * be small. */\n             secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n             secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_nonzero(&pt[first], &pt[first], NULL);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 13,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "a915fa9fd40a3780122b79e52b23b527f67c41d7",
      "in_reply_to_id": 124700096,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@apoelstra Just need to replace those two _double_nonzero calls with _double_var instead.",
      "created_at": "2017-06-29T08:39:09Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r124742125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/124742125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/125742570",
      "pull_request_review_id": 48162160,
      "id": 125742570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTc0MjU3MA==",
      "diff_hunk": "@@ -159,6 +159,16 @@ static void secp256k1_ecmult_multi(secp256k1_gej *r, secp256k1_scalar *sc, secp2\n              * be small. */\n             secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n             secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_nonzero(&pt[first], &pt[first], NULL);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 13,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "a915fa9fd40a3780122b79e52b23b527f67c41d7",
      "in_reply_to_id": 124700096,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, added a test that catches it.",
      "created_at": "2017-07-05T20:00:34Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r125742570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/125742570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126046999",
      "pull_request_review_id": 48496565,
      "id": 126046999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA0Njk5OQ==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */\n+    secp256k1_gej_set_infinity(&pk_sum);\n+    secp256k1_scalar_set_b32(&sc[0], sig64, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+    secp256k1_scalar_negate(&sc[0], &sc[0]);\n+    secp256k1_gej_set_ge(&pt[0], &secp256k1_ge_const_g);\n+\n+    if (!secp256k1_fe_set_b32(&fe_tmp, sig64 + 32)) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_int(&sc[1], 1);\n+    secp256k1_ge_set_xquad(&ge_tmp, &fe_tmp);",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 270,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If this returns 0, validation should fail. Unsure why your current code doesn't fail in that scenario (tests_impl.h:118), but if I switch the ecmult code for a Strauss-based version, assertions fail.",
      "created_at": "2017-07-07T00:20:41Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126046999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126046999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126047545",
      "pull_request_review_id": 48497160,
      "id": 126047545,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA0NzU0NQ==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */\n+    secp256k1_gej_set_infinity(&pk_sum);\n+    secp256k1_scalar_set_b32(&sc[0], sig64, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+    secp256k1_scalar_negate(&sc[0], &sc[0]);\n+    secp256k1_gej_set_ge(&pt[0], &secp256k1_ge_const_g);\n+\n+    if (!secp256k1_fe_set_b32(&fe_tmp, sig64 + 32)) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_int(&sc[1], 1);\n+    secp256k1_ge_set_xquad(&ge_tmp, &fe_tmp);",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 270,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126046999,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch. And the test on line 118 is pretty crude.",
      "created_at": "2017-07-07T00:27:14Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126047545",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126047545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126083790",
      "pull_request_review_id": 48534912,
      "id": 126083790,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA4Mzc5MA==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 257,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it is more efficient to write it as R == sG - e_i*P_i. You compute the right hand side and compare it for equality with R. This reduces the number of ecmult points by 1, which is very significant for low counts.",
      "created_at": "2017-07-07T07:20:53Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126083790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126083790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126083973",
      "pull_request_review_id": 48535087,
      "id": 126083973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA4Mzk3Mw==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */\n+    secp256k1_gej_set_infinity(&pk_sum);\n+    secp256k1_scalar_set_b32(&sc[0], sig64, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+    secp256k1_scalar_negate(&sc[0], &sc[0]);\n+    secp256k1_gej_set_ge(&pt[0], &secp256k1_ge_const_g);\n+\n+    if (!secp256k1_fe_set_b32(&fe_tmp, sig64 + 32)) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_int(&sc[1], 1);\n+    secp256k1_ge_set_xquad(&ge_tmp, &fe_tmp);\n+    secp256k1_gej_set_ge(&pt[1], &ge_tmp);\n+    secp256k1_compute_prehash(ctx, prehash, pubkeys, n_pubkeys, &ge_tmp, msg32);\n+\n+    i = 0;\n+#ifdef USE_ENDOMORPHISM\n+    secp256k1_aggsig_endo_split(&sc[0], &sc[2], &pt[0], &pt[2]);",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 276,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be nice if the endomorphism splitting code was in secp256k1_ecmult_multi (like it is in secp256k1_ecmult). That way the aggsig code (and any other multi-mul users) can be free of ifdefs.",
      "created_at": "2017-07-07T07:22:19Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126083973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126083973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126206557",
      "pull_request_review_id": 48674032,
      "id": 126206557,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjIwNjU1Nw==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 257,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126083790,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess this does not matter for Bos-Coster, as the factor 1 effectively turns it into a single addition at the end. It does matter for Strauss-wNAF though, as it avoids building the odd multiples table.",
      "created_at": "2017-07-07T17:52:19Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126206557",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126206557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126280454",
      "pull_request_review_id": 48754955,
      "id": 126280454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjI4MDQ1NA==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 257,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126083790,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well it's also what's required for the X-only ECDSA or the lagrange symbol only for the batchable schnorrs.",
      "created_at": "2017-07-08T11:43:35Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126280454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126280454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126425311",
      "pull_request_review_id": 48907061,
      "id": 126425311,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQyNTMxMQ==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */\n+    secp256k1_gej_set_infinity(&pk_sum);\n+    secp256k1_scalar_set_b32(&sc[0], sig64, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+    secp256k1_scalar_negate(&sc[0], &sc[0]);\n+    secp256k1_gej_set_ge(&pt[0], &secp256k1_ge_const_g);\n+\n+    if (!secp256k1_fe_set_b32(&fe_tmp, sig64 + 32)) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_int(&sc[1], 1);\n+    secp256k1_ge_set_xquad(&ge_tmp, &fe_tmp);\n+    secp256k1_gej_set_ge(&pt[1], &ge_tmp);\n+    secp256k1_compute_prehash(ctx, prehash, pubkeys, n_pubkeys, &ge_tmp, msg32);\n+\n+    i = 0;\n+#ifdef USE_ENDOMORPHISM\n+    secp256k1_aggsig_endo_split(&sc[0], &sc[2], &pt[0], &pt[2]);",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 276,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126083973,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not only that but the precomputation tables for the endo points are much cheaper if you know they are from the endo.",
      "created_at": "2017-07-10T13:46:45Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126425311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126425311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126589735",
      "pull_request_review_id": 49087220,
      "id": 126589735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU4OTczNQ==",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_replace(secp256k1_scalar_heap *heap, unsigned char index) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi(secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    unsigned char first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+        }\n+        while (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) >= 0);\n+\n+        if (secp256k1_scalar_is_zero(&sc[first])) {\n+            first = secp256k1_heap_remove(&heap);\n+        } else {\n+            first = secp256k1_replace(&heap, first);\n+        }\n+    }\n+\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc[first]));\n+\n+    if (secp256k1_gej_is_infinity(&pt[first])) {",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 184,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems to me this case is a) unlikely, b) safe to handle below, c) fast if handled below anyway. So I'd suggest removing this special handling.",
      "created_at": "2017-07-11T03:54:26Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126589735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126589735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126590080",
      "pull_request_review_id": 49087587,
      "id": 126590080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU5MDA4MA==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+SECP256K1_INLINE static void secp256k1_aggsig_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N];\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge ge_tmp;\n+    size_t i;\n+    size_t offset;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* Compute sum -sG + R + e_i*P_i */",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 257,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126083790,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just handle R with an addition (or comparison) outside the multi-exp?",
      "created_at": "2017-07-11T03:59:20Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126590080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126590080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126591036",
      "pull_request_review_id": 49088645,
      "id": 126591036,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU5MTAzNg==",
      "diff_hunk": "@@ -96,6 +96,17 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    int c0 = a->d[0] < b->d[0];\n+    int c1 = a->d[1] < b->d[1] || (c0 && a->d[1] == b->d[1]);\n+    int c2 = a->d[2] < b->d[2] || (c1 && a->d[2] == b->d[2]);\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 8,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How about a 'c3' for a VERIFY_CHECK?",
      "created_at": "2017-07-11T04:12:54Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126591036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126591036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126591235",
      "pull_request_review_id": 49088873,
      "id": 126591235,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU5MTIzNQ==",
      "diff_hunk": "@@ -96,6 +96,17 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    int c0 = a->d[0] < b->d[0];\n+    int c1 = a->d[1] < b->d[1] || (c0 && a->d[1] == b->d[1]);\n+    int c2 = a->d[2] < b->d[2] || (c1 && a->d[2] == b->d[2]);\n+\n+    r->d[3] = a->d[3] - b->d[3] - c2;\n+    r->d[2] = a->d[2] - b->d[2] - c1;\n+    r->d[1] = a->d[1] - b->d[1] - c0;\n+    r->d[0] = a->d[0] - b->d[0];\n+}\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 14,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think something more like _scalar_add using an int128 accumulator would be clearer and probably faster.",
      "created_at": "2017-07-11T04:16:02Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126591235",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126591235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126704480",
      "pull_request_review_id": 49212881,
      "id": 126704480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjcwNDQ4MA==",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_replace(secp256k1_scalar_heap *heap, unsigned char index) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi(secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    unsigned char first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+        }\n+        while (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) >= 0);\n+\n+        if (secp256k1_scalar_is_zero(&sc[first])) {\n+            first = secp256k1_heap_remove(&heap);\n+        } else {\n+            first = secp256k1_replace(&heap, first);\n+        }\n+    }\n+\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc[first]));\n+\n+    if (secp256k1_gej_is_infinity(&pt[first])) {",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 184,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126589735,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed.",
      "created_at": "2017-07-11T14:26:42Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r126704480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/126704480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/127252185",
      "pull_request_review_id": 49818036,
      "id": 127252185,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzI1MjE4NQ==",
      "diff_hunk": "@@ -96,6 +96,17 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    int c0 = a->d[0] < b->d[0];\n+    int c1 = a->d[1] < b->d[1] || (c0 && a->d[1] == b->d[1]);\n+    int c2 = a->d[2] < b->d[2] || (c1 && a->d[2] == b->d[2]);\n+\n+    r->d[3] = a->d[3] - b->d[3] - c2;\n+    r->d[2] = a->d[2] - b->d[2] - c1;\n+    r->d[1] = a->d[1] - b->d[1] - c0;\n+    r->d[0] = a->d[0] - b->d[0];\n+}\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 14,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126591235,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems a bit slower actually, drops aggsig performance from 730-735us to 740-750us for a 30-sig aggregate.",
      "created_at": "2017-07-13T15:36:12Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r127252185",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/127252185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149059",
      "pull_request_review_id": 50799949,
      "id": 128149059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODE0OTA1OQ==",
      "diff_hunk": "@@ -159,6 +159,16 @@ typedef int (*secp256k1_nonce_function)(\n #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)\n #define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)\n \n+/** Prefix byte used to tag various encoded curvepoints for specific purposes */\n+#define SECP256K1_TAG_PUBKEY_EVEN\t0x02\n+#define SECP256K1_TAG_PUBKEY_ODD\t0x03\n+#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED\t0x04\n+#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN\t0x06\n+#define SECP256K1_TAG_PUBKEY_HYBRID_ODD\t\t0x07",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 9,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Weird spacing.",
      "created_at": "2017-07-19T04:08:56Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128149059",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149096",
      "pull_request_review_id": 50799949,
      "id": 128149096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODE0OTA5Ng==",
      "diff_hunk": "@@ -0,0 +1,64 @@\n+/**********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                              *",
      "path": "src/bench_aggsig.c",
      "position": null,
      "original_position": 2,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wow, I can't remember writing this!",
      "created_at": "2017-07-19T04:09:30Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128149096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149301",
      "pull_request_review_id": 50799949,
      "id": 128149301,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODE0OTMwMQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_replace(secp256k1_scalar_heap *heap, unsigned char index) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    unsigned char first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+        }\n+        while (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) >= 0);\n+\n+        if (secp256k1_scalar_is_zero(&sc[first])) {\n+            first = secp256k1_heap_remove(&heap);\n+        } else {\n+            first = secp256k1_replace(&heap, first);\n+        }\n+    }\n+\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc[first]));\n+\n+    /* Now the desired result is heap_sc[0] * heap_pt[0], and for random scalars it is\n+     * very likely that heap_sc[0] = 1, and extremely likely heap_sc[0] < 5. (After\n+     * about 100k trials I saw around 200 2's and one 3.) So use a binary ladder rather\n+     * than any heavy machinery to finish it off. */\n+    for (;;) {\n+        if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+            secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            if (secp256k1_scalar_is_zero(&sc[first])) {\n+                break;\n+            }\n+        }\n+        secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+    }\n+}\n+\n+#ifdef USE_ENDOMORPHISM\n+SECP256K1_INLINE static void secp256k1_ecmult_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+#endif\n+\n+static int secp256k1_ecmult_multi(secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {\n+    secp256k1_gej tmp;\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N + 1];  /* +1 in case we spill over doing the endomorphism 2 points at a time */\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N + 1];\n+    size_t idx = 0;\n+    size_t point_idx = 0;\n+\n+    sc[0] = *inp_g_sc;\n+    secp256k1_gej_set_ge(&pt[0], &secp256k1_ge_const_g);\n+    idx++;\n+#ifdef USE_ENDOMORPHISM\n+    secp256k1_ecmult_endo_split(&sc[0], &sc[1], &pt[0], &pt[1]);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 227,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doing endo split on the G factor is unnecessary... you can just split in 128-bit parts using mask/shift, and use a precomputed 2^128*G constant (which we probably already have in the verification context).",
      "created_at": "2017-07-19T04:12:40Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128149301",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149358",
      "pull_request_review_id": 50799949,
      "id": 128149358,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODE0OTM1OA==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_replace(secp256k1_scalar_heap *heap, unsigned char index) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    unsigned char first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+        }\n+        while (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) >= 0);\n+\n+        if (secp256k1_scalar_is_zero(&sc[first])) {\n+            first = secp256k1_heap_remove(&heap);\n+        } else {\n+            first = secp256k1_replace(&heap, first);\n+        }\n+    }\n+\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc[first]));\n+\n+    /* Now the desired result is heap_sc[0] * heap_pt[0], and for random scalars it is",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 184,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mention that it ends with the GCD of the input scalars?",
      "created_at": "2017-07-19T04:13:26Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128149358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149538",
      "pull_request_review_id": 50799949,
      "id": 128149538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODE0OTUzOA==",
      "diff_hunk": "@@ -96,6 +96,17 @@ static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a,\n     return overflow;\n }\n \n+static void secp256k1_scalar_numsub(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n+    int c0 = a->d[0] < b->d[0];\n+    int c1 = a->d[1] < b->d[1] || (c0 && a->d[1] == b->d[1]);\n+    int c2 = a->d[2] < b->d[2] || (c1 && a->d[2] == b->d[2]);\n+\n+    r->d[3] = a->d[3] - b->d[3] - c2;\n+    r->d[2] = a->d[2] - b->d[2] - c1;\n+    r->d[1] = a->d[1] - b->d[1] - c0;\n+    r->d[0] = a->d[0] - b->d[0];\n+}\n+",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 14,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "813f3e5ea0ca2cc27a4ea3ca9eba6171cddac862",
      "in_reply_to_id": 126591235,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's very surprising, and probably worth investigating further. Should we use the same approach for addition?",
      "created_at": "2017-07-19T04:16:05Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128149538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128149538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128254294",
      "pull_request_review_id": 50915870,
      "id": 128254294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODI1NDI5NA==",
      "diff_hunk": "@@ -159,6 +159,16 @@ typedef int (*secp256k1_nonce_function)(\n #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)\n #define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)\n \n+/** Prefix byte used to tag various encoded curvepoints for specific purposes */\n+#define SECP256K1_TAG_PUBKEY_EVEN\t0x02\n+#define SECP256K1_TAG_PUBKEY_ODD\t0x03\n+#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED\t0x04\n+#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN\t0x06\n+#define SECP256K1_TAG_PUBKEY_HYBRID_ODD\t\t0x07",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 9,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": 128149059,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed in https://github.com/bitcoin-core/secp256k1/pull/459",
      "created_at": "2017-07-19T14:01:11Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128254294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128254294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128254637",
      "pull_request_review_id": 50916296,
      "id": 128254637,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODI1NDYzNw==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_replace(secp256k1_scalar_heap *heap, unsigned char index) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    unsigned char first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+        }\n+        while (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) >= 0);\n+\n+        if (secp256k1_scalar_is_zero(&sc[first])) {\n+            first = secp256k1_heap_remove(&heap);\n+        } else {\n+            first = secp256k1_replace(&heap, first);\n+        }\n+    }\n+\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc[first]));\n+\n+    /* Now the desired result is heap_sc[0] * heap_pt[0], and for random scalars it is\n+     * very likely that heap_sc[0] = 1, and extremely likely heap_sc[0] < 5. (After\n+     * about 100k trials I saw around 200 2's and one 3.) So use a binary ladder rather\n+     * than any heavy machinery to finish it off. */\n+    for (;;) {\n+        if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+            secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            if (secp256k1_scalar_is_zero(&sc[first])) {\n+                break;\n+            }\n+        }\n+        secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+    }\n+}\n+\n+#ifdef USE_ENDOMORPHISM\n+SECP256K1_INLINE static void secp256k1_ecmult_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+#endif\n+\n+static int secp256k1_ecmult_multi(secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {\n+    secp256k1_gej tmp;\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N + 1];  /* +1 in case we spill over doing the endomorphism 2 points at a time */\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N + 1];\n+    size_t idx = 0;\n+    size_t point_idx = 0;\n+\n+    sc[0] = *inp_g_sc;\n+    secp256k1_gej_set_ge(&pt[0], &secp256k1_ge_const_g);\n+    idx++;\n+#ifdef USE_ENDOMORPHISM\n+    secp256k1_ecmult_endo_split(&sc[0], &sc[1], &pt[0], &pt[1]);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 227,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": 128149301,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you mean \"split in 128-bit parts using mask/shift\"?",
      "created_at": "2017-07-19T14:02:19Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128254637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128254637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128256524",
      "pull_request_review_id": 50918462,
      "id": 128256524,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODI1NjUyNA==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_replace(secp256k1_scalar_heap *heap, unsigned char index) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    unsigned char first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+        }\n+        while (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) >= 0);\n+\n+        if (secp256k1_scalar_is_zero(&sc[first])) {\n+            first = secp256k1_heap_remove(&heap);\n+        } else {\n+            first = secp256k1_replace(&heap, first);\n+        }\n+    }\n+\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc[first]));\n+\n+    /* Now the desired result is heap_sc[0] * heap_pt[0], and for random scalars it is\n+     * very likely that heap_sc[0] = 1, and extremely likely heap_sc[0] < 5. (After\n+     * about 100k trials I saw around 200 2's and one 3.) So use a binary ladder rather\n+     * than any heavy machinery to finish it off. */\n+    for (;;) {\n+        if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+            secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            if (secp256k1_scalar_is_zero(&sc[first])) {\n+                break;\n+            }\n+        }\n+        secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+    }\n+}\n+\n+#ifdef USE_ENDOMORPHISM\n+SECP256K1_INLINE static void secp256k1_ecmult_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_gej *p1, secp256k1_gej *p2) {\n+    secp256k1_scalar tmp = *s1;\n+    secp256k1_scalar_split_lambda(s1, s2, &tmp);\n+    secp256k1_gej_mul_lambda(p2, p1);\n+\n+    if (secp256k1_scalar_is_high(s1)) {\n+        secp256k1_scalar_negate(s1, s1);\n+        secp256k1_gej_neg(p1, p1);\n+    }\n+    if (secp256k1_scalar_is_high(s2)) {\n+        secp256k1_scalar_negate(s2, s2);\n+        secp256k1_gej_neg(p2, p2);\n+    }\n+}\n+#endif\n+\n+static int secp256k1_ecmult_multi(secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {\n+    secp256k1_gej tmp;\n+    secp256k1_gej pt[SECP256K1_ECMULT_MULTI_MAX_N + 1];  /* +1 in case we spill over doing the endomorphism 2 points at a time */\n+    secp256k1_scalar sc[SECP256K1_ECMULT_MULTI_MAX_N + 1];\n+    size_t idx = 0;\n+    size_t point_idx = 0;\n+\n+    sc[0] = *inp_g_sc;\n+    secp256k1_gej_set_ge(&pt[0], &secp256k1_ge_const_g);\n+    idx++;\n+#ifdef USE_ENDOMORPHISM\n+    secp256k1_ecmult_endo_split(&sc[0], &sc[1], &pt[0], &pt[1]);",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 227,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": 128149301,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I understand, using `2^128*G` rather than `lambda*G`. Sure.",
      "created_at": "2017-07-19T14:08:45Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128256524",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128256524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128667586",
      "pull_request_review_id": 51369784,
      "id": 128667586,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODY2NzU4Ng==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Peter Dettmann                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"ecmult_multi.h\"\n+\n+typedef struct {\n+    unsigned char tree[SECP256K1_ECMULT_MULTI_MAX_N];\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    size_t parent;\n+    unsigned char parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, unsigned char index) {\n+    unsigned char child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    VERIFY_CHECK(n <= SECP256K1_ECMULT_MULTI_MAX_N);\n+\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_replace(secp256k1_scalar_heap *heap, unsigned char index) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static unsigned char secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    unsigned char result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    unsigned char first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */\n+            if (secp256k1_scalar_shr_int(&sc[first], 1) == 1) {\n+                secp256k1_gej_add_var(r, r, &pt[first], NULL);\n+            }\n+            secp256k1_gej_double_var(&pt[first], &pt[first], NULL);\n+        }\n+        while (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) >= 0);\n+\n+        if (secp256k1_scalar_is_zero(&sc[first])) {\n+            first = secp256k1_heap_remove(&heap);\n+        } else {\n+            first = secp256k1_replace(&heap, first);\n+        }\n+    }\n+\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc[first]));\n+\n+    /* Now the desired result is heap_sc[0] * heap_pt[0], and for random scalars it is",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 184,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": 128149358,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that holds with the possible ladder step in the main loop.",
      "created_at": "2017-07-21T01:36:37Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r128667586",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/128667586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132592912",
      "pull_request_review_id": 55691939,
      "id": 132592912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5MjkxMg==",
      "diff_hunk": "@@ -9,6 +9,9 @@\n \n #include \"num.h\"\n #include \"group.h\"\n+#include \"scalar.h\"\n+\n+#define SECP256K1_ECMULT_MULTI_MAX_N\t32",
      "path": "src/ecmult.h",
      "position": null,
      "original_position": 13,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "87691f61ba8e48fd9bc636416768a316140c39c5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this need to be exposed now?",
      "created_at": "2017-08-10T23:24:24Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132592912",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132592912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132593080",
      "pull_request_review_id": 55691939,
      "id": 132593080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5MzA4MA==",
      "diff_hunk": "@@ -0,0 +1,112 @@\n+/**********************************************************************",
      "path": "src/ecmult_multi_impl.h",
      "position": null,
      "original_position": 1,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "87691f61ba8e48fd9bc636416768a316140c39c5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Having this in a separate file from ecmult_impl.h I think will result in a circular dependency between strauss and the dispatch code.",
      "created_at": "2017-08-10T23:25:36Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132593080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132593080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132595281",
      "pull_request_review_id": 55691939,
      "id": 132595281,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5NTI4MQ==",
      "diff_hunk": "@@ -159,6 +159,16 @@ typedef int (*secp256k1_nonce_function)(\n #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)\n #define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)\n \n+/** Prefix byte used to tag various encoded curvepoints for specific purposes */\n+#define SECP256K1_TAG_PUBKEY_EVEN\t0x02\n+#define SECP256K1_TAG_PUBKEY_ODD\t0x03\n+#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED\t0x04\n+#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN\t0x06\n+#define SECP256K1_TAG_PUBKEY_HYBRID_ODD\t\t0x07",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 9,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "af4888f95d66fe238bd73e506a4444ec377dfab0",
      "in_reply_to_id": 128149059,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rebase on top of #459 kthxbye.",
      "created_at": "2017-08-10T23:42:31Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132595281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132595281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132595905",
      "pull_request_review_id": 55694900,
      "id": 132595905,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5NTkwNQ==",
      "diff_hunk": "@@ -166,6 +179,9 @@ typedef int (*secp256k1_nonce_function)(\n #define SECP256K1_TAG_PUBKEY_HYBRID_EVEN 0x06\n #define SECP256K1_TAG_PUBKEY_HYBRID_ODD 0x07\n \n+#define SECP256K1_TAG_AGGSIG_NONCE_EVEN\t0x12",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 24,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "90e1980ffc422dcadb34349dc38b97de01b75d9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Weird indentation.",
      "created_at": "2017-08-10T23:47:45Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132595905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132595905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132596226",
      "pull_request_review_id": 55694900,
      "id": 132596226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5NjIyNg==",
      "diff_hunk": "@@ -403,4 +404,280 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej\n     }\n }\n \n+/* begin ecmult_multi */\n+\n+typedef struct {\n+    uint32_t *tree;\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    uint32_t child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    size_t parent;\n+    uint32_t parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    uint32_t child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, uint32_t *tree, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    heap->tree = tree;\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static uint32_t secp256k1_replace(secp256k1_scalar_heap *heap, uint32_t index) {\n+    uint32_t result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static uint32_t secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    uint32_t result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(uint32_t *tree_space, secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    uint32_t first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, tree_space, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 161,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "90e1980ffc422dcadb34349dc38b97de01b75d9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On average by way more than half, if you have a sufficiently large number of points. If you have 256 randomly distributed 256-bit integers, I expect the difference between the top two to be around 2^247.5.",
      "created_at": "2017-08-10T23:50:39Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132596226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132596226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132596465",
      "pull_request_review_id": 55694900,
      "id": 132596465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5NjQ2NQ==",
      "diff_hunk": "@@ -403,4 +404,280 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej\n     }\n }\n \n+/* begin ecmult_multi */\n+\n+typedef struct {\n+    uint32_t *tree;\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    uint32_t child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    size_t parent;\n+    uint32_t parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    uint32_t child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, uint32_t *tree, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    heap->tree = tree;\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static uint32_t secp256k1_replace(secp256k1_scalar_heap *heap, uint32_t index) {\n+    uint32_t result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static uint32_t secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    uint32_t result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(uint32_t *tree_space, secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    uint32_t first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, tree_space, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by\n+             * repeating this we will quickly zero out all but one exponent, which will\n+             * be small. */\n+            secp256k1_gej_add_var(&pt[second], &pt[first], &pt[second], NULL);  /* Y -> X + Y */\n+            secp256k1_scalar_numsub(&sc[first], &sc[first], &sc[second]);  /* n -> n - m */\n+\n+            if (secp256k1_scalar_cmp_var(&sc[first], &sc[second]) < 0) {\n+                break;\n+            }\n+\n+            /* To handle pathological inputs, we use a binary ladder step here */",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 171,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "90e1980ffc422dcadb34349dc38b97de01b75d9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you explain this in terms of the m/n/X/Y notation above?",
      "created_at": "2017-08-10T23:52:35Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132596465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132596465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 566,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132596999",
      "pull_request_review_id": 55694900,
      "id": 132596999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5Njk5OQ==",
      "diff_hunk": "@@ -0,0 +1,13 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_AGGSIG_\n+#define _SECP256K1_MODULE_AGGSIG_AGGSIG_\n+\n+typedef struct {",
      "path": "src/modules/aggsig/aggsig.h",
      "position": null,
      "original_position": 10,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "90e1980ffc422dcadb34349dc38b97de01b75d9b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This definition (and in fact the whole file) looks kinda redundant.",
      "created_at": "2017-08-10T23:57:20Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132596999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132596999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132597911",
      "pull_request_review_id": 55697057,
      "id": 132597911,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5NzkxMQ==",
      "diff_hunk": "@@ -403,4 +404,280 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej\n     }\n }\n \n+/* begin ecmult_multi */\n+\n+typedef struct {\n+    uint32_t *tree;\n+    const secp256k1_scalar *scalars;\n+    size_t size;\n+} secp256k1_scalar_heap;\n+\n+static void secp256k1_sift_down(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    uint32_t child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* If the current node is larger than its largest child, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[child_index]) > 0) {\n+            break;\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_up(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    size_t parent;\n+    uint32_t parent_index;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node > 0) {\n+        parent = (node - 1) >> 1;\n+        parent_index = heap->tree[parent];\n+\n+        /* If the current node is not larger than its parent, stop at this level */\n+        if (secp256k1_scalar_cmp_var(&sc[index], &sc[parent_index]) <= 0) {\n+            break;\n+        }\n+\n+        /* Move the parent down, and recurse from its previous position */\n+        heap->tree[node] = parent_index;\n+        node = parent;\n+    }\n+\n+    heap->tree[node] = index;\n+}\n+\n+static void secp256k1_sift_floyd(secp256k1_scalar_heap *heap, size_t node, uint32_t index) {\n+    uint32_t child_index, other_index;\n+    size_t child, other, half_size = heap->size >> 1;\n+    const secp256k1_scalar *sc = heap->scalars;\n+\n+    while (node < half_size) {\n+        /* Initially assume the left child is the larger child */\n+        child = (node << 1) + 1;\n+        child_index = heap->tree[child];\n+\n+        /* If there is a right child, check whether it's larger than the left */\n+        other = child + 1;\n+        if (other < heap->size) {\n+            other_index = heap->tree[other];\n+            if (secp256k1_scalar_cmp_var(&sc[other_index], &sc[child_index]) > 0) {\n+                child = other;\n+                child_index = other_index;\n+            }\n+        }\n+\n+        /* Move the larger child up, and recurse from its previous position */\n+        heap->tree[node] = child_index;\n+        node = child;\n+    }\n+\n+    secp256k1_sift_up(heap, node, index);\n+}\n+\n+SECP256K1_INLINE static void secp256k1_heapify(secp256k1_scalar_heap *heap) {\n+    size_t root = heap->size >> 1;;\n+    while (root-- > 0) {\n+        secp256k1_sift_down(heap, root, heap->tree[root]);\n+    }\n+}\n+\n+static void secp256k1_heap_initialize(secp256k1_scalar_heap *heap, uint32_t *tree, const secp256k1_scalar *scalars, const secp256k1_gej *pt, size_t n) {\n+    size_t i, size = 0;\n+\n+    heap->tree = tree;\n+    for (i = 0; i < n; ++i) {\n+        if (!secp256k1_scalar_is_zero(&scalars[i]) && !secp256k1_gej_is_infinity(&pt[i])) {\n+            heap->tree[size++] = i;\n+        }\n+    }\n+\n+    heap->scalars = scalars;\n+    heap->size = size;\n+\n+    secp256k1_heapify(heap);\n+}\n+\n+SECP256K1_INLINE static uint32_t secp256k1_replace(secp256k1_scalar_heap *heap, uint32_t index) {\n+    uint32_t result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    secp256k1_sift_floyd(heap, 0, index);\n+    return result;\n+}\n+\n+SECP256K1_INLINE static uint32_t secp256k1_heap_remove(secp256k1_scalar_heap *heap) {\n+    uint32_t result = heap->tree[0];\n+    VERIFY_CHECK(heap->size > 0);\n+    if (--heap->size > 0) {\n+        secp256k1_sift_down(heap, 0, heap->tree[heap->size]);\n+    }\n+    return result;\n+}\n+\n+/** Multi-multiply: R = sum_i ni * Ai */\n+static void secp256k1_ecmult_multi_bos_coster(uint32_t *tree_space, secp256k1_gej *r, secp256k1_scalar *sc, secp256k1_gej *pt, size_t n) {\n+    secp256k1_scalar_heap heap;\n+    uint32_t first, second;\n+\n+    secp256k1_gej_set_infinity(r);\n+    secp256k1_heap_initialize(&heap, tree_space, sc, pt, n);\n+\n+    if (heap.size == 0) {\n+        return;\n+    }\n+\n+    first = secp256k1_heap_remove(&heap);\n+\n+    while (heap.size > 0) {\n+        second = heap.tree[0];        \n+\n+        do {\n+            /* Observe that nX + mY = (n-m)X + m(X + Y), and if n > m this transformation\n+             * reduces the magnitude of the larger scalar, on average by half. So by",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 161,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "90e1980ffc422dcadb34349dc38b97de01b75d9b",
      "in_reply_to_id": 132596226,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, good point!",
      "created_at": "2017-08-11T00:05:26Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r132597911",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/132597911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/136723495",
      "pull_request_review_id": 60302526,
      "id": 136723495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjcyMzQ5NQ==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+\n+typedef struct {\n+    const secp256k1_context *ctx;\n+    unsigned char prehash[32];\n+    const secp256k1_pubkey *pubkeys;\n+} secp256k1_verify_callback_data;\n+\n+static int secp256k1_aggsig_verify_callback(secp256k1_scalar *sc, secp256k1_ge *pt, size_t idx, void *data) {\n+    secp256k1_verify_callback_data *cbdata = (secp256k1_verify_callback_data*) data;\n+\n+    if (secp256k1_compute_sighash(sc, cbdata->prehash, idx) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_negate(sc, sc);\n+    secp256k1_pubkey_load(cbdata->ctx, pt, &cbdata->pubkeys[idx]);\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, secp256k1_scratch_space *scratch, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_scalar g_sc;\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge r_ge;\n+    int overflow;\n+    secp256k1_verify_callback_data cbdata;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(scratch != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* extract s */\n+    secp256k1_scalar_set_b32(&g_sc, sig64, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+\n+    /* extract R */\n+    if (!secp256k1_fe_set_b32(&fe_tmp, sig64 + 32)) {\n+        return 0;\n+    }\n+    if (!secp256k1_ge_set_xquad(&r_ge, &fe_tmp)) {",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 269,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "8afc544be724e08f55a96ebd65361e3fb263d1b5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When n_pubkeys is 1 (which is probably going to be pretty common), there is a more efficient verification algorithm where you don't decompress R, but instead just compare the X coordinate of the recomputed version, and check that its Y coordinate is a quadratic residue.",
      "created_at": "2017-09-03T18:53:12Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r136723495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/136723495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/137340490",
      "pull_request_review_id": 60994619,
      "id": 137340490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM0MDQ5MA==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+/**********************************************************************\n+ * Copyright (c) 2017 Andrew Poelstra, Pieter Wuille                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_AGGSIG_MAIN_\n+#define _SECP256K1_MODULE_AGGSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_aggsig.h\"\n+#include \"hash.h\"\n+\n+enum nonce_progress {\n+    /* Nonce has not been generated by us or recevied from another party */\n+    NONCE_PROGRESS_UNKNOWN = 0,\n+    /* Public nonce has been recevied from another party */\n+    NONCE_PROGRESS_OTHER = 1,\n+    /* Public nonce has been generated by us but not used in signing. */\n+    NONCE_PROGRESS_OURS = 2,\n+    /* Public nonce has been generated by us and used in signing. An attempt to\n+     * use a nonce twice will result in an error. */\n+    NONCE_PROGRESS_SIGNED = 3\n+};\n+\n+struct secp256k1_aggsig_context_struct {\n+    enum nonce_progress *progress;\n+    secp256k1_pubkey *pubkeys;\n+    secp256k1_scalar *secnonce;\n+    secp256k1_gej pubnonce_sum;\n+    size_t n_sigs;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+};\n+\n+/* Compute the hash of all the data that every pubkey needs to sign */\n+static void secp256k1_compute_prehash(const secp256k1_context *ctx, unsigned char *output, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, secp256k1_ge *nonce_ge, const unsigned char *msghash32) {\n+    size_t i;\n+    unsigned char buf[33];\n+    size_t buflen = sizeof(buf);\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode pubkeys */\n+    for (i = 0; i < n_pubkeys; i++) {\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, buf, &buflen, &pubkeys[i], SECP256K1_EC_COMPRESSED));\n+        secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    }\n+    /* Encode nonce */\n+    CHECK(secp256k1_eckey_pubkey_serialize(nonce_ge, buf, &buflen, 1));\n+    secp256k1_sha256_write(&hasher, buf, sizeof(buf));\n+    /* Encode message */\n+    secp256k1_sha256_write(&hasher, msghash32, 32);\n+    /* Finish */\n+    secp256k1_sha256_finalize(&hasher, output);\n+}\n+\n+/* Add the index to the above hash to customize it for each pubkey */\n+static int secp256k1_compute_sighash(secp256k1_scalar *r, const unsigned char *prehash, size_t index) {\n+    unsigned char output[32];\n+    int overflow;\n+    secp256k1_sha256_t hasher;\n+    secp256k1_sha256_initialize(&hasher);\n+    /* Encode index as a UTF8-style bignum */\n+    while (index > 0) {\n+        unsigned char ch = index & 0x7f;\n+        secp256k1_sha256_write(&hasher, &ch, 1);\n+        index >>= 7;\n+    }\n+    secp256k1_sha256_write(&hasher, prehash, 32);\n+    secp256k1_sha256_finalize(&hasher, output);\n+    secp256k1_scalar_set_b32(r, output, &overflow);\n+    return !overflow;\n+}\n+\n+secp256k1_aggsig_context* secp256k1_aggsig_context_create(const secp256k1_context *ctx, const secp256k1_pubkey *pubkeys, size_t n_pubkeys, const unsigned char *seed) {\n+    secp256k1_aggsig_context* aggctx;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    ARG_CHECK(seed != NULL);\n+\n+    aggctx = (secp256k1_aggsig_context*)checked_malloc(&ctx->error_callback, sizeof(*aggctx));\n+    aggctx->progress = (enum nonce_progress*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->progress));\n+    aggctx->pubkeys = (secp256k1_pubkey*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    aggctx->secnonce = (secp256k1_scalar*)checked_malloc(&ctx->error_callback, n_pubkeys * sizeof(*aggctx->secnonce));\n+    aggctx->n_sigs = n_pubkeys;\n+    secp256k1_gej_set_infinity(&aggctx->pubnonce_sum);\n+    memcpy(aggctx->pubkeys, pubkeys, n_pubkeys * sizeof(*aggctx->pubkeys));\n+    memset(aggctx->progress, 0, n_pubkeys * sizeof(*aggctx->progress));\n+    secp256k1_rfc6979_hmac_sha256_initialize(&aggctx->rng, seed, 32);\n+\n+    return aggctx;\n+}\n+\n+/* TODO extend this to export the nonce if the user wants */\n+int secp256k1_aggsig_generate_nonce(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, size_t index) {\n+    int retry;\n+    unsigned char data[32];\n+    secp256k1_gej pubnon;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    if (aggctx->progress[index] != NONCE_PROGRESS_UNKNOWN) {\n+        return 0;\n+    }\n+\n+    /* generate nonce from the RNG */\n+    do {\n+        secp256k1_rfc6979_hmac_sha256_generate(&aggctx->rng, data, 32);\n+        secp256k1_scalar_set_b32(&aggctx->secnonce[index], data, &retry);\n+        retry |= secp256k1_scalar_is_zero(&aggctx->secnonce[index]);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubnon, &aggctx->secnonce[index]);\n+    memset(data, 0, 32);  /* TODO proper clear */\n+    /* Negate nonce if needed to get y to be a quadratic residue */\n+    if (!secp256k1_gej_has_quad_y_var(&pubnon)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_gej_neg(&pubnon, &pubnon);\n+    }\n+    secp256k1_gej_add_var(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum, &pubnon, NULL);\n+    aggctx->progress[index] = NONCE_PROGRESS_OURS;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_partial_sign(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, secp256k1_aggsig_partial_signature *partial, const unsigned char *msghash32, const unsigned char *seckey32, size_t index) {\n+    size_t i;\n+    secp256k1_scalar sighash;\n+    secp256k1_scalar sec;\n+    secp256k1_ge tmp_ge;\n+    int overflow;\n+    unsigned char prehash[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(partial != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(index < aggctx->n_sigs);\n+\n+    /* check state machine */\n+    for (i = 0; i < aggctx->n_sigs; i++) {\n+        if (aggctx->progress[i] == NONCE_PROGRESS_UNKNOWN) {\n+            return 0;\n+        }\n+    }\n+    if (aggctx->progress[index] != NONCE_PROGRESS_OURS) {\n+        return 0;\n+    }\n+\n+    /* sign */\n+    /* If the total public nonce has wrong sign, negate our\n+     * secret nonce. Everyone will negate the public one\n+     * at combine time. */\n+    secp256k1_ge_set_gej(&tmp_ge, &aggctx->pubnonce_sum);  /* TODO cache this */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_scalar_negate(&aggctx->secnonce[index], &aggctx->secnonce[index]);\n+        secp256k1_ge_neg(&tmp_ge, &tmp_ge);\n+    }\n+\n+    secp256k1_compute_prehash(ctx, prehash, aggctx->pubkeys, aggctx->n_sigs, &tmp_ge, msghash32);\n+    if (secp256k1_compute_sighash(&sighash, prehash, index) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_set_b32(&sec, seckey32, &overflow);\n+    if (overflow) {\n+        secp256k1_scalar_clear(&sec);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&sec, &sec, &sighash);\n+    secp256k1_scalar_add(&sec, &sec, &aggctx->secnonce[index]);\n+\n+    /* finalize */\n+    secp256k1_scalar_get_b32(partial->data, &sec);\n+    secp256k1_scalar_clear(&sec);\n+    aggctx->progress[index] = NONCE_PROGRESS_SIGNED;\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_combine_signatures(const secp256k1_context* ctx, secp256k1_aggsig_context* aggctx, unsigned char *sig64, const secp256k1_aggsig_partial_signature *partial, size_t n_sigs) {\n+    size_t i;\n+    secp256k1_scalar s;\n+    secp256k1_ge final;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(aggctx != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(partial != NULL);\n+    (void) ctx;\n+\n+    if (n_sigs != aggctx->n_sigs) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_int(&s, 0);\n+    for (i = 0; i < n_sigs; i++) {\n+        secp256k1_scalar tmp;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&tmp, partial[i].data, &overflow);\n+        if (overflow) {\n+            return 0;\n+        }\n+        secp256k1_scalar_add(&s, &s, &tmp);\n+    }\n+\n+    /* If we need to negate the public nonce, everyone will\n+     * have negated their secret nonces in the previous step. */\n+    if (!secp256k1_gej_has_quad_y_var(&aggctx->pubnonce_sum)) {\n+        secp256k1_gej_neg(&aggctx->pubnonce_sum, &aggctx->pubnonce_sum);\n+    }\n+\n+    secp256k1_scalar_get_b32(sig64, &s);\n+    secp256k1_ge_set_gej(&final, &aggctx->pubnonce_sum);\n+    secp256k1_fe_normalize_var(&final.x);\n+    secp256k1_fe_get_b32(sig64 + 32, &final.x);\n+    return 1;\n+}\n+\n+\n+typedef struct {\n+    const secp256k1_context *ctx;\n+    unsigned char prehash[32];\n+    const secp256k1_pubkey *pubkeys;\n+} secp256k1_verify_callback_data;\n+\n+static int secp256k1_aggsig_verify_callback(secp256k1_scalar *sc, secp256k1_ge *pt, size_t idx, void *data) {\n+    secp256k1_verify_callback_data *cbdata = (secp256k1_verify_callback_data*) data;\n+\n+    if (secp256k1_compute_sighash(sc, cbdata->prehash, idx) == 0) {\n+        return 0;\n+    }\n+    secp256k1_scalar_negate(sc, sc);\n+    secp256k1_pubkey_load(cbdata->ctx, pt, &cbdata->pubkeys[idx]);\n+    return 1;\n+}\n+\n+int secp256k1_aggsig_verify(const secp256k1_context* ctx, secp256k1_scratch_space *scratch, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    secp256k1_scalar g_sc;\n+    secp256k1_gej pk_sum;\n+    secp256k1_fe fe_tmp;\n+    secp256k1_ge r_ge;\n+    int overflow;\n+    secp256k1_verify_callback_data cbdata;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(scratch != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(pubkeys != NULL);\n+    (void) ctx;\n+\n+    if (n_pubkeys == 0) {\n+        return 0;\n+    }\n+\n+    /* extract s */\n+    secp256k1_scalar_set_b32(&g_sc, sig64, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+\n+    /* extract R */\n+    if (!secp256k1_fe_set_b32(&fe_tmp, sig64 + 32)) {\n+        return 0;\n+    }\n+    if (!secp256k1_ge_set_xquad(&r_ge, &fe_tmp)) {",
      "path": "src/modules/aggsig/main_impl.h",
      "position": null,
      "original_position": 269,
      "commit_id": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "original_commit_id": "8afc544be724e08f55a96ebd65361e3fb263d1b5",
      "in_reply_to_id": 136723495,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice. I don't think this even needs `n_pubkeys` to be 1.",
      "created_at": "2017-09-06T17:46:39Z",
      "updated_at": "2017-12-10T21:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/461#discussion_r137340490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/137340490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/461"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 269,
      "side": "RIGHT"
    }
  ]
}