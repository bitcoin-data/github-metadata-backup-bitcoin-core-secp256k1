{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479",
    "id": 1667499858,
    "node_id": "PR_kwDOAP4Jqs5jZAdS",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1479.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1479.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1479",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1479/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/461970682f56a8e15fc71ecab18d4537e50441fc",
    "number": 1479,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Add module \"musig\" that implements MuSig2 multi-signatures (BIP 327)",
    "user": {
      "login": "jonasnick",
      "id": 2582071,
      "node_id": "MDQ6VXNlcjI1ODIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasnick",
      "html_url": "https://github.com/jonasnick",
      "followers_url": "https://api.github.com/users/jonasnick/followers",
      "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasnick/orgs",
      "repos_url": "https://api.github.com/users/jonasnick/repos",
      "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonasnick/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Closes #1452. Most of the code is a copy from [libsecp256k1-zkp](https://github.com/BlockstreamResearch/secp256k1-zkp). The API added in this PR is identical with the exception of two modifications:\r\n\r\n1. I removed the unused `scratch_space` argument from `secp256k1_musig_pubkey_agg`. This argument was intended to allow using `ecmult_multi` algorithms for key aggregation in the future. But at this point it's unclear whether the `scratch_space` object will remain in its current form (see #1302).\r\n2. Support for adaptor signatures was removed and therefore the `adaptor` argument of `musig_nonce_process` was also removed.\r\n\r\nIn contrast to the module in libsecp256k1-zkp, the module is non-experimental. I slightly cleaned up parts of the module, adjusted the code to the new definition of the VERIFY_CHECK macro and applied some simplifications that were possible because the module is now in the upstream repo (`ge_from_bytes`, `ge_to_bytes`). You can follow the changes I made to the libsecp256k1-zkp module at https://github.com/jonasnick/secp256k1-zkp/commits/musig2-upstream/.\r\n",
    "labels": [
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      }
    ],
    "created_at": "2024-01-06T20:40:28Z",
    "updated_at": "2024-03-10T14:57:47Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "9166be0fce10a9cc4c4c8daeac3c9550ea87d3af",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "jonasnick:musig2-module",
      "ref": "musig2-module",
      "sha": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 57937974,
        "node_id": "MDEwOlJlcG9zaXRvcnk1NzkzNzk3NA==",
        "name": "secp256k1",
        "full_name": "jonasnick/secp256k1",
        "owner": {
          "login": "jonasnick",
          "id": 2582071,
          "node_id": "MDQ6VXNlcjI1ODIwNzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jonasnick",
          "html_url": "https://github.com/jonasnick",
          "followers_url": "https://api.github.com/users/jonasnick/followers",
          "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
          "organizations_url": "https://api.github.com/users/jonasnick/orgs",
          "repos_url": "https://api.github.com/users/jonasnick/repos",
          "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jonasnick/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jonasnick/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/jonasnick/secp256k1",
        "archive_url": "https://api.github.com/repos/jonasnick/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jonasnick/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jonasnick/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jonasnick/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jonasnick/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jonasnick/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jonasnick/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jonasnick/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jonasnick/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/jonasnick/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/jonasnick/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/jonasnick/secp256k1/events",
        "forks_url": "https://api.github.com/repos/jonasnick/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/jonasnick/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jonasnick/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jonasnick/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jonasnick/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jonasnick/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jonasnick/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jonasnick/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/jonasnick/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/jonasnick/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jonasnick/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jonasnick/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jonasnick/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:jonasnick/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/jonasnick/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/jonasnick/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jonasnick/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/jonasnick/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/jonasnick/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/jonasnick/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/jonasnick/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jonasnick/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/jonasnick/secp256k1/hooks",
        "svn_url": "https://github.com/jonasnick/secp256k1",
        "language": "C",
        "forks_count": 4,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 12190,
        "default_branch": "master",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-03-10T14:57:45Z",
        "created_at": "2016-05-03T03:14:21Z",
        "updated_at": "2023-03-16T11:44:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "427e86b9edcaa5cb19e71233ad93c2ec60dff10f",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 951,
        "stargazers_count": 1935,
        "watchers_count": 1935,
        "size": 10695,
        "default_branch": "master",
        "open_issues_count": 135,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-03-10T14:57:47Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2024-03-09T10:50:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 4731,
    "deletions": 29,
    "changed_files": 30,
    "commits": 9,
    "review_comments": 16,
    "comments": 4
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 11409680923,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKoEeob",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11409680923",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-06T21:56:46Z"
    },
    {
      "event": "reviewed",
      "id": 1807791233,
      "node_id": "PRR_kwDOAP4Jqs5rwLSB",
      "url": null,
      "actor": null,
      "commit_id": "bf1ebb890f69a2e60b51a397959146739bc284ed",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#pullrequestreview-1807791233",
      "submitted_at": "2024-01-07T11:46:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
    },
    {
      "event": "reviewed",
      "id": 1807791809,
      "node_id": "PRR_kwDOAP4Jqs5rwLbB",
      "url": null,
      "actor": null,
      "commit_id": "04aa4e76996ad24282df58e1486508f9a51692b5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#pullrequestreview-1807791809",
      "submitted_at": "2024-01-07T11:51:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11411233157,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKoKZmF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11411233157",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-07T13:33:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11411264369,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKoKhNx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11411264369",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-07T13:53:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11411364230,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKoK5mG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11411364230",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-07T14:51:09Z"
    },
    {
      "event": "subscribed",
      "id": 11412133109,
      "node_id": "SE_lADOAP4Jqs57T9BRzwAAAAKoN1T1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11412133109",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-07T22:40:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11414208869,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKoVwFl",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11414208869",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T07:51:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11414322009,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKoWLtZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11414322009",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T08:06:21Z"
    },
    {
      "event": "subscribed",
      "id": 11421573982,
      "node_id": "SE_lADOAP4Jqs57T9BRzwAAAAKox2Ne",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11421573982",
      "actor": {
        "login": "Synapsensei",
        "id": 99158059,
        "node_id": "U_kgDOBekIKw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99158059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Synapsensei",
        "html_url": "https://github.com/Synapsensei",
        "followers_url": "https://api.github.com/users/Synapsensei/followers",
        "following_url": "https://api.github.com/users/Synapsensei/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Synapsensei/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Synapsensei/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Synapsensei/subscriptions",
        "organizations_url": "https://api.github.com/users/Synapsensei/orgs",
        "repos_url": "https://api.github.com/users/Synapsensei/repos",
        "events_url": "https://api.github.com/users/Synapsensei/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Synapsensei/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T19:15:03Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T23:24:31Z",
      "updated_at": "2024-01-08T23:24:31Z",
      "source": {
        "issue": {
          "id": 2070952169,
          "node_id": "I_kwDOHi0ngs57cDjp",
          "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17",
          "repository_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org",
          "labels_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17/comments",
          "events_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17/events",
          "html_url": "https://github.com/saopaulobitdevs/saopaulobitdevs.org/issues/17",
          "number": 17,
          "state": "closed",
          "state_reason": "completed",
          "title": "Topicos Janeiro",
          "body": null,
          "user": {
            "login": "lorenzolfm",
            "id": 38786333,
            "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lorenzolfm",
            "html_url": "https://github.com/lorenzolfm",
            "followers_url": "https://api.github.com/users/lorenzolfm/followers",
            "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
            "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
            "repos_url": "https://api.github.com/users/lorenzolfm/repos",
            "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5694222796,
              "node_id": "LA_kwDOHi0ngs8AAAABU2bxzA",
              "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/labels/discussion",
              "name": "discussion",
              "description": "",
              "color": "E9652D",
              "default": false
            }
          ],
          "assignee": {
            "login": "jaonoctus",
            "id": 7918067,
            "node_id": "MDQ6VXNlcjc5MTgwNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jaonoctus",
            "html_url": "https://github.com/jaonoctus",
            "followers_url": "https://api.github.com/users/jaonoctus/followers",
            "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
            "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
            "repos_url": "https://api.github.com/users/jaonoctus/repos",
            "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "jaonoctus",
              "id": 7918067,
              "node_id": "MDQ6VXNlcjc5MTgwNjc=",
              "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/jaonoctus",
              "html_url": "https://github.com/jaonoctus",
              "followers_url": "https://api.github.com/users/jaonoctus/followers",
              "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
              "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
              "repos_url": "https://api.github.com/users/jaonoctus/repos",
              "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "brunoerg",
              "id": 19480819,
              "node_id": "MDQ6VXNlcjE5NDgwODE5",
              "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/brunoerg",
              "html_url": "https://github.com/brunoerg",
              "followers_url": "https://api.github.com/users/brunoerg/followers",
              "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
              "organizations_url": "https://api.github.com/users/brunoerg/orgs",
              "repos_url": "https://api.github.com/users/brunoerg/repos",
              "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/brunoerg/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lorenzolfm",
              "id": 38786333,
              "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
              "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lorenzolfm",
              "html_url": "https://github.com/lorenzolfm",
              "followers_url": "https://api.github.com/users/lorenzolfm/followers",
              "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
              "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
              "repos_url": "https://api.github.com/users/lorenzolfm/repos",
              "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lucasdcf",
              "id": 68931156,
              "node_id": "MDQ6VXNlcjY4OTMxMTU2",
              "avatar_url": "https://avatars.githubusercontent.com/u/68931156?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lucasdcf",
              "html_url": "https://github.com/lucasdcf",
              "followers_url": "https://api.github.com/users/lucasdcf/followers",
              "following_url": "https://api.github.com/users/lucasdcf/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lucasdcf/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lucasdcf/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lucasdcf/subscriptions",
              "organizations_url": "https://api.github.com/users/lucasdcf/orgs",
              "repos_url": "https://api.github.com/users/lucasdcf/repos",
              "events_url": "https://api.github.com/users/lucasdcf/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lucasdcf/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 10,
          "closed_at": "2024-02-01T14:33:24Z",
          "created_at": "2024-01-08T17:49:22Z",
          "updated_at": "2024-02-01T14:33:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11456989422,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKq48ju",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11456989422",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T13:58:31Z"
    },
    {
      "event": "commented",
      "id": 1887221226,
      "node_id": "IC_kwDOAP4Jqs5wfLXq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1887221226",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T14:01:04Z",
      "updated_at": "2024-01-11T14:01:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on top of master to get https://github.com/bitcoin-core/secp256k1/pull/1480 which allowed dropping a commit. Old state is preserved at https://github.com/jonasnick/secp256k1/tree/musig2-module-backup.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#issuecomment-1887221226",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1479"
    },
    {
      "event": "labeled",
      "id": 11458130949,
      "node_id": "LE_lADOAP4Jqs57T9BRzwAAAAKq9TQF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11458130949",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:25:05Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:16:02Z",
      "updated_at": "2024-01-18T14:16:02Z",
      "source": {
        "issue": {
          "id": 2088381566,
          "node_id": "PR_kwDOAjZbZs5kbg94",
          "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/285",
          "repository_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp",
          "labels_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/285/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/285/comments",
          "events_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/285/events",
          "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/285",
          "number": 285,
          "state": "closed",
          "state_reason": null,
          "title": "Upstream PRs 1426, 1430, 1184, 1437, 1442, 1441, 1445, 1438, 1393, 1446, 1450, 1451, 1431, 990, 1455, 1380, 1465, 1466, 1473, 1474, 1476, 1480, 1468, 1482, 1249",
          "body": "[bitcoin-core/secp256k1#1426]: ci/cirrus: Add native ARM64 jobs\r\n[bitcoin-core/secp256k1#1430]: README: remove CI badge\r\n[bitcoin-core/secp256k1#1184]: Signed-digit based ecmult_const algorithm\r\n[bitcoin-core/secp256k1#1437]: ci: Ignore internal errors of snapshot compilers\r\n[bitcoin-core/secp256k1#1442]: Return temporaries to being unsigned in secp256k1_fe_sqr_inner\r\n[bitcoin-core/secp256k1#1441]: asm: add .note.GNU-stack section for non-exec stack\r\n[bitcoin-core/secp256k1#1445]: bench: add --help option to bench_internal\r\n[bitcoin-core/secp256k1#1438]: correct assertion for secp256k1_fe_mul_inner\r\n[bitcoin-core/secp256k1#1393]: Implement new policy for VERIFY_CHECK and #ifdef VERIFY (issue #1381)\r\n[bitcoin-core/secp256k1#1446]: field: Remove x86_64 asm\r\n[bitcoin-core/secp256k1#1450]: Add group.h ge/gej equality functions\r\n[bitcoin-core/secp256k1#1451]: changelog: add entry for \"field: Remove x86_64 asm\"\r\n[bitcoin-core/secp256k1#1431]: Add CONTRIBUTING.md\r\n[bitcoin-core/secp256k1#990]: Add comment on length checks when parsing ECDSA sigs\r\n[bitcoin-core/secp256k1#1455]: doc: improve secp256k1_fe_set_b32_mod doc\r\n[bitcoin-core/secp256k1#1380]: Add ABI checking tool for release process\r\n[bitcoin-core/secp256k1#1465]: release: prepare for 0.4.1\r\n[bitcoin-core/secp256k1#1466]: release cleanup: bump version after 0.4.1\r\n[bitcoin-core/secp256k1#1473]: Fix typos\r\n[bitcoin-core/secp256k1#1474]: tests: restore scalar_mul test\r\n[bitcoin-core/secp256k1#1476]: include: make docs more consistent\r\n[bitcoin-core/secp256k1#1480]: Get rid of untested sizeof(secp256k1_ge_storage) == 64 code path\r\n[bitcoin-core/secp256k1#1468]: v0.4.1 release aftermath\r\n[bitcoin-core/secp256k1#1482]: build: Clean up handling of module dependencies\r\n[bitcoin-core/secp256k1#1249]: cmake: Add `SECP256K1_LATE_CFLAGS` configure option\r\n\r\nThis PR can be recreated with `./contrib/sync-upstream.sh -b master range e4af41c61b0bb55fc9614cb39df8e455715b4dd4`.\r\nTip: Use `git show --remerge-diff` to show the changes manually added to the merge commit.\r\n\r\n---\r\n\r\nThis also cherry-picks a few commits from https://github.com/jonasnick/secp256k1-zkp/commits/musig2-upstream/ and one https://github.com/bitcoin-core/secp256k1/pull/1479 .",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/pulls/285",
            "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/285",
            "diff_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/285.diff",
            "patch_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/285.patch"
          },
          "closed_at": "2024-01-23T19:07:17Z",
          "created_at": "2024-01-18T14:16:00Z",
          "updated_at": "2024-01-23T19:07:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sstone",
        "id": 1573866,
        "node_id": "MDQ6VXNlcjE1NzM4NjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1573866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sstone",
        "html_url": "https://github.com/sstone",
        "followers_url": "https://api.github.com/users/sstone/followers",
        "following_url": "https://api.github.com/users/sstone/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sstone/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sstone/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sstone/subscriptions",
        "organizations_url": "https://api.github.com/users/sstone/orgs",
        "repos_url": "https://api.github.com/users/sstone/repos",
        "events_url": "https://api.github.com/users/sstone/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sstone/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T15:18:10Z",
      "updated_at": "2024-01-18T15:18:10Z",
      "source": {
        "issue": {
          "id": 2039203928,
          "node_id": "PR_kwDOEGXVgs5h3rK6",
          "url": "https://api.github.com/repos/ACINQ/secp256k1-kmp/issues/93",
          "repository_url": "https://api.github.com/repos/ACINQ/secp256k1-kmp",
          "labels_url": "https://api.github.com/repos/ACINQ/secp256k1-kmp/issues/93/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/ACINQ/secp256k1-kmp/issues/93/comments",
          "events_url": "https://api.github.com/repos/ACINQ/secp256k1-kmp/issues/93/events",
          "html_url": "https://github.com/ACINQ/secp256k1-kmp/pull/93",
          "number": 93,
          "state": "closed",
          "state_reason": null,
          "title": "Add support for musig2",
          "body": "We use https://github.com/jonasnick/secp256k1/tree/musig2-module  instead of https://github.com/bitcoin-core/secp256k1, we'll switch back to `secp256k1` once the musig2 module has been included. \r\n\r\nThis branch is based on https://github.com/ACINQ/secp256k1-kmp/tree/snapshot/kotlin-1.9 because it's extremely tedious to work with kotlin's c-interop on kotlin 1.8 but changes could easily be backported if needed before we upgrade.  \r\n\r\nThis PR \"tracks\" https://github.com/bitcoin-core/secp256k1/pull/1479 and should be ready very soon once it has been merged.",
          "user": {
            "login": "sstone",
            "id": 1573866,
            "node_id": "MDQ6VXNlcjE1NzM4NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1573866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sstone",
            "html_url": "https://github.com/sstone",
            "followers_url": "https://api.github.com/users/sstone/followers",
            "following_url": "https://api.github.com/users/sstone/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sstone/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sstone/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sstone/subscriptions",
            "organizations_url": "https://api.github.com/users/sstone/orgs",
            "repos_url": "https://api.github.com/users/sstone/repos",
            "events_url": "https://api.github.com/users/sstone/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sstone/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/ACINQ/secp256k1-kmp/pulls/93",
            "html_url": "https://github.com/ACINQ/secp256k1-kmp/pull/93",
            "diff_url": "https://github.com/ACINQ/secp256k1-kmp/pull/93.diff",
            "patch_url": "https://github.com/ACINQ/secp256k1-kmp/pull/93.patch"
          },
          "closed_at": "2024-02-14T12:28:22Z",
          "created_at": "2023-12-13T08:29:28Z",
          "updated_at": "2024-02-14T12:28:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1830151789,
      "node_id": "PRR_kwDOAP4Jqs5tFeZt",
      "url": null,
      "actor": null,
      "commit_id": "70bb68536d27d44ed0b0ae76be6790ae38d77ef6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "needs rebase :)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#pullrequestreview-1830151789",
      "submitted_at": "2024-01-18T16:55:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "narcelio",
        "id": 139727,
        "node_id": "MDQ6VXNlcjEzOTcyNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/139727?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narcelio",
        "html_url": "https://github.com/narcelio",
        "followers_url": "https://api.github.com/users/narcelio/followers",
        "following_url": "https://api.github.com/users/narcelio/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narcelio/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narcelio/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narcelio/subscriptions",
        "organizations_url": "https://api.github.com/users/narcelio/orgs",
        "repos_url": "https://api.github.com/users/narcelio/repos",
        "events_url": "https://api.github.com/users/narcelio/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narcelio/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T03:09:14Z",
      "updated_at": "2024-01-23T03:09:14Z",
      "source": {
        "issue": {
          "id": 2034467611,
          "node_id": "I_kwDOKqpucs55Q4Mb",
          "url": "https://api.github.com/repos/plebemineira/bhbitdevs.org/issues/1",
          "repository_url": "https://api.github.com/repos/plebemineira/bhbitdevs.org",
          "labels_url": "https://api.github.com/repos/plebemineira/bhbitdevs.org/issues/1/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/plebemineira/bhbitdevs.org/issues/1/comments",
          "events_url": "https://api.github.com/repos/plebemineira/bhbitdevs.org/issues/1/events",
          "html_url": "https://github.com/plebemineira/bhbitdevs.org/issues/1",
          "number": 1,
          "state": "open",
          "state_reason": null,
          "title": "Topicos Janeiro",
          "body": null,
          "user": {
            "login": "plebhash",
            "id": 147345153,
            "node_id": "U_kgDOCMhPAQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/plebhash",
            "html_url": "https://github.com/plebhash",
            "followers_url": "https://api.github.com/users/plebhash/followers",
            "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
            "organizations_url": "https://api.github.com/users/plebhash/orgs",
            "repos_url": "https://api.github.com/users/plebhash/repos",
            "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/plebhash/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "created_at": "2023-12-10T17:46:32Z",
          "updated_at": "2024-01-23T21:35:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1906155742,
      "node_id": "IC_kwDOAP4Jqs5xnaDe",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1906155742",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T14:19:46Z",
      "updated_at": "2024-01-23T14:19:46Z",
      "author_association": "NONE",
      "body": "FWIW, we have JVM bindings on top of this branch in https://github.com/ACINQ/secp256k1-kmp/pull/93 and an implementation of swap-in-potentiam (musig2 key-path with alternative delayed script path) in https://github.com/ACINQ/bitcoin-kmp/pull/107 and everything is working fine, and the API is easy enough to use!",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#issuecomment-1906155742",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1479"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDI2ZGRlMjk1ZDBhZDEyYTAxMWZjNDA2MmFkNjQyODUyZjdmZjY4ZmE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/26dde295d0ad12a011fc4062ad642852f7ff68fa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/26dde295d0ad12a011fc4062ad642852f7ff68fa",
      "tree": {
        "sha": "a37dd5bdca9564018b9331bd374cf23f588399f3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a37dd5bdca9564018b9331bd374cf23f588399f3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a37dd5bdca9564018b9331bd374cf23f588399f3\nparent e4af41c61b0bb55fc9614cb39df8e455715b4dd4\nauthor Jonas Nick <jonasd.nick@gmail.com> 1704555450 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1706037183 +0000\n\nextrakeys: add secp256k1_pubkey_sort\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmWwD78ACgkQSGHb8mIS\nNgV2qw//Vt68mVdYmdz9RyomvDn3n4xdjC0tW3q7mjfCtRJxsrcRUqzQDF6ykYCs\n5o5rFP8DxC3HPoNELLtyQTeOw0THnRZ7rAT8aLBfMs6Atr9DGwrDvmU2fnSYkILo\n/1QK/TAa0mQieqHfhJpfbbPFLCFsPAoP83O0yok/I5LBtcZ9pqD+r02eXfJGtsVT\nLJt70XcltH9OYx15Pg/KgX5JkjgvchMRMo4HKeh3y4wVPzQN95mB9ZNVgmLEzTBY\noOWxl2j5eoId9Or+xHuCdeVHWeS8QbOfjHkoVm4f1sfAnvGCJ1f4sqTc+KZ/ibcC\nx8NEtrU5b2neL0uR8HliRzAq1kF31cdMVW594aV1g8WdN362lIsE7ASmvXUioXwL\n/TXDKFD51Z2OtMU8jx6/fSVAv+CTYIvPXZWZbMDxaPYzhOFJ+xZ88dNp2hu2Yxzm\ngAJumDsyFSpgiGLhAxGHSUPvOnsvCa/aGz8Oc0660lCb2htQ8O6eMXjlsRNOEXLe\nJbr7vGjHW6NleMITqkVEmtjlOwVbqBfJlxhgJKDqmhYruJJVTEAkddcnzGflwXAy\nBSoLeJ54HnMkp3UMkonblvBObPAyXLRHw0VDkSJnoJ8MWYNCNP7ynEfUJG4YKD+A\nkSzEBr5WWQ3PhUjjLexmiBMcugjF0Mnok42Jnu7Qi/pI90Dy4O4=\n=OVaz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e4af41c61b0bb55fc9614cb39df8e455715b4dd4",
          "sha": "e4af41c61b0bb55fc9614cb39df8e455715b4dd4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e4af41c61b0bb55fc9614cb39df8e455715b4dd4"
        }
      ],
      "message": "extrakeys: add secp256k1_pubkey_sort",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-23T19:13:03Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-06T15:37:30Z"
      },
      "sha": "26dde295d0ad12a011fc4062ad642852f7ff68fa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDBjN2NhMjczMmQ4ZmZiZDczNzYyYWY5MGM2MWM0YTQ4NTllNGFiYjE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0c7ca2732d8ffbd73762af90c61c4a4859e4abb1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0c7ca2732d8ffbd73762af90c61c4a4859e4abb1",
      "tree": {
        "sha": "f04fa7c3a521b544e7a3fb021d54437262961d8c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/f04fa7c3a521b544e7a3fb021d54437262961d8c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f04fa7c3a521b544e7a3fb021d54437262961d8c\nparent 26dde295d0ad12a011fc4062ad642852f7ff68fa\nauthor Jonas Nick <jonasd.nick@gmail.com> 1704556410 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1706037187 +0000\n\ngroup: add ge_to_bytes and ge_from_bytes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmWwD8MACgkQSGHb8mIS\nNgWfqxAAnhBlpuSUh0jdivbK2E1u3UjlAFeqQ6YNxp6nfiJ3mznwcZiwewnbWNgt\nfeqRBx8iF8G/IqXONe/WUqfsa5d895IW79fpgezurm+T7e/oJCv+sj1BfMKCZt4S\n2GQLy4Q3uvv00YD0NDUMnR9acqgzqA81UKjKq/nn/z9YqmqXGRVAlA/cjlwA31u1\nJgSISYRm66iSVP5y/vBCN+lcSwMo1rwQ/1bh4meoxRYuE0s6V2HRl2DBeofl6bMG\npksv5xLjPhrmwjoI7sAHxPCupqjgOjmS5Ro22XJSHowOvxlGIBoEqZEK1o3f6wqW\n/ajYKY4J27vf8NU6uQ581FJzcyWitzB7kbBhVcqt+xHpEL9Js0oPB7FoKepNg4x8\nyg3VtCznB132HBlGD2P5I120JLd++bu4uD20NFiTZ/+xtuiBpxEZbKzXMk2ySdns\nIiW9eDiEd9zXTqwPZjL7fa501+MhGEEq90KsUuWlXfaXR2cZkJ7ggcZ56SiYOXtY\nxeHJJgdCVB69ZhoS/6M3qt1BOggwwBzeq2hy0M83TVJdfJoOvuJuXkgv+0l5tstL\n2uuseQf8OSXPc0OQpM3Pe7r71to+sMmH/+G8wLscqOmMdpRZ1G8gjIK31kwFUQj+\ng4tS36DfiSjBfg3N4NZrsuNLSpCdD2WRgw2uDps77uQrOLwKKEc=\n=s6Er\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/26dde295d0ad12a011fc4062ad642852f7ff68fa",
          "sha": "26dde295d0ad12a011fc4062ad642852f7ff68fa",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/26dde295d0ad12a011fc4062ad642852f7ff68fa"
        }
      ],
      "message": "group: add ge_to_bytes and ge_from_bytes",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-23T19:13:07Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-06T15:53:30Z"
      },
      "sha": "0c7ca2732d8ffbd73762af90c61c4a4859e4abb1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDZlMTA0ZmJkYmIwZDg4OGQzNmQwOGY4MzZmZWE2ZTBlYTQ5NDFlYTI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6e104fbdbb0d888d36d08f836fea6e0ea4941ea2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6e104fbdbb0d888d36d08f836fea6e0ea4941ea2",
      "tree": {
        "sha": "6c47667f68eef51bda2b22f97b6352546f87883e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6c47667f68eef51bda2b22f97b6352546f87883e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6c47667f68eef51bda2b22f97b6352546f87883e\nparent 0c7ca2732d8ffbd73762af90c61c4a4859e4abb1\nauthor Jonas Nick <jonasd.nick@gmail.com> 1704569478 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1706037360 +0000\n\nAdd module \"musig\" that implements MuSig2 multi-signatures (BIP 327)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmWwEHIACgkQSGHb8mIS\nNgWrgw/6A8dveE0vXSxWqeVwTtjTnno8kgXo/H45AlFBimAq2NNnxjYGxigA2IaC\ngn+jCSfzPxe7zR+Cr9dqdr1XrHZgB+ddYPKUwXeK8IfeEHCuJBiSC3RjzktgjgUN\nqzh8Qm/Nv/UlzxLng07kF0hnCe3E0EYvi8uE7kuHS62TVLYSjdcyX8f1OTiQdrzd\n7V93ozC6OKkAOgtbXslPFfW9O5fD6wtKkNX1IBDb26H57fM7xVYabu9M+cdM0Yy7\nDrkUqYejyvCEmbOYopyd0/6HfR0a/Kzm9OiiVwxJS1ZnQr9EtwVAjlts+Bo452wy\na9z8BWhfth/IL48GcKtrKtvp/r7MOsVjSQ5KahUiBQZ7YQ6s0OHzVyPYJyhplAPu\nrL+nv2T8AYkxWtgngdcBRgj71jGJlOkPuMPY6xmaHj9IsLlosWOZCC0SbIIMTJUH\nEmCgZ3SN9j6RvHqaT4WwUvsx8h44eVnc6LAXHv9D0Wc9+i3thpDqAsbUmgT48GA6\nvnCvWB5SDSlMUl7VNZrW4H0D6kP2T/biAlODitfJPZOQjWtL6DHQw4AufITsfkjX\nban7KtJESWnN25/DxEb/Bvp/+lfmXUKUV2Vu+lUhQNf6fUZd8tG+NP4xWd/yY6js\nSGS4OL3crsQSFOJkZ10J3uazJpKkOZjS19zS5WkmE9k6INyYkPA=\n=so99\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0c7ca2732d8ffbd73762af90c61c4a4859e4abb1",
          "sha": "0c7ca2732d8ffbd73762af90c61c4a4859e4abb1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0c7ca2732d8ffbd73762af90c61c4a4859e4abb1"
        }
      ],
      "message": "Add module \"musig\" that implements MuSig2 multi-signatures (BIP 327)",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-23T19:16:00Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-06T19:31:18Z"
      },
      "sha": "6e104fbdbb0d888d36d08f836fea6e0ea4941ea2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRkNDkzMmI2N2I1NzNiMjM2NmU3MjllODY5OTE4YjE3OTY0ZjVmODM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dd4932b67b573b2366e729e869918b17964f5f83",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dd4932b67b573b2366e729e869918b17964f5f83",
      "tree": {
        "sha": "b19c7674e736b68ac4d631094295fb6a74962d77",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b19c7674e736b68ac4d631094295fb6a74962d77"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b19c7674e736b68ac4d631094295fb6a74962d77\nparent 6e104fbdbb0d888d36d08f836fea6e0ea4941ea2\nauthor Jonas Nick <jonasd.nick@gmail.com> 1704572247 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1706037668 +0000\n\nbuild: allow enabling the musig module in cmake\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmWwEaYACgkQSGHb8mIS\nNgUSiBAAkwSidTZYk7/uqMx0XxQ83rygIDOQNMU42kqyX6mwUxpkHAd1PrwXQrGV\nHQRzS5ZEUvtKeyOBo2GsjoLqzcEsOAyXLjrs0s+ZwFx7d4KUWHj3aZ12r0G6pnP6\nTn71RNZatGw024KJbiXrIXFdWp3l68TiqmsxUvtOPHGt3zOnD1jSRl1OtB+RpHZ0\n978E+yKt1BD8aMRafA6p+mtFFQFKiIGfxCmcFch+pBMQUz6ZvDR3sYBrK3EvoB+t\nLHjUGxzwgGGleb1YccJRbsOWel3ILqwc0SpFCf75ouOh3AAx5Kjq1hqzJEc7tULA\ne/memVDFkxZydcRGuBMJ0xb7GdQ7BT/TA1zmlHJ6oHvPb7Fa1FUEPGDrYxnLWI/a\nG2KOKL8Zz8cYaOagHosE9KuGsXqLNb061opLKZLMnaxGwXHHoL5oTy05BCoqZOXo\ne/FGrzNiCB4qjJGL69aQsueaH9O1Tb+wWB+FpkjtLh0zJtmxFZnCkwCy5qWbnK+e\nkR+6yJg1Ce55dmEiml9716oIceYIGW5ISJa7CVjrF4FCu9dJHuOPZS1B8oHJqbb0\nMQIG/7WMZ+RA+YaR8r9ZqOwrT5a96Tj/tPfjSPKXyHQ6IpFK207J2f3ExYwNps9J\noPhg9PfxXVIQCIVLKb9lrNL/sVUZsFvakerVytEg/HPu6alnoJ4=\n=QaPd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6e104fbdbb0d888d36d08f836fea6e0ea4941ea2",
          "sha": "6e104fbdbb0d888d36d08f836fea6e0ea4941ea2",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6e104fbdbb0d888d36d08f836fea6e0ea4941ea2"
        }
      ],
      "message": "build: allow enabling the musig module in cmake",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-23T19:21:08Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-01-06T20:17:27Z"
      },
      "sha": "dd4932b67b573b2366e729e869918b17964f5f83"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11575114955,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAAKx7jzL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11575114955",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T19:21:27Z"
    },
    {
      "event": "commented",
      "id": 1906775928,
      "node_id": "IC_kwDOAP4Jqs5xpxd4",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1906775928",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T19:23:30Z",
      "updated_at": "2024-01-23T19:23:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.\r\n\r\nThanks @t-bast, that's good to hear.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#issuecomment-1906775928",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1479"
    },
    {
      "event": "mentioned",
      "id": 11575138578,
      "node_id": "MEE_lADOAP4Jqs57T9BRzwAAAAKx7pkS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11575138578",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T19:23:30Z"
    },
    {
      "event": "subscribed",
      "id": 11575138592,
      "node_id": "SE_lADOAP4Jqs57T9BRzwAAAAKx7pkg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11575138592",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T19:23:31Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-30T16:57:19Z",
      "updated_at": "2024-01-30T16:57:19Z",
      "source": {
        "issue": {
          "id": 2054852916,
          "node_id": "PR_kwDOAP4Jqs5is1PD",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471",
          "number": 1471,
          "state": "open",
          "state_reason": null,
          "title": "Add silentpayments (BIP352) module",
          "body": "This PR adds a new Silent Payments ([BIP352](https://github.com/bitcoin/bips/pull/1458)) module to secp256k1. The following routines are provided ($a_i$ are input private keys, $A_i$ are input public keys, $b$ and $B$ denote recipient privkeys/pubkeys that would be encoded in silent payment addresses, $d$ and $P$ the keypair for the actual transaction taproot x-only output):\r\n\r\n| Side     | Function                        | Inputs                           | Outputs                                                                   |\r\n|----------|---------------------------------|----------------------------------|---------------------------------------------------------------------------|\r\n|  Sender  | `_create_private_tweak_data`    | $a_1...a_n$, $outpoint_L$        | $a_{sum} = (a_1 + a_2 + ... + a_n)$<br>$inputhash =  hash_I(outpoint_L \\|\\| (a_{sum} * G))$ |\r\n| Receiver | `_create_public_tweak_data`     | $A_1...A_n$, $outpoint_L$        | $A_{sum} = (A_1 + A_2 + ... + A_n)$<br>$inputhash = hash_I(outpoint_L \\|\\| A_{sum})$ |\r\n| Receiver | `_create_tweaked_pubkey`       |  $A_{sum}, inputhash$       |  $A_{tweaked} = inputhash * A_{sum}$\r\n|  Both  | `_create_shared_secret`    | $Pub$, $sec$<br>(Sender: $B_{scan}, a_{sum}$<br>Receiver: $A_{sum}, b_{scan}$<br>Lightclient: $A_{tweaked}, b_{scan}$)        | $SS = (inputhash * sec) * Pub$ (ECDH)                                      |\r\n| Receiver | `_create_label_tweak`           | $b_{scan}, m$                    | $labeltweak = hash_L(b_{scan} \\|\\| m)$<br>$label = labeltweak * G$                                    |\r\n| Receiver | `_create_address_spend_pubkey`  | $B_{spend}, label$          | $B_m = B_{spend} + label$                                        |\r\n| Sender   | `_sender_create_output_pubkey`         | $SS, B_m, k$ | $P_{xonly} = B_m + hash_S(SS \\|\\| k) * G$        |\r\n| Receiver | `_receiver_scan_output`               | $SS, B_m, k, tx_{output}$        | $t_k = hash_S(SS \\|\\| k)$<br>$P_{xonly} = B_m + t_k * G$  [not returned]<br>$directmatch = P_{xonly} == tx_{output}$<br>if $directmatch == 0$:<br>$\\quad label1 = tx_{output} - P$<br>$\\quad label2 = -tx_{output} - P$\r\n| Receiver | `_create_output_seckey`         | $b_{spend}, t_k, (labeltweak)$ | $d = (b_{spend} + labeltweak) + t_k$                        |\r\n\r\nwhere\r\n* $hash_I$ denotes a SHA256 tagged hash with tag \"BIP0352/Inputs\"\r\n* $hash_L$ denotes a SHA256 tagged hash with tag \"BIP0352/Label\"\r\n* $hash_S$ denotes a SHA256 tagged hash with tag \"BIP0352/SharedSecret\"\r\n\r\nFor ending up with output key material used for sending to / scanning for / spending from, both sides would follow the chain of `tweak_data -> shared_secret -> output key`. The public tweak data can be useful for faster scanning of output transactions by storing them in an index, see e.g. Bitcoin Core PR https://github.com/bitcoin/bitcoin/pull/28241. Private tweak data is arguably less useful, so in theory one could collapse the tweak data and shared secret creation functions into a single one, but IMHO it's nicer if the API is symmetric.\r\n\r\nAs discussed in https://github.com/bitcoin-core/secp256k1/issues/1427#issuecomment-1757675172, the approach of passing in two separate key pairs for taproot and non-taproot inputs is followed here. This may seem a bit confusing at first, but has the advantage that the caller doesn't have to deal with enforcing even y-parity for key material manually (e.g. negating private keys of taproot outputs if they would end up in an odd point), which seems error-prone.\r\n\r\nThe last commit contains the BIP352 test vectors, converted to C code with a Python script. An earlier version of the tests, directly written in Python (by calling in to the secp256k1 shared library using ctypes) can still be found here: https://github.com/theStack/secp256k1/tree/silentpayments-module-demo_old5",
          "user": {
            "login": "theStack",
            "id": 91535,
            "node_id": "MDQ6VXNlcjkxNTM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theStack",
            "html_url": "https://github.com/theStack",
            "followers_url": "https://api.github.com/users/theStack/followers",
            "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
            "organizations_url": "https://api.github.com/users/theStack/orgs",
            "repos_url": "https://api.github.com/users/theStack/repos",
            "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theStack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 4975353639,
              "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
              "name": "feature",
              "description": "",
              "color": "731E95",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 25,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1471.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1471.patch"
          },
          "created_at": "2023-12-23T17:39:21Z",
          "updated_at": "2024-03-08T07:58:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1920536530,
      "node_id": "IC_kwDOAP4Jqs5yeQ_S",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1920536530",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-01T05:21:26Z",
      "updated_at": "2024-02-13T04:19:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Attaching a visualization for the API flow.\r\n\r\n![musig2-api-flowchart](https://github.com/bitcoin-core/secp256k1/assets/56887198/9a7ce10a-4803-4ffe-aaf8-8832dc6ba108)\r\n\r\nEdit: The above visualization is incorrect. I will update it with the correct one soon.",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#issuecomment-1920536530",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1479"
    },
    {
      "event": "reviewed",
      "id": 1862362444,
      "node_id": "PRR_kwDOAP4Jqs5vAWVM",
      "url": null,
      "actor": null,
      "commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#pullrequestreview-1862362444",
      "submitted_at": "2024-02-05T10:27:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
    },
    {
      "event": "reviewed",
      "id": 1864630385,
      "node_id": "PRR_kwDOAP4Jqs5vJABx",
      "url": null,
      "actor": null,
      "commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#pullrequestreview-1864630385",
      "submitted_at": "2024-02-06T10:21:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-12T20:02:04Z",
      "updated_at": "2024-02-12T20:02:04Z",
      "source": {
        "issue": {
          "id": 2117855924,
          "node_id": "I_kwDOBGUq285-O-q0",
          "url": "https://api.github.com/repos/lightning/bolts/issues/1134",
          "repository_url": "https://api.github.com/repos/lightning/bolts",
          "labels_url": "https://api.github.com/repos/lightning/bolts/issues/1134/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/lightning/bolts/issues/1134/comments",
          "events_url": "https://api.github.com/repos/lightning/bolts/issues/1134/events",
          "html_url": "https://github.com/lightning/bolts/issues/1134",
          "number": 1134,
          "state": "closed",
          "state_reason": "completed",
          "title": " Lightning Specification Meeting 2024/02/12",
          "body": "The meeting will take place on Monday 2024/02/12 at 7pm UTC (5:30am Adelaide time) on Libera Chat IRC [#lightning-dev](irc://irc.libera.chat/lightning-dev). It is open to the public.\r\n\r\nA video link is available for higher bandwidth communication: https://meet.jit.si/Lightning-Spec-Meeting\r\n\r\n## Special topics\r\n\r\n- [x] v3 transactions usage in lightning: https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418\r\n- [x] DNS-based payment information resolution #1136 https://github.com/lightning/blips/pull/32\r\n\r\n## Recently Updated Proposals / Seeking Review\r\n\r\nThis section contains changes that have been opened or updated recently and need feedback from the meeting participants.\r\n\r\n- [x] Relax channel reserve requirements #1133\r\n- [x] Dual funding #851 \r\n- [x] Simplified mutual close #1096 \r\n- [x] Trampoline routing #829 and #836 (2024 is going to be the year of trampoline :tada:)\r\n- [x] Channel jamming #1043 #1071 https://github.com/lightning/blips/pull/27\r\n- [x] Liquidity ads #878\r\n- [ ] ~Quiescence #869~\r\n- [ ] ~Offers #798~\r\n- [x] Taproot #995\r\n- [x] Taproot gossip #1059\r\n- [ ] ~Attributable errors #1044~\r\n- [ ] ~Splicing #863 vs Dynamic Commitments #1117 vs Upgrade on reestablish #868~\r\n- [x] Peer storage backup #881 or #1110\r\n- [ ] ~Clarify `channel_reestablish` requirements #1049 or #1051~\r\n\r\n## Stale Proposals\r\n\r\nThis section contains pending changes that may not need feedback from the meeting participants, unless someone explicitly asks for it during the meeting. These changes are usually waiting for implementation work to happen to drive more feedback.\r\n\r\n- [ ] ~Inbound fees https://github.com/lightning/blips/pull/18 and https://github.com/lightning/blips/pull/22~\r\n\r\n## Waiting for interop\r\n\r\nThis section contains changes that have been conceptually ACKed and are waiting for at least two implementations to fully interoperate.\r\nThey most likely don't need to be covered during the meeting, unless someone asks for updates.\r\n\r\n- [ ] ~Spec clean-up #1092~\r\n- [ ] ~Don't force close until error is received after `channel_reestablish` #934~\r\n\r\n## Long Term Updates\r\n\r\nThis section contains long-term changes that need review, but require a substantial implementation effort.\r\n\r\n- [ ] ~Simplified commitment #867~\r\n- [ ] ~Hold htlcs before forwarding #989~\r\n- [ ] ~lnprototest (https://github.com/rustyrussell/lnprototest)~",
          "user": {
            "login": "t-bast",
            "id": 31281497,
            "node_id": "MDQ6VXNlcjMxMjgxNDk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/t-bast",
            "html_url": "https://github.com/t-bast",
            "followers_url": "https://api.github.com/users/t-bast/followers",
            "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
            "organizations_url": "https://api.github.com/users/t-bast/orgs",
            "repos_url": "https://api.github.com/users/t-bast/repos",
            "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/t-bast/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 1,
          "closed_at": "2024-02-21T14:40:25Z",
          "created_at": "2024-02-05T07:27:12Z",
          "updated_at": "2024-02-21T14:40:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1922290796,
      "node_id": "PRR_kwDOAP4Jqs5yk9Rs",
      "url": null,
      "actor": null,
      "commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#pullrequestreview-1922290796",
      "submitted_at": "2024-03-07T12:18:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDJhMGQ5MzQ1NDBlNWFjNzY5ZmEyZTEzYTRlZGQyMjg0MDYzNWM3ZTg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2a0d934540e5ac769fa2e13a4edd22840635c7e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2a0d934540e5ac769fa2e13a4edd22840635c7e8",
      "tree": {
        "sha": "f60f864edbc2cdd7ba3cfa8a7347e88291c9b397",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/f60f864edbc2cdd7ba3cfa8a7347e88291c9b397"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f60f864edbc2cdd7ba3cfa8a7347e88291c9b397\nparent dd4932b67b573b2366e729e869918b17964f5f83\nauthor Jonas Nick <jonasd.nick@gmail.com> 1709927446 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1709927653 +0000\n\nfixup! use optimized tagged hashes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmXrbOUACgkQSGHb8mIS\nNgVYmhAApJvhUilcddmHtwFq2P620Pi5g/yVK596hwImAmM6Tp3Ccpu3Tg8Bxvkk\njUU0c684J746t/NIMoX20p7NZbdDZDJS8dzJFYnSWOf9mwsGVtvDF4AYOTAGpHVS\nVxhQE8ru/XxF3RfW30X6YUBVDj5oRbt7A0yRlBFiJqsqckKB3B3f5rAKbflyI2X3\nIKgFD+bc+1nl4E5nkMDtw/eoBqWY7P4Bt7I9gudI6qmc0K/o1jOhGbnj9+kdQDu3\ni04avCbNabRQ4akE151Z0uU8a+45PbmDqm0eLZsF6axYzTFRypCJ73xqBfwOn+Pm\nT0NrTL14I5vJRWuwxw2AjW76D53tMnMyskMMV3sQK2ulKTtrEZ3ZNlp+dONaibBW\njrUaoWsaXrGx/Hj4tsfvJ/aEZMp31xNg5RR/mDRnedw4zYqMJJXckE+CwvyiI8rL\nu6yxNKTJpuc9qFPvQGlhz1LU+gjwNgpHk0G0hjYf1Me+1WNSFzFf5erqOOBCi4d5\nEw1rv2QjVlciI8gBDaYLzzxtgPuHjqXE9MeqXQUQpEkhmM9P8V4fzWO+2EmmYIbT\n4fOowTVIscvxQITt3rh25xCelfXVf9VLtlnquc0jIRYTbicjqUYEsOHfc5pq3tTb\nFsRwRQugSYFHmtIyBMWWNM3pXQxLmgRQs2WZv1B9KbFOv7qdOCc=\n=Worg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dd4932b67b573b2366e729e869918b17964f5f83",
          "sha": "dd4932b67b573b2366e729e869918b17964f5f83",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dd4932b67b573b2366e729e869918b17964f5f83"
        }
      ],
      "message": "fixup! use optimized tagged hashes",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-08T19:54:13Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-08T19:50:46Z"
      },
      "sha": "2a0d934540e5ac769fa2e13a4edd22840635c7e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQ2OGM1YzQxZTRhY2QzMzhlOTg0YWJmN2FmZDU2MDYyMWYwM2ZhYzY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/468c5c41e4acd338e984abf7afd560621f03fac6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/468c5c41e4acd338e984abf7afd560621f03fac6",
      "tree": {
        "sha": "8caffe4769f70b13de0714d241f74839eaabf6e4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/8caffe4769f70b13de0714d241f74839eaabf6e4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8caffe4769f70b13de0714d241f74839eaabf6e4\nparent 2a0d934540e5ac769fa2e13a4edd22840635c7e8\nauthor Jonas Nick <jonasd.nick@gmail.com> 1709923921 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1709927657 +0000\n\nfixup! move musig_ge_{to,from} to group.h\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmXrbOkACgkQSGHb8mIS\nNgWm7A/5ASJSHtMzzmdQ0BhDMFYHxbIjF/elHI+9iDROgZIfS4UPWsMQx+RQULEU\nvErVEyWC2Z+QdvlX7eM6ZR31mRQAFUu83VkoGYchgZwCwk5XHWugcaClg0uIAYVr\nHdAYAyusr4KMSDRXqwJPPWHq3T09OdlzhWN/pMmUWEG8A+k5v+dTMJdwSniLa0Kk\nbYd3V0ZCJERZAksB2zI/T9Y9c2nVr9MkVojCzuTKGVl6bXQW118qrz4U31e1dCeD\nSZ2K0jy9iMDxpmh91G/ZCjIV7+F8bRUCnmFUqGYPf3cT3+TJ9UNEhfqNaT/u/Lfd\nfPhn12rm4tG9zINWaB08pb9Vj/krIJB7xhHfpQmEE5NV+mhsUq0D5OV8c55nqlgF\nXVCvNF3bxr03FKJhree2b0k4hM574lTs9/DeO030GfYWXMGQxMh8KF3jJculcPhh\nzMAMTDI+3sy7WB9oArjKQQOOknh7wzKVk0dxxx51knG0OCQ7bel4lCSdyWvRB70Z\ntWHXaqfF4sjWUAxTpio/8/gZltz5Soi3f/i25ZJZiGLlDULKSQpaPxzfXuXKeayP\nwuNFaNJtfgnVlEUuMBx6twm2xxE3FPf/yWI71trjMWIWgRRm08/pYWYC4w76RJ3s\nvAb9+8IQuOZBGIrdJ7T52mjSzrxV33zIOs9aLCMe3vCzNotw4TI=\n=VcaZ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2a0d934540e5ac769fa2e13a4edd22840635c7e8",
          "sha": "2a0d934540e5ac769fa2e13a4edd22840635c7e8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2a0d934540e5ac769fa2e13a4edd22840635c7e8"
        }
      ],
      "message": "fixup! move musig_ge_{to,from} to group.h",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-08T19:54:17Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-08T18:52:01Z"
      },
      "sha": "468c5c41e4acd338e984abf7afd560621f03fac6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGQzYTg5NTJkNWUzODY0YTNjMTkwM2U1NzYxMGI4NzJiYjM0YjRkMDA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d3a8952d5e3864a3c1903e57610b872bb34b4d00",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d3a8952d5e3864a3c1903e57610b872bb34b4d00",
      "tree": {
        "sha": "c33a460f93a75ebff818163484c873368444b44f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c33a460f93a75ebff818163484c873368444b44f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c33a460f93a75ebff818163484c873368444b44f\nparent 468c5c41e4acd338e984abf7afd560621f03fac6\nauthor Jonas Nick <jonasd.nick@gmail.com> 1709916440 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1709927658 +0000\n\nfixup! move extrakeys to main\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmXrbOoACgkQSGHb8mIS\nNgUdnQ/+KzKoaep3Ge56pNPVCP/FQrqjBgGW4zrTdTZatG13BRcX2kZLzxweFF+f\nHvkvWrx0esHUFudPxuxZ4M/+Zv6vDPAgRpJt7+6rrFUdbakynjQYY3Qbj6A/onMu\nmqOKFOFJKxuVWMXBxt3E+KwgEXSg5ikSm+y2AECd/HqYM9jumPLQ8KX1/xUutSUR\nMLZywKUPkygDF3oTiMx/wDy3Oz17S4qBUsilstp7tMgvBW+CWoKT4RjATAKLkfXw\nR9g703NCntE8c382cIe0xgEeEF5okRIHNmfdXbCCzsbEJA1uUEZWpXk9IarqDdD6\nUd7Be8wkZW7XYlSOiXSKVpkLYgnEvRbv5DPdQadLRGp7KUQyhVBNfypaFXxjxKsi\nqsesUVM10Q4lb/fq7gs28fPnZOEc5zc3AYvZo0lDTWvT2kxgqC0FK1zEUHb5PRmm\nJv67o2SLY6JrMNSFG1ue3+6iefPjILvd/PCmZzeNt7/KQfaMk+u6dxVwiP6c9Jeu\n2pkZ9DPCxFDZQsShqjsnWBSYtVWqNR84Tz8aPN2+vbF3R6rFtcuj7ojo4qO3P97y\nRC1ce6Jv2qSFiY0uGkH6nBkvl0JckvQ3QL/8gdl/BuB4s1GHfHqDWbxTX39rHqq5\nufwp0qEdFuOmpQshh04ylmCDlPj6yTzE+Hl4iJXC8I6kPIOcEJ4=\n=BUfz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/468c5c41e4acd338e984abf7afd560621f03fac6",
          "sha": "468c5c41e4acd338e984abf7afd560621f03fac6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/468c5c41e4acd338e984abf7afd560621f03fac6"
        }
      ],
      "message": "fixup! move extrakeys to main",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-08T19:54:18Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-08T16:47:20Z"
      },
      "sha": "d3a8952d5e3864a3c1903e57610b872bb34b4d00"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRmZDk4NDlhMTkzYzEyYzJjMjBkZjA3ZmY3ZDQ2ODVhZGMyYTg3ODM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dfd9849a193c12c2c20df07ff7d4685adc2a8783",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dfd9849a193c12c2c20df07ff7d4685adc2a8783",
      "tree": {
        "sha": "16b80a85c22a62b486572b212ae3771f5275e06a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/16b80a85c22a62b486572b212ae3771f5275e06a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 16b80a85c22a62b486572b212ae3771f5275e06a\nparent d3a8952d5e3864a3c1903e57610b872bb34b4d00\nauthor Jonas Nick <jonasd.nick@gmail.com> 1709972975 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1709972975 +0000\n\nfixup! rename pubkey_sort -> ec_pubkey_sort\n\nfor consistency with other \"ec_pubkey\" functions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmXsHhAACgkQSGHb8mIS\nNgVBfQ//bzR75uoYZQ4QjLLTnN/5+8jOU2Y+sSUM87I/8SRUXueAVlnIPqbqq+vk\nZdb3kZ+4JlV56oG5zOWKBbFYkiuT3rKYngpCUNrP5eq7W+QdQAdZs2hOKbiHzeyJ\nTafOOpudGe+DBdx4WH24hR4SwE22QmDFU9uEzWtP47JPFIaDMT8JqaX+vdbA8dCJ\niaq9KrxZWLdWLVemW/NGmI/0j75wyv9svEfqqKvRB5w/zbtXgpr+zGEpXYFr1Qmx\nPRvOGGumIbXMN4fqCDhNhHi9LWGMWo3A9IJrYYdwLA+90sFGQJgK7nsYe7TXdS4k\nO/g68UfcbMCGDcAFBCwDORdNPYi72YBzJAcvbZHsyxGz4whlqJ4gBwSUwdFbPANI\nho5XtR72xWvPbKHU2LYfF+++uiXzVOK3hC0y3BLhw5vchWqMd+r0jFATNwtw51xo\nLsl1yOl53knNHejwmZPzreq3CJZh5T8jjylf4u5N9M8WnI+Tv+ynovUVyx2Dk3iA\nvtzXK0tBgAaIcFri9270DmdkPcW8T2jr9+rldyC+IfZsoN1fxHvH4MvvBxSAKvkg\nXSK9we6eXqXu+BHZrDJK1wlbSCJloW7eZXW0PYKMHKZuWjyqaOXR4yr88KOwCiMl\nEUpBvrXFpl+0ihqPnY8rrPKC3IfZ0wB7/RSg4BlHUg9gbBmm3zA=\n=bnPW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d3a8952d5e3864a3c1903e57610b872bb34b4d00",
          "sha": "d3a8952d5e3864a3c1903e57610b872bb34b4d00",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d3a8952d5e3864a3c1903e57610b872bb34b4d00"
        }
      ],
      "message": "fixup! rename pubkey_sort -> ec_pubkey_sort\n\nfor consistency with other \"ec_pubkey\" functions",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-09T08:29:35Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-09T08:29:35Z"
      },
      "sha": "dfd9849a193c12c2c20df07ff7d4685adc2a8783"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQ2MTk3MDY4MmY1NmE4ZTE1ZmM3MWVjYWIxOGQ0NTM3ZTUwNDQxZmM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/461970682f56a8e15fc71ecab18d4537e50441fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/461970682f56a8e15fc71ecab18d4537e50441fc",
      "tree": {
        "sha": "63d8567e5159e955925619d9743fa806d1806f1b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/63d8567e5159e955925619d9743fa806d1806f1b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 63d8567e5159e955925619d9743fa806d1806f1b\nparent dfd9849a193c12c2c20df07ff7d4685adc2a8783\nauthor Jonas Nick <jonasd.nick@gmail.com> 1710080543 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1710082651 +0000\n\nfixup! split counter mode from musig_nonce_gen\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmXtylsACgkQSGHb8mIS\nNgWMzA/+LD/GT8M8eYmkohdY/WtETAln/FAw/LDjvOxyc/8CzzrtsPX9bviijHTe\nFR8jRqw3LubV5SDQF1Ol7B7Qfe0WU7/yKziHZWEGkieqiCZEHptSpx52Sz0EopsO\nJ5r3l8+L23KJJOqYBysvvXRYv38S4U+gWaijEfFPQiTMWg/S2RTDY2033FYKD99q\neA193598XGLXJ/xsOoL8hdFvD9MNfDNZiOlKnRwemcw7zRljP4B/obYmfNdL4oZ4\nNZhD9967UwkG4FwkKlISUi/URzvenBmB4IXJt35J+9OwnIQTrcx2p00kCpydeNHF\n3KZZiq4KxJ01vhXMnhI3eDkFHlKvzpgZDLAD2XcIMvqRgA7LgxgCHcvyzl8CQN8V\nsPuaBB5BMTaIyRU6gV3EQRHXGZk3LJDWnfFaIihXCgY5cjginVJiD6xwou3YnbY/\nYFdLBZ6KsVOR8kZuerAVDoCb2+UpegZeFgzQanhq4DLDDsl5NCxpbbK1Kg0N3hwx\noPEsa3FndjqrlOD6JIJgudbeweA/wYD2XxSz3A/wSwLHqoQWMXDJaL+V+o/YYriI\n2B2B9R7juZoL5mRJNb6AXTvb0L8h5s+afA9UGW48ojiUIhaeNqxOuIFK6EU6t5Ep\ny0FiGBXQDphZMXMEB8O+4RCm6HSSPRFse+kqpRp3Sw0eQRXHzUI=\n=rWF9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dfd9849a193c12c2c20df07ff7d4685adc2a8783",
          "sha": "dfd9849a193c12c2c20df07ff7d4685adc2a8783",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dfd9849a193c12c2c20df07ff7d4685adc2a8783"
        }
      ],
      "message": "fixup! split counter mode from musig_nonce_gen",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-10T14:57:31Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-03-10T14:22:23Z"
      },
      "sha": "461970682f56a8e15fc71ecab18d4537e50441fc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12065677534,
      "node_id": "HRFPE_lADOAP4Jqs57T9BRzwAAAALPK6De",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12065677534",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-10T14:57:47Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1443989873",
      "pull_request_review_id": 1807791233,
      "id": 1443989873,
      "node_id": "PRRC_kwDOAP4Jqs5WEYlx",
      "diff_hunk": "@@ -240,6 +240,22 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_keypair_xonly_tweak_add\n     const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Compare two public keys using lexicographic order of their compressed\n+ *  serialization.\n+ *\n+ *  Returns: <0 if the first public key is less than the second\n+ *           >0 if the first public key is greater than the second\n+ *           0 if the two public keys are equal\n+ *  Args: ctx:      a secp256k1 context object.\n+ *  In:   pubkey1:  first public key to compare\n+ *        pubkey2:  second public key to compare\n+ */\n+SECP256K1_API int secp256k1_pubkey_cmp(\n+    const secp256k1_context *ctx,\n+    const secp256k1_pubkey *pk1,\n+    const secp256k1_pubkey *pk2\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);",
      "path": "include/secp256k1_extrakeys.h",
      "position": null,
      "original_position": 18,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "bf1ebb890f69a2e60b51a397959146739bc284ed",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remind me what the difference was to the function `secp256k1_ec_pubkey_cmp`. Is there no difference and we simply overlooked this? I suspect what happened is this:\r\n - When we had x-only keys as input to key agg, we had to add a comparison function for x-only keys (to extrakeys module)\r\n - Then we switched to compressed keys as input, and we changed the comparison function to also take compressed keys, not noticing that there's one already in `secp256k1.h` ",
      "created_at": "2024-01-07T11:46:49Z",
      "updated_at": "2024-01-07T11:46:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1443989873",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1443989873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 243,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1443990557",
      "pull_request_review_id": 1807791809,
      "id": 1443990557,
      "node_id": "PRRC_kwDOAP4Jqs5WEYwd",
      "diff_hunk": "@@ -247,8 +247,15 @@ static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge,\n     } else {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 1,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "04aa4e76996ad24282df58e1486508f9a51692b5",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we should simply get rid of this branch entirely, see https://github.com/bitcoin-core/secp256k1/issues/1352. I can work on a PR next week.",
      "created_at": "2024-01-07T11:51:30Z",
      "updated_at": "2024-01-07T11:51:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1443990557",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1443990557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1444010274",
      "pull_request_review_id": 1807811494,
      "id": 1444010274,
      "node_id": "PRRC_kwDOAP4Jqs5WEdki",
      "diff_hunk": "@@ -240,6 +240,22 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_keypair_xonly_tweak_add\n     const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Compare two public keys using lexicographic order of their compressed\n+ *  serialization.\n+ *\n+ *  Returns: <0 if the first public key is less than the second\n+ *           >0 if the first public key is greater than the second\n+ *           0 if the two public keys are equal\n+ *  Args: ctx:      a secp256k1 context object.\n+ *  In:   pubkey1:  first public key to compare\n+ *        pubkey2:  second public key to compare\n+ */\n+SECP256K1_API int secp256k1_pubkey_cmp(\n+    const secp256k1_context *ctx,\n+    const secp256k1_pubkey *pk1,\n+    const secp256k1_pubkey *pk2\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);",
      "path": "include/secp256k1_extrakeys.h",
      "position": null,
      "original_position": 18,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "bf1ebb890f69a2e60b51a397959146739bc284ed",
      "in_reply_to_id": 1443989873,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is no difference. I removed the commit.",
      "created_at": "2024-01-07T13:53:51Z",
      "updated_at": "2024-01-07T13:53:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1444010274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1444010274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 243,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1444827194",
      "pull_request_review_id": 1809353957,
      "id": 1444827194,
      "node_id": "PRRC_kwDOAP4Jqs5WHlA6",
      "diff_hunk": "@@ -247,8 +247,15 @@ static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge,\n     } else {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 1,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "04aa4e76996ad24282df58e1486508f9a51692b5",
      "in_reply_to_id": 1443990557,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See #1480 ",
      "created_at": "2024-01-08T15:26:17Z",
      "updated_at": "2024-01-08T15:26:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1444827194",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1444827194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1444877973",
      "pull_request_review_id": 1809438784,
      "id": 1444877973,
      "node_id": "PRRC_kwDOAP4Jqs5WHxaV",
      "diff_hunk": "@@ -247,8 +247,15 @@ static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge,\n     } else {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 1,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "04aa4e76996ad24282df58e1486508f9a51692b5",
      "in_reply_to_id": 1443990557,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes thanks! I considered doing this but didn't want to make this PR dependent on a separate issue.",
      "created_at": "2024-01-08T15:50:28Z",
      "updated_at": "2024-01-08T15:50:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1444877973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1444877973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1448907322",
      "pull_request_review_id": 1815652691,
      "id": 1448907322,
      "node_id": "PRRC_kwDOAP4Jqs5WXJI6",
      "diff_hunk": "@@ -247,8 +247,15 @@ static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge,\n     } else {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 1,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "04aa4e76996ad24282df58e1486508f9a51692b5",
      "in_reply_to_id": 1443990557,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Got rid of this by rebasing.",
      "created_at": "2024-01-11T13:59:08Z",
      "updated_at": "2024-01-11T13:59:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1448907322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1448907322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1457727273",
      "pull_request_review_id": 1830151789,
      "id": 1457727273,
      "node_id": "PRRC_kwDOAP4Jqs5W4ycp",
      "diff_hunk": "@@ -240,6 +240,21 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_keypair_xonly_tweak_add\n     const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Sort public keys using lexicographic order of their compressed\n+ *  serialization.\n+ *\n+ *  Returns: 0 if the arguments are invalid. 1 otherwise.\n+ *\n+ *  Args:     ctx: pointer to a context object\n+ *  In:   pubkeys: array of pointers to pubkeys to sort\n+ *      n_pubkeys: number of elements in the pubkeys array\n+ */\n+SECP256K1_API int secp256k1_pubkey_sort(\n+    const secp256k1_context *ctx,\n+    const secp256k1_pubkey **pubkeys,\n+    size_t n_pubkeys\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+",
      "path": "include/secp256k1_extrakeys.h",
      "position": null,
      "original_position": 18,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "e1ba262f16fd821ec48e8570d4d2990111ec0ef3",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this function should be in the main module because it works on `secp256k1_pubkey` objects, and the comparison function is also there. (Extrakeys would make sense for x-only, I guess.) I don't think code size is an issue, the heap sort implementation should be tiny.",
      "created_at": "2024-01-18T16:50:28Z",
      "updated_at": "2024-01-18T16:55:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1457727273",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1457727273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 243,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1457733653",
      "pull_request_review_id": 1830151789,
      "id": 1457733653,
      "node_id": "PRRC_kwDOAP4Jqs5W40AV",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+/***********************************************************************\n+ * Copyright (c) 2021 Jonas Nick                                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_MUSIG_KEYAGG_H\n+#define SECP256K1_MODULE_MUSIG_KEYAGG_H\n+\n+#include \"../../../include/secp256k1.h\"\n+#include \"../../../include/secp256k1_musig.h\"\n+\n+#include \"../../field.h\"\n+#include \"../../group.h\"\n+#include \"../../scalar.h\"\n+\n+typedef struct {\n+    secp256k1_ge pk;\n+    /* If there is no \"second\" public key, second_pk is set to the point at\n+     * infinity */\n+    secp256k1_ge second_pk;\n+    unsigned char pk_hash[32];\n+    /* tweak is identical to value tacc[v] in the specification. */\n+    secp256k1_scalar tweak;\n+    /* parity_acc corresponds to gacc[v] in the spec. If gacc[v] is -1,\n+     * parity_acc is 1. Otherwise, parity_acc is 0. */\n+    int parity_acc;\n+} secp256k1_keyagg_cache_internal;\n+\n+/* musig_ge_to_bytes_ext and musig_ge_from_bytes_ext are identical to ge_save and ge_load\n+ * except that they allow saving and loading the point at infinity */\n+static void secp256k1_musig_ge_to_bytes_ext(unsigned char *data, secp256k1_ge *ge);\n+\n+static void secp256k1_musig_ge_from_bytes_ext(secp256k1_ge *ge, const unsigned char *data);",
      "path": "src/modules/musig/keyagg.h",
      "position": null,
      "original_position": 34,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "fce0857aa09a1af71bb3f8a45379fbc3c7768db1",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think these should be in `group.h`, even though they'll be used only by the musig module. Infinity can be helpful in other contexts, and conceptually it's a group function.\r\n\r\nAnyway, the comment needs to be updated `ge_save` and `ge_load` have been renamed. ",
      "created_at": "2024-01-18T16:55:17Z",
      "updated_at": "2024-01-18T16:55:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1457733653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1457733653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1477961061",
      "pull_request_review_id": 1862362444,
      "id": 1477961061,
      "node_id": "PRRC_kwDOAP4Jqs5YF-Vl",
      "diff_hunk": "@@ -0,0 +1,214 @@\n+/*************************************************************************\n+ * Written in 2018 by Jonas Nick                                         *\n+ * To the extent possible under law, the author(s) have dedicated all    *\n+ * copyright and related and neighboring rights to the software in this  *\n+ * file to the public domain worldwide. This software is distributed     *\n+ * without any warranty. For the CC0 Public Domain Dedication, see       *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/** This file demonstrates how to use the MuSig module to create a\n+ *  3-of-3 multisignature. Additionally, see the documentation in\n+ *  include/secp256k1_musig.h and src/modules/musig/musig.md.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_schnorrsig.h>\n+#include <secp256k1_musig.h>\n+\n+#include \"examples_util.h\"\n+\n+struct signer_secrets {\n+    secp256k1_keypair keypair;\n+    secp256k1_musig_secnonce secnonce;\n+};\n+\n+struct signer {\n+    secp256k1_pubkey pubkey;\n+    secp256k1_musig_pubnonce pubnonce;\n+    secp256k1_musig_partial_sig partial_sig;\n+};\n+\n+ /* Number of public keys involved in creating the aggregate signature */\n+#define N_SIGNERS 3\n+/* Create a key pair, store it in signer_secrets->keypair and signer->pubkey */\n+static int create_keypair(const secp256k1_context* ctx, struct signer_secrets *signer_secrets, struct signer *signer) {\n+    unsigned char seckey[32];\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_keypair_create(ctx, &signer_secrets->keypair, seckey)) {\n+            break;\n+        }\n+    }\n+    if (!secp256k1_keypair_pub(ctx, &signer->pubkey, &signer_secrets->keypair)) {\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+/* Tweak the pubkey corresponding to the provided keyagg cache, update the cache\n+ * and return the tweaked aggregate pk. */\n+static int tweak(const secp256k1_context* ctx, secp256k1_xonly_pubkey *agg_pk, secp256k1_musig_keyagg_cache *cache) {\n+    secp256k1_pubkey output_pk;\n+    unsigned char plain_tweak[32] = \"this could be a BIP32 tweak....\";\n+    unsigned char xonly_tweak[32] = \"this could be a taproot tweak..\";\n+\n+\n+    /* Plain tweaking which, for example, allows deriving multiple child\n+     * public keys from a single aggregate key using BIP32 */\n+    if (!secp256k1_musig_pubkey_ec_tweak_add(ctx, NULL, cache, plain_tweak)) {\n+        return 0;\n+    }\n+    /* Note that we did not provided an output_pk argument, because the\n+     * resulting pk is also saved in the cache and so if one is just interested\n+     * in signing the output_pk argument is unnecessary. On the other hand, if\n+     * one is not interested in signing, the same output_pk can be obtained by\n+     * calling `secp256k1_musig_pubkey_get` right after key aggregation to get\n+     * the full pubkey and then call `secp256k1_ec_pubkey_tweak_add`. */\n+\n+    /* Xonly tweaking which, for example, allows creating taproot commitments */\n+    if (!secp256k1_musig_pubkey_xonly_tweak_add(ctx, &output_pk, cache, xonly_tweak)) {\n+        return 0;\n+    }\n+    /* Note that if we wouldn't care about signing, we can arrive at the same\n+     * output_pk by providing the untweaked public key to\n+     * `secp256k1_xonly_pubkey_tweak_add` (after converting it to an xonly pubkey\n+     * if necessary with `secp256k1_xonly_pubkey_from_pubkey`). */\n+\n+    /* Now we convert the output_pk to an xonly pubkey to allow to later verify\n+     * the Schnorr signature against it. For this purpose we can ignore the\n+     * `pk_parity` output argument; we would need it if we would have to open\n+     * the taproot commitment. */\n+    if (!secp256k1_xonly_pubkey_from_pubkey(ctx, agg_pk, NULL, &output_pk)) {\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and store the result in sig */\n+static int sign(const secp256k1_context* ctx, struct signer_secrets *signer_secrets, struct signer *signer, const secp256k1_musig_keyagg_cache *cache, const unsigned char *msg32, unsigned char *sig64) {\n+    int i;\n+    const secp256k1_musig_pubnonce *pubnonces[N_SIGNERS];\n+    const secp256k1_musig_partial_sig *partial_sigs[N_SIGNERS];\n+    /* The same for all signers */\n+    secp256k1_musig_session session;\n+\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        unsigned char seckey[32];\n+        unsigned char session_id[32];\n+        /* Create random session ID. It is absolutely necessary that the session ID\n+         * is unique for every call of secp256k1_musig_nonce_gen. Otherwise\n+         * it's trivial for an attacker to extract the secret key! */\n+        if (!fill_random(session_id, sizeof(session_id))) {\n+            return 0;\n+        }\n+        if (!secp256k1_keypair_sec(ctx, seckey, &signer_secrets[i].keypair)) {\n+            return 0;\n+        }\n+        /* Initialize session and create secret nonce for signing and public\n+         * nonce to send to the other signers. */\n+        if (!secp256k1_musig_nonce_gen(ctx, &signer_secrets[i].secnonce, &signer[i].pubnonce, session_id, seckey, &signer[i].pubkey, msg32, NULL, NULL)) {\n+            return 0;\n+        }\n+        pubnonces[i] = &signer[i].pubnonce;\n+    }\n+    /* Communication round 1: A production system would exchange public nonces\n+     * here before moving on. */\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        secp256k1_musig_aggnonce agg_pubnonce;\n+\n+        /* Create aggregate nonce and initialize the session */\n+        if (!secp256k1_musig_nonce_agg(ctx, &agg_pubnonce, pubnonces, N_SIGNERS)) {\n+            return 0;\n+        }\n+        if (!secp256k1_musig_nonce_process(ctx, &session, &agg_pubnonce, msg32, cache)) {\n+            return 0;\n+        }\n+        /* partial_sign will clear the secnonce by setting it to 0. That's because\n+         * you must _never_ reuse the secnonce (or use the same session_id to\n+         * create a secnonce). If you do, you effectively reuse the nonce and\n+         * leak the secret key. */\n+        if (!secp256k1_musig_partial_sign(ctx, &signer[i].partial_sig, &signer_secrets[i].secnonce, &signer_secrets[i].keypair, cache, &session)) {\n+            return 0;\n+        }\n+        partial_sigs[i] = &signer[i].partial_sig;\n+    }\n+    /* Communication round 2: A production system would exchange\n+     * partial signatures here before moving on. */\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        /* To check whether signing was successful, it suffices to either verify\n+         * the aggregate signature with the aggregate public key using\n+         * secp256k1_schnorrsig_verify, or verify all partial signatures of all\n+         * signers individually. Verifying the aggregate signature is cheaper but\n+         * verifying the individual partial signatures has the advantage that it\n+         * can be used to determine which of the partial signatures are invalid\n+         * (if any), i.e., which of the partial signatures cause the aggregate\n+         * signature to be invalid and thus the protocol run to fail. It's also\n+         * fine to first verify the aggregate sig, and only verify the individual\n+         * sigs if it does not work.\n+         */\n+        if (!secp256k1_musig_partial_sig_verify(ctx, &signer[i].partial_sig, &signer[i].pubnonce, &signer[i].pubkey, cache, &session)) {\n+            return 0;\n+        }\n+    }\n+    return secp256k1_musig_partial_sig_agg(ctx, sig64, &session, partial_sigs, N_SIGNERS);\n+}\n+\n+ int main(void) {\n+    secp256k1_context* ctx;\n+    int i;\n+    struct signer_secrets signer_secrets[N_SIGNERS];\n+    struct signer signers[N_SIGNERS];\n+    const secp256k1_pubkey *pubkeys_ptr[N_SIGNERS];\n+    secp256k1_xonly_pubkey agg_pk;\n+    secp256k1_musig_keyagg_cache cache;\n+    unsigned char msg[32] = \"this_could_be_the_hash_of_a_msg!\";\n+    unsigned char sig[64];\n+\n+    /* Create a secp256k1 context */\n+    ctx = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    printf(\"Creating key pairs......\");\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        if (!create_keypair(ctx, &signer_secrets[i], &signers[i])) {\n+            printf(\"FAILED\\n\");\n+            return 1;\n+        }\n+        pubkeys_ptr[i] = &signers[i].pubkey;\n+    }\n+    printf(\"ok\\n\");\n+    printf(\"Combining public keys...\");",
      "path": "examples/musig.c",
      "position": 186,
      "original_position": 186,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "in_reply_to_id": null,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we recommend that users sort their pubkeys before aggregating them? The `musig_pubkey_agg` API documentation simply says the user \"can\" do it.\r\n\r\nIf we recommend the sorting step, including it in the example file would be helpful.",
      "created_at": "2024-02-05T10:23:29Z",
      "updated_at": "2024-02-05T10:29:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1477961061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1477961061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1477997628",
      "pull_request_review_id": 1862418731,
      "id": 1477997628,
      "node_id": "PRRC_kwDOAP4Jqs5YGHQ8",
      "diff_hunk": "@@ -0,0 +1,214 @@\n+/*************************************************************************\n+ * Written in 2018 by Jonas Nick                                         *\n+ * To the extent possible under law, the author(s) have dedicated all    *\n+ * copyright and related and neighboring rights to the software in this  *\n+ * file to the public domain worldwide. This software is distributed     *\n+ * without any warranty. For the CC0 Public Domain Dedication, see       *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/** This file demonstrates how to use the MuSig module to create a\n+ *  3-of-3 multisignature. Additionally, see the documentation in\n+ *  include/secp256k1_musig.h and src/modules/musig/musig.md.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_schnorrsig.h>\n+#include <secp256k1_musig.h>\n+\n+#include \"examples_util.h\"\n+\n+struct signer_secrets {\n+    secp256k1_keypair keypair;\n+    secp256k1_musig_secnonce secnonce;\n+};\n+\n+struct signer {\n+    secp256k1_pubkey pubkey;\n+    secp256k1_musig_pubnonce pubnonce;\n+    secp256k1_musig_partial_sig partial_sig;\n+};\n+\n+ /* Number of public keys involved in creating the aggregate signature */\n+#define N_SIGNERS 3\n+/* Create a key pair, store it in signer_secrets->keypair and signer->pubkey */\n+static int create_keypair(const secp256k1_context* ctx, struct signer_secrets *signer_secrets, struct signer *signer) {\n+    unsigned char seckey[32];\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_keypair_create(ctx, &signer_secrets->keypair, seckey)) {\n+            break;\n+        }\n+    }\n+    if (!secp256k1_keypair_pub(ctx, &signer->pubkey, &signer_secrets->keypair)) {\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+/* Tweak the pubkey corresponding to the provided keyagg cache, update the cache\n+ * and return the tweaked aggregate pk. */\n+static int tweak(const secp256k1_context* ctx, secp256k1_xonly_pubkey *agg_pk, secp256k1_musig_keyagg_cache *cache) {\n+    secp256k1_pubkey output_pk;\n+    unsigned char plain_tweak[32] = \"this could be a BIP32 tweak....\";\n+    unsigned char xonly_tweak[32] = \"this could be a taproot tweak..\";\n+\n+\n+    /* Plain tweaking which, for example, allows deriving multiple child\n+     * public keys from a single aggregate key using BIP32 */\n+    if (!secp256k1_musig_pubkey_ec_tweak_add(ctx, NULL, cache, plain_tweak)) {\n+        return 0;\n+    }\n+    /* Note that we did not provided an output_pk argument, because the\n+     * resulting pk is also saved in the cache and so if one is just interested\n+     * in signing the output_pk argument is unnecessary. On the other hand, if\n+     * one is not interested in signing, the same output_pk can be obtained by\n+     * calling `secp256k1_musig_pubkey_get` right after key aggregation to get\n+     * the full pubkey and then call `secp256k1_ec_pubkey_tweak_add`. */\n+\n+    /* Xonly tweaking which, for example, allows creating taproot commitments */\n+    if (!secp256k1_musig_pubkey_xonly_tweak_add(ctx, &output_pk, cache, xonly_tweak)) {\n+        return 0;\n+    }\n+    /* Note that if we wouldn't care about signing, we can arrive at the same\n+     * output_pk by providing the untweaked public key to\n+     * `secp256k1_xonly_pubkey_tweak_add` (after converting it to an xonly pubkey\n+     * if necessary with `secp256k1_xonly_pubkey_from_pubkey`). */\n+\n+    /* Now we convert the output_pk to an xonly pubkey to allow to later verify\n+     * the Schnorr signature against it. For this purpose we can ignore the\n+     * `pk_parity` output argument; we would need it if we would have to open\n+     * the taproot commitment. */\n+    if (!secp256k1_xonly_pubkey_from_pubkey(ctx, agg_pk, NULL, &output_pk)) {\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and store the result in sig */\n+static int sign(const secp256k1_context* ctx, struct signer_secrets *signer_secrets, struct signer *signer, const secp256k1_musig_keyagg_cache *cache, const unsigned char *msg32, unsigned char *sig64) {\n+    int i;\n+    const secp256k1_musig_pubnonce *pubnonces[N_SIGNERS];\n+    const secp256k1_musig_partial_sig *partial_sigs[N_SIGNERS];\n+    /* The same for all signers */\n+    secp256k1_musig_session session;\n+\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        unsigned char seckey[32];\n+        unsigned char session_id[32];\n+        /* Create random session ID. It is absolutely necessary that the session ID\n+         * is unique for every call of secp256k1_musig_nonce_gen. Otherwise\n+         * it's trivial for an attacker to extract the secret key! */\n+        if (!fill_random(session_id, sizeof(session_id))) {\n+            return 0;\n+        }\n+        if (!secp256k1_keypair_sec(ctx, seckey, &signer_secrets[i].keypair)) {\n+            return 0;\n+        }\n+        /* Initialize session and create secret nonce for signing and public\n+         * nonce to send to the other signers. */\n+        if (!secp256k1_musig_nonce_gen(ctx, &signer_secrets[i].secnonce, &signer[i].pubnonce, session_id, seckey, &signer[i].pubkey, msg32, NULL, NULL)) {\n+            return 0;\n+        }\n+        pubnonces[i] = &signer[i].pubnonce;\n+    }\n+    /* Communication round 1: A production system would exchange public nonces\n+     * here before moving on. */\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        secp256k1_musig_aggnonce agg_pubnonce;\n+\n+        /* Create aggregate nonce and initialize the session */\n+        if (!secp256k1_musig_nonce_agg(ctx, &agg_pubnonce, pubnonces, N_SIGNERS)) {\n+            return 0;\n+        }\n+        if (!secp256k1_musig_nonce_process(ctx, &session, &agg_pubnonce, msg32, cache)) {\n+            return 0;\n+        }\n+        /* partial_sign will clear the secnonce by setting it to 0. That's because\n+         * you must _never_ reuse the secnonce (or use the same session_id to\n+         * create a secnonce). If you do, you effectively reuse the nonce and\n+         * leak the secret key. */\n+        if (!secp256k1_musig_partial_sign(ctx, &signer[i].partial_sig, &signer_secrets[i].secnonce, &signer_secrets[i].keypair, cache, &session)) {\n+            return 0;\n+        }\n+        partial_sigs[i] = &signer[i].partial_sig;\n+    }\n+    /* Communication round 2: A production system would exchange\n+     * partial signatures here before moving on. */\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        /* To check whether signing was successful, it suffices to either verify\n+         * the aggregate signature with the aggregate public key using\n+         * secp256k1_schnorrsig_verify, or verify all partial signatures of all\n+         * signers individually. Verifying the aggregate signature is cheaper but\n+         * verifying the individual partial signatures has the advantage that it\n+         * can be used to determine which of the partial signatures are invalid\n+         * (if any), i.e., which of the partial signatures cause the aggregate\n+         * signature to be invalid and thus the protocol run to fail. It's also\n+         * fine to first verify the aggregate sig, and only verify the individual\n+         * sigs if it does not work.\n+         */\n+        if (!secp256k1_musig_partial_sig_verify(ctx, &signer[i].partial_sig, &signer[i].pubnonce, &signer[i].pubkey, cache, &session)) {\n+            return 0;\n+        }\n+    }\n+    return secp256k1_musig_partial_sig_agg(ctx, sig64, &session, partial_sigs, N_SIGNERS);\n+}\n+\n+ int main(void) {\n+    secp256k1_context* ctx;\n+    int i;\n+    struct signer_secrets signer_secrets[N_SIGNERS];\n+    struct signer signers[N_SIGNERS];\n+    const secp256k1_pubkey *pubkeys_ptr[N_SIGNERS];\n+    secp256k1_xonly_pubkey agg_pk;\n+    secp256k1_musig_keyagg_cache cache;\n+    unsigned char msg[32] = \"this_could_be_the_hash_of_a_msg!\";\n+    unsigned char sig[64];\n+\n+    /* Create a secp256k1 context */\n+    ctx = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    printf(\"Creating key pairs......\");\n+    for (i = 0; i < N_SIGNERS; i++) {\n+        if (!create_keypair(ctx, &signer_secrets[i], &signers[i])) {\n+            printf(\"FAILED\\n\");\n+            return 1;\n+        }\n+        pubkeys_ptr[i] = &signers[i].pubkey;\n+    }\n+    printf(\"ok\\n\");\n+    printf(\"Combining public keys...\");",
      "path": "examples/musig.c",
      "position": 186,
      "original_position": 186,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "in_reply_to_id": 1477961061,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think there's no catch-all recommendation. BIP327 says \"The aggregate public key produced by KeyAgg (regardless of the type) depends on the order of the individual public keys. If the application does not have a canonical order of the signers, the individual public keys can be sorted with the KeySort algorithm to ensure that the aggregate public key is independent of the order of signers.\"\r\n\r\nIn other words: If in your application, the collection of pubkeys (or signers represented by them) is conceptually an (ordered) list, then don't bother with sorting. If in your application, the collection of pubkeys is conceptually an (unordered) set, i.e., the application doesn't want to care about the order of pubkeys, then sort to make sure the set has a canonical serialization. \r\n\r\nPerhaps we can explain this somewhere in more detail, either in the API docs or in the example. ",
      "created_at": "2024-02-05T10:52:21Z",
      "updated_at": "2024-02-05T10:52:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1477997628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1477997628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1479443648",
      "pull_request_review_id": 1864630385,
      "id": 1479443648,
      "node_id": "PRRC_kwDOAP4Jqs5YLoTA",
      "diff_hunk": "",
      "path": "src/modules/musig/session_impl.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "original_commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "in_reply_to_id": null,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there any specific reason for avoiding sha256 mid-state optimization in the `musig_compute_noncehash` and `nonce_function_musig` functions?",
      "created_at": "2024-02-06T09:13:54Z",
      "updated_at": "2024-02-06T10:21:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1479443648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1479443648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1516062204",
      "pull_request_review_id": 1922290796,
      "id": 1516062204,
      "node_id": "PRRC_kwDOAP4Jqs5aXUX8",
      "diff_hunk": "@@ -0,0 +1,518 @@\n+#ifndef SECP256K1_MUSIG_H\n+#define SECP256K1_MUSIG_H\n+\n+#include \"secp256k1_extrakeys.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include <stddef.h>\n+\n+/** This module implements BIP 327 \"MuSig2 for BIP340-compatible\n+ * Multi-Signatures\"\n+ * (https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki)\n+ * v1.0.0. You can find an example demonstrating the musig module in\n+ * examples/musig.c.\n+ *\n+ * The module also supports BIP-341 (\"Taproot\") public key tweaking.\n+ *\n+ * It is recommended to read the documentation in this include file carefully.\n+ * Further notes on API usage can be found in doc/musig.md\n+ *\n+ * Since the first version of MuSig is essentially replaced by MuSig2, we use\n+ * MuSig, musig and MuSig2 synonymously unless noted otherwise.\n+ */\n+\n+/** Opaque data structures\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. If you\n+ *  need to convert to a format suitable for storage, transmission, or\n+ *  comparison, use the corresponding serialization and parsing functions.\n+ */\n+\n+/** Opaque data structure that caches information about public key aggregation.\n+ *\n+ *  Guaranteed to be 197 bytes in size. It can be safely copied/moved. No\n+ *  serialization and parsing functions (yet).\n+ */\n+typedef struct {\n+    unsigned char data[197];\n+} secp256k1_musig_keyagg_cache;\n+\n+/** Opaque data structure that holds a signer's _secret_ nonce.\n+ *\n+ *  Guaranteed to be 132 bytes in size.\n+ *\n+ *  WARNING: This structure MUST NOT be copied or read or written to directly. A\n+ *  signer who is online throughout the whole process and can keep this\n+ *  structure in memory can use the provided API functions for a safe standard\n+ *  workflow. See\n+ *  https://blockstream.com/2019/02/18/musig-a-new-multisignature-standard/ for\n+ *  more details about the risks associated with serializing or deserializing\n+ *  this structure.\n+ *\n+ *  We repeat, copying this data structure can result in nonce reuse which will\n+ *  leak the secret signing key.\n+ */\n+typedef struct {\n+    unsigned char data[132];\n+} secp256k1_musig_secnonce;\n+\n+/** Opaque data structure that holds a signer's public nonce.\n+*\n+*  Guaranteed to be 132 bytes in size. It can be safely copied/moved. Serialized\n+*  and parsed with `musig_pubnonce_serialize` and `musig_pubnonce_parse`.\n+*/\n+typedef struct {\n+    unsigned char data[132];\n+} secp256k1_musig_pubnonce;\n+\n+/** Opaque data structure that holds an aggregate public nonce.\n+ *\n+ *  Guaranteed to be 132 bytes in size. It can be safely copied/moved.\n+ *  Serialized and parsed with `musig_aggnonce_serialize` and\n+ *  `musig_aggnonce_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[132];\n+} secp256k1_musig_aggnonce;\n+\n+/** Opaque data structure that holds a MuSig session.\n+ *\n+ *  This structure is not required to be kept secret for the signing protocol to\n+ *  be secure. Guaranteed to be 133 bytes in size. It can be safely\n+ *  copied/moved. No serialization and parsing functions (yet).\n+ */\n+typedef struct {\n+    unsigned char data[133];\n+} secp256k1_musig_session;\n+\n+/** Opaque data structure that holds a partial MuSig signature.\n+ *\n+ *  Guaranteed to be 36 bytes in size. Serialized and parsed with\n+ *  `musig_partial_sig_serialize` and `musig_partial_sig_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[36];\n+} secp256k1_musig_partial_sig;\n+\n+/** Parse a signer's public nonce.\n+ *\n+ *  Returns: 1 when the nonce could be parsed, 0 otherwise.\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   nonce: pointer to a nonce object\n+ *  In:     in66: pointer to the 66-byte nonce to be parsed\n+ */\n+SECP256K1_API int secp256k1_musig_pubnonce_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_musig_pubnonce *nonce,\n+    const unsigned char *in66\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a signer's public nonce\n+ *\n+ *  Returns: 1 when the nonce could be serialized, 0 otherwise\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   out66: pointer to a 66-byte array to store the serialized nonce\n+ *  In:    nonce: pointer to the nonce\n+ */\n+SECP256K1_API int secp256k1_musig_pubnonce_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *out66,\n+    const secp256k1_musig_pubnonce *nonce\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse an aggregate public nonce.\n+ *\n+ *  Returns: 1 when the nonce could be parsed, 0 otherwise.\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   nonce: pointer to a nonce object\n+ *  In:     in66: pointer to the 66-byte nonce to be parsed\n+ */\n+SECP256K1_API int secp256k1_musig_aggnonce_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_musig_aggnonce *nonce,\n+    const unsigned char *in66\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize an aggregate public nonce\n+ *\n+ *  Returns: 1 when the nonce could be serialized, 0 otherwise\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   out66: pointer to a 66-byte array to store the serialized nonce\n+ *  In:    nonce: pointer to the nonce\n+ */\n+SECP256K1_API int secp256k1_musig_aggnonce_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *out66,\n+    const secp256k1_musig_aggnonce *nonce\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a MuSig partial signature\n+ *\n+ *  Returns: 1 when the signature could be serialized, 0 otherwise\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   out32: pointer to a 32-byte array to store the serialized signature\n+ *  In:      sig: pointer to the signature\n+ */\n+SECP256K1_API int secp256k1_musig_partial_sig_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *out32,\n+    const secp256k1_musig_partial_sig *sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse a MuSig partial signature.\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:     sig: pointer to a signature object\n+ *  In:     in32: pointer to the 32-byte signature to be parsed\n+ *\n+ *  After the call, sig will always be initialized. If parsing failed or the\n+ *  encoded numbers are out of range, signature verification with it is\n+ *  guaranteed to fail for every message and public key.\n+ */\n+SECP256K1_API int secp256k1_musig_partial_sig_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_musig_partial_sig *sig,\n+    const unsigned char *in32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Computes an aggregate public key and uses it to initialize a keyagg_cache\n+ *\n+ *  Different orders of `pubkeys` result in different `agg_pk`s.\n+ *\n+ *  Before aggregating, the pubkeys can be sorted with `secp256k1_pubkey_sort`\n+ *  which ensures the same `agg_pk` result for the same multiset of pubkeys.\n+ *  This is useful to do before `pubkey_agg`, such that the order of pubkeys\n+ *  does not affect the aggregate public key.\n+ *\n+ *  Returns: 0 if the arguments are invalid, 1 otherwise\n+ *  Args:        ctx: pointer to a context object\n+ *  Out:      agg_pk: the MuSig-aggregated x-only public key. If you do not need it,\n+ *                    this arg can be NULL.\n+ *      keyagg_cache: if non-NULL, pointer to a musig_keyagg_cache struct that\n+ *                    is required for signing (or observing the signing session\n+ *                    and verifying partial signatures).\n+ *   In:     pubkeys: input array of pointers to public keys to aggregate. The order\n+ *                    is important; a different order will result in a different\n+ *                    aggregate public key.\n+ *         n_pubkeys: length of pubkeys array. Must be greater than 0.\n+ */\n+SECP256K1_API int secp256k1_musig_pubkey_agg(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey *agg_pk,\n+    secp256k1_musig_keyagg_cache *keyagg_cache,\n+    const secp256k1_pubkey * const *pubkeys,\n+    size_t n_pubkeys\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(4);\n+\n+/** Obtain the aggregate public key from a keyagg_cache.\n+ *\n+ *  This is only useful if you need the non-xonly public key, in particular for\n+ *  plain (non-xonly) tweaking or batch-verifying multiple key aggregations\n+ *  (not implemented).\n+ *\n+ *  Returns: 0 if the arguments are invalid, 1 otherwise\n+ *  Args:        ctx: pointer to a context object\n+ *  Out:      agg_pk: the MuSig-aggregated public key.\n+ *  In: keyagg_cache: pointer to a `musig_keyagg_cache` struct initialized by\n+ *                    `musig_pubkey_agg`\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_musig_pubkey_get(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *agg_pk,\n+    const secp256k1_musig_keyagg_cache *keyagg_cache\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Apply plain \"EC\" tweaking to a public key in a given keyagg_cache by\n+ *  adding the generator multiplied with `tweak32` to it. This is useful for\n+ *  deriving child keys from an aggregate public key via BIP32.\n+ *\n+ *  The tweaking method is the same as `secp256k1_ec_pubkey_tweak_add`. So after\n+ *  the following pseudocode buf and buf2 have identical contents (absent\n+ *  earlier failures).\n+ *\n+ *  secp256k1_musig_pubkey_agg(..., keyagg_cache, pubkeys, ...)\n+ *  secp256k1_musig_pubkey_get(..., agg_pk, keyagg_cache)\n+ *  secp256k1_musig_pubkey_ec_tweak_add(..., output_pk, tweak32, keyagg_cache)\n+ *  secp256k1_ec_pubkey_serialize(..., buf, output_pk)\n+ *  secp256k1_ec_pubkey_tweak_add(..., agg_pk, tweak32)\n+ *  secp256k1_ec_pubkey_serialize(..., buf2, agg_pk)\n+ *\n+ *  This function is required if you want to _sign_ for a tweaked aggregate key.\n+ *  On the other hand, if you are only computing a public key, but not intending\n+ *  to create a signature for it, you can just use\n+ *  `secp256k1_ec_pubkey_tweak_add`.\n+ *\n+ *  Returns: 0 if the arguments are invalid or the resulting public key would be\n+ *           invalid (only when the tweak is the negation of the corresponding\n+ *           secret key). 1 otherwise.\n+ *  Args:            ctx: pointer to a context object\n+ *  Out:   output_pubkey: pointer to a public key to store the result. Will be set\n+ *                        to an invalid value if this function returns 0. If you\n+ *                        do not need it, this arg can be NULL.\n+ *  In/Out: keyagg_cache: pointer to a `musig_keyagg_cache` struct initialized by\n+ *                       `musig_pubkey_agg`\n+ *  In:          tweak32: pointer to a 32-byte tweak. If the tweak is invalid\n+ *                        according to `secp256k1_ec_seckey_verify`, this function\n+ *                        returns 0. For uniformly random 32-byte arrays the\n+ *                        chance of being invalid is negligible (around 1 in\n+ *                        2^128).\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_musig_pubkey_ec_tweak_add(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *output_pubkey,\n+    secp256k1_musig_keyagg_cache *keyagg_cache,\n+    const unsigned char *tweak32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Apply x-only tweaking to a public key in a given keyagg_cache by adding the\n+ *  generator multiplied with `tweak32` to it. This is useful for creating\n+ *  Taproot outputs.\n+ *\n+ *  The tweaking method is the same as `secp256k1_xonly_pubkey_tweak_add`. So in\n+ *  the following pseudocode xonly_pubkey_tweak_add_check (absent earlier\n+ *  failures) returns 1.\n+ *\n+ *  secp256k1_musig_pubkey_agg(..., agg_pk, keyagg_cache, pubkeys, ...)\n+ *  secp256k1_musig_pubkey_xonly_tweak_add(..., output_pk, tweak32, keyagg_cache)\n+ *  secp256k1_xonly_pubkey_serialize(..., buf, output_pk)\n+ *  secp256k1_xonly_pubkey_tweak_add_check(..., buf, ..., agg_pk, tweak32)\n+ *\n+ *  This function is required if you want to _sign_ for a tweaked aggregate key.\n+ *  On the other hand, if you are only computing a public key, but not intending\n+ *  to create a signature for it, you can just use\n+ *  `secp256k1_xonly_pubkey_tweak_add`.\n+ *\n+ *  Returns: 0 if the arguments are invalid or the resulting public key would be\n+ *           invalid (only when the tweak is the negation of the corresponding\n+ *           secret key). 1 otherwise.\n+ *  Args:            ctx: pointer to a context object\n+ *  Out:   output_pubkey: pointer to a public key to store the result. Will be set\n+ *                        to an invalid value if this function returns 0. If you\n+ *                        do not need it, this arg can be NULL.\n+ *  In/Out: keyagg_cache: pointer to a `musig_keyagg_cache` struct initialized by\n+ *                       `musig_pubkey_agg`\n+ *  In:          tweak32: pointer to a 32-byte tweak. If the tweak is invalid\n+ *                        according to secp256k1_ec_seckey_verify, this function\n+ *                        returns 0. For uniformly random 32-byte arrays the\n+ *                        chance of being invalid is negligible (around 1 in\n+ *                        2^128).\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_musig_pubkey_xonly_tweak_add(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *output_pubkey,\n+    secp256k1_musig_keyagg_cache *keyagg_cache,\n+    const unsigned char *tweak32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Starts a signing session by generating a nonce\n+ *\n+ *  This function outputs a secret nonce that will be required for signing and a\n+ *  corresponding public nonce that is intended to be sent to other signers.\n+ *\n+ *  MuSig differs from regular Schnorr signing in that implementers _must_ take\n+ *  special care to not reuse a nonce. This can be ensured by following these rules:\n+ *\n+ *  1. Each call to this function must have a UNIQUE session_id32 that must NOT BE\n+ *     REUSED in subsequent calls to this function.\n+ *     If you do not provide a seckey, session_id32 _must_ be UNIFORMLY RANDOM\n+ *     AND KEPT SECRET (even from other signers). If you do provide a seckey,\n+ *     session_id32 can instead be a counter (that must never repeat!). However,\n+ *     it is recommended to always choose session_id32 uniformly at random.",
      "path": "include/secp256k1_musig.h",
      "position": null,
      "original_position": 325,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should probably rename this. Despite this big fat warning, `session_id` itself sounds like a public value. \r\n\r\nBrain dump:\r\n -  `session_nonce`: too easy to confuse with the sec nonce\r\n -  `session_rand`: but what if it's counter\r\n -  `session_seed`: okayish\r\n\r\nBut now that I think about this again, I believe that the confusion stems from the fact that we have these two modes: It's either random and secret, or a counter, but that's only okay if you provide a seckey. A single name that fits both scenarios is necessarily imprecise. \r\n\r\nI think a better approach is to provide two different functions, e.g., `secp256k1_musig_nonce_gen` and `secp256k1_musig_nonce_gen_with_counter` (like in the BIP where we have CounterNonceGen as a separate algorithm). Then we can have clear argument names, even very verbose ones like `session_secret_rand` and `nonrepeating_counter`. Moreover, we can enforce the presence of the seckey in the counter function.",
      "created_at": "2024-03-07T12:18:51Z",
      "updated_at": "2024-03-07T12:25:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1516062204",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1516062204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 320,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518231802",
      "pull_request_review_id": 1925740508,
      "id": 1518231802,
      "node_id": "PRRC_kwDOAP4Jqs5afmD6",
      "diff_hunk": "",
      "path": "src/modules/musig/session_impl.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "original_commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "in_reply_to_id": 1479443648,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because apparently I had been to lazy so far :D. I added this optimization.",
      "created_at": "2024-03-08T19:54:58Z",
      "updated_at": "2024-03-08T19:54:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1518231802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518231802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518232232",
      "pull_request_review_id": 1925741106,
      "id": 1518232232,
      "node_id": "PRRC_kwDOAP4Jqs5afmKo",
      "diff_hunk": "@@ -240,6 +240,21 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_keypair_xonly_tweak_add\n     const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Sort public keys using lexicographic order of their compressed\n+ *  serialization.\n+ *\n+ *  Returns: 0 if the arguments are invalid. 1 otherwise.\n+ *\n+ *  Args:     ctx: pointer to a context object\n+ *  In:   pubkeys: array of pointers to pubkeys to sort\n+ *      n_pubkeys: number of elements in the pubkeys array\n+ */\n+SECP256K1_API int secp256k1_pubkey_sort(\n+    const secp256k1_context *ctx,\n+    const secp256k1_pubkey **pubkeys,\n+    size_t n_pubkeys\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n+",
      "path": "include/secp256k1_extrakeys.h",
      "position": null,
      "original_position": 18,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "e1ba262f16fd821ec48e8570d4d2990111ec0ef3",
      "in_reply_to_id": 1457727273,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's reasonable. Done.",
      "created_at": "2024-03-08T19:55:27Z",
      "updated_at": "2024-03-08T19:55:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1518232232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518232232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 243,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518232357",
      "pull_request_review_id": 1925741325,
      "id": 1518232357,
      "node_id": "PRRC_kwDOAP4Jqs5afmMl",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+/***********************************************************************\n+ * Copyright (c) 2021 Jonas Nick                                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_MUSIG_KEYAGG_H\n+#define SECP256K1_MODULE_MUSIG_KEYAGG_H\n+\n+#include \"../../../include/secp256k1.h\"\n+#include \"../../../include/secp256k1_musig.h\"\n+\n+#include \"../../field.h\"\n+#include \"../../group.h\"\n+#include \"../../scalar.h\"\n+\n+typedef struct {\n+    secp256k1_ge pk;\n+    /* If there is no \"second\" public key, second_pk is set to the point at\n+     * infinity */\n+    secp256k1_ge second_pk;\n+    unsigned char pk_hash[32];\n+    /* tweak is identical to value tacc[v] in the specification. */\n+    secp256k1_scalar tweak;\n+    /* parity_acc corresponds to gacc[v] in the spec. If gacc[v] is -1,\n+     * parity_acc is 1. Otherwise, parity_acc is 0. */\n+    int parity_acc;\n+} secp256k1_keyagg_cache_internal;\n+\n+/* musig_ge_to_bytes_ext and musig_ge_from_bytes_ext are identical to ge_save and ge_load\n+ * except that they allow saving and loading the point at infinity */\n+static void secp256k1_musig_ge_to_bytes_ext(unsigned char *data, secp256k1_ge *ge);\n+\n+static void secp256k1_musig_ge_from_bytes_ext(secp256k1_ge *ge, const unsigned char *data);",
      "path": "src/modules/musig/keyagg.h",
      "position": null,
      "original_position": 34,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "fce0857aa09a1af71bb3f8a45379fbc3c7768db1",
      "in_reply_to_id": 1457733653,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, done.",
      "created_at": "2024-03-08T19:55:36Z",
      "updated_at": "2024-03-08T19:55:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1518232357",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518232357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518866600",
      "pull_request_review_id": 1926554452,
      "id": 1518866600,
      "node_id": "PRRC_kwDOAP4Jqs5aiBCo",
      "diff_hunk": "@@ -0,0 +1,518 @@\n+#ifndef SECP256K1_MUSIG_H\n+#define SECP256K1_MUSIG_H\n+\n+#include \"secp256k1_extrakeys.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include <stddef.h>\n+\n+/** This module implements BIP 327 \"MuSig2 for BIP340-compatible\n+ * Multi-Signatures\"\n+ * (https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki)\n+ * v1.0.0. You can find an example demonstrating the musig module in\n+ * examples/musig.c.\n+ *\n+ * The module also supports BIP-341 (\"Taproot\") public key tweaking.\n+ *\n+ * It is recommended to read the documentation in this include file carefully.\n+ * Further notes on API usage can be found in doc/musig.md\n+ *\n+ * Since the first version of MuSig is essentially replaced by MuSig2, we use\n+ * MuSig, musig and MuSig2 synonymously unless noted otherwise.\n+ */\n+\n+/** Opaque data structures\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. If you\n+ *  need to convert to a format suitable for storage, transmission, or\n+ *  comparison, use the corresponding serialization and parsing functions.\n+ */\n+\n+/** Opaque data structure that caches information about public key aggregation.\n+ *\n+ *  Guaranteed to be 197 bytes in size. It can be safely copied/moved. No\n+ *  serialization and parsing functions (yet).\n+ */\n+typedef struct {\n+    unsigned char data[197];\n+} secp256k1_musig_keyagg_cache;\n+\n+/** Opaque data structure that holds a signer's _secret_ nonce.\n+ *\n+ *  Guaranteed to be 132 bytes in size.\n+ *\n+ *  WARNING: This structure MUST NOT be copied or read or written to directly. A\n+ *  signer who is online throughout the whole process and can keep this\n+ *  structure in memory can use the provided API functions for a safe standard\n+ *  workflow. See\n+ *  https://blockstream.com/2019/02/18/musig-a-new-multisignature-standard/ for\n+ *  more details about the risks associated with serializing or deserializing\n+ *  this structure.\n+ *\n+ *  We repeat, copying this data structure can result in nonce reuse which will\n+ *  leak the secret signing key.\n+ */\n+typedef struct {\n+    unsigned char data[132];\n+} secp256k1_musig_secnonce;\n+\n+/** Opaque data structure that holds a signer's public nonce.\n+*\n+*  Guaranteed to be 132 bytes in size. It can be safely copied/moved. Serialized\n+*  and parsed with `musig_pubnonce_serialize` and `musig_pubnonce_parse`.\n+*/\n+typedef struct {\n+    unsigned char data[132];\n+} secp256k1_musig_pubnonce;\n+\n+/** Opaque data structure that holds an aggregate public nonce.\n+ *\n+ *  Guaranteed to be 132 bytes in size. It can be safely copied/moved.\n+ *  Serialized and parsed with `musig_aggnonce_serialize` and\n+ *  `musig_aggnonce_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[132];\n+} secp256k1_musig_aggnonce;\n+\n+/** Opaque data structure that holds a MuSig session.\n+ *\n+ *  This structure is not required to be kept secret for the signing protocol to\n+ *  be secure. Guaranteed to be 133 bytes in size. It can be safely\n+ *  copied/moved. No serialization and parsing functions (yet).\n+ */\n+typedef struct {\n+    unsigned char data[133];\n+} secp256k1_musig_session;\n+\n+/** Opaque data structure that holds a partial MuSig signature.\n+ *\n+ *  Guaranteed to be 36 bytes in size. Serialized and parsed with\n+ *  `musig_partial_sig_serialize` and `musig_partial_sig_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[36];\n+} secp256k1_musig_partial_sig;\n+\n+/** Parse a signer's public nonce.\n+ *\n+ *  Returns: 1 when the nonce could be parsed, 0 otherwise.\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   nonce: pointer to a nonce object\n+ *  In:     in66: pointer to the 66-byte nonce to be parsed\n+ */\n+SECP256K1_API int secp256k1_musig_pubnonce_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_musig_pubnonce *nonce,\n+    const unsigned char *in66\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a signer's public nonce\n+ *\n+ *  Returns: 1 when the nonce could be serialized, 0 otherwise\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   out66: pointer to a 66-byte array to store the serialized nonce\n+ *  In:    nonce: pointer to the nonce\n+ */\n+SECP256K1_API int secp256k1_musig_pubnonce_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *out66,\n+    const secp256k1_musig_pubnonce *nonce\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse an aggregate public nonce.\n+ *\n+ *  Returns: 1 when the nonce could be parsed, 0 otherwise.\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   nonce: pointer to a nonce object\n+ *  In:     in66: pointer to the 66-byte nonce to be parsed\n+ */\n+SECP256K1_API int secp256k1_musig_aggnonce_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_musig_aggnonce *nonce,\n+    const unsigned char *in66\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize an aggregate public nonce\n+ *\n+ *  Returns: 1 when the nonce could be serialized, 0 otherwise\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   out66: pointer to a 66-byte array to store the serialized nonce\n+ *  In:    nonce: pointer to the nonce\n+ */\n+SECP256K1_API int secp256k1_musig_aggnonce_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *out66,\n+    const secp256k1_musig_aggnonce *nonce\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a MuSig partial signature\n+ *\n+ *  Returns: 1 when the signature could be serialized, 0 otherwise\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:   out32: pointer to a 32-byte array to store the serialized signature\n+ *  In:      sig: pointer to the signature\n+ */\n+SECP256K1_API int secp256k1_musig_partial_sig_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *out32,\n+    const secp256k1_musig_partial_sig *sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse a MuSig partial signature.\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args:    ctx: pointer to a context object\n+ *  Out:     sig: pointer to a signature object\n+ *  In:     in32: pointer to the 32-byte signature to be parsed\n+ *\n+ *  After the call, sig will always be initialized. If parsing failed or the\n+ *  encoded numbers are out of range, signature verification with it is\n+ *  guaranteed to fail for every message and public key.\n+ */\n+SECP256K1_API int secp256k1_musig_partial_sig_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_musig_partial_sig *sig,\n+    const unsigned char *in32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Computes an aggregate public key and uses it to initialize a keyagg_cache\n+ *\n+ *  Different orders of `pubkeys` result in different `agg_pk`s.\n+ *\n+ *  Before aggregating, the pubkeys can be sorted with `secp256k1_pubkey_sort`\n+ *  which ensures the same `agg_pk` result for the same multiset of pubkeys.\n+ *  This is useful to do before `pubkey_agg`, such that the order of pubkeys\n+ *  does not affect the aggregate public key.\n+ *\n+ *  Returns: 0 if the arguments are invalid, 1 otherwise\n+ *  Args:        ctx: pointer to a context object\n+ *  Out:      agg_pk: the MuSig-aggregated x-only public key. If you do not need it,\n+ *                    this arg can be NULL.\n+ *      keyagg_cache: if non-NULL, pointer to a musig_keyagg_cache struct that\n+ *                    is required for signing (or observing the signing session\n+ *                    and verifying partial signatures).\n+ *   In:     pubkeys: input array of pointers to public keys to aggregate. The order\n+ *                    is important; a different order will result in a different\n+ *                    aggregate public key.\n+ *         n_pubkeys: length of pubkeys array. Must be greater than 0.\n+ */\n+SECP256K1_API int secp256k1_musig_pubkey_agg(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey *agg_pk,\n+    secp256k1_musig_keyagg_cache *keyagg_cache,\n+    const secp256k1_pubkey * const *pubkeys,\n+    size_t n_pubkeys\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(4);\n+\n+/** Obtain the aggregate public key from a keyagg_cache.\n+ *\n+ *  This is only useful if you need the non-xonly public key, in particular for\n+ *  plain (non-xonly) tweaking or batch-verifying multiple key aggregations\n+ *  (not implemented).\n+ *\n+ *  Returns: 0 if the arguments are invalid, 1 otherwise\n+ *  Args:        ctx: pointer to a context object\n+ *  Out:      agg_pk: the MuSig-aggregated public key.\n+ *  In: keyagg_cache: pointer to a `musig_keyagg_cache` struct initialized by\n+ *                    `musig_pubkey_agg`\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_musig_pubkey_get(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *agg_pk,\n+    const secp256k1_musig_keyagg_cache *keyagg_cache\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Apply plain \"EC\" tweaking to a public key in a given keyagg_cache by\n+ *  adding the generator multiplied with `tweak32` to it. This is useful for\n+ *  deriving child keys from an aggregate public key via BIP32.\n+ *\n+ *  The tweaking method is the same as `secp256k1_ec_pubkey_tweak_add`. So after\n+ *  the following pseudocode buf and buf2 have identical contents (absent\n+ *  earlier failures).\n+ *\n+ *  secp256k1_musig_pubkey_agg(..., keyagg_cache, pubkeys, ...)\n+ *  secp256k1_musig_pubkey_get(..., agg_pk, keyagg_cache)\n+ *  secp256k1_musig_pubkey_ec_tweak_add(..., output_pk, tweak32, keyagg_cache)\n+ *  secp256k1_ec_pubkey_serialize(..., buf, output_pk)\n+ *  secp256k1_ec_pubkey_tweak_add(..., agg_pk, tweak32)\n+ *  secp256k1_ec_pubkey_serialize(..., buf2, agg_pk)\n+ *\n+ *  This function is required if you want to _sign_ for a tweaked aggregate key.\n+ *  On the other hand, if you are only computing a public key, but not intending\n+ *  to create a signature for it, you can just use\n+ *  `secp256k1_ec_pubkey_tweak_add`.\n+ *\n+ *  Returns: 0 if the arguments are invalid or the resulting public key would be\n+ *           invalid (only when the tweak is the negation of the corresponding\n+ *           secret key). 1 otherwise.\n+ *  Args:            ctx: pointer to a context object\n+ *  Out:   output_pubkey: pointer to a public key to store the result. Will be set\n+ *                        to an invalid value if this function returns 0. If you\n+ *                        do not need it, this arg can be NULL.\n+ *  In/Out: keyagg_cache: pointer to a `musig_keyagg_cache` struct initialized by\n+ *                       `musig_pubkey_agg`\n+ *  In:          tweak32: pointer to a 32-byte tweak. If the tweak is invalid\n+ *                        according to `secp256k1_ec_seckey_verify`, this function\n+ *                        returns 0. For uniformly random 32-byte arrays the\n+ *                        chance of being invalid is negligible (around 1 in\n+ *                        2^128).\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_musig_pubkey_ec_tweak_add(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *output_pubkey,\n+    secp256k1_musig_keyagg_cache *keyagg_cache,\n+    const unsigned char *tweak32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Apply x-only tweaking to a public key in a given keyagg_cache by adding the\n+ *  generator multiplied with `tweak32` to it. This is useful for creating\n+ *  Taproot outputs.\n+ *\n+ *  The tweaking method is the same as `secp256k1_xonly_pubkey_tweak_add`. So in\n+ *  the following pseudocode xonly_pubkey_tweak_add_check (absent earlier\n+ *  failures) returns 1.\n+ *\n+ *  secp256k1_musig_pubkey_agg(..., agg_pk, keyagg_cache, pubkeys, ...)\n+ *  secp256k1_musig_pubkey_xonly_tweak_add(..., output_pk, tweak32, keyagg_cache)\n+ *  secp256k1_xonly_pubkey_serialize(..., buf, output_pk)\n+ *  secp256k1_xonly_pubkey_tweak_add_check(..., buf, ..., agg_pk, tweak32)\n+ *\n+ *  This function is required if you want to _sign_ for a tweaked aggregate key.\n+ *  On the other hand, if you are only computing a public key, but not intending\n+ *  to create a signature for it, you can just use\n+ *  `secp256k1_xonly_pubkey_tweak_add`.\n+ *\n+ *  Returns: 0 if the arguments are invalid or the resulting public key would be\n+ *           invalid (only when the tweak is the negation of the corresponding\n+ *           secret key). 1 otherwise.\n+ *  Args:            ctx: pointer to a context object\n+ *  Out:   output_pubkey: pointer to a public key to store the result. Will be set\n+ *                        to an invalid value if this function returns 0. If you\n+ *                        do not need it, this arg can be NULL.\n+ *  In/Out: keyagg_cache: pointer to a `musig_keyagg_cache` struct initialized by\n+ *                       `musig_pubkey_agg`\n+ *  In:          tweak32: pointer to a 32-byte tweak. If the tweak is invalid\n+ *                        according to secp256k1_ec_seckey_verify, this function\n+ *                        returns 0. For uniformly random 32-byte arrays the\n+ *                        chance of being invalid is negligible (around 1 in\n+ *                        2^128).\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_musig_pubkey_xonly_tweak_add(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *output_pubkey,\n+    secp256k1_musig_keyagg_cache *keyagg_cache,\n+    const unsigned char *tweak32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Starts a signing session by generating a nonce\n+ *\n+ *  This function outputs a secret nonce that will be required for signing and a\n+ *  corresponding public nonce that is intended to be sent to other signers.\n+ *\n+ *  MuSig differs from regular Schnorr signing in that implementers _must_ take\n+ *  special care to not reuse a nonce. This can be ensured by following these rules:\n+ *\n+ *  1. Each call to this function must have a UNIQUE session_id32 that must NOT BE\n+ *     REUSED in subsequent calls to this function.\n+ *     If you do not provide a seckey, session_id32 _must_ be UNIFORMLY RANDOM\n+ *     AND KEPT SECRET (even from other signers). If you do provide a seckey,\n+ *     session_id32 can instead be a counter (that must never repeat!). However,\n+ *     it is recommended to always choose session_id32 uniformly at random.",
      "path": "include/secp256k1_musig.h",
      "position": null,
      "original_position": 325,
      "commit_id": "461970682f56a8e15fc71ecab18d4537e50441fc",
      "original_commit_id": "dd4932b67b573b2366e729e869918b17964f5f83",
      "in_reply_to_id": 1516062204,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed. I split the two nonce_gen functions.",
      "created_at": "2024-03-10T14:25:41Z",
      "updated_at": "2024-03-10T14:25:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1518866600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518866600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1479"
        }
      },
      "start_line": null,
      "original_start_line": 320,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    }
  ]
}