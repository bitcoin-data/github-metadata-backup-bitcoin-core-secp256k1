{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000",
    "id": 766540753,
    "node_id": "PR_kwDOAP4Jqs4tsHvR",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1000.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1000.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/a340d9500a9c45e5c261174f48b3eb18b3b3647d",
    "number": 1000,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Synthetic int128 type.",
    "user": {
      "login": "roconnor-blockstream",
      "id": 21371712,
      "node_id": "MDQ6VXNlcjIxMzcxNzEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roconnor-blockstream",
      "html_url": "https://github.com/roconnor-blockstream",
      "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
      "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
      "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
      "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
      "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Abstracts the int128 type and provides an native version, if available, or a implements it using a pair of int64_t's.\r\n\r\nThis is activated by setting the configuration flag `--with-test-override-wide-multiply=int128_struct`.\r\n\r\nThe primary purpose of this PR is to take advantage of MSVC's [umulh](https://docs.microsoft.com/en-us/cpp/intrinsics/umulh?view=msvc-170) intrinsic that we can use to simulate an int128 type which MSVC does not have (AFAIU). This PR lays out the groundwork for this level of MSVC support, but doesn't include the configuration logic to enable it yet.\r\n\r\nFor completeness, and implementation of `umulh` and `mulh` are also provided for compilers that support neither the intrinsic nor the int128 type (such as CompCert?).  This also opens up the possibility of removing the 32-bit field and scalar implementations should that ever be desired.",
    "labels": [],
    "created_at": "2021-10-26T14:41:16Z",
    "updated_at": "2023-06-20T23:30:08Z",
    "closed_at": "2022-11-16T19:37:13Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-11-16T19:37:13Z",
    "merge_commit_sha": "ddf2b2910eb19032f8dd657c66735115ae24bfba",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "roconnor-blockstream:20211026_int128",
      "ref": "20211026_int128",
      "sha": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 137426323,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMzc0MjYzMjM=",
        "name": "secp256k1",
        "full_name": "roconnor-blockstream/secp256k1",
        "owner": {
          "login": "roconnor-blockstream",
          "id": 21371712,
          "node_id": "MDQ6VXNlcjIxMzcxNzEy",
          "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/roconnor-blockstream",
          "html_url": "https://github.com/roconnor-blockstream",
          "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
          "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
          "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
          "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
          "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/roconnor-blockstream/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/roconnor-blockstream/secp256k1",
        "archive_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/events",
        "forks_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/roconnor-blockstream/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:roconnor-blockstream/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/roconnor-blockstream/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/hooks",
        "svn_url": "https://github.com/roconnor-blockstream/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 9954,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-20T18:12:39Z",
        "created_at": "2018-06-15T01:26:35Z",
        "updated_at": "2022-01-10T21:24:24Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "a43e982bca580f4fba19d7ffaf9b5ee3f51641cb",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 950,
        "stargazers_count": 1776,
        "watchers_count": 1776,
        "size": 10071,
        "default_branch": "master",
        "open_issues_count": 148,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-20T22:19:40Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-06-20T06:57:17Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 814,
    "deletions": 297,
    "changed_files": 18,
    "commits": 3,
    "review_comments": 119,
    "comments": 34
  },
  "events": [
    {
      "event": "reviewed",
      "id": 790439425,
      "node_id": "PRR_kwDOAP4Jqs4vHSYB",
      "url": null,
      "actor": null,
      "commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-790439425",
      "submitted_at": "2021-10-27T10:20:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "reviewed",
      "id": 790448119,
      "node_id": "PRR_kwDOAP4Jqs4vHUf3",
      "url": null,
      "actor": null,
      "commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-790448119",
      "submitted_at": "2021-10-27T10:29:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5551504674,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFK5T0i",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5551504674",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-01T21:17:21Z"
    },
    {
      "event": "reviewed",
      "id": 796489708,
      "node_id": "PRR_kwDOAP4Jqs4veXfs",
      "url": null,
      "actor": null,
      "commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I think it would help readability to arrange the different implementations of the type in different files, similar to what we have a field and scalar \"modules\", where we have implementation files such as `scalar4x64_impl.h` but still a single `scalar.h` that makes sure that all function prototypes are identical.  Then you could remove a lot of the ifdefs within the functions. ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-796489708",
      "submitted_at": "2021-11-03T12:58:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5584280424,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFM2Vto",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5584280424",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-08T16:49:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5621006544,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFPCcDQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5621006544",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-15T21:33:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5621098918,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFPCymm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5621098918",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-15T21:55:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5729868805,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFVhtwF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5729868805",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:31:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5729884330,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFVhxiq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5729884330",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:35:14Z"
    },
    {
      "event": "renamed",
      "id": 5729890268,
      "node_id": "RTE_lADOAP4Jqs49xgVTzwAAAAFVhy_c",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5729890268",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:36:43Z",
      "rename": {
        "from": "WIP: Synthetic int128 type.",
        "to": "Synthetic int128 type."
      }
    },
    {
      "event": "ready_for_review",
      "id": 5729896407,
      "node_id": "RFRE_lADOAP4Jqs49xgVTzwAAAAFVh0fX",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5729896407",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:38:19Z"
    },
    {
      "event": "commented",
      "id": 988249961,
      "node_id": "IC_kwDOAP4Jqs46539p",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/988249961",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:42:31Z",
      "updated_at": "2022-03-07T21:56:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm moving this out of draft stage.  The coding is complete.  There are  a few tasks that remain.\r\n\r\n- [x] Double check that there is no signed integer overflow due to rearrangement of the order of some operations.\r\n- [x] We need someone to build this on MSVC.\r\n- [x] Make sure that the refactored code for the native int128 type isn't any slower.\r\n\r\nTo compile with the synthetic int128 type, you currently need to pass a configuration flag `--with-test-override-wide-multiply=int128_struct`.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-988249961",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5729956129,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFViDEh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5729956129",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:53:34Z"
    },
    {
      "event": "commented",
      "id": 990145629,
      "node_id": "IC_kwDOAP4Jqs47BGxd",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/990145629",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-09T19:13:44Z",
      "updated_at": "2021-12-09T19:13:44Z",
      "author_association": "CONTRIBUTOR",
      "body": ">     * [ ]  We need someone to build this on MSVC.\r\n\r\nI have built this with MSVC 2019 on wine (https://github.com/mstorsjo/msvc-wine) and it works. Tests and exhaustive tests pass. \r\n\r\nFor reference:\r\n```\r\n ./configure --disable-benchmark --with-test-override-wide-multiply=int128_struct CC=/opt/msvc/bin/x64/cl.exe CFLAGS=\"-Za -O2 -w\" LD=/opt/msvc/bin/x64/link.exe\r\n```\r\n\r\n\r\nFor the Arch Linux users, there's an AUR package: https://aur.archlinux.org/packages/msvc-wine-git/",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-990145629",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 990146452,
      "node_id": "IC_kwDOAP4Jqs47BG-U",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/990146452",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-09T19:14:50Z",
      "updated_at": "2021-12-09T19:15:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "FWIW, bitcoin core has an AppVeyor MSVC/Windows CI environment. Maybe it's worth looking into adding one for libsecp256k1 directly.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-990146452",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 990875863,
      "node_id": "IC_kwDOAP4Jqs47D5DX",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/990875863",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-10T11:06:07Z",
      "updated_at": "2021-12-10T11:06:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed. Let me note that also Cirrus apparently offers Windows though I have no idea if it's good and/or reliable:  https://cirrus-ci.org/guide/windows/ ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-990875863",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "reviewed",
      "id": 828835400,
      "node_id": "PRR_kwDOAP4Jqs4xZwZI",
      "url": null,
      "actor": null,
      "commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-828835400",
      "submitted_at": "2021-12-10T12:25:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "reviewed",
      "id": 829240091,
      "node_id": "PRR_kwDOAP4Jqs4xbTMb",
      "url": null,
      "actor": null,
      "commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-829240091",
      "submitted_at": "2021-12-10T19:21:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5984226364,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFksAw8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5984226364",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-31T22:10:14Z"
    },
    {
      "event": "commented",
      "id": 1026868604,
      "node_id": "IC_kwDOAP4Jqs49NMV8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1026868604",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-01T13:54:59Z",
      "updated_at": "2022-02-01T13:54:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "My above comment about the inclusion stuff was wrong but here's a cleaner version:\r\nhttps://github.com/real-or-random/secp256k1/commits/202201-int128-includes\r\n\r\nThe first commit simply fixes naming of header guards and should belong to this PR.\r\n\r\n The second commit changes to code  adheres to what I wrote in #1039:\r\n\r\nAfter this commit, int128.h and int128_impl.h are included as follows:\r\n - .c files which use int128 include int128_impl.h (after util.h)\r\n - .h files which use int128 include int128.h (after util.h)\r\n\r\nThis list is exhaustive. util.h needs to included first because it sets\r\nup necessary #defines.\r\n\r\nIf you want, please pick the second commit, too. Or if you don't want to deal with the C mess, I can create a PR with the second commit on top of yours, and we fix this once your PR has been merged.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1026868604",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1039641656,
      "node_id": "IC_kwDOAP4Jqs4996w4",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1039641656",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-14T22:35:45Z",
      "updated_at": "2022-02-14T22:35:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "I notice that your PR still keeps the `USE_*_WIDEMUL_*` in `util.h`.  it still seems we cannot really move it out of `util.h` because it both selects between `INT128_STRUCT` and `INT128_NATIVE`, but can also select `WIDEMUL_INT64` which isn't really `INT128` related.\r\n\r\nMore specifically this block of CPP code is interpreting the `wideMultiply` configuration option, which I've designed to have 3 options (by adding that third option).",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1039641656",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6070684932,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFp100E",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6070684932",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-14T22:36:01Z"
    },
    {
      "event": "commented",
      "id": 1042956327,
      "node_id": "IC_kwDOAP4Jqs4-KkAn",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1042956327",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-17T13:36:00Z",
      "updated_at": "2022-02-17T13:36:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I notice that your PR still keeps the `USE_*_WIDEMUL_*` in `util.h`. it still seems we cannot really move it out of `util.h` because it both selects between `INT128_STRUCT` and `INT128_NATIVE`, but can also select `WIDEMUL_INT64` which isn't really `INT128` related.\r\n\r\nRight. I think that's fine. \r\n\r\nSo this means we have a couple of input #defines (preset in the compiler or set by autoconf, e..g, `USE_*_WIDEMUL_*`) and we have some CPP logic in file that turns those inputs into \"nice\" #ifdefs that can then be used in the rest of the code base, e.g., `INT128_NATIVE`. I believe that's a reasonable way of doing things.\r\n\r\n(In the future we should move the CPP logic from `util.h` to a separate file. It somehow ended up in `util.h` though it does not belong there...)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1042956327",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1054565832,
      "node_id": "IC_kwDOAP4Jqs4-22XI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1054565832",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-28T18:58:43Z",
      "updated_at": "2022-02-28T18:58:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've reviewed the changes in the association of `+` for signed int128 calculations to look for changes in overflow behavior.\r\n\r\nSigned int128 is only used in the `src/modinv64_impl.h` file.  The only changes in association occur in the functions:\r\n\r\n* `secp256k1_modinv64_update_de_62`\r\n* `secp256k1_modinv64_update_fg_62`\r\n* `secp256k1_modinv64_update_fg_62_var`\r\n\r\nThe values being summed are all of the form `(int128_t)u * ??? + (int128_t)v * ???` (or similarly for `q` and `r`). The only way the new association could cause an overflow (or underflow) is if this previous calculation depended on some cancellation within the above addition term to prevent the final accumulation from itself overflowing.  However, the previous calculation does not depend on any cancellation.  The only assumed constraint on `u` and `v` (resp. `q` and `r`) is that `|u|+|v| <= 2^62`, which implies nothing about the values of `u` and `v` causing cancellation.\r\n\r\nMy conclusion, after the above and re-reviewing the above functions, is that neither the new (or old) order of addition risks overflow.\r\n\r\n",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1054565832",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1055271247,
      "node_id": "IC_kwDOAP4Jqs4-5ilP",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1055271247",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-01T10:22:40Z",
      "updated_at": "2022-03-01T10:22:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed, we know nothing about the signs of the summands. To convince myself, I also redid the bounds analysis:\r\n\r\nCounting value bits (i.e., bits that are not the sign bit):\r\n\r\nFor each step, `cd` starts with at most 52 bits.\r\nThen we accumulate `(int128_t)u * ???`, where the factors have at most 62 bits (implied by `|u|+|v| <= 2^62`*) and 63 bits (trivial bound for `int64_t`).\r\nSame with  `(int128_t)v * e0`.\r\nThen we accumulate `(int128_t) modinfo->modulus.??? * md`, where the factors have at most 62 (modulus is in signed62) and 63 value bits.\r\n\r\nWe work with signed, so the value with the maximum absolute value representable in B bits is `-(1<<B)` (with absolute `1<<B`).  \r\nThis means the maximum absolute value `cd` can take is `(1<<52) + (1<<62) * (1<<63) + (1<<62) * (1<<63) + (1<<62) * (1<<63)` which is a 127 bit value and thus reprensentable in 127 value bits.\r\n\r\nSame is true for `ce`.\r\n \r\n*except `u==2^62`, which needs 63 bits but then `v==0`, which also works: `(1<<52) + (1<<63) * (1<<63) + 0 * (1<<63) + (1<<62) * (1<<63)` is also a 127 bit value.\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1055271247",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "reviewed",
      "id": 896140777,
      "node_id": "PRR_kwDOAP4Jqs41agXp",
      "url": null,
      "actor": null,
      "commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-896140777",
      "submitted_at": "2022-03-01T11:15:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "commented",
      "id": 1055321234,
      "node_id": "IC_kwDOAP4Jqs4-5uyS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1055321234",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-01T11:17:57Z",
      "updated_at": "2022-03-01T11:17:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "@roconnor-blockstream Can you rebase this? This will ease benchmarking against master.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1055321234",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "mentioned",
      "id": 6161312789,
      "node_id": "MEE_lADOAP4Jqs49xgVTzwAAAAFvPiwV",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6161312789",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-01T11:17:58Z"
    },
    {
      "event": "subscribed",
      "id": 6161312796,
      "node_id": "SE_lADOAP4Jqs49xgVTzwAAAAFvPiwc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6161312796",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-01T11:17:58Z"
    },
    {
      "event": "commented",
      "id": 1055336664,
      "node_id": "IC_kwDOAP4Jqs4-5yjY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1055336664",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-01T11:37:03Z",
      "updated_at": "2022-03-01T11:37:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Native 128bit performance looks good:\r\n\r\n$ SECP256K1_BENCH_ITERS=1000000 ./bench_internal inverse\r\n\r\n```\r\ngcc 11.2, pr:\r\n\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)\r\n\r\nscalar_inverse                ,     2.40      ,     2.41      ,     2.42   \r\nscalar_inverse_var            ,     1.74      ,     1.75      ,     1.81   \r\nfield_inverse                 ,     2.38      ,     2.39      ,     2.40   \r\nfield_inverse_var             ,     1.73      ,     1.73      ,     1.74\r\n\r\ngcc 11.2, master:\r\n\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nscalar_inverse                ,     2.39      ,     2.39      ,     2.41   \r\nscalar_inverse_var            ,     1.77      ,     1.77      ,     1.78   \r\nfield_inverse                 ,     2.37      ,     2.38      ,     2.39   \r\nfield_inverse_var             ,     1.76      ,     1.77      ,     1.82\r\n\r\n\r\nclang 13.0.1, pr:\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nscalar_inverse                ,     2.70      ,     2.70      ,     2.72   \r\nscalar_inverse_var            ,     1.69      ,     1.70      ,     1.70   \r\nfield_inverse                 ,     2.69      ,     2.70      ,     2.70   \r\nfield_inverse_var             ,     1.69      ,     1.69      ,     1.70   \r\n\r\nclang 13.0.1, master:\r\n\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nscalar_inverse                ,     2.69      ,     2.70      ,     2.71   \r\nscalar_inverse_var            ,     1.69      ,     1.69      ,     1.70   \r\nfield_inverse                 ,     2.69      ,     2.69      ,     2.69   \r\nfield_inverse_var             ,     1.68      ,     1.68      ,     1.68\r\n```\r\n\r\nBut this is with asm on, I should have turned it off... Would be nice to see more benchmarks.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1055336664",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "reviewed",
      "id": 896358632,
      "node_id": "PRR_kwDOAP4Jqs41bVjo",
      "url": null,
      "actor": null,
      "commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I haven't reviewed the struct implementations of `secp256k1_?128_accum/mul/mulh/rshift` algorithms in detail. I think it will be good to have some randomized unit tests here. (Maybe it's ok to just run them when we have a native type too and compare the result?). Most of these functions should be exercised by the current tests already but some may be not. For example, the `shift` functions are only called with specific shifts, so I think some branches will never be taken.  ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-896358632",
      "submitted_at": "2022-03-01T14:36:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "reviewed",
      "id": 896473371,
      "node_id": "PRR_kwDOAP4Jqs41bxkb",
      "url": null,
      "actor": null,
      "commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-896473371",
      "submitted_at": "2022-03-01T15:41:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6163514670,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFvX8Uu",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6163514670",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-01T16:59:05Z"
    },
    {
      "event": "commented",
      "id": 1055652497,
      "node_id": "IC_kwDOAP4Jqs4-6_qR",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1055652497",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-01T16:59:16Z",
      "updated_at": "2022-03-01T16:59:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1055652497",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6198049989,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAFxbrzF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6198049989",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-07T21:16:16Z"
    },
    {
      "event": "reviewed",
      "id": 909502801,
      "node_id": "PRR_kwDOAP4Jqs42NelR",
      "url": null,
      "actor": null,
      "commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-909502801",
      "submitted_at": "2022-03-14T23:23:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "reviewed",
      "id": 923741288,
      "node_id": "PRR_kwDOAP4Jqs43Dyxo",
      "url": null,
      "actor": null,
      "commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-923741288",
      "submitted_at": "2022-03-28T20:54:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "reviewed",
      "id": 952456539,
      "node_id": "PRR_kwDOAP4Jqs44xVVb",
      "url": null,
      "actor": null,
      "commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-952456539",
      "submitted_at": "2022-04-25T21:09:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6693525535,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAGO9xgf",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6693525535",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-27T15:57:17Z"
    },
    {
      "event": "referenced",
      "id": 6695421338,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAGPFAWa",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6695421338",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "16ce0343a21b430db2428c8cab863b29a5eff541",
      "commit_url": "https://api.github.com/repos/BlockstreamResearch/simplicity/commits/16ce0343a21b430db2428c8cab863b29a5eff541",
      "created_at": "2022-05-27T20:59:32Z"
    },
    {
      "event": "commented",
      "id": 1149192317,
      "node_id": "IC_kwDOAP4Jqs5Ef0h9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1149192317",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-07T21:35:30Z",
      "updated_at": "2022-06-07T21:35:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've written [formal correctness proofs](https://htmlpreview.github.io/?https://github.com/ElementsProject/simplicity/blob/027e46ca91dc7eecf5a05707798edf17e72612c3/alectryon/verif_int128_impl.v.html) of the functions in the [`src/int128_struct_impl.h`](https://github.com/bitcoin-core/secp256k1/pull/1000/files#diff-c6a9f8563878e3e906666be1120021ae7ae49963c6f31b0af491e82c1c7339f1) file using [VST](https://vst.cs.princeton.edu/).  The most relevant part is the function specifications which can be found at lines of the form `Defintion secp256k1_*_spec : ...`",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1149192317",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "reviewed",
      "id": 1034204318,
      "node_id": "PRR_kwDOAP4Jqs49pLSe",
      "url": null,
      "actor": null,
      "commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1034204318",
      "submitted_at": "2022-07-11T12:39:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "reviewed",
      "id": 1034321187,
      "node_id": "PRR_kwDOAP4Jqs49pn0j",
      "url": null,
      "actor": null,
      "commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1034321187",
      "submitted_at": "2022-07-11T15:54:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6972065557,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAGfkUcV",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6972065557",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-11T19:09:55Z"
    },
    {
      "event": "commented",
      "id": 1180809578,
      "node_id": "IC_kwDOAP4Jqs5GYblq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1180809578",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-11T19:59:04Z",
      "updated_at": "2022-07-11T19:59:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "This is about 1% slower on my machine with gcc -O2 but about 1.5% faster with gcc -03. \r\n\r\ngcc 12.1.0 -O2, x86_64, asm disabled:\r\n```\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nmaster:\r\n\r\necdsa_verify                  ,    53.7       ,    53.9       ,    54.3    \r\necdsa_sign                    ,    39.5       ,    39.7       ,    40.9    \r\n\r\n\r\npr:\r\n\r\necdsa_verify                  ,    54.2       ,    54.4       ,    55.2    \r\necdsa_sign                    ,    39.7       ,    39.9       ,    40.6  \r\n```\r\n\r\ngcc 12.1.0 -O3, x86_64, asm disabled:\r\n```\r\n\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nmaster:\r\n\r\necdsa_verify                  ,    52.2       ,    52.5       ,    53.2    \r\necdsa_sign                    ,    39.6       ,    39.7       ,    40.3   \r\n\r\npr:\r\n\r\necdsa_verify                  ,    51.6       ,    51.8       ,    52.4    \r\necdsa_sign                    ,    39.5       ,    39.7       ,    40.4  \r\n```\r\n\r\n\r\n\r\nAnd it seems that gcc version 12 is finally faster at -O3 than at -O2...\r\n\r\n\r\nDo we care about the loss in O2? I guess no.\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1180809578",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1180835711,
      "node_id": "IC_kwDOAP4Jqs5GYh9_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1180835711",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-11T20:27:09Z",
      "updated_at": "2022-07-11T20:27:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Is the generated asm different?",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1180835711",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "reviewed",
      "id": 1035015388,
      "node_id": "PRR_kwDOAP4Jqs49sRTc",
      "url": null,
      "actor": null,
      "commit_id": "7edf1a373236f3200dee77aae12d9993b9d12995",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 7edf1a373236f3200dee77aae12d9993b9d12995 careful code inspection, a lot of tests with ` --with-test-override-wide-multiply=int128_struct` (which is not covered by CI yet), I have *not* looked at the VST proofs in details ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1035015388",
      "submitted_at": "2022-07-11T22:24:47Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "commented",
      "id": 1180939775,
      "node_id": "IC_kwDOAP4Jqs5GY7X_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1180939775",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-11T22:27:49Z",
      "updated_at": "2022-07-11T22:27:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Is the generated asm different?\r\n\r\nYeah, we could check but I imagine it will be a lot of work. It would probably make sense to first run the internal benchmarks and see where we lose performance. And then look at the asm of these functions.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1180939775",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "reviewed",
      "id": 1046828989,
      "node_id": "PRR_kwDOAP4Jqs4-ZVe9",
      "url": null,
      "actor": null,
      "commit_id": "7edf1a373236f3200dee77aae12d9993b9d12995",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1046828989",
      "submitted_at": "2022-07-21T21:29:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7073980814,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAGlpGGO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7073980814",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T15:20:56Z"
    },
    {
      "event": "commented",
      "id": 1199451247,
      "node_id": "IC_kwDOAP4Jqs5Hfixv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1199451247",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T14:52:13Z",
      "updated_at": "2022-07-29T14:52:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@roconnor-blockstream Did you update your VST proofs to the changes suggested by Pieter? (If no, are planning to do so?)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1199451247",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "mentioned",
      "id": 7090085916,
      "node_id": "MEE_lADOAP4Jqs49xgVTzwAAAAGmmiAc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7090085916",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T14:52:13Z"
    },
    {
      "event": "subscribed",
      "id": 7090085921,
      "node_id": "SE_lADOAP4Jqs49xgVTzwAAAAGmmiAh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7090085921",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T14:52:14Z"
    },
    {
      "event": "reviewed",
      "id": 1055686496,
      "node_id": "PRR_kwDOAP4Jqs4-7H9g",
      "url": null,
      "actor": null,
      "commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "just some nits and typos in the new comments",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1055686496",
      "submitted_at": "2022-07-29T14:57:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7147286985,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAGqAvHJ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7147286985",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T13:49:50Z"
    },
    {
      "event": "commented",
      "id": 1208160411,
      "node_id": "IC_kwDOAP4Jqs5IAxCb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1208160411",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T13:52:38Z",
      "updated_at": "2022-08-08T13:52:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have not updated the proofs, but I do plan to do so.  I don't suggest waiting for them, but if you prefer to wait that's fine.\r\n\r\nI'm working on a second pass through the proofs anyways in an attempt to add more automatic tactics to help me, so it is slow going.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1208160411",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1230895355,
      "node_id": "IC_kwDOAP4Jqs5JXfj7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1230895355",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T21:45:14Z",
      "updated_at": "2022-08-29T21:45:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "While I continue to refactor my proofs to automate the tedious bits, I have now got to the point where the revised code in the int128_struct file is now proved correct.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1230895355",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "referenced",
      "id": 7657732622,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHIb7oO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7657732622",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "38498beedacbf021eb2eef94d90020fb721ec72c",
      "commit_url": "https://api.github.com/repos/BlockstreamResearch/simplicity/commits/38498beedacbf021eb2eef94d90020fb721ec72c",
      "created_at": "2022-10-24T21:14:46Z"
    },
    {
      "event": "commented",
      "id": 1289645445,
      "node_id": "IC_kwDOAP4Jqs5M3m2F",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1289645445",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-24T21:33:20Z",
      "updated_at": "2022-10-24T21:33:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm done my pass at refactoring my proof.  There isn't too much to say.  The new proofs are less tedious than they were before.  You are welcome to \"browse\" the proof at <https://htmlpreview.github.io/?https://github.com/ElementsProject/simplicity/blob/027e46ca91dc7eecf5a05707798edf17e72612c3/alectryon/verif_int128_impl.v.html> for whatever that's worth.  Again, the `*_spec` definitions are probably the most important bits as they define the pre and post-conditions of the functions that form the statements of what I've proved.\r\n\r\nThe most notable change is that the specification for `secp256k1_i128_to_i64` was amended to remove the precondition that the input be a 64-bit signed integer value.  Apparently libsecp256k1 on occasion will cast signed int128 numbers to signed int64 numbers, expecting to truncate the bits.  That seems kinda dicey to me, but okay.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1289645445",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1290157726,
      "node_id": "IC_kwDOAP4Jqs5M5j6e",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1290157726",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-25T08:09:09Z",
      "updated_at": "2022-10-25T08:09:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Apparently libsecp256k1 on occasion will cast signed int128 numbers to signed int64 numbers, expecting to truncate the bits. That seems kinda dicey to me, but okay.\r\n\r\nDo you have an example where this is unexpected (according to your impression)?",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1290157726",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1290672716,
      "node_id": "IC_kwDOAP4Jqs5M7hpM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1290672716",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-25T14:46:09Z",
      "updated_at": "2022-10-25T15:05:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looking into it more closely it seems the sketchy cases of casting large signed int128 numbers to int64 is always then immediately masked with `& M62`, so it isn't so dicey in practice.\r\n\r\nTo check on this I created [a commit](https://github.com/roconnor-blockstream/secp256k1/commit/da641861e84ada1e1298e6d0fa77b5b8c03daeb2) that splits out [a `secp256k1_i128_to_u64` function](https://github.com/roconnor-blockstream/secp256k1/blob/da641861e84ada1e1298e6d0fa77b5b8c03daeb2/src/int128_native_impl.h#L62) and [adds a `VERIFY_CHECK` to the `secp256k1_i128_to_i64` function](https://github.com/roconnor-blockstream/secp256k1/blob/da641861e84ada1e1298e6d0fa77b5b8c03daeb2/src/int128_native_impl.h#L67).  This passes the tests.  It will fail the tests with only the `VERIFY_CHECK` added.\r\n\r\nI'm not proposing we add that commit.  I only made it for validation purposes. Although we could add it if people really think that is a good idea, but that would be a separate PR.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1290672716",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "comment_deleted",
      "id": 7721929253,
      "node_id": "CDE_lADOAP4Jqs49xgVTzwAAAAHMQ0ol",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7721929253",
      "actor": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T10:30:01Z"
    },
    {
      "event": "reviewed",
      "id": 1167339412,
      "node_id": "PRR_kwDOAP4Jqs5FlC-U",
      "url": null,
      "actor": null,
      "commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I created a commit (https://github.com/jonasnick/secp256k1/commits/20211026_int128-jn) that adds int128_struct tests to CI (including an MSVC test that uses native (u)mul128). Feel free to cherry-pick and squash.\r\n\r\nI also ran some benchmarks just to confirm that the changes to `field_5x52_int128` and `scalar_4x64` don't unexpectedly affect performance (https://gist.github.com/jonasnick/aed0f881aabe9b9f5bd769fcf3efbef8)",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1167339412",
      "submitted_at": "2022-11-03T16:57:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "reviewed",
      "id": 1170532875,
      "node_id": "PRR_kwDOAP4Jqs5FxOoL",
      "url": null,
      "actor": null,
      "commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I added some basic tests to [my branch](https://github.com/jonasnick/secp256k1/commits/20211026_int128-jn) mostly to confirm that the code is working as expected. But I think also generally it would be better if the code was tested. The tests also exercise a branch that was not executed before (`i128_rshift` with `b >= 64`).\r\n\r\n> This also opens up the possibility of removing the 32-bit field and scalar implementations should that ever be desired.\r\n\r\nI didn't really investigate this but benchmarks on my (64-bit) machine indicate that this won't be easy:\r\n\r\n```\r\n./configure --with-test-override-wide-multiply=int64 --with-asm=no\r\n        ecdsa_verify                  103.0\r\n./configure --with-test-override-wide-multiply=int128_struct --with-asm=no\r\n        ecdsa_verify                  188.0\r\n```",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1170532875",
      "submitted_at": "2022-11-07T14:59:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDI5MTRiY2NiYzA5MTM4MDZlZTY0NDI1YTI3ZDM4Y2RjMjdiMjg4ZTg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2914bccbc0913806ee64425a27d38cdc27b288e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2914bccbc0913806ee64425a27d38cdc27b288e8",
      "tree": {
        "sha": "0f019b3c3ef8d468b597eca8fbe3f7b8e8c8d1a3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0f019b3c3ef8d468b597eca8fbe3f7b8e8c8d1a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/694ce8fb2d1fd8a3d641d7c33705691d41a2a860",
          "sha": "694ce8fb2d1fd8a3d641d7c33705691d41a2a860",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/694ce8fb2d1fd8a3d641d7c33705691d41a2a860"
        }
      ],
      "message": "Simulated int128 type.",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2022-11-07T21:37:24Z"
      },
      "author": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2022-07-27T15:09:51Z"
      },
      "sha": "2914bccbc0913806ee64425a27d38cdc27b288e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRjZWFhMWY1Nzk2M2QxYTg4YjI0OTc0ZWFiNGI0OWJhYWM2ZDA0Y2Q",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dceaa1f57963d1a88b24974eab4b49baac6d04cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dceaa1f57963d1a88b24974eab4b49baac6d04cd",
      "tree": {
        "sha": "24d25db7aeff30863dae25e615ef8c0e193f4a5d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/24d25db7aeff30863dae25e615ef8c0e193f4a5d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2914bccbc0913806ee64425a27d38cdc27b288e8",
          "sha": "2914bccbc0913806ee64425a27d38cdc27b288e8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2914bccbc0913806ee64425a27d38cdc27b288e8"
        }
      ],
      "message": "int128: Tidy #includes of int128.h and int128_impl.h\n\nAfter this commit, int128.h and int128_impl.h are included as follows:\n - .c files which use int128 include int128_impl.h (after util.h)\n - .h files which use int128 include int128.h (after util.h)\n\nThis list is exhaustive. util.h needs to included first because it sets\nup necessary #defines.",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2022-11-07T21:38:30Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2022-02-01T13:43:16Z"
      },
      "sha": "dceaa1f57963d1a88b24974eab4b49baac6d04cd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGEzNDBkOTUwMGE5YzQ1ZTVjMjYxMTc0ZjQ4YjNlYjE4YjNiMzY0N2Q",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "tree": {
        "sha": "178f8782663c7ed5d9b144d8edc8dac8526fe809",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/178f8782663c7ed5d9b144d8edc8dac8526fe809"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dceaa1f57963d1a88b24974eab4b49baac6d04cd",
          "sha": "dceaa1f57963d1a88b24974eab4b49baac6d04cd",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dceaa1f57963d1a88b24974eab4b49baac6d04cd"
        }
      ],
      "message": "ci: add int128_struct tests",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2022-11-07T21:55:43Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2022-11-02T12:33:25Z"
      },
      "sha": "a340d9500a9c45e5c261174f48b3eb18b3b3647d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7756701623,
      "node_id": "HRFPE_lADOAP4Jqs49xgVTzwAAAAHOVd-3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7756701623",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T21:56:23Z"
    },
    {
      "event": "commented",
      "id": 1306278445,
      "node_id": "IC_kwDOAP4Jqs5N3Dot",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1306278445",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T22:02:15Z",
      "updated_at": "2022-11-07T22:02:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonasnick I've merged your tests into one commit.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1306278445",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "mentioned",
      "id": 7756747050,
      "node_id": "MEE_lADOAP4Jqs49xgVTzwAAAAHOVpEq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7756747050",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T22:02:16Z"
    },
    {
      "event": "subscribed",
      "id": 7756747061,
      "node_id": "SE_lADOAP4Jqs49xgVTzwAAAAHOVpE1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7756747061",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T22:02:16Z"
    },
    {
      "event": "commented",
      "id": 1306385135,
      "node_id": "IC_kwDOAP4Jqs5N3drv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1306385135",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T23:51:09Z",
      "updated_at": "2022-11-07T23:55:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Some benchmarking on ARM64 hardware (AWS a1.large, Linux, GCC 11.2, all with `--enable-static --disable-shared`):\r\n\r\nthis PR (a340d9500a9c45e5c261174f48b3eb18b3b3647d):\r\n* aarch64 (64-bit):\r\n  * `--with-test-override-wide-multiply=int64 --with-asm=no`:\r\n    * ecdsa_verify                  ,   149.0       ,   149.0       ,   149.0\r\n    * ecdsa_sign                    ,    98.2       ,    98.2       ,    98.4\r\n  * `--with-test-override-wide-multiply=int128 --with-asm=no`:\r\n    * ecdsa_verify                  ,   175.0       ,   175.0       ,   176.0\r\n    * ecdsa_sign                    ,   101.0       ,   101.0       ,   102.0\r\n  * `--with-test-override-wide-multiply=int128_struct --with-asm=no`:\r\n    * ecdsa_verify                  ,   294.0       ,   295.0       ,   295.0\r\n    * ecdsa_sign                    ,   154.0       ,   154.0       ,   154.0\r\n* armhf (32-bit, but running on the same 64-bit hardware):\r\n  * `--with-test-override-wide-multiply=int64 --with-asm=no`:\r\n    * ecdsa_verify                  ,   301.0       ,   301.0       ,   301.0\r\n    * ecdsa_sign                    ,   172.0       ,   172.0       ,   172.0\r\n  * `--with-test-override-wide-multiply=int64 --with-asm=arm`:\r\n    * ecdsa_verify                  ,   256.0       ,   256.0       ,   256.0    \r\n    * ecdsa_sign                    ,   154.0       ,   154.0       ,   154.0    \r\n  * `--with-test-override-wide-multiply=int128_struct --with-asm=no`:\r\n    * ecdsa_verify                  ,   477.0       ,   478.0       ,   481.0\r\n    * ecdsa_sign                    ,   265.0       ,   266.0       ,   266.0\r\n\r\nPR's base commit (694ce8fb2d1fd8a3d641d7c33705691d41a2a860):\r\n* aarch64 (64-bit):\r\n  * `--with-test-override-wide-multiply=int64 --with-asm=no`:\r\n    * ecdsa_verify                  ,   149.0       ,   149.0       ,   149.0    \r\n    * ecdsa_sign                    ,    98.2       ,    98.3       ,    98.3    \r\n  * `--with-test-override-wide-multiply=int128 --with-asm=no`:\r\n    * ecdsa_verify                  ,   175.0       ,   175.0       ,   176.0    \r\n    * ecdsa_sign                    ,   102.0       ,   102.0       ,   102.0    \r\n* armhf (32-bit):\r\n  * `--with-test-override-wide-multiply=int64 --with-asm=no`:\r\n    * ecdsa_verify                  ,   300.0       ,   301.0       ,   301.0    \r\n    * ecdsa_sign                    ,   172.0       ,   172.0       ,   172.0    \r\n  * `--with-test-override-wide-multiply=int64 --with-asm=arm`:\r\n    * ecdsa_verify                  ,   256.0       ,   256.0       ,   256.0    \r\n    * ecdsa_sign                    ,   155.0       ,   155.0       ,   155.0    \r\n\r\nSo conclusions (for this platform):\r\n* This PR doesn't make anything worse in terms for existing wide-multiply configurations (int64, int128).\r\n* **int64 is faster than int128**, but within int64, 64-bit output is faster than 32-bit output.\r\n* 32-bit ARM asm code is still faster than pure C.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1306385135",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1312784569,
      "node_id": "IC_kwDOAP4Jqs5OP4C5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1312784569",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-13T17:46:17Z",
      "updated_at": "2022-11-13T17:46:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not sure we should care about whether the MSVC 64-bit ARM logic is tested. We clearly can't promise testing on every possible hardware/OS/system/compiler combination, so we need to make some choices. Perhaps this is worth including once we have a release: a list of systems we're testing on, which is a subset of the systems we aim to work on (everything C89 + uint64_t, pretty much).\r\n\r\nIt's perhaps a bit strange to include code specifically to optimize performance on MSVC 64-bit ARM, without considering that platform tested. We could drop the optimization, but unless there is a concern that having code for optimization present would be misinterpreted as \"supported\", we could also just leave it for now.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1312784569",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "reviewed",
      "id": 1178355637,
      "node_id": "PRR_kwDOAP4Jqs5GPEe1",
      "url": null,
      "actor": null,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1178355637",
      "submitted_at": "2022-11-14T01:47:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "commented",
      "id": 1313584961,
      "node_id": "IC_kwDOAP4Jqs5OS7dB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1313584961",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T12:09:44Z",
      "updated_at": "2022-11-14T12:09:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa\r\n\r\n> We could drop the optimization, but unless there is a concern that having code for optimization present would be misinterpreted as \"supported\", we could also just leave it for now.\r\n\r\nI agree, my remark was mostly about adding code paths that have never been run at all.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1313584961",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "mentioned",
      "id": 7803476815,
      "node_id": "MEE_lADOAP4Jqs49xgVTzwAAAAHRH5tP",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7803476815",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T12:09:44Z"
    },
    {
      "event": "subscribed",
      "id": 7803476826,
      "node_id": "SE_lADOAP4Jqs49xgVTzwAAAAHRH5ta",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7803476826",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T12:09:44Z"
    },
    {
      "event": "commented",
      "id": 1313912808,
      "node_id": "IC_kwDOAP4Jqs5OULfo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1313912808",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T15:14:57Z",
      "updated_at": "2022-11-14T15:14:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Presumably we can add configuration options so that our MSVC test infrastructure can at least exercise this code path on X86.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1313912808",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1313922786,
      "node_id": "IC_kwDOAP4Jqs5OUN7i",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1313922786",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T15:21:09Z",
      "updated_at": "2022-11-14T15:21:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "@roconnor-blockstream We could add a configure/config flag for forcing the use of _mulh/_umulh over _mul128/_umul128, and set it for one of our MSVC CI configs.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1313922786",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "mentioned",
      "id": 7805305051,
      "node_id": "MEE_lADOAP4Jqs49xgVTzwAAAAHRO4Db",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7805305051",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T15:21:09Z"
    },
    {
      "event": "subscribed",
      "id": 7805305064,
      "node_id": "SE_lADOAP4Jqs49xgVTzwAAAAHRO4Do",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7805305064",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T15:21:09Z"
    },
    {
      "event": "commented",
      "id": 1314356456,
      "node_id": "IC_kwDOAP4Jqs5OV3zo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1314356456",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T20:44:02Z",
      "updated_at": "2022-11-14T22:06:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "I wrote some randomized tests for the int128 functions: https://github.com/sipa/secp256k1/commits/202211_int128\r\n\r\nNot everything is covered, but the most tricky functions are.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1314356456",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1314506894,
      "node_id": "IC_kwDOAP4Jqs5OWciO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1314506894",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T22:45:30Z",
      "updated_at": "2022-11-14T22:47:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @roconnor-blockstream We could add a configure/config flag for forcing the use of _mulh/_umulh over _mul128/_umul128, and set it for one of our MSVC CI configs.\r\n\r\nhttps://github.com/real-or-random/secp256k1/tree/202211-int128-mulh-override implemented here, ready to be cherry-picked\r\n\r\nedit: I've tested this on local MSVC on wine with \r\n```\r\n./configure --enable-dev-mode --host=x86_64-w64-mingw32 --with-test-override-wide-multiply=int128_struct CPPFLAGS=\"-DSECP256K1_MSVC_MULH_TEST_OVERRIDE\" CC=/opt/msvc/bin/x64/cl CFLAGS=\"-nologo -diagnosti\r\ncs:caret\" LDFLAGS=\"-XCClinker -nologo -XCClinker -diagnostics:caret\" NM=\"/opt/msvc/bin/x64/dumpbin -symbols -headers\" AR=\"/opt/msvc/bin/x64/lib\"\r\n```",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1314506894",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "mentioned",
      "id": 7808793059,
      "node_id": "MEE_lADOAP4Jqs49xgVTzwAAAAHRcLnj",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7808793059",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T22:45:30Z"
    },
    {
      "event": "subscribed",
      "id": 7808793065,
      "node_id": "SE_lADOAP4Jqs49xgVTzwAAAAHRcLnp",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7808793065",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T22:45:30Z"
    },
    {
      "event": "commented",
      "id": 1317162545,
      "node_id": "IC_kwDOAP4Jqs5Ogk4x",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1317162545",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-16T15:03:09Z",
      "updated_at": "2022-11-16T15:03:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I wrote some randomized tests for the int128 functions: https://github.com/sipa/secp256k1/commits/202211_int128\r\n>\r\n> Not everything is covered, but the most tricky functions are.\r\n\r\nUpdate: now all functions are covered.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1317162545",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1317541302,
      "node_id": "IC_kwDOAP4Jqs5OiBW2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1317541302",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-16T19:14:50Z",
      "updated_at": "2022-11-16T19:14:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK a340d9500a9c45e5c261174f48b3eb18b3b3647d\r\n\r\nI think we can deal with the proposed follow-ups in future PRs.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1317541302",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "commented",
      "id": 1317549542,
      "node_id": "IC_kwDOAP4Jqs5OiDXm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1317549542",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-16T19:21:25Z",
      "updated_at": "2022-11-16T19:21:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1317549542",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "merged",
      "id": 7827348925,
      "node_id": "ME_lADOAP4Jqs49xgVTzwAAAAHSi929",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7827348925",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ddf2b2910eb19032f8dd657c66735115ae24bfba",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/ddf2b2910eb19032f8dd657c66735115ae24bfba",
      "created_at": "2022-11-16T19:37:13Z"
    },
    {
      "event": "closed",
      "id": 7827348958,
      "node_id": "CE_lADOAP4Jqs49xgVTzwAAAAHSi93e",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7827348958",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-16T19:37:13Z"
    },
    {
      "event": "referenced",
      "id": 7847721064,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHTwrho",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7847721064",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e40fd277b7a157e68576a457e2968f0adb2bbab1",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/e40fd277b7a157e68576a457e2968f0adb2bbab1",
      "created_at": "2022-11-18T21:51:20Z"
    },
    {
      "event": "commented",
      "id": 1322172746,
      "node_id": "IC_kwDOAP4Jqs5OzsFK",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1322172746",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-21T14:47:10Z",
      "updated_at": "2022-11-21T14:54:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Just for reference, I redid the aarch64 benchmarks from https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1306385135 on more modern hardware (Apple M1, and Amazon's Graviton 3). In both cases, int128 was fastest, followed by int64, and int128_struct last.\r\n\r\nThe actual numbers from Amazon g7 instances (which are based on Graviton 3).\r\n\r\n```\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nint128\r\necdsa_verify                  ,    48.6       ,    48.7       ,    48.9    \r\necdsa_sign                    ,    33.6       ,    33.6       ,    33.6    \r\n\r\nint64\r\necdsa_verify                  ,    60.8       ,    60.8       ,    60.9    \r\necdsa_sign                    ,    44.0       ,    44.0       ,    44.0    \r\n\r\nint128_struct\r\necdsa_verify                  ,   105.0       ,   105.0       ,   105.0    \r\necdsa_sign                    ,    58.2       ,    58.2       ,    58.2\r\n```\r\n\r\nNumbers on Apple M1:\r\n```\r\nBenchmark                     ,    Min(us)    ,    Avg(us)    ,    Max(us)    \r\n\r\nint128\r\necdsa_verify                  ,    31.4       ,    31.5       ,    32.0    \r\necdsa_sign                    ,    23.2       ,    23.3       ,    23.5    \r\n\r\nint64\r\necdsa_verify                  ,    54.6       ,    54.8       ,    55.5    \r\necdsa_sign                    ,    34.0       ,    34.0       ,    34.2    \r\n\r\nint128_struct\r\necdsa_verify                  ,    83.4       ,    83.9       ,    87.3    \r\necdsa_sign                    ,    45.4       ,    45.5       ,    45.5 \r\n```\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#issuecomment-1322172746",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1000"
    },
    {
      "event": "referenced",
      "id": 8021364918,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHeHFC2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8021364918",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9d47e7b71b2805430e8c7b43816efd225a6ccd8c",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/9d47e7b71b2805430e8c7b43816efd225a6ccd8c",
      "created_at": "2022-12-13T04:45:18Z"
    },
    {
      "event": "referenced",
      "id": 8041640175,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHfUbDv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8041640175",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "55ffd47cc6b61177a9670ecec359370ffdcab523",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/55ffd47cc6b61177a9670ecec359370ffdcab523",
      "created_at": "2022-12-14T21:22:09Z"
    },
    {
      "event": "referenced",
      "id": 8041673388,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHfUjKs",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8041673388",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "967c65b158ca73da38c4c1d16628bd4b41aa2676",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/967c65b158ca73da38c4c1d16628bd4b41aa2676",
      "created_at": "2022-12-14T21:26:54Z"
    },
    {
      "event": "referenced",
      "id": 8195351507,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHoeyPT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8195351507",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2238463065582d253192e98ae2f667de6cb232b3",
      "commit_url": "https://api.github.com/repos/BlockstreamResearch/simplicity/commits/2238463065582d253192e98ae2f667de6cb232b3",
      "created_at": "2023-01-10T19:47:26Z"
    },
    {
      "event": "referenced",
      "id": 8205538249,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHpFpPJ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8205538249",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "78b5ddf28b94200ef730008305f4824cdabfc4fa",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/78b5ddf28b94200ef730008305f4824cdabfc4fa",
      "created_at": "2023-01-11T21:16:52Z"
    },
    {
      "event": "referenced",
      "id": 8205565086,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAHpFvye",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8205565086",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "215394a1d5167034556210cabc66b524dd7c270d",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/215394a1d5167034556210cabc66b524dd7c270d",
      "created_at": "2023-01-11T21:21:01Z"
    },
    {
      "event": "referenced",
      "id": 8748930380,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAIJehVM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8748930380",
      "actor": {
        "login": "div72",
        "id": 60045611,
        "node_id": "MDQ6VXNlcjYwMDQ1NjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/60045611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/div72",
        "html_url": "https://github.com/div72",
        "followers_url": "https://api.github.com/users/div72/followers",
        "following_url": "https://api.github.com/users/div72/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/div72/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/div72/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/div72/subscriptions",
        "organizations_url": "https://api.github.com/users/div72/orgs",
        "repos_url": "https://api.github.com/users/div72/repos",
        "events_url": "https://api.github.com/users/div72/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/div72/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "945b09457569a68ff338368a99234bd8473da1bf",
      "commit_url": "https://api.github.com/repos/div72/Gridcoin-Research/commits/945b09457569a68ff338368a99234bd8473da1bf",
      "created_at": "2023-03-14T22:14:03Z"
    },
    {
      "event": "referenced",
      "id": 9068914933,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAIcjKj1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9068914933",
      "actor": {
        "login": "str4d",
        "id": 4993799,
        "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/str4d",
        "html_url": "https://github.com/str4d",
        "followers_url": "https://api.github.com/users/str4d/followers",
        "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
        "organizations_url": "https://api.github.com/users/str4d/orgs",
        "repos_url": "https://api.github.com/users/str4d/repos",
        "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/str4d/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0df7b459f686a563763f2c5add4a96d47bdbbd06",
      "commit_url": "https://api.github.com/repos/str4d/zcash/commits/0df7b459f686a563763f2c5add4a96d47bdbbd06",
      "created_at": "2023-04-21T15:40:14Z"
    },
    {
      "event": "reviewed",
      "id": 1444052022,
      "node_id": "PRR_kwDOAP4Jqs5WEnw2",
      "url": null,
      "actor": null,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#pullrequestreview-1444052022",
      "submitted_at": "2023-05-25T14:38:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
    },
    {
      "event": "referenced",
      "id": 9425177827,
      "node_id": "REFE_lADOAP4Jqs49xgVTzwAAAAIxyMzj",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9425177827",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "created_at": "2023-06-04T15:42:09Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737322264",
      "pull_request_review_id": 790439425,
      "id": 737322264,
      "node_id": "PRRC_kwDOAP4Jqs4r8qUY",
      "diff_hunk": "@@ -0,0 +1,131 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;\n+#else\n+typedef struct {\n+  uint64_t lo;\n+  uint64_t hi;\n+} secp256k1_uint128;\n+\n+typedef secp256k1_uint128 secp256k1_int128;\n+#endif\n+\n+/* Low 32 bits of a (u)int64_t as an uint64_t. */\n+#define LO32(x) ((uint64_t)(x) & 0xffffffff)\n+#define HI32(x) ((x) >> 32)",
      "path": "src/int128.h",
      "position": null,
      "original_position": 25,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why the uint64_t cast for LO32 but not for HI32?",
      "created_at": "2021-10-27T10:20:21Z",
      "updated_at": "2021-10-27T10:20:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r737322264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737322264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737328705",
      "pull_request_review_id": 790448119,
      "id": 737328705,
      "node_id": "PRRC_kwDOAP4Jqs4r8r5B",
      "diff_hunk": "@@ -324,54 +327,64 @@ static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp\n     md = (u & sd) + (v & se);\n     me = (q & sd) + (r & se);\n     /* Begin computing t*[d,e]. */\n-    cd = (int128_t)u * d0 + (int128_t)v * e0;\n-    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    secp256k1_i128_mul(&cd, u, d0);\n+    secp256k1_i128_accum_mul(&cd, v, e0);\n+    secp256k1_i128_mul(&ce, q, d0);\n+    secp256k1_i128_accum_mul(&ce, r, e0);\n     /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n-    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n-    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    md -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&cd) + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&ce) + me) & M62;\n     /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n-    cd += (int128_t)modinfo->modulus.v[0] * md;\n-    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);\n+    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);\n     /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n-    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n-    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);\n     /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n-    cd += (int128_t)u * d1 + (int128_t)v * e1;\n-    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    secp256k1_i128_accum_mul(&cd, u, d1);\n+    secp256k1_i128_accum_mul(&cd, v, e1);",
      "path": "src/modinv64_impl.h",
      "position": 152,
      "original_position": 70,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I just want to note that accumulating to cd twice requires different bounds analysis (which I haven't done) than summing then accumulating, although perhaps the C compiler was always free to rearrange it that way anyway?\r\n\r\nSame occurs repeatedly below, obviously.",
      "created_at": "2021-10-27T10:29:03Z",
      "updated_at": "2021-10-27T10:29:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r737328705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737328705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737562620",
      "pull_request_review_id": 790772401,
      "id": 737562620,
      "node_id": "PRRC_kwDOAP4Jqs4r9k_8",
      "diff_hunk": "@@ -0,0 +1,131 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;\n+#else\n+typedef struct {\n+  uint64_t lo;\n+  uint64_t hi;\n+} secp256k1_uint128;\n+\n+typedef secp256k1_uint128 secp256k1_int128;\n+#endif\n+\n+/* Low 32 bits of a (u)int64_t as an uint64_t. */\n+#define LO32(x) ((uint64_t)(x) & 0xffffffff)\n+#define HI32(x) ((x) >> 32)",
      "path": "src/int128.h",
      "position": null,
      "original_position": 25,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": 737322264,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm planning to remove these macros soon, but the idea was that I wanted to specifically use signed/unsigned shifts (depending on the type), while otherwise I generally used unsigned for bit-twiddling.",
      "created_at": "2021-10-27T14:59:17Z",
      "updated_at": "2021-10-27T15:04:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r737562620",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737562620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737563655",
      "pull_request_review_id": 790773928,
      "id": 737563655,
      "node_id": "PRRC_kwDOAP4Jqs4r9lQH",
      "diff_hunk": "@@ -324,54 +327,64 @@ static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp\n     md = (u & sd) + (v & se);\n     me = (q & sd) + (r & se);\n     /* Begin computing t*[d,e]. */\n-    cd = (int128_t)u * d0 + (int128_t)v * e0;\n-    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    secp256k1_i128_mul(&cd, u, d0);\n+    secp256k1_i128_accum_mul(&cd, v, e0);\n+    secp256k1_i128_mul(&ce, q, d0);\n+    secp256k1_i128_accum_mul(&ce, r, e0);\n     /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n-    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n-    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    md -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&cd) + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&ce) + me) & M62;\n     /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n-    cd += (int128_t)modinfo->modulus.v[0] * md;\n-    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);\n+    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);\n     /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n-    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n-    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);\n     /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n-    cd += (int128_t)u * d1 + (int128_t)v * e1;\n-    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    secp256k1_i128_accum_mul(&cd, u, d1);\n+    secp256k1_i128_accum_mul(&cd, v, e1);",
      "path": "src/modinv64_impl.h",
      "position": 152,
      "original_position": 70,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": 737328705,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh, you are saying that by re associating the sums here, I may be inducing an int128 overflow?\r\n\r\nI'll have to look into that.\r\n\r\n(Thanks, this is exactly the sort of feedback I was looking for in this early draft.)",
      "created_at": "2021-10-27T15:00:20Z",
      "updated_at": "2021-10-27T15:00:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r737563655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737563655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737586198",
      "pull_request_review_id": 790805117,
      "id": 737586198,
      "node_id": "PRRC_kwDOAP4Jqs4r9qwW",
      "diff_hunk": "@@ -324,54 +327,64 @@ static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp\n     md = (u & sd) + (v & se);\n     me = (q & sd) + (r & se);\n     /* Begin computing t*[d,e]. */\n-    cd = (int128_t)u * d0 + (int128_t)v * e0;\n-    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    secp256k1_i128_mul(&cd, u, d0);\n+    secp256k1_i128_accum_mul(&cd, v, e0);\n+    secp256k1_i128_mul(&ce, q, d0);\n+    secp256k1_i128_accum_mul(&ce, r, e0);\n     /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n-    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n-    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    md -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&cd) + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&ce) + me) & M62;\n     /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n-    cd += (int128_t)modinfo->modulus.v[0] * md;\n-    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);\n+    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);\n     /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n-    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n-    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);\n     /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n-    cd += (int128_t)u * d1 + (int128_t)v * e1;\n-    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    secp256k1_i128_accum_mul(&cd, u, d1);\n+    secp256k1_i128_accum_mul(&cd, v, e1);",
      "path": "src/modinv64_impl.h",
      "position": 152,
      "original_position": 70,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": 737328705,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm only saying that I didn't analyse it in its current form. I doubt there is an issue, but it should be checked. Though as I say, perhaps the C compiler was always free to rearrange it.",
      "created_at": "2021-10-27T15:23:03Z",
      "updated_at": "2021-10-27T15:23:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r737586198",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737586198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737608881",
      "pull_request_review_id": 790835490,
      "id": 737608881,
      "node_id": "PRRC_kwDOAP4Jqs4r9wSx",
      "diff_hunk": "@@ -324,54 +327,64 @@ static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp\n     md = (u & sd) + (v & se);\n     me = (q & sd) + (r & se);\n     /* Begin computing t*[d,e]. */\n-    cd = (int128_t)u * d0 + (int128_t)v * e0;\n-    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    secp256k1_i128_mul(&cd, u, d0);\n+    secp256k1_i128_accum_mul(&cd, v, e0);\n+    secp256k1_i128_mul(&ce, q, d0);\n+    secp256k1_i128_accum_mul(&ce, r, e0);\n     /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n-    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n-    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    md -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&cd) + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&ce) + me) & M62;\n     /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n-    cd += (int128_t)modinfo->modulus.v[0] * md;\n-    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);\n+    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);\n     /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n-    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n-    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);\n     /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n-    cd += (int128_t)u * d1 + (int128_t)v * e1;\n-    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    secp256k1_i128_accum_mul(&cd, u, d1);\n+    secp256k1_i128_accum_mul(&cd, v, e1);",
      "path": "src/modinv64_impl.h",
      "position": 152,
      "original_position": 70,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": 737328705,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I really hope the C compiler isn't allowed to keep trying to reassociate my operations in order to find some arrangement that invokes UB and thus allow itself to emit code to format my hard drive.",
      "created_at": "2021-10-27T15:46:04Z",
      "updated_at": "2021-10-27T15:46:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r737608881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737608881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737624919",
      "pull_request_review_id": 790857476,
      "id": 737624919,
      "node_id": "PRRC_kwDOAP4Jqs4r90NX",
      "diff_hunk": "@@ -324,54 +327,64 @@ static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp\n     md = (u & sd) + (v & se);\n     me = (q & sd) + (r & se);\n     /* Begin computing t*[d,e]. */\n-    cd = (int128_t)u * d0 + (int128_t)v * e0;\n-    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    secp256k1_i128_mul(&cd, u, d0);\n+    secp256k1_i128_accum_mul(&cd, v, e0);\n+    secp256k1_i128_mul(&ce, q, d0);\n+    secp256k1_i128_accum_mul(&ce, r, e0);\n     /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n-    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n-    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    md -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&cd) + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&ce) + me) & M62;\n     /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n-    cd += (int128_t)modinfo->modulus.v[0] * md;\n-    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);\n+    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);\n     /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n-    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n-    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);\n     /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n-    cd += (int128_t)u * d1 + (int128_t)v * e1;\n-    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    secp256k1_i128_accum_mul(&cd, u, d1);\n+    secp256k1_i128_accum_mul(&cd, v, e1);",
      "path": "src/modinv64_impl.h",
      "position": 152,
      "original_position": 70,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": 737328705,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Of course not.\n\nUB is defined in terms of the source code, not the compilation result.\n\nRearranging is something the compiler does long after that point, following the \"as if\" rule.",
      "created_at": "2021-10-27T16:03:21Z",
      "updated_at": "2021-10-27T16:03:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r737624919",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/737624919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/741902853",
      "pull_request_review_id": 796489708,
      "id": 741902853,
      "node_id": "PRRC_kwDOAP4Jqs4sOIoF",
      "diff_hunk": "@@ -0,0 +1,182 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+#include \"util.h\"\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;",
      "path": "src/int128.h",
      "position": null,
      "original_position": 14,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's a good idea to define our our own type with a separate prefix. I guess then the entire logic currently in `util.h` will conceptually belong here. ",
      "created_at": "2021-11-03T12:49:09Z",
      "updated_at": "2021-11-03T13:15:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r741902853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/741902853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/741930602",
      "pull_request_review_id": 796528876,
      "id": 741930602,
      "node_id": "PRRC_kwDOAP4Jqs4sOPZq",
      "diff_hunk": "@@ -0,0 +1,182 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+#include \"util.h\"\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;",
      "path": "src/int128.h",
      "position": null,
      "original_position": 14,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "in_reply_to_id": 741902853,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am inclined to move the int128 logic from util.h into this file.  I just haven't done it yet.",
      "created_at": "2021-11-03T13:22:30Z",
      "updated_at": "2021-11-03T13:22:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r741930602",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/741930602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766637961",
      "pull_request_review_id": 828835400,
      "id": 766637961,
      "node_id": "PRRC_kwDOAP4Jqs4tsfeJ",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+#ifndef SECP256K1_INT128_64_IMPL_H\n+#define SECP256K1_INT128_64_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 10,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\r\n  #error\r\n  #include <intrin.h>\r\n  #define secp256k1_umulh __umulh\r\n  #define secp256k1_mulh __mulh\r\n#else\r\n```\r\n\r\nFollow-up: I confirmed that change results in an error in the the MSVC build, so the intrinsics should indeed be used.",
      "created_at": "2021-12-10T12:25:29Z",
      "updated_at": "2021-12-10T12:25:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r766637961",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766637961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 6,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766919482",
      "pull_request_review_id": 829240091,
      "id": 766919482,
      "node_id": "PRRC_kwDOAP4Jqs4ttkM6",
      "diff_hunk": "@@ -0,0 +1,60 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_INT128_NATIVE)\n+#include \"int128_native.h\"\n+#elif defined(SECP256K1_INT128_STRUCT)\n+#include \"int128_struct.h\"\n+#else\n+#error \"Please select int128 implementation\"\n+#endif\n+\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 20,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function does not appear to be used outside of `src/int128_struct_impl.h`, perhaps it can be considered a private implementation detail there, rather than exposing it?",
      "created_at": "2021-12-10T19:13:31Z",
      "updated_at": "2021-12-10T19:21:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r766919482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766919482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766919814",
      "pull_request_review_id": 829240091,
      "id": 766919814,
      "node_id": "PRRC_kwDOAP4Jqs4ttkSG",
      "diff_hunk": "@@ -0,0 +1,60 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_INT128_NATIVE)\n+#include \"int128_native.h\"\n+#elif defined(SECP256K1_INT128_STRUCT)\n+#include \"int128_struct.h\"\n+#else\n+#error \"Please select int128 implementation\"\n+#endif\n+\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 43,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function does not appear to be used outside of `src/int128_struct_impl.h`, perhaps it can be considered a private implementation detail there, rather than exposing it?",
      "created_at": "2021-12-10T19:14:07Z",
      "updated_at": "2021-12-10T19:21:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r766919814",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766919814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766923425",
      "pull_request_review_id": 829240091,
      "id": 766923425,
      "node_id": "PRRC_kwDOAP4Jqs4ttlKh",
      "diff_hunk": "@@ -172,27 +190,28 @@ static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {\n      * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */\n     uint64_t mask = !flag - 1;\n     uint64_t nonzero = (secp256k1_scalar_is_zero(r) != 0) - 1;\n-    uint128_t t = (uint128_t)(r->d[0] ^ mask) + ((SECP256K1_N_0 + 1) & mask);\n-    r->d[0] = t & nonzero; t >>= 64;\n-    t += (uint128_t)(r->d[1] ^ mask) + (SECP256K1_N_1 & mask);\n-    r->d[1] = t & nonzero; t >>= 64;\n-    t += (uint128_t)(r->d[2] ^ mask) + (SECP256K1_N_2 & mask);\n-    r->d[2] = t & nonzero; t >>= 64;\n-    t += (uint128_t)(r->d[3] ^ mask) + (SECP256K1_N_3 & mask);\n-    r->d[3] = t & nonzero;\n+    secp256k1_uint128 t;\n+    secp256k1_u128_from_u64(&t, r->d[0] ^ mask);\n+    secp256k1_u128_accum_u64(&t, (SECP256K1_N_0 + 1) & mask);\n+    r->d[0] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1] ^ mask);\n+    secp256k1_u128_accum_u64(&t, SECP256K1_N_1 & mask);\n+    r->d[1] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2] ^ mask);\n+    secp256k1_u128_accum_u64(&t, SECP256K1_N_2 & mask);\n+    r->d[2] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3] ^ mask);\n+    secp256k1_u128_accum_u64(&t, SECP256K1_N_3 & mask);\n+    r->d[3] = secp256k1_u128_to_u64(&t) & nonzero;\n     return 2 * (mask == 0) - 1;\n }\n \n /* Inspired by the macros in OpenSSL's crypto/bn/asm/x86_64-gcc.c. */\n \n /** Add a*b to the number defined by (c0,c1,c2). c2 must never overflow. */\n #define muladd(a,b) { \\\n-    uint64_t tl, th; \\\n-    { \\\n-        uint128_t t = (uint128_t)a * b; \\\n-        th = t >> 64;         /* at most 0xFFFFFFFFFFFFFFFE */ \\\n-        tl = t; \\\n-    } \\\n+    uint64_t th = secp256k1_umulh(a, b);  /* at most 0xFFFFFFFFFFFFFFFE */ \\",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 157,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Really the `th` and `tl` computed here (and below) are the top and bottom of `secp256k1_uint128`. Perhaps it should be written in function of the actual `secp256k1_u128_...` functions, instead of the lower-level `secp256k1_umulh`? This would have as advantages:\r\n* Not relying on the compiler to recognize that `a * b` is computed twice and can be deduplicated (in native mode).\r\n* Permit removing `secp256k1_umulh` from the header.",
      "created_at": "2021-12-10T19:20:49Z",
      "updated_at": "2021-12-10T19:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r766923425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/766923425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767145649",
      "pull_request_review_id": 829525522,
      "id": 767145649,
      "node_id": "PRRC_kwDOAP4Jqs4tubax",
      "diff_hunk": "@@ -0,0 +1,182 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+#include \"util.h\"\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;",
      "path": "src/int128.h",
      "position": null,
      "original_position": 14,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "in_reply_to_id": 741902853,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This hasn't been resolved yet.",
      "created_at": "2021-12-11T11:45:40Z",
      "updated_at": "2021-12-11T11:45:40Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r767145649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767145649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767163950",
      "pull_request_review_id": 829539823,
      "id": 767163950,
      "node_id": "PRRC_kwDOAP4Jqs4tuf4u",
      "diff_hunk": "@@ -0,0 +1,182 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+#include \"util.h\"\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;",
      "path": "src/int128.h",
      "position": null,
      "original_position": 14,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "in_reply_to_id": 741902853,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you not happy with the changes to `util.h`?",
      "created_at": "2021-12-11T15:15:36Z",
      "updated_at": "2021-12-11T15:15:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r767163950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767163950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767172937",
      "pull_request_review_id": 829547056,
      "id": 767172937,
      "node_id": "PRRC_kwDOAP4Jqs4tuiFJ",
      "diff_hunk": "@@ -0,0 +1,182 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+#include \"util.h\"\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;",
      "path": "src/int128.h",
      "position": null,
      "original_position": 14,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "in_reply_to_id": 741902853,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd prefer to move the remaining `#ifdef` `WIDEMUL` logic in `util.h` to `int128_impl.h` (or `int128.h`?) because it belongs there conceptually.\r\n\r\nI think `util.h` is just the kitchen sink for code pieces that don't have a proper home (or where we were too lazy to create a proper home. Now that you introduce `int128_impl.h` here, I think that's the place where those `#ifdefs` belong.",
      "created_at": "2021-12-11T16:59:31Z",
      "updated_at": "2021-12-11T16:59:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r767172937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767172937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767175584",
      "pull_request_review_id": 829549229,
      "id": 767175584,
      "node_id": "PRRC_kwDOAP4Jqs4tuiug",
      "diff_hunk": "@@ -0,0 +1,182 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+#include \"util.h\"\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;",
      "path": "src/int128.h",
      "position": null,
      "original_position": 14,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "in_reply_to_id": 741902853,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As it stands when `SECP256K1_WIDEMUL_INT64` ends up being defined then `int128_impl.h` isn't even imported anywhere.  So I'm not sure what you are imagining.",
      "created_at": "2021-12-11T17:28:23Z",
      "updated_at": "2021-12-11T17:28:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r767175584",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/767175584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796106242",
      "pull_request_review_id": 868475933,
      "id": 796106242,
      "node_id": "PRRC_kwDOAP4Jqs4vc54C",
      "diff_hunk": "@@ -172,27 +190,28 @@ static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {\n      * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */\n     uint64_t mask = !flag - 1;\n     uint64_t nonzero = (secp256k1_scalar_is_zero(r) != 0) - 1;\n-    uint128_t t = (uint128_t)(r->d[0] ^ mask) + ((SECP256K1_N_0 + 1) & mask);\n-    r->d[0] = t & nonzero; t >>= 64;\n-    t += (uint128_t)(r->d[1] ^ mask) + (SECP256K1_N_1 & mask);\n-    r->d[1] = t & nonzero; t >>= 64;\n-    t += (uint128_t)(r->d[2] ^ mask) + (SECP256K1_N_2 & mask);\n-    r->d[2] = t & nonzero; t >>= 64;\n-    t += (uint128_t)(r->d[3] ^ mask) + (SECP256K1_N_3 & mask);\n-    r->d[3] = t & nonzero;\n+    secp256k1_uint128 t;\n+    secp256k1_u128_from_u64(&t, r->d[0] ^ mask);\n+    secp256k1_u128_accum_u64(&t, (SECP256K1_N_0 + 1) & mask);\n+    r->d[0] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1] ^ mask);\n+    secp256k1_u128_accum_u64(&t, SECP256K1_N_1 & mask);\n+    r->d[1] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2] ^ mask);\n+    secp256k1_u128_accum_u64(&t, SECP256K1_N_2 & mask);\n+    r->d[2] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3] ^ mask);\n+    secp256k1_u128_accum_u64(&t, SECP256K1_N_3 & mask);\n+    r->d[3] = secp256k1_u128_to_u64(&t) & nonzero;\n     return 2 * (mask == 0) - 1;\n }\n \n /* Inspired by the macros in OpenSSL's crypto/bn/asm/x86_64-gcc.c. */\n \n /** Add a*b to the number defined by (c0,c1,c2). c2 must never overflow. */\n #define muladd(a,b) { \\\n-    uint64_t tl, th; \\\n-    { \\\n-        uint128_t t = (uint128_t)a * b; \\\n-        th = t >> 64;         /* at most 0xFFFFFFFFFFFFFFFE */ \\\n-        tl = t; \\\n-    } \\\n+    uint64_t th = secp256k1_umulh(a, b);  /* at most 0xFFFFFFFFFFFFFFFE */ \\",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 157,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "in_reply_to_id": 766923425,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-01-31T22:10:24Z",
      "updated_at": "2022-01-31T22:10:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r796106242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796106242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796106373",
      "pull_request_review_id": 868476115,
      "id": 796106373,
      "node_id": "PRRC_kwDOAP4Jqs4vc56F",
      "diff_hunk": "@@ -0,0 +1,60 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_INT128_NATIVE)\n+#include \"int128_native.h\"\n+#elif defined(SECP256K1_INT128_STRUCT)\n+#include \"int128_struct.h\"\n+#else\n+#error \"Please select int128 implementation\"\n+#endif\n+\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 43,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "in_reply_to_id": 766919814,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-01-31T22:10:36Z",
      "updated_at": "2022-01-31T22:10:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r796106373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796106373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796106474",
      "pull_request_review_id": 868476261,
      "id": 796106474,
      "node_id": "PRRC_kwDOAP4Jqs4vc57q",
      "diff_hunk": "@@ -0,0 +1,60 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_INT128_NATIVE)\n+#include \"int128_native.h\"\n+#elif defined(SECP256K1_INT128_STRUCT)\n+#include \"int128_struct.h\"\n+#else\n+#error \"Please select int128 implementation\"\n+#endif\n+\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 20,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "c8d49e27106d9e9adf592aba1c588a76c562fa1d",
      "in_reply_to_id": 766919482,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-01-31T22:10:47Z",
      "updated_at": "2022-01-31T22:10:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r796106474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796106474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796614457",
      "pull_request_review_id": 869155589,
      "id": 796614457,
      "node_id": "PRRC_kwDOAP4Jqs4ve185",
      "diff_hunk": "@@ -0,0 +1,182 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include <stdint.h>\n+#include \"util.h\"\n+\n+/*\n+#ifdef UINT128_MAX\n+#undef UINT128_MAX\n+*/\n+\n+#if defined(UINT128_MAX)\n+typedef uint128_t secp256k1_uint128;\n+typedef int128_t secp256k1_int128;",
      "path": "src/int128.h",
      "position": null,
      "original_position": 14,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3bf06c364e3ad9321b5a1d8aabe9113dc9ee62bb",
      "in_reply_to_id": 741902853,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I was wrong. See below though.",
      "created_at": "2022-02-01T13:50:45Z",
      "updated_at": "2022-02-01T13:50:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r796614457",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796614457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/800550889",
      "pull_request_review_id": 874519856,
      "id": 800550889,
      "node_id": "PRRC_kwDOAP4Jqs4vt2_p",
      "diff_hunk": "@@ -324,54 +327,64 @@ static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp\n     md = (u & sd) + (v & se);\n     me = (q & sd) + (r & se);\n     /* Begin computing t*[d,e]. */\n-    cd = (int128_t)u * d0 + (int128_t)v * e0;\n-    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    secp256k1_i128_mul(&cd, u, d0);\n+    secp256k1_i128_accum_mul(&cd, v, e0);\n+    secp256k1_i128_mul(&ce, q, d0);\n+    secp256k1_i128_accum_mul(&ce, r, e0);\n     /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n-    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n-    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    md -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&cd) + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&ce) + me) & M62;\n     /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n-    cd += (int128_t)modinfo->modulus.v[0] * md;\n-    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);\n+    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);\n     /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n-    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n-    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);\n     /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n-    cd += (int128_t)u * d1 + (int128_t)v * e1;\n-    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    secp256k1_i128_accum_mul(&cd, u, d1);\n+    secp256k1_i128_accum_mul(&cd, v, e1);",
      "path": "src/modinv64_impl.h",
      "position": 152,
      "original_position": 70,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": 737328705,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could we just introduce a temporary variable and sum up there first? Or better, add a `secp256k1_i128_accum_mul_twice` that will accumulate only in the int128 impl? This will save us the reviewer time here. I expect the compiler to prune it anyway.\r\n\r\n(Or has anyone redone the bound analysis? I guess it's not hard but I'd need to refresh my memory here.)",
      "created_at": "2022-02-07T11:13:19Z",
      "updated_at": "2022-02-07T11:13:19Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r800550889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/800550889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816653095",
      "pull_request_review_id": 896140777,
      "id": 816653095,
      "node_id": "PRRC_kwDOAP4Jqs4wrSMn",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d);\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b);\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(secp256k1_int128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstatic SECP256K1_INLINE int secp256k1_i128_check_bit(const secp256k1_int128 *a, unsigned int n);\r\n```\r\nsame for u128 version",
      "created_at": "2022-03-01T10:43:29Z",
      "updated_at": "2022-03-01T11:15:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r816653095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816653095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816674400",
      "pull_request_review_id": 896140777,
      "id": 816674400,
      "node_id": "PRRC_kwDOAP4Jqs4wrXZg",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 6,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, I'm not sure about `_WIN64`. This is defined by icc for example, and as I understand also by mingw. (The Internet says that mingw, which is basically \"gcc for windows\", will support the MSVC intrinsicts, but it will also have a native 128 bit, so we'll probably want to use the latter.)\r\n\r\nMSVC is what provides those intrinsics and `_MSC_VER` should really only be defined on MSVC. What about one of these two?\r\n\r\n```\r\n#if defined(_MSC_VER) && defined(_WIN64)\r\n```\r\nor\r\n```\r\n#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64))\r\n```\r\n\r\nCurrently, the two versions should be equivalent. This may change if MSVC starts to support another 64 bit target in the future, and then I believe it is likely that `__mulh` und `__umulh` will exist, so I lean for the first option. But anyway, when that change happens to MSVC, we can deal with it...\r\n\r\nParts of my comment are guesswork so far, I believe we'll need to test compilation.",
      "created_at": "2022-03-01T11:12:21Z",
      "updated_at": "2022-03-01T11:15:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r816674400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816674400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816809887",
      "pull_request_review_id": 896358632,
      "id": 816809887,
      "node_id": "PRRC_kwDOAP4Jqs4wr4ef",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {\n+   if (b >= 64) {\n+     r->lo = (uint64_t)((int64_t)(r->hi) >> (b-64));\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> 63);\n+   } else if (b > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<b)-1)) << (64-b)) | r->lo >> b;\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> b);\n+   }\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {\n+   return (int64_t)a->lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a) {\n+   r->hi = (uint64_t)(a >> 63);\n+   r->lo = (uint64_t)a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b) {\n+   return a->hi == b->hi && a->lo == b->lo;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 125,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we should name this `secp256k1_i128_eq_var`. Or try to make it const-time. A standard way would be:\r\n```suggestion\r\nstatic SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b) {\r\n   return !((a->hi ^ b->hi) | (a->lo ^ b->lo));\r\n```\r\nNot sure if this works though.",
      "created_at": "2022-03-01T14:19:45Z",
      "updated_at": "2022-03-01T14:36:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r816809887",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816809887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816811839",
      "pull_request_review_id": 896358632,
      "id": 816811839,
      "node_id": "PRRC_kwDOAP4Jqs4wr48_",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {\n+   if (b >= 64) {\n+     r->lo = (uint64_t)((int64_t)(r->hi) >> (b-64));\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> 63);\n+   } else if (b > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<b)-1)) << (64-b)) | r->lo >> b;\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> b);\n+   }\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {\n+   return (int64_t)a->lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a) {\n+   r->hi = (uint64_t)(a >> 63);\n+   r->lo = (uint64_t)a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b) {\n+   return a->hi == b->hi && a->lo == b->lo;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(secp256k1_int128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi == (uint64_t)1 << (n - 64) && r->lo == 0",
      "path": "src/int128_struct_impl.h",
      "position": 173,
      "original_position": 129,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n   VERIFY_CHECK(n < 128);\r\n   return n >= 64 ? r->hi == (uint64_t)1 << (n - 64) && r->lo == 0\r\n```\r\nsame for the unsigned version",
      "created_at": "2022-03-01T14:22:02Z",
      "updated_at": "2022-03-01T14:36:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r816811839",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816811839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816813515",
      "pull_request_review_id": 896358632,
      "id": 816813515,
      "node_id": "PRRC_kwDOAP4Jqs4wr5XL",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 105,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstatic SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {\r\n    VERIFY_CHECK(b < 128);\r\n```\r\nsame for the unsigned version",
      "created_at": "2022-03-01T14:23:49Z",
      "updated_at": "2022-03-01T14:36:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r816813515",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816813515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816890551",
      "pull_request_review_id": 896473371,
      "id": 816890551,
      "node_id": "PRRC_kwDOAP4Jqs4wsMK3",
      "diff_hunk": "@@ -250,28 +250,23 @@ static SECP256K1_INLINE void secp256k1_int_cmov(int *r, const int *a, int flag)\n     *r = (int)(r_masked | a_masked);\n }\n \n-/* If USE_FORCE_WIDEMUL_{INT128,INT64} is set, use that wide multiplication implementation.\n+/* If USE_FORCE_WIDEMUL_{INT128, INT128_STRUCT, INT64} is set, use that wide multiplication implementation.\n  * Otherwise use the presence of __SIZEOF_INT128__ to decide.",
      "path": "src/util.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we should detect 64-bit MSVC here and select `SECP256K1_INT128_STRUCT`.",
      "created_at": "2022-03-01T15:41:58Z",
      "updated_at": "2022-03-01T15:41:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r816890551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816890551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 233,
      "original_start_line": 253,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816941142",
      "pull_request_review_id": 896545224,
      "id": 816941142,
      "node_id": "PRRC_kwDOAP4Jqs4wsYhW",
      "diff_hunk": "@@ -250,28 +250,23 @@ static SECP256K1_INLINE void secp256k1_int_cmov(int *r, const int *a, int flag)\n     *r = (int)(r_masked | a_masked);\n }\n \n-/* If USE_FORCE_WIDEMUL_{INT128,INT64} is set, use that wide multiplication implementation.\n+/* If USE_FORCE_WIDEMUL_{INT128, INT128_STRUCT, INT64} is set, use that wide multiplication implementation.\n  * Otherwise use the presence of __SIZEOF_INT128__ to decide.",
      "path": "src/util.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816890551,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd prefer that done in a separate PR.",
      "created_at": "2022-03-01T16:34:24Z",
      "updated_at": "2022-03-01T16:34:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r816941142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/816941142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 233,
      "original_start_line": 253,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/817150727",
      "pull_request_review_id": 896836551,
      "id": 817150727,
      "node_id": "PRRC_kwDOAP4Jqs4wtLsH",
      "diff_hunk": "@@ -250,28 +250,23 @@ static SECP256K1_INLINE void secp256k1_int_cmov(int *r, const int *a, int flag)\n     *r = (int)(r_masked | a_masked);\n }\n \n-/* If USE_FORCE_WIDEMUL_{INT128,INT64} is set, use that wide multiplication implementation.\n+/* If USE_FORCE_WIDEMUL_{INT128, INT128_STRUCT, INT64} is set, use that wide multiplication implementation.\n  * Otherwise use the presence of __SIZEOF_INT128__ to decide.",
      "path": "src/util.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816890551,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok sure, that will make things easier. :+1: \r\n\r\nedit: If the struct implementation is anyway only enabled with the right configure flag, we can also postpone the `#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64)` discussion and figure the best macros out later.",
      "created_at": "2022-03-01T21:23:19Z",
      "updated_at": "2022-03-01T21:30:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r817150727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/817150727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 233,
      "original_start_line": 253,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/820904781",
      "pull_request_review_id": 901973992,
      "id": 820904781,
      "node_id": "PRRC_kwDOAP4Jqs4w7gNN",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {\n+   if (b >= 64) {\n+     r->lo = (uint64_t)((int64_t)(r->hi) >> (b-64));\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> 63);\n+   } else if (b > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<b)-1)) << (64-b)) | r->lo >> b;\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> b);\n+   }\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {\n+   return (int64_t)a->lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a) {\n+   r->hi = (uint64_t)(a >> 63);\n+   r->lo = (uint64_t)a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b) {\n+   return a->hi == b->hi && a->lo == b->lo;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 125,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816809887,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm going to change it to `eq_var`, since it is far from obvious to me that the native version is constant time.",
      "created_at": "2022-03-07T16:55:18Z",
      "updated_at": "2022-03-07T16:55:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r820904781",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/820904781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821013488",
      "pull_request_review_id": 902126347,
      "id": 821013488,
      "node_id": "PRRC_kwDOAP4Jqs4w76vw",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 6,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816674400,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm inclined to go with `#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64))`",
      "created_at": "2022-03-07T19:02:10Z",
      "updated_at": "2022-03-07T19:02:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r821013488",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821013488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109493",
      "pull_request_review_id": 902262762,
      "id": 821109493,
      "node_id": "PRRC_kwDOAP4Jqs4w8SL1",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {\n+   if (b >= 64) {\n+     r->lo = (uint64_t)((int64_t)(r->hi) >> (b-64));\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> 63);\n+   } else if (b > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<b)-1)) << (64-b)) | r->lo >> b;\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> b);\n+   }\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {\n+   return (int64_t)a->lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a) {\n+   r->hi = (uint64_t)(a >> 63);\n+   r->lo = (uint64_t)a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b) {\n+   return a->hi == b->hi && a->lo == b->lo;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 125,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816809887,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2022-03-07T21:16:24Z",
      "updated_at": "2022-03-07T21:16:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r821109493",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109595",
      "pull_request_review_id": 902262883,
      "id": 821109595,
      "node_id": "PRRC_kwDOAP4Jqs4w8SNb",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {\n+   if (b >= 64) {\n+     r->lo = (uint64_t)((int64_t)(r->hi) >> (b-64));\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> 63);\n+   } else if (b > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<b)-1)) << (64-b)) | r->lo >> b;\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> b);\n+   }\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {\n+   return (int64_t)a->lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a) {\n+   r->hi = (uint64_t)(a >> 63);\n+   r->lo = (uint64_t)a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b) {\n+   return a->hi == b->hi && a->lo == b->lo;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(secp256k1_int128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi == (uint64_t)1 << (n - 64) && r->lo == 0",
      "path": "src/int128_struct_impl.h",
      "position": 173,
      "original_position": 129,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816811839,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2022-03-07T21:16:32Z",
      "updated_at": "2022-03-07T21:16:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r821109595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109682",
      "pull_request_review_id": 902262988,
      "id": 821109682,
      "node_id": "PRRC_kwDOAP4Jqs4w8SOy",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n) {\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b) {",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 105,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816813515,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2022-03-07T21:16:39Z",
      "updated_at": "2022-03-07T21:16:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r821109682",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109859",
      "pull_request_review_id": 902263251,
      "id": 821109859,
      "node_id": "PRRC_kwDOAP4Jqs4w8SRj",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_M_X64) | defined(_M_ARM64) | defined(_WIN64) /* MSVC */",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 6,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816674400,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2022-03-07T21:16:54Z",
      "updated_at": "2022-03-07T21:16:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r821109859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821109859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821110036",
      "pull_request_review_id": 902263476,
      "id": 821110036,
      "node_id": "PRRC_kwDOAP4Jqs4w8SUU",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d);\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq(const secp256k1_int128 *a, const secp256k1_int128 *b);\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(secp256k1_int128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816653095,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2022-03-07T21:17:09Z",
      "updated_at": "2022-03-07T21:17:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r821110036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/821110036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/823629125",
      "pull_request_review_id": 905706213,
      "id": 823629125,
      "node_id": "PRRC_kwDOAP4Jqs4xF5VF",
      "diff_hunk": "@@ -250,28 +250,23 @@ static SECP256K1_INLINE void secp256k1_int_cmov(int *r, const int *a, int flag)\n     *r = (int)(r_masked | a_masked);\n }\n \n-/* If USE_FORCE_WIDEMUL_{INT128,INT64} is set, use that wide multiplication implementation.\n+/* If USE_FORCE_WIDEMUL_{INT128, INT128_STRUCT, INT64} is set, use that wide multiplication implementation.\n  * Otherwise use the presence of __SIZEOF_INT128__ to decide.",
      "path": "src/util.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "b0d2fe0d9e0947dd092f18c179b91999a2c370e7",
      "in_reply_to_id": 816890551,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think we should detect 64-bit MSVC here and select `SECP256K1_INT128_STRUCT`.\r\n\r\nNote for the future PR: What we should actually do is to use to word size to decide which implementation to use, independently of the exact compiler.",
      "created_at": "2022-03-10T11:39:19Z",
      "updated_at": "2022-03-10T11:39:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r823629125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/823629125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 233,
      "original_start_line": 253,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/826457360",
      "pull_request_review_id": 909502801,
      "id": 826457360,
      "node_id": "PRRC_kwDOAP4Jqs4xQr0Q",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@real-or-random Unsigned overflow from shifting is well defined right?  So I don't need the mask here?",
      "created_at": "2022-03-14T23:23:55Z",
      "updated_at": "2022-03-14T23:23:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r826457360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/826457360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/826768611",
      "pull_request_review_id": 909910919,
      "id": 826768611,
      "node_id": "PRRC_kwDOAP4Jqs4xR3zj",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 826457360,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, unsigned overflow is never UB, even when it comes from shifting. See C99: https://port70.net/~nsz/c/c99/n1256.html#6.5.7p4 \r\n\r\n(The corresponding C89 part is a little bit strange since it doesn't mention the UB explicitly and it works under the assumption that `int` and `long` are the only non-promoted integer types: https://port70.net/~nsz/c/c89/c89-draft.html#3.3.7 I mean ok, `stdint.h` does not exist in C89...)",
      "created_at": "2022-03-15T09:44:50Z",
      "updated_at": "2022-03-15T09:44:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r826768611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/826768611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/826905622",
      "pull_request_review_id": 910108857,
      "id": 826905622,
      "node_id": "PRRC_kwDOAP4Jqs4xSZQW",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 826457360,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I remember why I always write it this way, because we _technically_ don't know the size of `signed int`.",
      "created_at": "2022-03-15T12:16:15Z",
      "updated_at": "2022-03-15T12:17:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r826905622",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/826905622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/836841779",
      "pull_request_review_id": 923741288,
      "id": 836841779,
      "node_id": "PRRC_kwDOAP4Jqs4x4TEz",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 105,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`in n`.",
      "created_at": "2022-03-28T20:54:00Z",
      "updated_at": "2022-03-28T20:54:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r836841779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/836841779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/858030405",
      "pull_request_review_id": 952456539,
      "id": 858030405,
      "node_id": "PRRC_kwDOAP4Jqs4zJIFF",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#ifndef SECP256K1_INT128_NATIVE_IMPL_H\n+#define SECP256K1_INT128_NATIVE_IMPL_H\n+\n+#include \"int128.h\"\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r = (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r += (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r += a;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   *r >>= n;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a);\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a >> 64);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return (*r >> n == 0);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   *r = (int128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   int128_t ab = (int128_t)a * b;\n+   VERIFY_CHECK(0 <= ab ? *r <= INT128_MAX - ab : INT128_MIN - ab <= *r);\n+   *r += ab;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   *r = (int128_t)a * d - (int128_t)b * c;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   *r >>= n;\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {\n+   return *a;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a) {\n+   *r = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq_var(const secp256k1_int128 *a, const secp256k1_int128 *b) {\n+   return *a == *b;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(const secp256k1_int128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return (*r == (int128_t)1 << n);",
      "path": "src/int128_native_impl.h",
      "position": 76,
      "original_position": 73,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1 << 127 would cause signed integer overflow.\r\n\r\nThis never happens, but the VERIFY_CHECK should be reduced to n < 127.",
      "created_at": "2022-04-25T21:09:31Z",
      "updated_at": "2022-04-25T21:09:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r858030405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/858030405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/883745602",
      "pull_request_review_id": 987698757,
      "id": 883745602,
      "node_id": "PRRC_kwDOAP4Jqs40rONC",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#ifndef SECP256K1_INT128_NATIVE_IMPL_H\n+#define SECP256K1_INT128_NATIVE_IMPL_H\n+\n+#include \"int128.h\"\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r = (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r += (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r += a;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   *r >>= n;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a);\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a >> 64);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return (*r >> n == 0);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   *r = (int128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   int128_t ab = (int128_t)a * b;\n+   VERIFY_CHECK(0 <= ab ? *r <= INT128_MAX - ab : INT128_MIN - ab <= *r);\n+   *r += ab;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   *r = (int128_t)a * d - (int128_t)b * c;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   *r >>= n;\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {\n+   return *a;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a) {\n+   *r = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq_var(const secp256k1_int128 *a, const secp256k1_int128 *b) {\n+   return *a == *b;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(const secp256k1_int128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return (*r == (int128_t)1 << n);",
      "path": "src/int128_native_impl.h",
      "position": 76,
      "original_position": 73,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 858030405,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-05-27T15:58:04Z",
      "updated_at": "2022-05-27T15:58:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r883745602",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/883745602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/883745737",
      "pull_request_review_id": 987698941,
      "id": 883745737,
      "node_id": "PRRC_kwDOAP4Jqs40rOPJ",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 105,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 836841779,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-05-27T15:58:14Z",
      "updated_at": "2022-05-27T15:58:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r883745737",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/883745737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/884026661",
      "pull_request_review_id": 988225472,
      "id": 884026661,
      "node_id": "PRRC_kwDOAP4Jqs40sS0l",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 826457360,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, unsigned overflow is always defined, it's wrap-around no matter what",
      "created_at": "2022-05-27T23:17:26Z",
      "updated_at": "2022-05-27T23:17:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r884026661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/884026661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/884036769",
      "pull_request_review_id": 988246209,
      "id": 884036769,
      "node_id": "PRRC_kwDOAP4Jqs40sVSh",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 826457360,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right.  But *technically speaking* a `signed int` could, in some unrealistic universe, be 65 bits, thus subjecting `r->hi` to signed integer promotion and thus causing signed integer overflow.\r\n\r\nThat said, if people would like me to rewrite this to assume 32-bit `signed int`s, I'm happy to change it.",
      "created_at": "2022-05-28T00:07:45Z",
      "updated_at": "2022-05-28T00:07:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r884036769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/884036769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917836575",
      "pull_request_review_id": 1034204318,
      "id": 917836575,
      "node_id": "PRRC_kwDOAP4Jqs42tRMf",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#ifndef SECP256K1_INT128_NATIVE_IMPL_H\n+#define SECP256K1_INT128_NATIVE_IMPL_H\n+\n+#include \"int128.h\"\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r = (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r += (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r += a;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   *r >>= n;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a);\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a >> 64);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return (*r >> n == 0);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   *r = (int128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   int128_t ab = (int128_t)a * b;\n+   VERIFY_CHECK(0 <= ab ? *r <= INT128_MAX - ab : INT128_MIN - ab <= *r);\n+   *r += ab;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   *r = (int128_t)a * d - (int128_t)b * c;",
      "path": "src/int128_native_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make sense to check for overflow here?",
      "created_at": "2022-07-11T11:43:13Z",
      "updated_at": "2022-07-11T12:39:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917836575",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917836575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917842642",
      "pull_request_review_id": 1034204318,
      "id": 917842642,
      "node_id": "PRRC_kwDOAP4Jqs42tSrS",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d);\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq_var(const secp256k1_int128 *a, const secp256k1_int128 *b);\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(const secp256k1_int128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstatic SECP256K1_INLINE int secp256k1_i128_check_pow2(const secp256k1_int128 *r, unsigned int n);\r\n```\r\nI think this one deserves a different name. `check_bit` is very close to `check_bits` but the sematics are rather different. \r\n\r\nA comment could also be helpful here, and maybe also for `secp256k1_u128_check_bits`",
      "created_at": "2022-07-11T11:51:06Z",
      "updated_at": "2022-07-11T12:39:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917842642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917842642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917907627",
      "pull_request_review_id": 1034305529,
      "id": 917907627,
      "node_id": "PRRC_kwDOAP4Jqs42tiir",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 826457360,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> That said, if people would like me to rewrite this to assume 32-bit signed ints, I'm happy to change it.\r\n\r\nWell I think we assume at a lot of places in the code that ints are at most 32 bits (see also \"No integer promotion for uint32_t\" in `assumptions.h`). I think if you took care of this elsewhere in the entire file, it's meaningful to keep that \"protection\" (but I don't have a strong opinion).\r\n\r\nThough I think something like this is the idiomatic way of protecting against unsigned to signed promotion: \r\n\r\n```suggestion\r\n     r->lo = ((0U + r->hi) << (64-n)) | r->lo >> n;\r\n```",
      "created_at": "2022-07-11T13:07:13Z",
      "updated_at": "2022-07-11T17:45:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917907627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917907627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917917755",
      "pull_request_review_id": 1034321187,
      "id": 917917755,
      "node_id": "PRRC_kwDOAP4Jqs42tlA7",
      "diff_hunk": "@@ -60,6 +70,13 @@ static int secp256k1_modinv64_mul_cmp_62(const secp256k1_modinv64_signed62 *a, i\n     }\n     return 0;\n }\n+\n+/* Check if the determinant of t is equal to 1 << n. */\n+static int secp256k1_modinv64_det_bit(const secp256k1_modinv64_trans2x2 *t, unsigned int n) {",
      "path": "src/modinv64_impl.h",
      "position": null,
      "original_position": 58,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you accept the other change, then this should probably be\r\n```suggestion\r\nstatic int secp256k1_modinv64_det_check_pow2(const secp256k1_modinv64_trans2x2 *t, unsigned int n) {\r\n```",
      "created_at": "2022-07-11T13:17:14Z",
      "updated_at": "2022-07-11T15:54:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917917755",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917917755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917918152",
      "pull_request_review_id": 1034321187,
      "id": 917918152,
      "node_id": "PRRC_kwDOAP4Jqs42tlHI",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (uint64_t)((int64_t)(r->hi) >> (n-64));\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> 63);\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 113,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(as above)",
      "created_at": "2022-07-11T13:17:35Z",
      "updated_at": "2022-07-11T15:54:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917918152",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917918152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917919468",
      "pull_request_review_id": 1034321187,
      "id": 917919468,
      "node_id": "PRRC_kwDOAP4Jqs42tlbs",
      "diff_hunk": "@@ -324,54 +327,64 @@ static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp\n     md = (u & sd) + (v & se);\n     me = (q & sd) + (r & se);\n     /* Begin computing t*[d,e]. */\n-    cd = (int128_t)u * d0 + (int128_t)v * e0;\n-    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    secp256k1_i128_mul(&cd, u, d0);\n+    secp256k1_i128_accum_mul(&cd, v, e0);\n+    secp256k1_i128_mul(&ce, q, d0);\n+    secp256k1_i128_accum_mul(&ce, r, e0);\n     /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n-    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n-    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    md -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&cd) + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)secp256k1_i128_to_i64(&ce) + me) & M62;\n     /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n-    cd += (int128_t)modinfo->modulus.v[0] * md;\n-    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);\n+    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);\n     /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n-    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n-    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);\n+    VERIFY_CHECK((secp256k1_i128_to_i64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);\n     /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n-    cd += (int128_t)u * d1 + (int128_t)v * e1;\n-    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    secp256k1_i128_accum_mul(&cd, u, d1);\n+    secp256k1_i128_accum_mul(&cd, v, e1);",
      "path": "src/modinv64_impl.h",
      "position": 152,
      "original_position": 70,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "4c684ff8ff5668462f374beebd76dd4293f5d1bb",
      "in_reply_to_id": 737328705,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(resolving, see later comments in the main thread)",
      "created_at": "2022-07-11T13:18:56Z",
      "updated_at": "2022-07-11T15:54:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917919468",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917919468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917934034",
      "pull_request_review_id": 1034321187,
      "id": 917934034,
      "node_id": "PRRC_kwDOAP4Jqs42to_S",
      "diff_hunk": "@@ -69,49 +70,62 @@ SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scal\n }\n \n SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {\n-    uint128_t t;\n+    secp256k1_uint128 t;\n     VERIFY_CHECK(overflow <= 1);\n-    t = (uint128_t)r->d[0] + overflow * SECP256K1_N_C_0;\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[1] + overflow * SECP256K1_N_C_1;\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[2] + overflow * SECP256K1_N_C_2;\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint64_t)r->d[3];\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;\n+    secp256k1_u128_from_u64(&t, r->d[0]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_0);\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_1);\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_2);\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3]);\n+    r->d[3] = secp256k1_u128_to_u64(&t);\n     return overflow;\n }\n \n static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     int overflow;\n-    uint128_t t = (uint128_t)a->d[0] + b->d[0];\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[1] + b->d[1];\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[2] + b->d[2];\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[3] + b->d[3];\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    overflow = t + secp256k1_scalar_check_overflow(r);\n+    secp256k1_uint128 t;\n+    secp256k1_u128_from_u64(&t, a->d[0]);\n+    secp256k1_u128_accum_u64(&t, b->d[0]);\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[1]);\n+    secp256k1_u128_accum_u64(&t, b->d[1]);\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[2]);\n+    secp256k1_u128_accum_u64(&t, b->d[2]);\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[3]);\n+    secp256k1_u128_accum_u64(&t, b->d[3]);\n+    r->d[3] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    overflow = secp256k1_u128_to_u64(&t) + secp256k1_scalar_check_overflow(r);\n     VERIFY_CHECK(overflow == 0 || overflow == 1);\n     secp256k1_scalar_reduce(r, overflow);\n     return overflow;\n }\n \n static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {\n-    uint128_t t;\n+    secp256k1_uint128 t;\n     VERIFY_CHECK(bit < 256);\n     bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 6) > 3 makes this a noop */\n-    t = (uint128_t)r->d[0] + (((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[1] + (((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[2] + (((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[3] + (((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;\n+    secp256k1_u128_from_u64(&t, r->d[0]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));\n+    r->d[3] = secp256k1_u128_to_u64(&t);\n #ifdef VERIFY\n-    VERIFY_CHECK((t >> 64) == 0);\n+    secp256k1_u128_rshift(&t, 64);\n+    VERIFY_CHECK(secp256k1_u128_to_u64(&t) == 0);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 95,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    VERIFY_CHECK(secp256k1_u128_check_bits(&t, 64));\r\n```",
      "created_at": "2022-07-11T13:28:49Z",
      "updated_at": "2022-07-11T15:54:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917934034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917934034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917942979",
      "pull_request_review_id": 1034321187,
      "id": 917942979,
      "node_id": "PRRC_kwDOAP4Jqs42trLD",
      "diff_hunk": "@@ -542,14 +568,18 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l)\n \n     /* Reduce 258 bits into 256. */\n     /* r[0..3] = p[0..3] + p[4] * SECP256K1_N_C. */\n-    c = p0 + (uint128_t)SECP256K1_N_C_0 * p4;\n-    r->d[0] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p1 + (uint128_t)SECP256K1_N_C_1 * p4;\n-    r->d[1] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p2 + (uint128_t)p4;\n-    r->d[2] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p3;\n-    r->d[3] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n+    secp256k1_u128_from_u64(&c128, p0);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_0, p4);\n+    r->d[0] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p1);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_1, p4);\n+    r->d[1] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p2);\n+    secp256k1_u128_accum_u64(&c128, p4);\n+    r->d[2] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p3);\n+    r->d[3] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    c = secp256k1_u128_to_u64(&c128);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 217,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suggest\r\n```suggestion\r\n    r->d[3] = secp256k1_u128_to_u64(&c128);\r\n    c = secp256k1_u128_hi_u64(&c128);\r\n```\r\n\r\nor even inline `secp256k1_u128_to_u64(...)` in the last line of the function, then one `c` would suffice and  you'd avoid introducing a `c128`.",
      "created_at": "2022-07-11T13:37:08Z",
      "updated_at": "2022-07-11T15:54:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r917942979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917942979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 581,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918100935",
      "pull_request_review_id": 1034321187,
      "id": 918100935,
      "node_id": "PRRC_kwDOAP4Jqs42uRvH",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 85,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It took me a while to parse and understand these. Maybe it's a  good idea to add some comments.\r\n\r\nLet me try to explain my own words. Please tell me if I'm wrong.\r\n - `r->hi <= 0x7fffffffffffffffu` means \"`r` is positive.\"\r\n -  `X <= Y` is a way of writing $X \\implies Y$  if we know that $X \\in \\{0,1\\}$.  (I've never seen this. I had expected `!X || Y`, which works for all X. But `<=` is totally fine if it comes with a comment.)  \r\n\r\nSo the first line says: If `r` is positive and we're adding a positive number, then the sum should be positive. (Which is equivalent to having no overflow.)\r\n\r\nThe second line is the analogous thing that checks underflow.\r\n ",
      "created_at": "2022-07-11T15:54:34Z",
      "updated_at": "2022-07-11T15:54:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918100935",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918100935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 84,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918190368",
      "pull_request_review_id": 1034704698,
      "id": 918190368,
      "node_id": "PRRC_kwDOAP4Jqs42unkg",
      "diff_hunk": "@@ -542,14 +568,18 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l)\n \n     /* Reduce 258 bits into 256. */\n     /* r[0..3] = p[0..3] + p[4] * SECP256K1_N_C. */\n-    c = p0 + (uint128_t)SECP256K1_N_C_0 * p4;\n-    r->d[0] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p1 + (uint128_t)SECP256K1_N_C_1 * p4;\n-    r->d[1] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p2 + (uint128_t)p4;\n-    r->d[2] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p3;\n-    r->d[3] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n+    secp256k1_u128_from_u64(&c128, p0);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_0, p4);\n+    r->d[0] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p1);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_1, p4);\n+    r->d[1] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p2);\n+    secp256k1_u128_accum_u64(&c128, p4);\n+    r->d[2] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p3);\n+    r->d[3] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    c = secp256k1_u128_to_u64(&c128);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 217,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917942979,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The last line of the function exists outside this `#if` block (notice that the type of `c` is originally different between the two blocks).  So I cannot avoid making a `c` value here.   I suppose I could duplicate the last line if you think that is worthwhile.",
      "created_at": "2022-07-11T17:33:55Z",
      "updated_at": "2022-07-11T17:33:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918190368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918190368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 581,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918191574",
      "pull_request_review_id": 1034706384,
      "id": 918191574,
      "node_id": "PRRC_kwDOAP4Jqs42un3W",
      "diff_hunk": "@@ -69,49 +70,62 @@ SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scal\n }\n \n SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {\n-    uint128_t t;\n+    secp256k1_uint128 t;\n     VERIFY_CHECK(overflow <= 1);\n-    t = (uint128_t)r->d[0] + overflow * SECP256K1_N_C_0;\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[1] + overflow * SECP256K1_N_C_1;\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[2] + overflow * SECP256K1_N_C_2;\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint64_t)r->d[3];\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;\n+    secp256k1_u128_from_u64(&t, r->d[0]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_0);\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_1);\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_2);\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3]);\n+    r->d[3] = secp256k1_u128_to_u64(&t);\n     return overflow;\n }\n \n static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     int overflow;\n-    uint128_t t = (uint128_t)a->d[0] + b->d[0];\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[1] + b->d[1];\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[2] + b->d[2];\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[3] + b->d[3];\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    overflow = t + secp256k1_scalar_check_overflow(r);\n+    secp256k1_uint128 t;\n+    secp256k1_u128_from_u64(&t, a->d[0]);\n+    secp256k1_u128_accum_u64(&t, b->d[0]);\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[1]);\n+    secp256k1_u128_accum_u64(&t, b->d[1]);\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[2]);\n+    secp256k1_u128_accum_u64(&t, b->d[2]);\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[3]);\n+    secp256k1_u128_accum_u64(&t, b->d[3]);\n+    r->d[3] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    overflow = secp256k1_u128_to_u64(&t) + secp256k1_scalar_check_overflow(r);\n     VERIFY_CHECK(overflow == 0 || overflow == 1);\n     secp256k1_scalar_reduce(r, overflow);\n     return overflow;\n }\n \n static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {\n-    uint128_t t;\n+    secp256k1_uint128 t;\n     VERIFY_CHECK(bit < 256);\n     bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 6) > 3 makes this a noop */\n-    t = (uint128_t)r->d[0] + (((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[1] + (((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[2] + (((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[3] + (((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;\n+    secp256k1_u128_from_u64(&t, r->d[0]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));\n+    r->d[3] = secp256k1_u128_to_u64(&t);\n #ifdef VERIFY\n-    VERIFY_CHECK((t >> 64) == 0);\n+    secp256k1_u128_rshift(&t, 64);\n+    VERIFY_CHECK(secp256k1_u128_to_u64(&t) == 0);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 95,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917934034,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll compromise with `VERIFY_CHECK(secp256k1_u128_hi_u64(&t) == 0);`.",
      "created_at": "2022-07-11T17:35:25Z",
      "updated_at": "2022-07-11T17:35:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918191574",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918191574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918193758",
      "pull_request_review_id": 1034709459,
      "id": 918193758,
      "node_id": "PRRC_kwDOAP4Jqs42uoZe",
      "diff_hunk": "@@ -542,14 +568,18 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l)\n \n     /* Reduce 258 bits into 256. */\n     /* r[0..3] = p[0..3] + p[4] * SECP256K1_N_C. */\n-    c = p0 + (uint128_t)SECP256K1_N_C_0 * p4;\n-    r->d[0] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p1 + (uint128_t)SECP256K1_N_C_1 * p4;\n-    r->d[1] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p2 + (uint128_t)p4;\n-    r->d[2] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p3;\n-    r->d[3] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n+    secp256k1_u128_from_u64(&c128, p0);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_0, p4);\n+    r->d[0] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p1);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_1, p4);\n+    r->d[1] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p2);\n+    secp256k1_u128_accum_u64(&c128, p4);\n+    r->d[2] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p3);\n+    r->d[3] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    c = secp256k1_u128_to_u64(&c128);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 217,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917942979,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh,, I didn't didn't see that the ASM part uses the last line.  \r\n\r\n> . I suppose I could duplicate the last line if you think that is worthwhile.\r\n\r\nI don't think so.",
      "created_at": "2022-07-11T17:38:13Z",
      "updated_at": "2022-07-11T17:38:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918193758",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918193758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 581,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267059",
      "pull_request_review_id": 1034814456,
      "id": 918267059,
      "node_id": "PRRC_kwDOAP4Jqs42u6Sz",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "101cd3e29018a00a076017dda5c79a51f1b10892",
      "in_reply_to_id": 826457360,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done something similar to the suggestion.",
      "created_at": "2022-07-11T19:10:50Z",
      "updated_at": "2022-07-11T19:10:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918267059",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267291",
      "pull_request_review_id": 1034814776,
      "id": 918267291,
      "node_id": "PRRC_kwDOAP4Jqs42u6Wb",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#ifndef SECP256K1_INT128_NATIVE_IMPL_H\n+#define SECP256K1_INT128_NATIVE_IMPL_H\n+\n+#include \"int128.h\"\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r = (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   *r += (uint128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r += a;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   *r >>= n;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a);\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return (uint64_t)(*a >> 64);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   *r = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return (*r >> n == 0);\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   *r = (int128_t)a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   int128_t ab = (int128_t)a * b;\n+   VERIFY_CHECK(0 <= ab ? *r <= INT128_MAX - ab : INT128_MIN - ab <= *r);\n+   *r += ab;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   *r = (int128_t)a * d - (int128_t)b * c;",
      "path": "src/int128_native_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917836575,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-11T19:11:04Z",
      "updated_at": "2022-07-11T19:11:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918267291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267420",
      "pull_request_review_id": 1034814935,
      "id": 918267420,
      "node_id": "PRRC_kwDOAP4Jqs42u6Yc",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d);\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b);\n+\n+static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a);\n+\n+static SECP256K1_INLINE void secp256k1_i128_from_i64(secp256k1_int128 *r, int64_t a);\n+\n+static SECP256K1_INLINE int secp256k1_i128_eq_var(const secp256k1_int128 *a, const secp256k1_int128 *b);\n+\n+static SECP256K1_INLINE int secp256k1_i128_check_bit(const secp256k1_int128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917842642,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-11T19:11:13Z",
      "updated_at": "2022-07-11T19:11:14Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918267420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267505",
      "pull_request_review_id": 1034815069,
      "id": 918267505,
      "node_id": "PRRC_kwDOAP4Jqs42u6Zx",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));\n+   r->hi += hi;\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_dissip_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi - hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi - hi > 0x7fffffffffffffffu));\n+   r->hi -= hi;\n+   r->lo -= lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d) {\n+   secp256k1_i128_mul(r, a, d);\n+   secp256k1_i128_dissip_mul(r, b, c);\n+}\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (uint64_t)((int64_t)(r->hi) >> (n-64));\n+     r->hi = (uint64_t)((int64_t)(r->hi) >> 63);\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 113,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917918152,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-11T19:11:22Z",
      "updated_at": "2022-07-11T19:11:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918267505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267644",
      "pull_request_review_id": 1034815251,
      "id": 918267644,
      "node_id": "PRRC_kwDOAP4Jqs42u6b8",
      "diff_hunk": "@@ -60,6 +70,13 @@ static int secp256k1_modinv64_mul_cmp_62(const secp256k1_modinv64_signed62 *a, i\n     }\n     return 0;\n }\n+\n+/* Check if the determinant of t is equal to 1 << n. */\n+static int secp256k1_modinv64_det_bit(const secp256k1_modinv64_trans2x2 *t, unsigned int n) {",
      "path": "src/modinv64_impl.h",
      "position": null,
      "original_position": 58,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917917755,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-11T19:11:34Z",
      "updated_at": "2022-07-11T19:11:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918267644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267727",
      "pull_request_review_id": 1034815373,
      "id": 918267727,
      "node_id": "PRRC_kwDOAP4Jqs42u6dP",
      "diff_hunk": "@@ -542,14 +568,18 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l)\n \n     /* Reduce 258 bits into 256. */\n     /* r[0..3] = p[0..3] + p[4] * SECP256K1_N_C. */\n-    c = p0 + (uint128_t)SECP256K1_N_C_0 * p4;\n-    r->d[0] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p1 + (uint128_t)SECP256K1_N_C_1 * p4;\n-    r->d[1] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p2 + (uint128_t)p4;\n-    r->d[2] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n-    c += p3;\n-    r->d[3] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n+    secp256k1_u128_from_u64(&c128, p0);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_0, p4);\n+    r->d[0] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p1);\n+    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_1, p4);\n+    r->d[1] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p2);\n+    secp256k1_u128_accum_u64(&c128, p4);\n+    r->d[2] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    secp256k1_u128_accum_u64(&c128, p3);\n+    r->d[3] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);\n+    c = secp256k1_u128_to_u64(&c128);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 217,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917942979,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-11T19:11:42Z",
      "updated_at": "2022-07-11T19:11:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918267727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918267727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 581,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918268016",
      "pull_request_review_id": 1034815708,
      "id": 918268016,
      "node_id": "PRRC_kwDOAP4Jqs42u6hw",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((r->hi & (((uint64_t)1<<n)-1)) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);\n+   VERIFY_CHECK((r->hi <= 0x7fffffffffffffffu && hi <= 0x7fffffffffffffffu) <= (r->hi + hi <= 0x7fffffffffffffffu));\n+   VERIFY_CHECK((r->hi > 0x7fffffffffffffffu && hi > 0x7fffffffffffffffu) <= (r->hi + hi > 0x7fffffffffffffffu));",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 85,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 918100935,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-11T19:12:01Z",
      "updated_at": "2022-07-11T19:12:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918268016",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918268016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 84,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918268180",
      "pull_request_review_id": 1034815929,
      "id": 918268180,
      "node_id": "PRRC_kwDOAP4Jqs42u6kU",
      "diff_hunk": "@@ -69,49 +70,62 @@ SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scal\n }\n \n SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {\n-    uint128_t t;\n+    secp256k1_uint128 t;\n     VERIFY_CHECK(overflow <= 1);\n-    t = (uint128_t)r->d[0] + overflow * SECP256K1_N_C_0;\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[1] + overflow * SECP256K1_N_C_1;\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[2] + overflow * SECP256K1_N_C_2;\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint64_t)r->d[3];\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;\n+    secp256k1_u128_from_u64(&t, r->d[0]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_0);\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_1);\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2]);\n+    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_2);\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3]);\n+    r->d[3] = secp256k1_u128_to_u64(&t);\n     return overflow;\n }\n \n static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     int overflow;\n-    uint128_t t = (uint128_t)a->d[0] + b->d[0];\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[1] + b->d[1];\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[2] + b->d[2];\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)a->d[3] + b->d[3];\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    overflow = t + secp256k1_scalar_check_overflow(r);\n+    secp256k1_uint128 t;\n+    secp256k1_u128_from_u64(&t, a->d[0]);\n+    secp256k1_u128_accum_u64(&t, b->d[0]);\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[1]);\n+    secp256k1_u128_accum_u64(&t, b->d[1]);\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[2]);\n+    secp256k1_u128_accum_u64(&t, b->d[2]);\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, a->d[3]);\n+    secp256k1_u128_accum_u64(&t, b->d[3]);\n+    r->d[3] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    overflow = secp256k1_u128_to_u64(&t) + secp256k1_scalar_check_overflow(r);\n     VERIFY_CHECK(overflow == 0 || overflow == 1);\n     secp256k1_scalar_reduce(r, overflow);\n     return overflow;\n }\n \n static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {\n-    uint128_t t;\n+    secp256k1_uint128 t;\n     VERIFY_CHECK(bit < 256);\n     bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 6) > 3 makes this a noop */\n-    t = (uint128_t)r->d[0] + (((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n-    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[1] + (((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n-    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[2] + (((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));\n-    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    t += (uint128_t)r->d[3] + (((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));\n-    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;\n+    secp256k1_u128_from_u64(&t, r->d[0]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n+    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[1]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n+    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[2]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));\n+    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);\n+    secp256k1_u128_accum_u64(&t, r->d[3]);\n+    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));\n+    r->d[3] = secp256k1_u128_to_u64(&t);\n #ifdef VERIFY\n-    VERIFY_CHECK((t >> 64) == 0);\n+    secp256k1_u128_rshift(&t, 64);\n+    VERIFY_CHECK(secp256k1_u128_to_u64(&t) == 0);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 95,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "0a384cc04690f8045dece77e7f7efa18109e1496",
      "in_reply_to_id": 917934034,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-11T19:12:14Z",
      "updated_at": "2022-07-11T19:12:14Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r918268180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/918268180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/926885474",
      "pull_request_review_id": 1046828989,
      "id": 926885474,
      "node_id": "PRRC_kwDOAP4Jqs43PyZi",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *",
      "path": "src/int128_impl.h",
      "position": null,
      "original_position": 2,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't recall writing this in 2014.",
      "created_at": "2022-07-21T16:28:39Z",
      "updated_at": "2022-07-21T21:29:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r926885474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/926885474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/926992517",
      "pull_request_review_id": 1046828989,
      "id": 926992517,
      "node_id": "PRRC_kwDOAP4Jqs43QMiF",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_INT128_NATIVE)\n+#include \"int128_native.h\"\n+#elif defined(SECP256K1_INT128_STRUCT)\n+#include \"int128_struct.h\"\n+#else\n+#error \"Please select int128 implementation\"\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);",
      "path": "src/int128.h",
      "position": 16,
      "original_position": 18,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be possible to add a one-line comment about the semantics of each of these functions?",
      "created_at": "2022-07-21T18:33:23Z",
      "updated_at": "2022-07-21T21:29:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r926992517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/926992517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927015952",
      "pull_request_review_id": 1046828989,
      "id": 927015952,
      "node_id": "PRRC_kwDOAP4Jqs43QSQQ",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indentation is 4 spaces, both in functions and if/then/else blocks. (here and elsewhere in this PR)",
      "created_at": "2022-07-21T19:04:04Z",
      "updated_at": "2022-07-21T21:29:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927015952",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927015952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927019795",
      "pull_request_review_id": 1046828989,
      "id": 927019795,
      "node_id": "PRRC_kwDOAP4Jqs43QTMT",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting construction. The usual approach I've seen for this would be:\r\n\r\n```c\r\n    uint64_t lo = a * b;\r\n    r->lo += lo;\r\n    r->hi += secp256k1_umulh(a, b) + (r->lo < lo);\r\n```\r\n\r\nI don't think we always care about the performance of the struct approach here in most cases, but at least for MSVC this does become the most performant configuration. Any reason to think this code is preferable? Perhaps it's worth looking at how MSVC compiles both.",
      "created_at": "2022-07-21T19:09:28Z",
      "updated_at": "2022-07-21T21:29:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927019795",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927019795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927021831",
      "pull_request_review_id": 1046828989,
      "id": 927021831,
      "node_id": "PRRC_kwDOAP4Jqs43QTsH",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 39,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Likewise, here I'd use\r\n\r\n```c\r\nr->lo += a;\r\nr->hi += (r->lo < a);\r\n```\r\n",
      "created_at": "2022-07-21T19:12:02Z",
      "updated_at": "2022-07-21T21:29:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927021831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927021831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927088764",
      "pull_request_review_id": 1046828989,
      "id": 927088764,
      "node_id": "PRRC_kwDOAP4Jqs43QkB8",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 49,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: braces around (r->hi) are unnecessary.",
      "created_at": "2022-07-21T20:46:31Z",
      "updated_at": "2022-07-21T21:29:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927088764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927088764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927093361",
      "pull_request_review_id": 1046828989,
      "id": 927093361,
      "node_id": "PRRC_kwDOAP4Jqs43QlJx",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((1U * r->hi) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 83,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also here:\r\n\r\n```c\r\nuint64_t lo = (uint64_t)a * b;\r\nr->lo += lo;\r\nr->hi += (uint64_t)secp256k1_mulh(a, b) + (r->lo < lo);\r\n```\r\n(needs changes to the VERIFY_CHECKs too, though)",
      "created_at": "2022-07-21T20:51:53Z",
      "updated_at": "2022-07-21T21:30:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927093361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927093361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927470419",
      "pull_request_review_id": 1047645739,
      "id": 927470419,
      "node_id": "PRRC_kwDOAP4Jqs43SBNT",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, yours seems better, see https://godbolt.org/z/d593Yxocq",
      "created_at": "2022-07-22T09:27:36Z",
      "updated_at": "2022-07-22T09:27:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927470419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927470419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927629594",
      "pull_request_review_id": 1047872428,
      "id": 927629594,
      "node_id": "PRRC_kwDOAP4Jqs43SoEa",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The generated code still uses two multiplication instructions it seems, which is very suboptimal (though obviously better than 4 32-bit multiplications).\r\n\r\nI think the right approach is using `_mul128` and `_umul128` on MSVC actually, which compute both the low and high half. I think that all code in this int128_struct implementation which needs mulh/umulh also needs the lower half, so perhaps it's better to write things in function of those primitives?",
      "created_at": "2022-07-22T13:02:16Z",
      "updated_at": "2022-07-22T13:02:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927629594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927629594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927657141",
      "pull_request_review_id": 1047912665,
      "id": 927657141,
      "node_id": "PRRC_kwDOAP4Jqs43Suy1",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As I recall `_mul128` and `_umul128` are not available on 32-bit platforms.  That said, it still makes sense to abstract through those function.",
      "created_at": "2022-07-22T13:33:14Z",
      "updated_at": "2022-07-22T13:33:14Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927657141",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927657141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927667195",
      "pull_request_review_id": 1047927412,
      "id": 927667195,
      "node_id": "PRRC_kwDOAP4Jqs43SxP7",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My understanding is:\n* x64 has all four: `_mulh`, `_umulh`, `_mul128`, and `_umul128`.\n* arm64 only has `_mulh` and `_umulh`.\n* x86 and arm32 have none\n\nThe documentation is a bit inconsistent (one MSVC site says the _mulh are only available on x64, but another page lists them as available for arm64 too).\n\nStill, this matches what the hardware provides. x64 does have a 64x64->128 instruction, while arm64 only has separate low and high 64x64->64 multiplication instructions.",
      "created_at": "2022-07-22T13:44:23Z",
      "updated_at": "2022-07-22T13:44:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927667195",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927667195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927688879",
      "pull_request_review_id": 1047959427,
      "id": 927688879,
      "node_id": "PRRC_kwDOAP4Jqs43S2iv",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Trying to make a patch that implements this.",
      "created_at": "2022-07-22T14:07:15Z",
      "updated_at": "2022-07-22T14:07:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927688879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927688879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927699214",
      "pull_request_review_id": 1047974381,
      "id": 927699214,
      "node_id": "PRRC_kwDOAP4Jqs43S5EO",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((1U * r->hi) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 83,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927093361,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The VERIFY_CHECKS only operate on `hi` values, so I don't think the checks will need changes.",
      "created_at": "2022-07-22T14:18:02Z",
      "updated_at": "2022-07-22T14:18:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927699214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927699214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927746832",
      "pull_request_review_id": 1048043676,
      "id": 927746832,
      "node_id": "PRRC_kwDOAP4Jqs43TEsQ",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See https://github.com/sipa/secp256k1/commits/pr1000_mul128",
      "created_at": "2022-07-22T15:08:38Z",
      "updated_at": "2022-07-22T15:08:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927746832",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927746832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927888551",
      "pull_request_review_id": 1048247395,
      "id": 927888551,
      "node_id": "PRRC_kwDOAP4Jqs43TnSn",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I made a few small changes to the branch above, but I'm not going to touch it anymore.\r\n\r\nFeel free to ignore, include, or squash into this PR (perhaps subject to translating the changes to the formal proof code?).",
      "created_at": "2022-07-22T18:11:59Z",
      "updated_at": "2022-07-22T18:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r927888551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/927888551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/928931781",
      "pull_request_review_id": 1049537611,
      "id": 928931781,
      "node_id": "PRRC_kwDOAP4Jqs43Xl_F",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *",
      "path": "src/int128_impl.h",
      "position": null,
      "original_position": 2,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 926885474,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Arguably this file is a derived work of your `scalar_impl.h` file. :)  But I'm happy to remove it if you like.",
      "created_at": "2022-07-25T14:10:52Z",
      "updated_at": "2022-07-25T14:11:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r928931781",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/928931781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931198187",
      "pull_request_review_id": 1052702280,
      "id": 931198187,
      "node_id": "PRRC_kwDOAP4Jqs43gPTr",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *",
      "path": "src/int128_impl.h",
      "position": null,
      "original_position": 2,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 926885474,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-27T15:21:22Z",
      "updated_at": "2022-07-27T15:21:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r931198187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931198187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931198716",
      "pull_request_review_id": 1052703071,
      "id": 931198716,
      "node_id": "PRRC_kwDOAP4Jqs43gPb8",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927015952,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Merged your commit.",
      "created_at": "2022-07-27T15:21:50Z",
      "updated_at": "2022-07-27T15:21:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r931198716",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931198716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931198871",
      "pull_request_review_id": 1052703295,
      "id": 931198871,
      "node_id": "PRRC_kwDOAP4Jqs43gPeX",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927019795,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Merged your commit.",
      "created_at": "2022-07-27T15:21:58Z",
      "updated_at": "2022-07-27T15:21:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r931198871",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931198871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199027",
      "pull_request_review_id": 1052703539,
      "id": 931199027,
      "node_id": "PRRC_kwDOAP4Jqs43gPgz",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);\n+     r->hi = 0;\n+   } else if (n > 0) {\n+     r->lo = ((1U * r->hi) << (64-n)) | r->lo >> n;\n+     r->hi >>= n;\n+   }\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {\n+   return a->lo;\n+}\n+\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a) {\n+   return a->hi;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi = 0;\n+   r->lo = a;\n+}\n+\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   return n >= 64 ? r->hi >> (n - 64) == 0\n+                  : r->hi == 0 && r->lo >> n == 0;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   r->hi = (uint64_t)secp256k1_mulh(a, b);\n+   r->lo = (uint64_t)a * (uint64_t)b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {\n+   uint64_t lo = (uint64_t)a * (uint64_t)b;\n+   uint64_t hi = (uint64_t)secp256k1_mulh(a, b) + (~lo < r->lo);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 83,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927093361,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Merged your commit.",
      "created_at": "2022-07-27T15:22:06Z",
      "updated_at": "2022-07-27T15:22:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r931199027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199164",
      "pull_request_review_id": 1052703748,
      "id": 931199164,
      "node_id": "PRRC_kwDOAP4Jqs43gPi8",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);\n+   r->lo += a;\n+}\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {\n+   VERIFY_CHECK(n < 128);\n+   if (n >= 64) {\n+     r->lo = (r->hi) >> (n-64);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 49,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927088764,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Merged your commit.",
      "created_at": "2022-07-27T15:22:13Z",
      "updated_at": "2022-07-27T15:22:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r931199164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199274",
      "pull_request_review_id": 1052703907,
      "id": 931199274,
      "node_id": "PRRC_kwDOAP4Jqs43gPkq",
      "diff_hunk": "@@ -0,0 +1,154 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+  #include <intrin.h>\n+  #define secp256k1_umulh __umulh\n+  #define secp256k1_mulh __mulh\n+#else\n+static SECP256K1_INLINE uint64_t secp256k1_umulh(uint64_t a, uint64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   uint64_t t2 = (a >> 32) * (uint32_t)b;\n+   uint64_t t3 = (uint32_t)a*(b >> 32) + (t1 >> 32) + (uint32_t)t2;\n+   return (a >> 32)*(b >> 32) + (t2 >> 32) + (t3 >> 32);\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mulh(int64_t a, int64_t b) {\n+   uint64_t t1 = (uint64_t)(uint32_t)a * (uint32_t)b;\n+   int64_t t2 = (a >> 32) * (uint32_t)b;\n+   int64_t t3 = (uint32_t)a * (b >> 32);\n+   uint64_t t4 = (t1 >> 32) + (uint32_t)t2 + (uint32_t)t3;\n+   return (a >> 32) * (b >> 32) + (t2 >> 32) + (t3 >> 32) + (int64_t)(t4 >> 32);\n+}\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   r->hi = secp256k1_umulh(a, b);\n+   r->lo = a * b;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {\n+   uint64_t lo = a * b;\n+   r->hi += secp256k1_umulh(a, b) + (~lo < r->lo);\n+   r->lo += lo;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {\n+   r->hi += (r->lo > ~a);",
      "path": "src/int128_struct_impl.h",
      "position": null,
      "original_position": 39,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 927021831,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Merged your commit.",
      "created_at": "2022-07-27T15:22:19Z",
      "updated_at": "2022-07-27T15:22:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r931199274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199449",
      "pull_request_review_id": 1052704141,
      "id": 931199449,
      "node_id": "PRRC_kwDOAP4Jqs43gPnZ",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_INT128_NATIVE)\n+#include \"int128_native.h\"\n+#elif defined(SECP256K1_INT128_STRUCT)\n+#include \"int128_struct.h\"\n+#else\n+#error \"Please select int128 implementation\"\n+#endif\n+\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);",
      "path": "src/int128.h",
      "position": 16,
      "original_position": 18,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 926992517,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-27T15:22:28Z",
      "updated_at": "2022-07-27T15:22:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r931199449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/931199449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933354234",
      "pull_request_review_id": 1055686496,
      "id": 933354234,
      "node_id": "PRRC_kwDOAP4Jqs43odr6",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 23,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n/* Add an unsigned 64-bit value a to r.\r\n```",
      "created_at": "2022-07-29T14:52:40Z",
      "updated_at": "2022-07-29T14:57:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r933354234",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933354234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933354668",
      "pull_request_review_id": 1055686496,
      "id": 933354668,
      "node_id": "PRRC_kwDOAP4Jqs43odys",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+/* Multiply two signed 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 50,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n/* Multiply two signed 64-bit values a and b and add the result to r.\r\n```",
      "created_at": "2022-07-29T14:53:09Z",
      "updated_at": "2022-07-29T14:57:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r933354668",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933354668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933356144",
      "pull_request_review_id": 1055686496,
      "id": 933356144,
      "node_id": "PRRC_kwDOAP4Jqs43oeJw",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+/* Multiply two signed 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * Any overflow or underflow is undefined behaviour.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think \"any\" means just in the final addition, not in the multiplication. (It's pretty clear if you think about it but may be worth clarifying.)",
      "created_at": "2022-07-29T14:54:45Z",
      "updated_at": "2022-07-29T14:57:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r933356144",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933356144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933357107",
      "pull_request_review_id": 1055686496,
      "id": 933357107,
      "node_id": "PRRC_kwDOAP4Jqs43oeYz",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+/* Multiply two signed 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * Any overflow or underflow is undefined behaviour.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Compute a*d - b*c from signed 64-bit values and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d);\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b);\n+\n+/* Return the low 64-bits of a 128-bit value intepreted as an signed 64-bit value. */",
      "path": "src/int128.h",
      "position": null,
      "original_position": 63,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n/* Return the low 64-bits of a 128-bit value interpreted as an signed 64-bit value. */\r\n```",
      "created_at": "2022-07-29T14:55:45Z",
      "updated_at": "2022-07-29T14:57:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r933357107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933357107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933357732",
      "pull_request_review_id": 1055686496,
      "id": 933357732,
      "node_id": "PRRC_kwDOAP4Jqs43oeik",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */",
      "path": "src/int128.h",
      "position": null,
      "original_position": 39,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n/* Write an unsigned 64-bit value to r. */\r\n```",
      "created_at": "2022-07-29T14:56:23Z",
      "updated_at": "2022-07-29T14:57:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r933357732",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933357732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933364724",
      "pull_request_review_id": 1055701444,
      "id": 933364724,
      "node_id": "PRRC_kwDOAP4Jqs43ogP0",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *",
      "path": "src/int128_impl.h",
      "position": null,
      "original_position": 2,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "3560a1f09d354335872d4d307dab49da74f4dfb6",
      "in_reply_to_id": 926885474,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if it's better without a copyright header.  \r\n\r\n> Arguably this file is a derived work of your `scalar_impl.h` file. :) But I'm happy to remove it if you like.\r\n\r\nThen you may be violating the MIT license because it requires you to keep the copyright notice. :D\r\n\r\n\r\nFor me personally, I don't care. In the interest of getting this merged, I'll ACK this with and without notice, and with any of your names. But if you ask me, we should really see if I can make copyright notices easier in the future. ",
      "created_at": "2022-07-29T15:03:53Z",
      "updated_at": "2022-07-29T15:03:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r933364724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/933364724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940265652",
      "pull_request_review_id": 1065219165,
      "id": 940265652,
      "node_id": "PRRC_kwDOAP4Jqs44C1C0",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */",
      "path": "src/int128.h",
      "position": null,
      "original_position": 39,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": 933357732,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-08T13:50:14Z",
      "updated_at": "2022-08-08T13:50:14Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r940265652",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940265652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940265810",
      "pull_request_review_id": 1065219386,
      "id": 940265810,
      "node_id": "PRRC_kwDOAP4Jqs44C1FS",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+/* Multiply two signed 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * Any overflow or underflow is undefined behaviour.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Compute a*d - b*c from signed 64-bit values and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_det(secp256k1_int128 *r, int64_t a, int64_t b, int64_t c, int64_t d);\n+\n+/* Signed (arithmetic) right shift.\n+ * Non-constant time in b.\n+ */\n+static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int b);\n+\n+/* Return the low 64-bits of a 128-bit value intepreted as an signed 64-bit value. */",
      "path": "src/int128.h",
      "position": null,
      "original_position": 63,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": 933357107,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-08T13:50:22Z",
      "updated_at": "2022-08-08T13:50:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r940265810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940265810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940266011",
      "pull_request_review_id": 1065219723,
      "id": 940266011,
      "node_id": "PRRC_kwDOAP4Jqs44C1Ib",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+/* Multiply two signed 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * Any overflow or underflow is undefined behaviour.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 51,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": 933356144,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-08T13:50:34Z",
      "updated_at": "2022-08-08T13:50:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r940266011",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940266011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940266173",
      "pull_request_review_id": 1065219931,
      "id": 940266173,
      "node_id": "PRRC_kwDOAP4Jqs44C1K9",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write a unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);\n+\n+/* Multiply two signed 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 50,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": 933354668,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-08T13:50:42Z",
      "updated_at": "2022-08-08T13:50:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r940266173",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940266173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940266324",
      "pull_request_review_id": 1065220139,
      "id": 940266324,
      "node_id": "PRRC_kwDOAP4Jqs44C1NU",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add a unsigned 64-bit value a to r.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 23,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "176ea45704ba5d7574c6b2f6fe931329155b8d24",
      "in_reply_to_id": 933354234,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-08T13:50:51Z",
      "updated_at": "2022-08-08T13:50:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r940266324",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/940266324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1013176509",
      "pull_request_review_id": 1167339412,
      "id": 1013176509,
      "node_id": "PRRC_kwDOAP4Jqs48Y9i9",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add an unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 24,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: moduluo typo x2",
      "created_at": "2022-11-03T16:57:04Z",
      "updated_at": "2022-11-03T16:57:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1013176509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1013176509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 19,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015511903",
      "pull_request_review_id": 1170532875,
      "id": 1015511903,
      "node_id": "PRRC_kwDOAP4Jqs48h3tf",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+#    include <intrin.h>\n+#    if defined(_M_X64)\n+/* On x84_64 MSVC, use native _(u)mul128 for 64x64->128 multiplications. */\n+#        define secp256k1_umul128 _umul128\n+#        define secp256k1_mul128 _mul128\n+#    else\n+/* On ARM64 MSVC, use __(u)mulh for the upper half of 64x64 multiplications. */\n+static SECP256K1_INLINE uint64_t secp256k1_umul128(uint64_t a, uint64_t b, uint64_t* hi) {\n+    *hi = __umulh(a, b);\n+    return a * b;\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mul128(int64_t a, int64_t b, int64_t* hi) {\n+    *hi = __mulh(a, b);\n+    return a * b;\n+}\n+#    endif",
      "path": "src/int128_struct_impl.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did we test this code path on ARM64 MSVC? Should we remove this until this is tested in CI?",
      "created_at": "2022-11-07T14:46:49Z",
      "updated_at": "2022-11-07T14:59:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1015511903",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015511903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015515373",
      "pull_request_review_id": 1170532875,
      "id": 1015515373,
      "node_id": "PRRC_kwDOAP4Jqs48h4jt",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add an unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write an unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`secp256k1_u128_check_bits, secp256k1_i128_dissip_mul, secp256k1_i128_det, secp256k1_i128_from_i64, secp256k1_i128_from_i64, secp256k1_i128_check_pow2` are not used when compiled without VERIFY. Should we put them behind `#ifdef VERIFY`?",
      "created_at": "2022-11-07T14:49:41Z",
      "updated_at": "2022-11-07T14:59:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1015515373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015515373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015729720",
      "pull_request_review_id": 1170847070,
      "id": 1015729720,
      "node_id": "PRRC_kwDOAP4Jqs48is44",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add an unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write an unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015515373,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't know.",
      "created_at": "2022-11-07T17:52:29Z",
      "updated_at": "2022-11-07T17:52:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1015729720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015729720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015807606",
      "pull_request_review_id": 1170956879,
      "id": 1015807606,
      "node_id": "PRRC_kwDOAP4Jqs48i_52",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+#    include <intrin.h>\n+#    if defined(_M_X64)\n+/* On x84_64 MSVC, use native _(u)mul128 for 64x64->128 multiplications. */\n+#        define secp256k1_umul128 _umul128\n+#        define secp256k1_mul128 _mul128\n+#    else\n+/* On ARM64 MSVC, use __(u)mulh for the upper half of 64x64 multiplications. */\n+static SECP256K1_INLINE uint64_t secp256k1_umul128(uint64_t a, uint64_t b, uint64_t* hi) {\n+    *hi = __umulh(a, b);\n+    return a * b;\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mul128(int64_t a, int64_t b, int64_t* hi) {\n+    *hi = __mulh(a, b);\n+    return a * b;\n+}\n+#    endif",
      "path": "src/int128_struct_impl.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015511903,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure how our testing infrastructure works.",
      "created_at": "2022-11-07T19:15:52Z",
      "updated_at": "2022-11-07T19:15:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1015807606",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015807606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015891009",
      "pull_request_review_id": 1171081121,
      "id": 1015891009,
      "node_id": "PRRC_kwDOAP4Jqs48jURB",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add an unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write an unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015515373,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One reason to do this would be if not doing it would negatively impact test coverage metrics. However, I just tested this with gcov and it doesn't care about these functions at all (presumably because they don't exist in the compilation result).",
      "created_at": "2022-11-07T20:53:45Z",
      "updated_at": "2022-11-07T20:53:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1015891009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015891009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015942257",
      "pull_request_review_id": 1171156106,
      "id": 1015942257,
      "node_id": "PRRC_kwDOAP4Jqs48jgxx",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add an unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.",
      "path": "src/int128.h",
      "position": null,
      "original_position": 24,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1013176509,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-11-07T22:01:36Z",
      "updated_at": "2022-11-07T22:01:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1015942257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1015942257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": 19,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1020922132",
      "pull_request_review_id": 1178259364,
      "id": 1020922132,
      "node_id": "PRRC_kwDOAP4Jqs482gkU",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add an unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write an unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015515373,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I think we can rely on the compiler not emitting any code for static functions that are unused, so this isn't a big concern.",
      "created_at": "2022-11-13T15:33:52Z",
      "updated_at": "2022-11-13T15:33:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1020922132",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1020922132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1020932739",
      "pull_request_review_id": 1178270012,
      "id": 1020932739,
      "node_id": "PRRC_kwDOAP4Jqs482jKD",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+#    include <intrin.h>\n+#    if defined(_M_X64)\n+/* On x84_64 MSVC, use native _(u)mul128 for 64x64->128 multiplications. */\n+#        define secp256k1_umul128 _umul128\n+#        define secp256k1_mul128 _mul128\n+#    else\n+/* On ARM64 MSVC, use __(u)mulh for the upper half of 64x64 multiplications. */\n+static SECP256K1_INLINE uint64_t secp256k1_umul128(uint64_t a, uint64_t b, uint64_t* hi) {\n+    *hi = __umulh(a, b);\n+    return a * b;\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mul128(int64_t a, int64_t b, int64_t* hi) {\n+    *hi = __mulh(a, b);\n+    return a * b;\n+}\n+#    endif",
      "path": "src/int128_struct_impl.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015511903,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As a very approximate test, I've replaced the `__umulh` and `__mulh` code with GCC inline asm code matching my understanding of what these intrinsics compile to in MSVC, and compiled with `--host=aarch64-linux-gnu --with-test-override-wide-multiply=int128_struct` with GCC. The resulting binary does contain the expected `umulh` and `smulh` instructions, and tests work fine in `qemu-aarch64`.\r\n\r\n```diff\r\n--- a/src/int128_struct_impl.h\r\n+++ b/src/int128_struct_impl.h\r\n@@ -3,21 +3,27 @@\r\n \r\n #include \"int128.h\"\r\n \r\n-#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\r\n-#    include <intrin.h>\r\n+#if 1 /* MSVC */\r\n #    if defined(_M_X64)\r\n /* On x84_64 MSVC, use native _(u)mul128 for 64x64->128 multiplications. */\r\n #        define secp256k1_umul128 _umul128\r\n #        define secp256k1_mul128 _mul128\r\n #    else\r\n /* On ARM64 MSVC, use __(u)mulh for the upper half of 64x64 multiplications. */\r\n+#warning \"Using asm umulh code\"\r\n static SECP256K1_INLINE uint64_t secp256k1_umul128(uint64_t a, uint64_t b, uint64_t* hi) {\r\n-    *hi = __umulh(a, b);\r\n+    __asm__ __volatile__(\r\n+       \"umulh %0, %1, %2\" :\r\n+       \"=r\"(*hi) :\r\n+       \"r\"(a), \"r\"(b));\r\n     return a * b;\r\n }\r\n \r\n static SECP256K1_INLINE int64_t secp256k1_mul128(int64_t a, int64_t b, int64_t* hi) {\r\n-    *hi = __mulh(a, b);\r\n+    __asm__ __volatile__(\r\n+       \"smulh %0, %1, %2\" :\r\n+       \"=r\"(*hi) :\r\n+       \"r\"(a), \"r\"(b));\r\n     return a * b;\r\n }\r\n #    endif\r\n```",
      "created_at": "2022-11-13T16:45:57Z",
      "updated_at": "2022-11-13T16:45:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1020932739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1020932739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021009205",
      "pull_request_review_id": 1178355637,
      "id": 1021009205,
      "node_id": "PRRC_kwDOAP4Jqs482101",
      "diff_hunk": "@@ -7,17 +7,25 @@\n #ifndef SECP256K1_MODINV64_IMPL_H\n #define SECP256K1_MODINV64_IMPL_H\n \n+#include \"int128.h\"",
      "path": "src/modinv64_impl.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There should be a `#include \"int128_impl.h` here. Without it, the int128 functions are invoked before being defined, preventing them from being inlined.\n\nIf I add that performance is identical on GCC 11.2, with -O2, before and after with asm disabled.",
      "created_at": "2022-11-14T01:34:17Z",
      "updated_at": "2022-11-14T01:47:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1021009205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021009205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021439300",
      "pull_request_review_id": 1178968027,
      "id": 1021439300,
      "node_id": "PRRC_kwDOAP4Jqs484e1E",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+#    include <intrin.h>\n+#    if defined(_M_X64)\n+/* On x84_64 MSVC, use native _(u)mul128 for 64x64->128 multiplications. */\n+#        define secp256k1_umul128 _umul128\n+#        define secp256k1_mul128 _mul128\n+#    else\n+/* On ARM64 MSVC, use __(u)mulh for the upper half of 64x64 multiplications. */\n+static SECP256K1_INLINE uint64_t secp256k1_umul128(uint64_t a, uint64_t b, uint64_t* hi) {\n+    *hi = __umulh(a, b);\n+    return a * b;\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mul128(int64_t a, int64_t b, int64_t* hi) {\n+    *hi = __mulh(a, b);\n+    return a * b;\n+}\n+#    endif",
      "path": "src/int128_struct_impl.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015511903,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's a sufficient approximate test. Thanks @sipa. Resolving this thread.",
      "created_at": "2022-11-14T12:08:19Z",
      "updated_at": "2022-11-14T12:08:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1021439300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021439300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021439573",
      "pull_request_review_id": 1178968546,
      "id": 1021439573,
      "node_id": "PRRC_kwDOAP4Jqs484e5V",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+#ifndef SECP256K1_INT128_H\n+#define SECP256K1_INT128_H\n+\n+#include \"util.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+\n+/* Multiply two unsigned 64-bit values a and b and write the result to r. */\n+static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Multiply two unsigned 64-bit values a and b and add the result to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b);\n+\n+/* Add an unsigned 64-bit value a to r.\n+ * The final result is taken moduluo 2^128.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Unsigned (logical) right shift.\n+ * Non-constant time in n.\n+ */\n+static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n);\n+\n+/* Return the low 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a);\n+\n+/* Return the high 64-bits of a 128-bit value as an unsigned 64-bit value. */\n+static SECP256K1_INLINE uint64_t secp256k1_u128_hi_u64(const secp256k1_uint128 *a);\n+\n+/* Write an unsigned 64-bit value to r. */\n+static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a);\n+\n+/* Tests if r is strictly less than to 2^n.\n+ * n must be strictly less than 128.\n+ */\n+static SECP256K1_INLINE int secp256k1_u128_check_bits(const secp256k1_uint128 *r, unsigned int n);",
      "path": "src/int128.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015515373,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It could be done to give a better indication for readers what this code is for, but not a big concern, I agree. Resolving this conversation.",
      "created_at": "2022-11-14T12:08:32Z",
      "updated_at": "2022-11-14T12:08:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1021439573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021439573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021650664",
      "pull_request_review_id": 1179272543,
      "id": 1021650664,
      "node_id": "PRRC_kwDOAP4Jqs485Sbo",
      "diff_hunk": "@@ -7,17 +7,25 @@\n #ifndef SECP256K1_MODINV64_IMPL_H\n #define SECP256K1_MODINV64_IMPL_H\n \n+#include \"int128.h\"",
      "path": "src/modinv64_impl.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "in_reply_to_id": 1021009205,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@real-or-random Since you wrote https://github.com/real-or-random/secp256k1/commit/af6cffda12e0bd2e595eae5ccdffec2d96b8eef3 do you wish to comment?",
      "created_at": "2022-11-14T15:01:31Z",
      "updated_at": "2022-11-14T15:01:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1021650664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021650664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021662944",
      "pull_request_review_id": 1179290892,
      "id": 1021662944,
      "node_id": "PRRC_kwDOAP4Jqs485Vbg",
      "diff_hunk": "@@ -0,0 +1,177 @@\n+#ifndef SECP256K1_INT128_STRUCT_IMPL_H\n+#define SECP256K1_INT128_STRUCT_IMPL_H\n+\n+#include \"int128.h\"\n+\n+#if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_ARM64)) /* MSVC */\n+#    include <intrin.h>\n+#    if defined(_M_X64)\n+/* On x84_64 MSVC, use native _(u)mul128 for 64x64->128 multiplications. */\n+#        define secp256k1_umul128 _umul128\n+#        define secp256k1_mul128 _mul128\n+#    else\n+/* On ARM64 MSVC, use __(u)mulh for the upper half of 64x64 multiplications. */\n+static SECP256K1_INLINE uint64_t secp256k1_umul128(uint64_t a, uint64_t b, uint64_t* hi) {\n+    *hi = __umulh(a, b);\n+    return a * b;\n+}\n+\n+static SECP256K1_INLINE int64_t secp256k1_mul128(int64_t a, int64_t b, int64_t* hi) {\n+    *hi = __mulh(a, b);\n+    return a * b;\n+}\n+#    endif",
      "path": "src/int128_struct_impl.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "beafb5538bee2de1289b3ac07d40062a9787d29f",
      "in_reply_to_id": 1015511903,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would you like me to add a comment \"Beware of bugs in the above code;  We have only proved it correct, not tested it.\"?",
      "created_at": "2022-11-14T15:11:38Z",
      "updated_at": "2022-11-14T15:11:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1021662944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021662944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021683051",
      "pull_request_review_id": 1179320964,
      "id": 1021683051,
      "node_id": "PRRC_kwDOAP4Jqs485aVr",
      "diff_hunk": "@@ -7,17 +7,25 @@\n #ifndef SECP256K1_MODINV64_IMPL_H\n #define SECP256K1_MODINV64_IMPL_H\n \n+#include \"int128.h\"",
      "path": "src/modinv64_impl.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "in_reply_to_id": 1021009205,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Some preliminary testing suggests that this can't actually matter. Investigating further before I insist on addressing this.",
      "created_at": "2022-11-14T15:27:16Z",
      "updated_at": "2022-11-14T15:27:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1021683051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021683051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021709123",
      "pull_request_review_id": 1179367315,
      "id": 1021709123,
      "node_id": "PRRC_kwDOAP4Jqs485gtD",
      "diff_hunk": "@@ -7,17 +7,25 @@\n #ifndef SECP256K1_MODINV64_IMPL_H\n #define SECP256K1_MODINV64_IMPL_H\n \n+#include \"int128.h\"",
      "path": "src/modinv64_impl.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "in_reply_to_id": 1021009205,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Closing, this does not actually appear to have any impact on the generated binary in GCC 9 or GCC 12.",
      "created_at": "2022-11-14T15:45:53Z",
      "updated_at": "2022-11-14T15:45:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1021709123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1021709123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1205619056",
      "pull_request_review_id": 1444052022,
      "id": 1205619056,
      "node_id": "PRRC_kwDOAP4Jqs5H3Elw",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+#ifndef SECP256K1_INT128_IMPL_H\n+#define SECP256K1_INT128_IMPL_H\n+\n+#include \"util.h\"\n+\n+#include \"int128.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native_impl.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct_impl.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+#endif",
      "path": "src/int128_impl.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Although this file should never be included when `SECP256K1_WIDEMUL_INT128` is not defined, we should have an error message here just in case that situation arises.  Otherwise confusing error messages happen.",
      "created_at": "2023-05-25T14:38:02Z",
      "updated_at": "2023-05-25T14:38:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1205619056",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1205619056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1236002877",
      "pull_request_review_id": 1489249318,
      "id": 1236002877,
      "node_id": "PRRC_kwDOAP4Jqs5Jq-g9",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+#ifndef SECP256K1_INT128_IMPL_H\n+#define SECP256K1_INT128_IMPL_H\n+\n+#include \"util.h\"\n+\n+#include \"int128.h\"\n+\n+#if defined(SECP256K1_WIDEMUL_INT128)\n+#  if defined(SECP256K1_INT128_NATIVE)\n+#    include \"int128_native_impl.h\"\n+#  elif defined(SECP256K1_INT128_STRUCT)\n+#    include \"int128_struct_impl.h\"\n+#  else\n+#    error \"Please select int128 implementation\"\n+#  endif\n+#endif",
      "path": "src/int128_impl.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "original_commit_id": "a340d9500a9c45e5c261174f48b3eb18b3b3647d",
      "in_reply_to_id": 1205619056,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This file is actually included unconditionally in `secp256k1.c`. (One could argue that this is a bad idea, but the nice thing is that it keeps the preprocessor logic in the int128 \"module\".)",
      "created_at": "2023-06-20T23:29:14Z",
      "updated_at": "2023-06-20T23:30:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1000#discussion_r1236002877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1236002877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    }
  ]
}