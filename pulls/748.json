{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748",
    "id": 411410438,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDExNDEwNDM4",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/748.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/748.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
    "number": 748,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add usage examples",
    "user": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Resolves https://github.com/bitcoin-core/secp256k1/issues/184\r\n\r\nI didn't add a sign/verify/recover example yet because I'd prefer that the example included hashing a message, \r\nbut we don't provide a hash function so I decided to start only with key generation and ECDH, and get feedback.\r\n\r\nI *did not* check the example on windows, but did try to implement it correctly, if anyone has access to a windows machine(and knows how to build on windows hehe) please test this :)\r\n\r\nP.S. Should the usage examples be MIT or CC0(Public Domain)?",
    "labels": [],
    "created_at": "2020-04-30T12:12:37Z",
    "updated_at": "2022-02-23T17:36:43Z",
    "closed_at": "2022-02-23T17:36:43Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-02-23T17:36:42Z",
    "merge_commit_sha": "64b34979edd55edbe89c27b5cd1117e4adcf364b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "elichai:2020-04-examples",
      "ref": "2020-04-examples",
      "sha": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 191781642,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTE3ODE2NDI=",
        "name": "secp256k1",
        "full_name": "elichai/secp256k1",
        "owner": {
          "login": "elichai",
          "id": 2167860,
          "node_id": "MDQ6VXNlcjIxNjc4NjA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/elichai",
          "html_url": "https://github.com/elichai",
          "followers_url": "https://api.github.com/users/elichai/followers",
          "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
          "organizations_url": "https://api.github.com/users/elichai/orgs",
          "repos_url": "https://api.github.com/users/elichai/repos",
          "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/elichai/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/elichai/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/elichai/secp256k1",
        "archive_url": "https://api.github.com/repos/elichai/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/elichai/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/elichai/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/elichai/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/elichai/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/elichai/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/elichai/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/elichai/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/elichai/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/elichai/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/elichai/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/elichai/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/elichai/secp256k1/events",
        "forks_url": "https://api.github.com/repos/elichai/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/elichai/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/elichai/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/elichai/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/elichai/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/elichai/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/elichai/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/elichai/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/elichai/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/elichai/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/elichai/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/elichai/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/elichai/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/elichai/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/elichai/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/elichai/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:elichai/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/elichai/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/elichai/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/elichai/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/elichai/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/elichai/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/elichai/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/elichai/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/elichai/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/elichai/secp256k1/hooks",
        "svn_url": "https://github.com/elichai/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 9293,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2022-02-23T14:15:18Z",
        "created_at": "2019-06-13T14:46:01Z",
        "updated_at": "2020-06-18T19:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "1253a27756540d2ca526b2061d98d54868e9177c",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 658,
    "deletions": 0,
    "changed_files": 11,
    "commits": 6,
    "review_comments": 129,
    "comments": 16
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 3289263105,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI4OTI2MzEwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3289263105",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T13:04:25Z"
    },
    {
      "event": "renamed",
      "id": 3289367257,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzI4OTM2NzI1Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3289367257",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T13:24:37Z",
      "rename": {
        "from": "Add usage example",
        "to": "Add usage examples"
      }
    },
    {
      "event": "reviewed",
      "id": 403738190,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzM4MTkw",
      "url": null,
      "actor": null,
      "commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Very nice!\r\n\r\nAlternatively the module-specific examples could be in their respective module directory. But I think either way is fine.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-403738190",
      "submitted_at": "2020-04-30T18:44:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "commented",
      "id": 622044142,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjA0NDE0Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/622044142",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T19:04:49Z",
      "updated_at": "2020-04-30T19:04:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Alternatively the module-specific examples could be in their respective module directory. But I think either way is fine.\r\n\r\nI thought about it, but I think that for newcomers it's easier to see an examples directory at the top level and start from there.\r\n",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-622044142",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "reviewed",
      "id": 403846291,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODQ2Mjkx",
      "url": null,
      "actor": null,
      "commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-403846291",
      "submitted_at": "2020-04-30T20:17:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "commented",
      "id": 622350616,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjM1MDYxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/622350616",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T11:22:17Z",
      "updated_at": "2020-05-01T11:26:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "My feeling is this entire issue of secret key handling deserves a broader discussion.\r\n\r\nWe don't have a key generation function and Core won't need one. If we're now targeting different users more, maybe it's time to have one. But it's hard, see all the discussion points above. And it really depends on the user's platform. So actually I'd be happy with good examples and some references to correct methods to get randomness on different OSes.\r\n\r\n\r\nOn the other hand, nothing should stop us from exporting a cleaning function in #636, even if we don't have one for key gen.\r\n\r\nWhat are other libraries doing for key generation?\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-622350616",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "reviewed",
      "id": 404120824,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTIwODI0",
      "url": null,
      "actor": null,
      "commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-404120824",
      "submitted_at": "2020-05-01T11:29:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T11:42:06Z",
      "updated_at": "2020-05-01T11:42:06Z",
      "source": {
        "issue": {
          "id": 610711368,
          "node_id": "MDU6SXNzdWU2MTA3MTEzNjg=",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/749",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/749/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/749/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/749/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/749",
          "number": 749,
          "state": "open",
          "state_reason": null,
          "title": "Secret key generation and cleaning",
          "body": "My feeling is this entire issue of secret key handling deserves a broader discussion.\r\n\r\nWe don't have a key generation function and Core won't need one. If we're now targeting different users more, maybe it's time to have one. But it's hard, see all the discussion points above. And it really depends on the user's platform. So actually I'd be happy with good examples and some references to correct methods to get randomness on different OSes.\r\n\r\n\r\nOn the other hand, nothing should stop us from exporting a cleaning function in #636, even if we don't have one for key gen.\r\n\r\nWhat are other libraries doing for key generation?\r\n\r\n_Originally posted by @real-or-random in https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-622350616_",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "created_at": "2020-05-01T11:42:06Z",
          "updated_at": "2020-05-05T10:03:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3296744067,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5Njc0NDA2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3296744067",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T19:29:06Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-03T08:24:34Z",
      "updated_at": "2020-05-03T08:24:34Z",
      "source": {
        "issue": {
          "id": 611360725,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDEyNTY4MDUw",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/750",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/750/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/750/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/750/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/750",
          "number": 750,
          "state": "closed",
          "state_reason": null,
          "title": "Add macOS to the CI",
          "body": "This adds macOS to the travis so we can test all the same configurations under macOS, both with Apple's clang and proper gcc on macOS.\r\nIt also runs the ctime test, and valgrind on the tests just like on linux.\r\n\r\nThe current travis script is pretty messy because we added more and more configuration over time each one required more complex ifs making it harder to read, and because of the somewhat complex logic it failed[1] on macOS(having an old bash version) so I decided to just throw it into a standalone sh script instead, that way it can be formatted nicely and with `-e` it will fail on every error without needing to put `&&` everywhere.\r\n\r\nSome changed in the script:\r\n\r\n* Replaced the usage of libtool with the locally generated libtool (https://github.com/bitcoin-core/secp256k1/pull/723#issuecomment-622999449)\r\n\r\n* Added `--error-exitcode=42` to the ctime tests because they currently silently fail on `-O0` (https://travis-ci.org/github/bitcoin-core/secp256k1/jobs/681571334#L454) and disabled the ctime tests on `-O0`.\r\n\r\n* Moved the valgrind tests to the matrix so that they'll run on both gcc and clang and on macOS.\r\n(also, now that #710 is merged we always pass `-DVALGRIND` when the valgrind headers exist but I left the explicit CFLAGS in those tests anyway, there's no harm in explicitly doing that)\r\n\r\n* Removed the use of `EXTRAFLAGS` for setting `CFLAGS`, it's enough to just set `CFLAGS` directly and it can cause troubles in sh (the whole `EXTRAFLAGS=\"--disable-openssl-tests CPPFLAGS=-DVALGRIND\"`)\r\n\r\n* We have to explicitly set the gcc version on macOS+gcc because macOS ship with a fake gcc which is basically just an alias to their clang compiler, and installing proper gcc from brew adds a `gcc-*` binary and doesn't replace the `gcc` binary, so we have to explicitly set `CC=gcc-9` under that scenario, so I also explicitly install `gcc@9` so it shouldn't break when macOS gets gcc-10.\r\n\r\n* Bumped ubuntu to bionic because of https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418228255 (the end of `End of Standard Support` is in a year anyway) it's in a separate commit so that if anyone have concerns I'll just drop that commit.\r\n\r\n1. https://travis-ci.org/github/elichai/secp256k1/jobs/681663742#L336",
          "user": {
            "login": "elichai",
            "id": 2167860,
            "node_id": "MDQ6VXNlcjIxNjc4NjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/elichai",
            "html_url": "https://github.com/elichai",
            "followers_url": "https://api.github.com/users/elichai/followers",
            "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
            "organizations_url": "https://api.github.com/users/elichai/orgs",
            "repos_url": "https://api.github.com/users/elichai/repos",
            "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/elichai/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/750",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/750",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/750.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/750.patch"
          },
          "closed_at": "2020-05-18T19:37:19Z",
          "created_at": "2020-05-03T08:24:33Z",
          "updated_at": "2020-05-18T19:38:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-08T17:01:41Z",
      "updated_at": "2020-05-08T17:01:41Z",
      "source": {
        "issue": {
          "id": 505633708,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzI3MDI1NzQ1",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/673",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/673/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/673/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/673/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/673",
          "number": 673,
          "state": "closed",
          "state_reason": null,
          "title": "Add basic usage information on README [skip ci]",
          "body": "This may not be so good documentation, but at least it is a start. Feel comfortable to fix it.\r\n\r\n#672 ",
          "user": {
            "login": "kroggen",
            "id": 7624275,
            "node_id": "MDQ6VXNlcjc2MjQyNzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7624275?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kroggen",
            "html_url": "https://github.com/kroggen",
            "followers_url": "https://api.github.com/users/kroggen/followers",
            "following_url": "https://api.github.com/users/kroggen/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kroggen/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kroggen/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kroggen/subscriptions",
            "organizations_url": "https://api.github.com/users/kroggen/orgs",
            "repos_url": "https://api.github.com/users/kroggen/repos",
            "events_url": "https://api.github.com/users/kroggen/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kroggen/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/673",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/673",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/673.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/673.patch"
          },
          "closed_at": "2020-05-08T17:01:41Z",
          "created_at": "2019-10-11T04:40:57Z",
          "updated_at": "2020-05-08T17:01:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3350329776,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM1MDMyOTc3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3350329776",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T06:46:25Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-17T20:39:03Z",
      "updated_at": "2020-07-17T20:39:03Z",
      "source": {
        "issue": {
          "id": 363639080,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjE4MDI1Nzg1",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/558",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/558/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/558/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/558/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/558",
          "number": 558,
          "state": "closed",
          "state_reason": null,
          "title": " Add schnorrsig module which implements BIP-340 compliant signatures",
          "body": "This PR implements signing, verification and batch verification as described in [BIP-340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki) in an experimental module named `schnorrsig`. It includes the test vectors and a benchmarking tool. \r\nThis PR also adds a module `extrakeys` that allows [BIP-341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki)-style key tweaking.\r\n\r\n(Adding ChaCha20 as a CSPRNG and batch verification was moved to PR #760).\r\n\r\nIn order to enable the module run `./configure` with `--enable-experimental --enable-module-schnorrsig`.\r\n\r\nBased on apoelstra's work.\r\n",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 105,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/558",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/558",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/558.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/558.patch"
          },
          "closed_at": "2020-09-11T19:26:27Z",
          "created_at": "2018-09-25T15:33:00Z",
          "updated_at": "2020-09-19T13:54:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 457370460,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzcwNDYw",
      "url": null,
      "actor": null,
      "commit_id": "485c68b486fd545d2d90304f543fc69efd24ff06",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-457370460",
      "submitted_at": "2020-07-29T09:55:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3602783086,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYwMjc4MzA4Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3602783086",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T08:53:59Z"
    },
    {
      "event": "commented",
      "id": 722688251,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjY4ODI1MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/722688251",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-05T22:44:14Z",
      "updated_at": "2020-11-05T22:44:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Would be cool to revive this PR since it's really helpful, well-documented and provides best practices for getting randomness on different platforms. In particular, I don't think this PR should be blocked on the result of the key generation discussion. @elichai if you want to add examples for the schnorrsig module, feel free to do it, but we can also add this in a different PR.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-722688251",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "mentioned",
      "id": 3964709224,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzk2NDcwOTIyNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3964709224",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-05T22:44:14Z"
    },
    {
      "event": "subscribed",
      "id": 3964709225,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5NjQ3MDkyMjU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3964709225",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-05T22:44:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3969871397,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk2OTg3MTM5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3969871397",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-07T12:49:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3974572040,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk3NDU3MjA0MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3974572040",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-09T16:12:48Z"
    },
    {
      "event": "commented",
      "id": 724113990,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyNDExMzk5MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/724113990",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-09T16:14:28Z",
      "updated_at": "2020-11-09T16:14:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased, and replaced the `keygen` example with a schnorr and ecdsa examples.\r\nPlease review and comment if you think something I've done isn't best practice or some comment's wording isn't good enough",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-724113990",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "reviewed",
      "id": 531786121,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzg2MTIx",
      "url": null,
      "actor": null,
      "commit_id": "8698027d7cb6de95e25f4d6e4beaaaab056008d7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-531786121",
      "submitted_at": "2020-11-16T22:15:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "commented",
      "id": 728840367,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyODg0MDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/728840367",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-17T10:34:22Z",
      "updated_at": "2020-11-17T10:34:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "> P.S. Should the usage examples be MIT or CC0(Public Domain)?\r\n\r\nI think we should make them CC0 to avoid any doubt.\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-728840367",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "commented",
      "id": 830241992,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDI0MTk5Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/830241992",
      "actor": {
        "login": "ssocolow",
        "id": 47473649,
        "node_id": "MDQ6VXNlcjQ3NDczNjQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/47473649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ssocolow",
        "html_url": "https://github.com/ssocolow",
        "followers_url": "https://api.github.com/users/ssocolow/followers",
        "following_url": "https://api.github.com/users/ssocolow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ssocolow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ssocolow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ssocolow/subscriptions",
        "organizations_url": "https://api.github.com/users/ssocolow/orgs",
        "repos_url": "https://api.github.com/users/ssocolow/repos",
        "events_url": "https://api.github.com/users/ssocolow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ssocolow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-30T17:19:58Z",
      "updated_at": "2021-04-30T17:19:58Z",
      "author_association": "NONE",
      "body": "As a new user, simple example programs are really great.  Thanks!",
      "user": {
        "login": "ssocolow",
        "id": 47473649,
        "node_id": "MDQ6VXNlcjQ3NDczNjQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/47473649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ssocolow",
        "html_url": "https://github.com/ssocolow",
        "followers_url": "https://api.github.com/users/ssocolow/followers",
        "following_url": "https://api.github.com/users/ssocolow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ssocolow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ssocolow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ssocolow/subscriptions",
        "organizations_url": "https://api.github.com/users/ssocolow/orgs",
        "repos_url": "https://api.github.com/users/ssocolow/repos",
        "events_url": "https://api.github.com/users/ssocolow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ssocolow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-830241992",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4975193788,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk3NTE5Mzc4OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4975193788",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-04T14:42:43Z"
    },
    {
      "event": "commented",
      "id": 873604809,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzYwNDgwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/873604809",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-04T14:45:25Z",
      "updated_at": "2021-07-04T14:45:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased and fixed review comments,\r\nFeel free to suggest alternative phrasings to the comments I wrote (English is my 2nd language)",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-873604809",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4988228890,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4ODIyODg5MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4988228890",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-07T10:19:49Z"
    },
    {
      "event": "commented",
      "id": 875483702,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTQ4MzcwMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/875483702",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-07T10:20:50Z",
      "updated_at": "2021-07-07T10:20:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebasing on master again so the CI will work",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-875483702",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4988234659,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4ODIzNDY1OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4988234659",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-07T10:20:55Z"
    },
    {
      "event": "reviewed",
      "id": 701406825,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxNDA2ODI1",
      "url": null,
      "actor": null,
      "commit_id": "99fbf6816bb5192559b9feb1d73fb3d6ae515a9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-701406825",
      "submitted_at": "2021-07-07T20:12:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-23T11:00:54Z",
      "updated_at": "2021-09-23T11:00:54Z",
      "source": {
        "issue": {
          "id": 1005277128,
          "node_id": "I_kwDOAP4Jqs4760_I",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/978",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/978/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/978/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/978/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/978",
          "number": 978,
          "state": "closed",
          "state_reason": "completed",
          "title": "Manual to use the API",
          "body": "Hey, how are the works? \r\nI have doubts about the project, first you have a doc to guide how to instantiate this API. I'm newbi in c/c++ programming, attending some classes to improve my knowlegment (structs, classes, typedefs, data structures ..)\r\nI have a single project here with the secp256k1.h included? There is more header I should include to make it works great? I'm trying to get the instance as show below, in my code.\r\n\r\n#include \"secp256k1.h\"\r\n// lib do C++ \r\nsecp256k1_context* ctx;\r\ntypedef SECP256K1_WARN_UNUSED_RESULT initialize;\r\n\r\nThanks in advance for all.",
          "user": {
            "login": "fabregasf",
            "id": 10199180,
            "node_id": "MDQ6VXNlcjEwMTk5MTgw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10199180?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fabregasf",
            "html_url": "https://github.com/fabregasf",
            "followers_url": "https://api.github.com/users/fabregasf/followers",
            "following_url": "https://api.github.com/users/fabregasf/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fabregasf/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fabregasf/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fabregasf/subscriptions",
            "organizations_url": "https://api.github.com/users/fabregasf/orgs",
            "repos_url": "https://api.github.com/users/fabregasf/repos",
            "events_url": "https://api.github.com/users/fabregasf/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fabregasf/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "comments": 1,
          "closed_at": "2023-01-05T10:41:32Z",
          "created_at": "2021-09-23T10:42:04Z",
          "updated_at": "2023-01-05T10:41:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T16:18:44Z",
      "updated_at": "2021-12-08T16:18:44Z",
      "source": {
        "issue": {
          "id": 891273233,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjQ0MTY1OTkx",
          "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/131",
          "repository_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp",
          "labels_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/131/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/131/comments",
          "events_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/131/events",
          "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/131",
          "number": 131,
          "state": "closed",
          "state_reason": null,
          "title": "Replace MuSig(1) module with MuSig2",
          "body": "The main commit comprises `905 insertions(+), 1253 deletions(-)`. The diff isn't as small as I had hoped, but that's mostly because it was possible to simplify the API quite substantially which required rewriting large parts. Sorry, almost all of the changes are in one big commit which makes the diff very hard to read. Perhaps best to re-review most parts from scratch.\r\n\r\nA few key changes:\r\n\r\n- Obviously no commitment round. No big session struct and no `verifier` sessions. No `signer` struct.\r\n- There's a new `secnonce` struct that is the output of musig_nonce_gen and derived from a uniformly random session_id32. The derivation can be strengthened by adding whatever session parameters (combined_pk, msg) are available. The nonce function is my ad-hoc construction that allows for these optional inputs. Please have a look at that.\r\n- The secnonce is made invalid after being used in partial_sign.\r\n- Adaptor signatures basically work as before, according to https://github.com/ElementsProject/scriptless-scripts/pull/24 (with the exception that they operate on aggregate instead of partial sigs)\r\n- To avoid making this PR overly complex I did not consider how this implementation interacts with nested-MuSig, sign-to-contract, and antiklepto.\r\n- Testing should be close to complete. There's no reachable line or branch that isn't exercised by the tests.\r\n- [x] ~In the current implementation when a signer sends an invalid nonce (i.e. some garbage that can't be mapped to a group element), it is ignored when combining nonces. Only after receiving the signers partial signature and running `partial_sig_verify` will we notice that the signer misbehaved. The reason for this is that 1) this makes the API simpler and 2) malicious peers don't gain any additional powers because they can always interrupt the protocol by refusing to sign. However, this is up for discussion.~ EDIT: this is not the case anymore since invalid nonces are rejected when they're parsed.\r\n- [x] ~For every partial signature we verify we have to parse the pubnonce (two compressed points), despite having parsed it in `process_nonces` already. This is not great. `process_nonces` could optionally output the array of parsed pubnonces.~ EDIT: fixed by having a dedicated type for nonces.\r\n- [x] ~I left `src/modules/musig/musig.md` unchanged for now. Perhaps we should merge it with the `musig-spec`~ EDIT: musig.md is updated\r\n- [x] partial verification should use multiexp to compute `R1 + b*R2 + c*P`, but this can be done in a separate PR\r\n- [x] renaming wishlist\r\n    - pre_session -> keyagg_cache (because there is no session anymore)\r\n    - pubkey_combine, nonce_combine, partial_sig_combine -> pubkey_agg, nonce_agg, partial_sig_agg (shorter, matches terminology in musig2)\r\n    - musig_session_init -> musig_start (shorter, simpler) or [musig_generate_nonce](https://github.com/ElementsProject/secp256k1-zkp/pull/131#discussion_r654190890) or musig_prepare\r\n    - musig_partial_signature to musig_partial_sig (shorter)\r\n- [x] perhaps remove pubnonces and n_pubnonces argument from process_nonces (and then also add a opaque type for the combined nonce?)\r\n- [x] write the `combined_pubkey` into the `pre_session` struct (as suggested [below](https://github.com/ElementsProject/secp256k1-zkp/pull/131#issuecomment-866904975): then 1) session_init and process_nonces don't need a combined_pk argument (and there can't be mix up between tweaked and untweaked keys) and 2) pubkey_tweak doesn't need an input_pubkey and the output_pubkey can be written directly into the pre_session (reducing frustration such as Replace MuSig(1) module with MuSig2 #131 (comment))\r\n- [x] perhaps allow adapting both partial sigs (`partial_sig` struct) and aggregate partial sigs (64 raw bytes) as suggested [below](https://github.com/ElementsProject/secp256k1-zkp/pull/131#issuecomment-867281531).\r\n\r\n\r\nBased on #120.\r\n\r\n",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 62,
          "pull_request": {
            "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/pulls/131",
            "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/131",
            "diff_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/131.diff",
            "patch_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/131.patch"
          },
          "closed_at": "2021-12-20T14:14:58Z",
          "created_at": "2021-05-13T18:34:52Z",
          "updated_at": "2022-02-18T08:18:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5736964139,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAFV8yAr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5736964139",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "804bfe43ceda5c03ccf69d290bd9c6e2427f8754",
      "commit_url": "https://api.github.com/repos/jonasnick/secp256k1-zkp/commits/804bfe43ceda5c03ccf69d290bd9c6e2427f8754",
      "created_at": "2021-12-08T22:22:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5857750482,
      "node_id": "HRFPE_lADOAP4Jqs4kWkG_zwAAAAFdJi3S",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5857750482",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-07T13:03:49Z"
    },
    {
      "event": "commented",
      "id": 1007497589,
      "node_id": "IC_kwDOAP4Jqs48DTF1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1007497589",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-07T15:30:03Z",
      "updated_at": "2022-01-07T15:30:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added a commit fixing some mingw linking bugs:\r\n1. Need to include `windows.h` and `ntstatus.h` even though they're used in `bcrypt.h` (https://sourceforge.net/p/mingw-w64/bugs/903/)\r\n2. Had to explicitly link to `libbcrypt`",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1007497589",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "reviewed",
      "id": 847159260,
      "node_id": "PRR_kwDOAP4Jqs4yfp_c",
      "url": null,
      "actor": null,
      "commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-847159260",
      "submitted_at": "2022-01-08T16:56:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "reviewed",
      "id": 847191771,
      "node_id": "PRR_kwDOAP4Jqs4yfx7b",
      "url": null,
      "actor": null,
      "commit_id": "0e5437fb0deb67313b2911898982da8cafccf137",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-847191771",
      "submitted_at": "2022-01-08T20:07:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-15T16:48:52Z",
      "updated_at": "2022-01-15T16:48:52Z",
      "source": {
        "issue": {
          "id": 1104140696,
          "node_id": "PR_kwDOCxEqnM4xD6PV",
          "url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/459",
          "repository_url": "https://api.github.com/repos/bitcoin-core-review-club/website",
          "labels_url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/459/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/459/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/459/events",
          "html_url": "https://github.com/bitcoin-core-review-club/website/pull/459",
          "number": 459,
          "state": "closed",
          "state_reason": null,
          "title": "Add notes for secp256k1 #748",
          "body": "Based on #458. I tried to sort the further questions roughly such that the simplest and most relevant questions are first. ",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core-review-club/website/pulls/459",
            "html_url": "https://github.com/bitcoin-core-review-club/website/pull/459",
            "diff_url": "https://github.com/bitcoin-core-review-club/website/pull/459.diff",
            "patch_url": "https://github.com/bitcoin-core-review-club/website/pull/459.patch"
          },
          "closed_at": "2022-01-18T11:31:29Z",
          "created_at": "2022-01-14T21:30:52Z",
          "updated_at": "2022-01-18T11:31:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5905332863,
      "node_id": "HRFPE_lADOAP4Jqs4kWkG_zwAAAAFf_Dp_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5905332863",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-17T15:36:11Z"
    },
    {
      "event": "commented",
      "id": 1014677306,
      "node_id": "IC_kwDOAP4Jqs48er86",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1014677306",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-17T15:45:36Z",
      "updated_at": "2022-01-17T15:45:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "I fixed the comments in a separate commit.\r\nI'll squash them closer to merging as I assume the Review Club will give me a bunch more things to fix.",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1014677306",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "commented",
      "id": 1014685150,
      "node_id": "IC_kwDOAP4Jqs48et3e",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1014685150",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-17T15:55:22Z",
      "updated_at": "2022-01-17T15:55:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "We spend a lot of time here coming up with methods to obtain randomness on various OSes. If we're going to maintain this in this example file, could we just go ahead and maintain a real function? (I don't want to suggest a \"yes\" or \"no\", I'm really asking this as an open question.) I assume the overhead of maintaining a function is larger but I'm not sure to what extent.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1014685150",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "reviewed",
      "id": 855699495,
      "node_id": "PRR_kwDOAP4Jqs4zAPAn",
      "url": null,
      "actor": null,
      "commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "kristapsk",
        "id": 4500994,
        "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kristapsk",
        "html_url": "https://github.com/kristapsk",
        "followers_url": "https://api.github.com/users/kristapsk/followers",
        "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
        "organizations_url": "https://api.github.com/users/kristapsk/orgs",
        "repos_url": "https://api.github.com/users/kristapsk/repos",
        "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kristapsk/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-855699495",
      "submitted_at": "2022-01-18T16:49:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "reviewed",
      "id": 868254740,
      "node_id": "PRR_kwDOAP4Jqs4zwIQU",
      "url": null,
      "actor": null,
      "commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nLooking forward to the review club tomorrow! 🚀 ",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-868254740",
      "submitted_at": "2022-01-31T18:26:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "reviewed",
      "id": 868395503,
      "node_id": "PRR_kwDOAP4Jqs4zwqnv",
      "url": null,
      "actor": null,
      "commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, thanks for adding these helpful examples!\r\n\r\nMy comments are mostly cosmetic, and I think the PR should be ready to merge after review club.",
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-868395503",
      "submitted_at": "2022-01-31T21:06:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "commented",
      "id": 1027675605,
      "node_id": "IC_kwDOAP4Jqs49QRXV",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1027675605",
      "actor": {
        "login": "jesseposner",
        "id": 12010116,
        "node_id": "MDQ6VXNlcjEyMDEwMTE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/12010116?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jesseposner",
        "html_url": "https://github.com/jesseposner",
        "followers_url": "https://api.github.com/users/jesseposner/followers",
        "following_url": "https://api.github.com/users/jesseposner/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jesseposner/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jesseposner/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jesseposner/subscriptions",
        "organizations_url": "https://api.github.com/users/jesseposner/orgs",
        "repos_url": "https://api.github.com/users/jesseposner/repos",
        "events_url": "https://api.github.com/users/jesseposner/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jesseposner/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-02T08:01:39Z",
      "updated_at": "2022-02-02T08:01:39Z",
      "author_association": "NONE",
      "body": "Tested ACK 4c433823a85cac975b0746203d94ce041c10299d",
      "user": {
        "login": "jesseposner",
        "id": 12010116,
        "node_id": "MDQ6VXNlcjEyMDEwMTE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/12010116?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jesseposner",
        "html_url": "https://github.com/jesseposner",
        "followers_url": "https://api.github.com/users/jesseposner/followers",
        "following_url": "https://api.github.com/users/jesseposner/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jesseposner/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jesseposner/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jesseposner/subscriptions",
        "organizations_url": "https://api.github.com/users/jesseposner/orgs",
        "repos_url": "https://api.github.com/users/jesseposner/repos",
        "events_url": "https://api.github.com/users/jesseposner/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jesseposner/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1027675605",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "reviewed",
      "id": 870639958,
      "node_id": "PRR_kwDOAP4Jqs4z5OlW",
      "url": null,
      "actor": null,
      "commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Concept ACK, usage examples are helpful.",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-870639958",
      "submitted_at": "2022-02-02T15:03:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-02T15:20:27Z",
      "updated_at": "2022-02-02T15:20:27Z",
      "source": {
        "issue": {
          "id": 1122057355,
          "node_id": "PR_kwDOABII584x-T2q",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24238",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24238/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24238/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24238/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24238",
          "number": 24238,
          "state": "closed",
          "state_reason": null,
          "title": "random: use arc4random on OpenBSD",
          "body": "Inspired by a discussion on obtaining randomness on various OSes in a secp256k1 PR (https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524605472, see also https://bitcoincore.reviews/libsecp256k1-748), I think it makes sense to follow best practices and use `arc4random_buf` rather than `getentropy` on OpenBSD in our random module.\r\n\r\nThe [getentropy(2) man page](https://man.openbsd.org/getentropy.2) states:\r\n```\r\ngetentropy() is not intended for regular code; please use the\r\narc4random(3) family of functions instead.\r\n```\r\n\r\nThe [arc4random(3) man page](https://man.openbsd.org/arc4random.3) states:\r\n\r\n```\r\nUse of these functions is encouraged for almost all random number\r\nconsumption because the other interfaces are deficient in either quality,\r\nportability, standardization, or availability.\r\n```\r\nOn the linked PR discussion worries about using RC4 internally has been expressed (see https://security.stackexchange.com/questions/85601/is-arc4random-secure-enough/172905#172905), but this would only affect users of OpenBSD <5.5, using a version that was released more than 8 years ago.",
          "user": {
            "login": "theStack",
            "id": 91535,
            "node_id": "MDQ6VXNlcjkxNTM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theStack",
            "html_url": "https://github.com/theStack",
            "followers_url": "https://api.github.com/users/theStack/followers",
            "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
            "organizations_url": "https://api.github.com/users/theStack/orgs",
            "repos_url": "https://api.github.com/users/theStack/repos",
            "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theStack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24238",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24238",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24238.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24238.patch"
          },
          "closed_at": "2022-02-10T09:01:29Z",
          "created_at": "2022-02-02T15:20:27Z",
          "updated_at": "2023-02-10T10:12:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 870771228,
      "node_id": "PRR_kwDOAP4Jqs4z5uoc",
      "url": null,
      "actor": null,
      "commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-870771228",
      "submitted_at": "2022-02-02T16:06:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "commented",
      "id": 1028108833,
      "node_id": "IC_kwDOAP4Jqs49R7Ih",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1028108833",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-02T16:16:59Z",
      "updated_at": "2022-02-02T16:17:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK 4c43382. All three examples compile and run successfully on my machine (Ubuntu 20.04).",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1028108833",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "commented",
      "id": 1028212614,
      "node_id": "IC_kwDOAP4Jqs49SUeG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1028212614",
      "actor": {
        "login": "Emzy",
        "id": 1223908,
        "node_id": "MDQ6VXNlcjEyMjM5MDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1223908?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Emzy",
        "html_url": "https://github.com/Emzy",
        "followers_url": "https://api.github.com/users/Emzy/followers",
        "following_url": "https://api.github.com/users/Emzy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Emzy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Emzy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Emzy/subscriptions",
        "organizations_url": "https://api.github.com/users/Emzy/orgs",
        "repos_url": "https://api.github.com/users/Emzy/repos",
        "events_url": "https://api.github.com/users/Emzy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Emzy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-02T18:06:31Z",
      "updated_at": "2022-02-02T18:06:31Z",
      "author_association": "NONE",
      "body": "Tested ACK 4c43382 (Ubuntu 20.04.3 LTS)",
      "user": {
        "login": "Emzy",
        "id": 1223908,
        "node_id": "MDQ6VXNlcjEyMjM5MDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1223908?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Emzy",
        "html_url": "https://github.com/Emzy",
        "followers_url": "https://api.github.com/users/Emzy/followers",
        "following_url": "https://api.github.com/users/Emzy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Emzy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Emzy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Emzy/subscriptions",
        "organizations_url": "https://api.github.com/users/Emzy/orgs",
        "repos_url": "https://api.github.com/users/Emzy/repos",
        "events_url": "https://api.github.com/users/Emzy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Emzy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1028212614",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "referenced",
      "id": 6040311261,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAFoB9Xd",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6040311261",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a7e80449c0811b361cdaea39b6bab78ca5fbf668",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/a7e80449c0811b361cdaea39b6bab78ca5fbf668",
      "created_at": "2022-02-10T09:01:04Z"
    },
    {
      "event": "referenced",
      "id": 6043582078,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAFoOb5-",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6043582078",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ba3551db7ad868ef50c3bac05303606b7163973d",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/ba3551db7ad868ef50c3bac05303606b7163973d",
      "created_at": "2022-02-10T16:15:07Z"
    },
    {
      "event": "commented",
      "id": 1037126128,
      "node_id": "IC_kwDOAP4Jqs490Unw",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1037126128",
      "actor": {
        "login": "scgbckbone",
        "id": 25349625,
        "node_id": "MDQ6VXNlcjI1MzQ5NjI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/25349625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scgbckbone",
        "html_url": "https://github.com/scgbckbone",
        "followers_url": "https://api.github.com/users/scgbckbone/followers",
        "following_url": "https://api.github.com/users/scgbckbone/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/scgbckbone/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/scgbckbone/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/scgbckbone/subscriptions",
        "organizations_url": "https://api.github.com/users/scgbckbone/orgs",
        "repos_url": "https://api.github.com/users/scgbckbone/repos",
        "events_url": "https://api.github.com/users/scgbckbone/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/scgbckbone/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-12T10:43:51Z",
      "updated_at": "2022-02-12T10:43:51Z",
      "author_association": "NONE",
      "body": "Tested ACK\r\n* ubuntu 20.04 `Linux workstation 5.13.0-28-generic #31~20.04.1-Ubuntu SMP Wed Jan 19 14:08:10 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux`\r\n* windows 10 `MINGW64_NT-10.0-19044 DESKTOP-UV75MOO 3.3.3-341.x86_64 2022-01-18 13:00 UTC x86_64 Msys`",
      "user": {
        "login": "scgbckbone",
        "id": 25349625,
        "node_id": "MDQ6VXNlcjI1MzQ5NjI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/25349625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scgbckbone",
        "html_url": "https://github.com/scgbckbone",
        "followers_url": "https://api.github.com/users/scgbckbone/followers",
        "following_url": "https://api.github.com/users/scgbckbone/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/scgbckbone/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/scgbckbone/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/scgbckbone/subscriptions",
        "organizations_url": "https://api.github.com/users/scgbckbone/orgs",
        "repos_url": "https://api.github.com/users/scgbckbone/repos",
        "events_url": "https://api.github.com/users/scgbckbone/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/scgbckbone/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1037126128",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6117254082,
      "node_id": "HRFPE_lADOAP4Jqs4kWkG_zwAAAAFsnePC",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6117254082",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-22T11:15:31Z"
    },
    {
      "event": "commented",
      "id": 1047689794,
      "node_id": "IC_kwDOAP4Jqs4-cnpC",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1047689794",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-22T11:15:47Z",
      "updated_at": "2022-02-22T11:15:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed comments, and squashed",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#issuecomment-1047689794",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/748"
    },
    {
      "event": "reviewed",
      "id": 890286901,
      "node_id": "PRR_kwDOAP4Jqs41ELM1",
      "url": null,
      "actor": null,
      "commit_id": "beecb9a3b3f4936eadb678e7e931c90e8fa83de6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK beecb9a3b3f4936eadb678e7e931c90e8fa83de6\r\n",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-890286901",
      "submitted_at": "2022-02-22T19:49:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "reviewed",
      "id": 890831217,
      "node_id": "PRR_kwDOAP4Jqs41GQFx",
      "url": null,
      "actor": null,
      "commit_id": "beecb9a3b3f4936eadb678e7e931c90e8fa83de6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "@elichai Can you quickly fix the copyright and the msg_hash comment?\r\n\r\n I think then this is good to go. We had many eyes on it and I can address the other two comments in another PR.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-890831217",
      "submitted_at": "2022-02-23T11:51:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGZlZTdkNGJmOWU0ZWEzMTZlYTRmZjMxNTFiYmU1MmJlYzFmMDc0NWM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/fee7d4bf9e4ea316ea4ff3151bbe52bec1f0745c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/fee7d4bf9e4ea316ea4ff3151bbe52bec1f0745c",
      "tree": {
        "sha": "842a9d7136fbc6a61c941fb4093be4b5aa060eda",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/842a9d7136fbc6a61c941fb4093be4b5aa060eda"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 842a9d7136fbc6a61c941fb4093be4b5aa060eda\nparent a1102b12196ea27f44d6201de4d25926a2ae9640\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1588243072 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1645625693 +0200\n\nAdd an ECDSA signing and verifying example\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmIWQV0ZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqfxv9EADQaAFlM2qqfMM4yUptD5nr\nmpBPNHTWy281m1V1Rc8BCyuKCxTLyYscY/AwgI+mAZQD8d0G7pQ63c8pTSpz0AGV\nVpQDYmSKJ1B/HTQ3pcRzVGgYLSdsXqjj8924gpGr5uzafAintAF/EXVzAojMtXm5\nmu/XkHnMI2qFn5CqwIZFq+jZbd3uKMRWifHVdtFQisMnZj7klf2HAMJSKi6zSFF9\nOdoAxaGyzwqeCkfS2jflFFo7C9UBz3N8jZrAwbTasPhXizUrtuzwPt4LirLap7f3\n2kuxS+AmTRanYYuPmOU/7sxYNdSzk8uTZLi3QTSntdvUFuB0cwT+doWcaoXEPG7L\nNQ30jg5BLeijdCSb6V6z520LjrGzhPKiGHDZ5EcvEsf0rHKETtMcR36I4fEcq2kj\nxlwB94fn+MNgO+QgfwCZLLm1tmSeXmTs5qKDq4hF7nR/ghgkulAP3ptfHtUc1KN2\neSRUYo/xHSyqQyGt23JwxZz+zk/L2mhYDBFpJ8Fpr5XHwq30OLIeOiXLAzli7st1\nmG2CimieK/HfR53Xa0UbgvLi9YlvGbR8p6dkeTYlJ1u77/m+ZVhH9BJnIh88ewbu\n5vW8ao3FAsQpBgQrpp1hyaXI4ibFFsgBLZ/xc+aaLSaOjYV/+TfOIyzwmKbrdD6i\nUcXChF+Q9ZQ4zWr9PGhTzg==\n=Wlxw\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a1102b12196ea27f44d6201de4d25926a2ae9640",
          "sha": "a1102b12196ea27f44d6201de4d25926a2ae9640",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a1102b12196ea27f44d6201de4d25926a2ae9640"
        }
      ],
      "message": "Add an ECDSA signing and verifying example\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>",
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2022-02-23T14:14:53Z"
      },
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-04-30T10:37:52Z"
      },
      "sha": "fee7d4bf9e4ea316ea4ff3151bbe52bec1f0745c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGIwY2ZiY2MxNDM0N2ZmNmIwNGZmNjJhMGQ5MzU2Mzg4NDBhMzc5NzE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b0cfbcc14347ff6b04ff62a0d935638840a37971",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b0cfbcc14347ff6b04ff62a0d935638840a37971",
      "tree": {
        "sha": "f444be0ae94b5e34f68fc4bef8712946f03b304b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/f444be0ae94b5e34f68fc4bef8712946f03b304b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f444be0ae94b5e34f68fc4bef8712946f03b304b\nparent fee7d4bf9e4ea316ea4ff3151bbe52bec1f0745c\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1604938303 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1645625695 +0200\n\nAdd a Schnorr signing and verifying example\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmIWQV8ZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf6hHD/0YmkwskQIvCVOdC7WElPk2\n7x0ZXknzuV673mxsWutgcC95J16CjpFeRqxZXs8Nwb7HF9HDjPnQhM3NY/pr1v1J\nNCMHiXfsKh6WE6fwbzSod7/0thi8wWiPAqSNm0tkALvL3vhMLEq0b2wmr/TdAhig\nEu8ujmt6usKmqR2XDDJmjjdeWVSeG6qsSv+ziCBICgxMjIqxbst8O269ypIl8fCv\nrmX91V6f7qH9LxR6i10qHiX+HrJH6QtuQIfhnO24H7UVLc75VdLE64vv4QOSgbfO\n3fIQI7UrWbMPSYjovqmoWDrSHrZQKLjG9vFs5QWZX1iGcMHNm1OzREA8HVOyqrgs\nRDVDIImjfJVjuhsCgKwc0fIhxlgUKto7kyrwBk8D3URHPw5/A+0k59nv1ORdGfk5\nxciHAs3WM6c7/lnxnXZVxfz0dwz1hM/RCojqSYNOidtuZ//0hYfC3P+tuvSkIXqx\nLiY8ZZX7K7nKrQaj88bMOENSo0Qeq/f68JkVtr034Lqf2AlUS6rC/aCU7PL/UOFA\n9ziVtVRUblnoCZRGYhuXmH87i+BmouHh2u3xGzuzGnbwr75307S873MF7SvwYazC\nh3gqoqTR8/zvZRj4YBx3+S7v5eyP3OUS3KI1HD0S/HqTviQ5xyVU1ufuQdHTZ2dF\nY5vUqevips/L4CXm3edfRw==\n=x6/F\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/fee7d4bf9e4ea316ea4ff3151bbe52bec1f0745c",
          "sha": "fee7d4bf9e4ea316ea4ff3151bbe52bec1f0745c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/fee7d4bf9e4ea316ea4ff3151bbe52bec1f0745c"
        }
      ],
      "message": "Add a Schnorr signing and verifying example\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>",
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2022-02-23T14:14:55Z"
      },
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-11-09T16:11:43Z"
      },
      "sha": "b0cfbcc14347ff6b04ff62a0d935638840a37971"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQyMmE3Y2M4NmFlODY0OTY3OTRjNTAxNDAyOGVlMjQ5YmJlMGUwNzI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/422a7cc86ae86496794c5014028ee249bbe0e072",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/422a7cc86ae86496794c5014028ee249bbe0e072",
      "tree": {
        "sha": "f8521c2a4def6469a0982882d0a1685866103f7b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/f8521c2a4def6469a0982882d0a1685866103f7b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f8521c2a4def6469a0982882d0a1685866103f7b\nparent b0cfbcc14347ff6b04ff62a0d935638840a37971\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1588246402 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1645625697 +0200\n\nAdd a ecdh shared secret example\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmIWQWEZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf0jCD/9TUbfLTN2E80f3xoZvm+RY\n5/7nxQwhBznFAE5mUAm1HIqt+3miDJ98oVvQGz2VmbE+biM2+4oPXZ7bkfN3jvxk\npLlZzgySauhDcmy71GJUpytWi0/ug0FCzAVSdlyNB+FxsoIXqU9FX4N0kPq+Wxju\n9X83owoQHLv0NZdPaDjL+KSobgJ/Rr4egzQmdKBQJYySU5GZAEbwlqQeJiJVmVq9\nwM9ilDMdNgxWx3dXrwhN9tx73gHf6QfZOwAPtpfDBJsTqc+/wUrehus1MUFFJPe8\nXBEpTp4gpk+11qfGnXav0FqDRobNc51Pinf3ep1JDejZBEygD4+4UmraNbQyzsiv\nT8ZsBU4tjfQp7rTiPrao4ZQ/4aRxNb9GextU23PfErPi4RgbT4nJC6pW3phYAfGL\n6YzW4hxYfcVJ+VM8+sdNUjnTIEv1/Sixt5SH5FdmhqyEP26pKMbK3f5JfMhQq2mn\n6/4zjGyFF2w6QrHONrPx/ehVtveAeJ0hdgjzxxcuKOW1/hEq1m+VzXsJlrmJk0u1\nUN0Enjhh8M4w6YJA+7NhBgs121K/BL1G/SgqYC+uXFpsJBg4KNsgwWxnDVs9B93u\nofaEjbcC2S207GL0Csf6p6AuyO++nGQGStqS+sKTAPKS/4GCIVYbGk/k5sVrXCmR\n8TFxZjV7Eib/DA40B0Y71g==\n=mamb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b0cfbcc14347ff6b04ff62a0d935638840a37971",
          "sha": "b0cfbcc14347ff6b04ff62a0d935638840a37971",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b0cfbcc14347ff6b04ff62a0d935638840a37971"
        }
      ],
      "message": "Add a ecdh shared secret example\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>",
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2022-02-23T14:14:57Z"
      },
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-04-30T11:33:22Z"
      },
      "sha": "422a7cc86ae86496794c5014028ee249bbe0e072"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDUxNzY0NGVhYjE0ZWYzOTdlMWYwYmMyYjQ1ZjJkZmY4YjFhNDczZWM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/517644eab14ef397e1f0bc2b45f2dff8b1a473ec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/517644eab14ef397e1f0bc2b45f2dff8b1a473ec",
      "tree": {
        "sha": "642159223eab31ef9099e0ea3d0790ce612673fe",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/642159223eab31ef9099e0ea3d0790ce612673fe"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 642159223eab31ef9099e0ea3d0790ce612673fe\nparent 422a7cc86ae86496794c5014028ee249bbe0e072\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1588246464 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1645625698 +0200\n\nOptionally compile the examples in autotools, compile+run in travis\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmIWQWIZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqfyJBD/9kXx88XflKz3J0tve6c243\na5z3Mvaz1jPP8vVJLoyHQJPb8b+vrJV6xQSGFRLm5ZBW1t/VzZ/Sx5VHyy9X5+Id\nXPKPqohcIe71B3Qp0Jsz9dM6uOqdQvpMAdigTD18UXyKLOj705gKrYzqKRIEtTic\nXYY4gwgCGMjvCwuHlhNeQru5ORtw/r3cjAnDb4yBjjdS/bY9Y75fB1po7rdQ+bHb\nXdyuI+DXnscjNSovYtK6Z1igaWAXxgKuKOdsmIu6Csv+2T0APlONKJUsxeRATcEj\nSXLPQQ+cstzVNFOoknYMb/oaMKH6LY53UmyknmD6e5geHaZAkfBzEgPj3h4+Qwcg\n80vanBS/IpERknFJ4CJ9QpkmNcpNazF9I/S0P/t3FCYKWGSp73ip5pF5KU8hdjRD\nhJS7n3McjpZCKovKJDS+4PzQXJ8lYQZcN/qA/H5a29z57Y/9qwWFXBV3olIpl7YJ\nFoRwoY0QV7MxEuQjDHi+pyGphBSywYHVRfA6Ie58H857H1X2wOnTFoPIcL3gPTYH\ncB6/WyGnBZxnlfILxUq7C61IIaT7OKEGb0QemYVIMYqJ0yi6NfHHsOFR4BD9o8cG\n/36WCjEEDclJI5XIZCEImJDubKwH7Ui3CQrc+O2C42Q/oRww+X5IxleFy2oBKHRM\nfXMehPZ04dVsomO+ZxOoGQ==\n=rKRG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/422a7cc86ae86496794c5014028ee249bbe0e072",
          "sha": "422a7cc86ae86496794c5014028ee249bbe0e072",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/422a7cc86ae86496794c5014028ee249bbe0e072"
        }
      ],
      "message": "Optionally compile the examples in autotools, compile+run in travis",
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2022-02-23T14:14:58Z"
      },
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-04-30T11:34:24Z"
      },
      "sha": "517644eab14ef397e1f0bc2b45f2dff8b1a473ec"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQyZTAzNDMyZTZiZTdmMGJmMThjN2Y4NjEzMGQzOTMwYmRmNDAzOGQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/42e03432e6be7f0bf18c7f86130d3930bdf4038d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/42e03432e6be7f0bf18c7f86130d3930bdf4038d",
      "tree": {
        "sha": "cc80d3b47278c64fdeff21db934ca8c6384da8ee",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/cc80d3b47278c64fdeff21db934ca8c6384da8ee"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cc80d3b47278c64fdeff21db934ca8c6384da8ee\nparent 517644eab14ef397e1f0bc2b45f2dff8b1a473ec\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1588248530 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1645625699 +0200\n\nAdd usage examples to the readme\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmIWQWMZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf4zjEACLNAfEUM5imEcxlagocLQs\nkq3ixl87zy9ucX7pU26TCiK8xYVJQQorOqlbKBBOEqvuBr+lIDKS+mkLNW9VoqTS\nKQuRCTc9aDBnLLv6pgDTgjeSrWOBjeOfE5NMZoGFMS06vQH/0enuH0nltXGFRkmq\nQyR5Qz6FMnTCNxIniKQSLNOPktMN+h4MoCmHVoCIEpPs0TBvfPgxpmpy5mV7sr1W\nqRtm2ymbUHoLECtELYbmbx7i/AVahq1KJqhgXB2Y5dzJtl54GKRSJcZXQTXCvu3x\ndWxGt7iepTnah8wbQRpenaGtuzhpyMclynvafa4cCPCmOujLdS7R+dydqHBcu3GD\nL6pLAtLgaclr/LQht3WeVTGJv/NfBaupJZBA6olh7DLzwuBECM9vDL+t/zGy7W76\n/D9X5/RFmKfxe9gz0k+aYcGghSZAKt6oUxvhlKAXlP9vgIFFuBVzbvtGggzpTd6P\nCv9by37pesxmfgibyW4NnZs3dgcoZC3EBN1zIbDMkT9UNWQF7TiEk/vikrXIlghT\nAzVkAF1Y/Qm5/qsUj2LuJmD8rjxdG1utsS4vpqqFDd6shpXT/3WOLaQykDsAz8VN\nRSqTE5M9l+dnrUMpx1OrB5uU9yp3WgNMs+4U+FU+H+Vpv6KLgpTa/BWs7n44x6eu\nYTxqkTDGAa4982CkGIX/Ow==\n=46UE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/517644eab14ef397e1f0bc2b45f2dff8b1a473ec",
          "sha": "517644eab14ef397e1f0bc2b45f2dff8b1a473ec",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/517644eab14ef397e1f0bc2b45f2dff8b1a473ec"
        }
      ],
      "message": "Add usage examples to the readme",
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2022-02-23T14:14:59Z"
      },
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-04-30T12:08:50Z"
      },
      "sha": "42e03432e6be7f0bf18c7f86130d3930bdf4038d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdjOTUwMmNlY2U5YzllOGQ4MTEzMzNmN2FiNWJiMjJmNGViMDFjMDQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "tree": {
        "sha": "d75684e237a05190e04bcd9f97feab841fac9791",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d75684e237a05190e04bcd9f97feab841fac9791"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d75684e237a05190e04bcd9f97feab841fac9791\nparent 42e03432e6be7f0bf18c7f86130d3930bdf4038d\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1625409750 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1645625700 +0200\n\nAdd a copy of the CC0 license to the examples\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmIWQWQZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf1r0EADPo/AWjT7lIeEHqTa0pe2j\nFD6WLX5h6k5aKDrH2uMEaLH3OpXapY1VqbRZhuKm+MAp6Wm4Yq3eRlcYB6V9f0Y5\nhxBQn+F0sdatZYE5KmFTTp+NUvHzZwjf9ReoLo2nwINs0ei91omm2DKAH9V4ViCt\nCLbTA3YUvMcdza+8Y1LKp8xo0hAtC7KKRvApVZcw9Oo1lAKX/KiT265KtuRWqOPv\n2tXgmBJ9WsA2FEmtampVW3djREmuf2vtcnm26wcX1SZXRGniWoTGGFGhhFUXxLxY\nTWG6fwB/4HEXNHl93AT48NX9YjHrfWFdHDrsD00Tn8KQg+FgMcEctNloBv5L8hy8\n3Vrt/gwFMCvKZVsJGMjpkY2+N2fDhamQE4I7gLgrEIRnrgKdrCty0zykjJMci9t2\nfygg4CZcZ5uUXr5hMuHNhjDYzsuspr2esou8uYTJSm6HmNhRHlTUC96UPMA3Zjap\n6xbiu5Bcg2g7LFNTcXAzifAKdRYCKPdcFP/5ViriuP/KBWIss/1FwRaqhth7j6ry\noATv1z4XO/lIoPLnLVgvd0TfVAll/phZ0pvjx8imZT+d7wMFHAsp/G0do5n+s2Zz\ndsht/mQbvqWpN1TCExZmGcI1ItrMSRAsuXaoXp9yFhP7aUpf7LsdvBwhyA9Jhf2e\nOq0dNjFNHhoTqEKVLCfqKw==\n=xoPF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/42e03432e6be7f0bf18c7f86130d3930bdf4038d",
          "sha": "42e03432e6be7f0bf18c7f86130d3930bdf4038d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/42e03432e6be7f0bf18c7f86130d3930bdf4038d"
        }
      ],
      "message": "Add a copy of the CC0 license to the examples",
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2022-02-23T14:15:00Z"
      },
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2021-07-04T14:42:30Z"
      },
      "sha": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6125335385,
      "node_id": "HRFPE_lADOAP4Jqs4kWkG_zwAAAAFtGTNZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6125335385",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-23T14:15:21Z"
    },
    {
      "event": "reviewed",
      "id": 891292112,
      "node_id": "PRR_kwDOAP4Jqs41IAnQ",
      "url": null,
      "actor": null,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 7c9502cece9c9e8d811333f7ab5bb22f4eb01c04\r\n\r\nAs I said, I can create a follow-up PR.\r\n\r\nThe one CI failure for the sage prover is harmless and only because just sage on CI was introduced after the last rebase of this PR. It will work on master.  ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-891292112",
      "submitted_at": "2022-02-23T15:52:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "reviewed",
      "id": 891425250,
      "node_id": "PRR_kwDOAP4Jqs41IhHi",
      "url": null,
      "actor": null,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#pullrequestreview-891425250",
      "submitted_at": "2022-02-23T17:27:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
    },
    {
      "event": "merged",
      "id": 6126815184,
      "node_id": "ME_lADOAP4Jqs4kWkG_zwAAAAFtL8fQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6126815184",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "64b34979edd55edbe89c27b5cd1117e4adcf364b",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/64b34979edd55edbe89c27b5cd1117e4adcf364b",
      "created_at": "2022-02-23T17:36:42Z"
    },
    {
      "event": "closed",
      "id": 6126815225,
      "node_id": "CE_lADOAP4Jqs4kWkG_zwAAAAFtL8f5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6126815225",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-23T17:36:43Z"
    },
    {
      "event": "referenced",
      "id": 6257645224,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAF0_Bao",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6257645224",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f8631d8269a962af38f9e553fccc2312ed6fbcc",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/8f8631d8269a962af38f9e553fccc2312ed6fbcc",
      "created_at": "2022-03-17T10:14:30Z"
    },
    {
      "event": "referenced",
      "id": 6259163372,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAF1E0Ds",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6259163372",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4bb1d7e62a6f88090a327b4301b89df67702f5cd",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/4bb1d7e62a6f88090a327b4301b89df67702f5cd",
      "created_at": "2022-03-17T12:59:08Z"
    },
    {
      "event": "referenced",
      "id": 6333589842,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAF5gulS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6333589842",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "465d05253aaff1e06165a1777e70da16e14d2519",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/465d05253aaff1e06165a1777e70da16e14d2519",
      "created_at": "2022-03-30T09:43:02Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-30T15:19:17Z",
      "updated_at": "2022-03-30T15:19:17Z",
      "source": {
        "issue": {
          "id": 1186620285,
          "node_id": "PR_kwDOAjZbZs41Uj9Z",
          "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/174",
          "repository_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp",
          "labels_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/174/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/174/comments",
          "events_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/174/events",
          "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/174",
          "number": 174,
          "state": "closed",
          "state_reason": null,
          "title": "Upstream PRs 1064, 1049, 899, 1068, 1072, 1069, 1074, 1026, 1033, 748, 1079, 1088, 1090, 731, 1089, 995, 1094, 1093",
          "body": "[bitcoin-core/secp256k1#1064]: Modulo-reduce msg32 inside RFC6979 nonce fn to match spec. Fixes #1063\r\n[bitcoin-core/secp256k1#1049]: Faster fixed-input ecmult tests\r\n[bitcoin-core/secp256k1#899]: Reduce stratch space needed by ecmult_strauss_wnaf.\r\n[bitcoin-core/secp256k1#1068]: sage: Fix incompatibility with sage 9.4\r\n[bitcoin-core/secp256k1#1072]: ci: Attempt to make macOS builds more reliable\r\n[bitcoin-core/secp256k1#1069]: build: Replace use of deprecated autoconf macro AC_PROG_CC_C89\r\n[bitcoin-core/secp256k1#1074]: ci: Retry brew update a few times to avoid random failures\r\n[bitcoin-core/secp256k1#1026]: ecdh: Add test computing shared_secret=basepoint with random inputs\r\n[bitcoin-core/secp256k1#1033]: Add _fe_half and use in _gej_add_ge and _gej_double\r\n[bitcoin-core/secp256k1#748]: Add usage examples\r\n[bitcoin-core/secp256k1#1079]: configure: Add hidden --enable-dev-mode to enable all the stuff\r\n[bitcoin-core/secp256k1#1088]: configure: Use modern way to set AR\r\n[bitcoin-core/secp256k1#1090]: configure: Remove redundant pkg-config code\r\n[bitcoin-core/secp256k1#731]: Change SHA256 byte counter from size_t to uint64_t\r\n[bitcoin-core/secp256k1#1089]: Schnorrsig API improvements\r\n[bitcoin-core/secp256k1#995]: build: stop treating schnorrsig, extrakeys modules as experimental\r\n[bitcoin-core/secp256k1#1094]: doc: Clarify configure flags for optional modules\r\n[bitcoin-core/secp256k1#1093]: hash: Make code agnostic of endianness\r\n\r\nThis PR can be recreated  with `./sync-upstream.sh range 8746600eec5e7fcd35dabd480839a3a4bdfee87b`.",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/pulls/174",
            "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/174",
            "diff_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/174.diff",
            "patch_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/174.patch"
          },
          "closed_at": "2022-04-01T13:21:05Z",
          "created_at": "2022-03-30T15:19:17Z",
          "updated_at": "2022-04-01T13:21:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 6352394797,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAF6odot",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6352394797",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6c0aecf72b1f4290f50302440065392715d6240a",
      "commit_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/commits/6c0aecf72b1f4290f50302440065392715d6240a",
      "created_at": "2022-04-01T13:21:05Z"
    },
    {
      "event": "referenced",
      "id": 6382809743,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAF8cfKP",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6382809743",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "afb7a6fe06a33956ef43429d31f5934448f6e671",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/afb7a6fe06a33956ef43429d31f5934448f6e671",
      "created_at": "2022-04-06T19:25:27Z"
    },
    {
      "event": "referenced",
      "id": 6681498841,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAGOP5TZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6681498841",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "35d6112a72ef419af9cb1ee3ffd9e28ad0df04a0",
      "commit_url": "https://api.github.com/repos/gwillen/elements/commits/35d6112a72ef419af9cb1ee3ffd9e28ad0df04a0",
      "created_at": "2022-05-25T22:22:21Z"
    },
    {
      "event": "referenced",
      "id": 7059808273,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAGkzCAR",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7059808273",
      "actor": {
        "login": "patricklodder",
        "id": 1410115,
        "node_id": "MDQ6VXNlcjE0MTAxMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1410115?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patricklodder",
        "html_url": "https://github.com/patricklodder",
        "followers_url": "https://api.github.com/users/patricklodder/followers",
        "following_url": "https://api.github.com/users/patricklodder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/patricklodder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/patricklodder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/patricklodder/subscriptions",
        "organizations_url": "https://api.github.com/users/patricklodder/orgs",
        "repos_url": "https://api.github.com/users/patricklodder/repos",
        "events_url": "https://api.github.com/users/patricklodder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/patricklodder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21badcf9d23f51d831a2069a3d61ad320de417ea",
      "commit_url": "https://api.github.com/repos/patricklodder/dogecoin/commits/21badcf9d23f51d831a2069a3d61ad320de417ea",
      "created_at": "2022-07-25T21:21:04Z"
    },
    {
      "event": "referenced",
      "id": 7083242539,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAGmMbQr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7083242539",
      "actor": {
        "login": "patricklodder",
        "id": 1410115,
        "node_id": "MDQ6VXNlcjE0MTAxMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1410115?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patricklodder",
        "html_url": "https://github.com/patricklodder",
        "followers_url": "https://api.github.com/users/patricklodder/followers",
        "following_url": "https://api.github.com/users/patricklodder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/patricklodder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/patricklodder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/patricklodder/subscriptions",
        "organizations_url": "https://api.github.com/users/patricklodder/orgs",
        "repos_url": "https://api.github.com/users/patricklodder/repos",
        "events_url": "https://api.github.com/users/patricklodder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/patricklodder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "03002a9013ffb5efdccfbae3f3510f4a44c0da20",
      "commit_url": "https://api.github.com/repos/patricklodder/dogecoin/commits/03002a9013ffb5efdccfbae3f3510f4a44c0da20",
      "created_at": "2022-07-28T16:53:45Z"
    },
    {
      "event": "referenced",
      "id": 7125520608,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAGottDg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7125520608",
      "actor": {
        "login": "janus",
        "id": 6726,
        "node_id": "MDQ6VXNlcjY3MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6726?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janus",
        "html_url": "https://github.com/janus",
        "followers_url": "https://api.github.com/users/janus/followers",
        "following_url": "https://api.github.com/users/janus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janus/subscriptions",
        "organizations_url": "https://api.github.com/users/janus/orgs",
        "repos_url": "https://api.github.com/users/janus/repos",
        "events_url": "https://api.github.com/users/janus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3a0652a777202bd7b56ee68d1e56f240c42a459f",
      "commit_url": "https://api.github.com/repos/BitgesellOfficial/bitgesell/commits/3a0652a777202bd7b56ee68d1e56f240c42a459f",
      "created_at": "2022-08-04T08:12:00Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-28T15:18:57Z",
      "updated_at": "2022-10-28T15:18:57Z",
      "source": {
        "issue": {
          "id": 1427414426,
          "node_id": "PR_kwDOAP4Jqs5Bwhlv",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1144",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1144/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1144/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1144/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1144",
          "number": 1144,
          "state": "closed",
          "state_reason": null,
          "title": "Cleanup `.gitignore` file",
          "body": "1. The #748 had some kind of a hidden merge conflict with the #806, which was merged earlier. Both PRs added the same lines into the `.gitignore` file:\r\n```\r\n*.log\r\n*.trs\r\n```\r\nTo de-duplicate these lines, it seems the easiest way is to revert the smallest commit.\r\n\r\n2. The `!.gitignore` line was introduced in a16c3a905bbb56f667684d17b80c30e96f961620 for the `obj/.gitignore` file. The\r\n`obj` directory has been unused since 78cd96b15153e209cf4829a511f9efdfdcf7e4d0.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1144",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1144",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1144.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1144.patch"
          },
          "closed_at": "2022-11-01T16:32:47Z",
          "created_at": "2022-10-28T15:18:56Z",
          "updated_at": "2022-11-01T16:34:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-27T09:15:30Z",
      "updated_at": "2023-02-27T09:15:30Z",
      "source": {
        "issue": {
          "id": 1600403699,
          "node_id": "PR_kwDOAP4Jqs5Kymqh",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1215",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1215/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1215/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1215/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1215",
          "number": 1215,
          "state": "open",
          "state_reason": null,
          "title": "Use arc4random_buf() as the best practice method for obtaining randomness on OpenBSD (examples)",
          "body": "The method above is suggested instead of the current `getentropy()`, which is not intended to be used by user code. \r\nSee OpenBSD's [man page](https://man.openbsd.org/getentropy.2):\r\n\r\n> [getentropy](https://man.openbsd.org/getentropy.2#getentropy~2)() is not intended for regular code; use the [arc4random(3)](https://man.openbsd.org/arc4random.3) family of functions instead.",
          "user": {
            "login": "alpn",
            "id": 15992847,
            "node_id": "MDQ6VXNlcjE1OTkyODQ3",
            "avatar_url": "https://avatars.githubusercontent.com/u/15992847?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alpn",
            "html_url": "https://github.com/alpn",
            "followers_url": "https://api.github.com/users/alpn/followers",
            "following_url": "https://api.github.com/users/alpn/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/alpn/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/alpn/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/alpn/subscriptions",
            "organizations_url": "https://api.github.com/users/alpn/orgs",
            "repos_url": "https://api.github.com/users/alpn/repos",
            "events_url": "https://api.github.com/users/alpn/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/alpn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1215",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1215",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1215.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1215.patch"
          },
          "created_at": "2023-02-27T03:34:10Z",
          "updated_at": "2023-02-28T11:38:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 9068914613,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAIcjKe1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9068914613",
      "actor": {
        "login": "str4d",
        "id": 4993799,
        "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/str4d",
        "html_url": "https://github.com/str4d",
        "followers_url": "https://api.github.com/users/str4d/followers",
        "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
        "organizations_url": "https://api.github.com/users/str4d/orgs",
        "repos_url": "https://api.github.com/users/str4d/repos",
        "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/str4d/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "522190d5c3686cae522b507d5f2366f580bfc586",
      "commit_url": "https://api.github.com/repos/str4d/zcash/commits/522190d5c3686cae522b507d5f2366f580bfc586",
      "created_at": "2023-04-21T15:40:11Z"
    },
    {
      "event": "referenced",
      "id": 9425177877,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAIxyM0V",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9425177877",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "created_at": "2023-06-04T15:42:10Z"
    },
    {
      "event": "referenced",
      "id": 9696152898,
      "node_id": "REFE_lADOAP4Jqs4kWkG_zwAAAAJB741C",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9696152898",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f03457eede9abfd1d7a0d26abc379a710e16755",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/8f03457eede9abfd1d7a0d26abc379a710e16755",
      "created_at": "2023-07-01T12:32:53Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418179018",
      "pull_request_review_id": 403738190,
      "id": 418179018,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3OTAxOA==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;",
      "path": "examples/ecdh.c",
      "position": null,
      "original_position": 33,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "indentation",
      "created_at": "2020-04-30T17:39:43Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418179018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418179018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418189079",
      "pull_request_review_id": 403738190,
      "id": 418189079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4OTA3OQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);\n+    if (fd == -1 ) {\n+        return 0;\n+    }\n+    res = read(fd, data, size);\n+    close(fd);\n+    if (res != (ssize_t)size) {\n+        return 0;\n+    }\n+#endif\n+    return 1;",
      "path": "examples/random.h",
      "position": null,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would be less fragile when the function would return 0 if none of the above branches are taken",
      "created_at": "2020-04-30T17:56:37Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418189079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418189079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418190255",
      "pull_request_review_id": 403738190,
      "id": 418190255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5MDI1NQ==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);",
      "path": "examples/ecdh.c",
      "position": 38,
      "original_position": 29,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make sense to mention why the `CONTEXT_SIGN` flag is chosen?",
      "created_at": "2020-04-30T17:58:32Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418190255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418190255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418202541",
      "pull_request_review_id": 403738190,
      "id": 418202541,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMjU0MQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);",
      "path": "examples/random.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be better if we'd use getrandom if available.",
      "created_at": "2020-04-30T18:19:58Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418202541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418202541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418203780",
      "pull_request_review_id": 403738190,
      "id": 418203780,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMzc4MA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like this would happen on many common OSes (macOS, BSDs, ...). How about not compiling the examples by default?",
      "created_at": "2020-04-30T18:22:15Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418203780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418203780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418227216",
      "pull_request_review_id": 403799340,
      "id": 418227216,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNzIxNg==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);\n+    if (fd == -1 ) {\n+        return 0;\n+    }\n+    res = read(fd, data, size);\n+    close(fd);\n+    if (res != (ssize_t)size) {\n+        return 0;\n+    }\n+#endif\n+    return 1;",
      "path": "examples/random.h",
      "position": null,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418189079,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That should never happen because there's an `#error` at the top of the file if none were taken.",
      "created_at": "2020-04-30T19:05:29Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418227216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418227216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418227335",
      "pull_request_review_id": 403799472,
      "id": 418227335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNzMzNQ==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);",
      "path": "examples/ecdh.c",
      "position": 38,
      "original_position": 29,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418190255,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great Idea! I'll try to phrase something :)",
      "created_at": "2020-04-30T19:05:42Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418227335",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418227335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418228255",
      "pull_request_review_id": 403800661,
      "id": 418228255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODI1NQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);",
      "path": "examples/random.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418202541,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I really wanted to use `getrandom` but it's not available in the libc in our travis.\r\nWe could add `dist: bionic` and that will probably solve this, but my thought was \r\n\"if even our travis doesn't support it then we should probably not use this in the examples\"\r\n\r\nSee: https://travis-ci.org/github/elichai/secp256k1/jobs/681424984#L403",
      "created_at": "2020-04-30T19:07:29Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418228255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418228255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418229635",
      "pull_request_review_id": 403802366,
      "id": 418229635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTYzNQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I skipped BSD because I didn't think anyone is really using it, but forgot about OSX.\r\nI'll look into adding them both, see how compilcated it gets (I want to avoid something like https://github.com/bitcoin/bitcoin/blob/master/src/random.cpp and only support mostly recent OS versions)\r\n\r\nNow that I re-read my last sentence :) you might be right about not compiling them by default, I just find that whatever's not compiled by default I always break and find out in the CI lol",
      "created_at": "2020-04-30T19:10:00Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418229635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418229635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418236552",
      "pull_request_review_id": 403811378,
      "id": 418236552,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzNjU1Mg==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);",
      "path": "examples/random.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418202541,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. We can update this later.",
      "created_at": "2020-04-30T19:23:01Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418236552",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418236552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418237929",
      "pull_request_review_id": 403813069,
      "id": 418237929,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzNzkyOQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);\n+    if (fd == -1 ) {\n+        return 0;\n+    }\n+    res = read(fd, data, size);\n+    close(fd);\n+    if (res != (ssize_t)size) {\n+        return 0;\n+    }\n+#endif\n+    return 1;",
      "path": "examples/random.h",
      "position": null,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418189079,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah but if you add a branch above to add another OS, you may forget to add it here here as well (or accidentally branch on something else).",
      "created_at": "2020-04-30T19:25:43Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418237929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418237929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418263792",
      "pull_request_review_id": 403846291,
      "id": 418263792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2Mzc5Mg==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Pubkey creation on a valid Context with a verified seckey should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1));\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey1);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    /* Should be the same size as the size of the output */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey2);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /* Perform ECDH with seckey1 and pubkey2, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL));\n+\n+    /* Perform ECDH with seckey2 and pubkey1, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL));\n+\n+    /* Both parties should end up with the same shared secret */\n+    assert(memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1)) == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+",
      "path": "examples/ecdh.c",
      "position": 125,
      "original_position": 75,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We need to destroy the context here. Also can try to clear the secret keys (and add comment why we do that).",
      "created_at": "2020-04-30T20:17:09Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418263792",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418263792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418268675",
      "pull_request_review_id": 403852282,
      "id": 418268675,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2ODY3NQ==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Pubkey creation on a valid Context with a verified seckey should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1));\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey1);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    /* Should be the same size as the size of the output */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey2);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /* Perform ECDH with seckey1 and pubkey2, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL));\n+\n+    /* Perform ECDH with seckey2 and pubkey1, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL));\n+\n+    /* Both parties should end up with the same shared secret */\n+    assert(memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1)) == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+",
      "path": "examples/ecdh.c",
      "position": 125,
      "original_position": 75,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418263792,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Weird that valgrind didn't complain about it.",
      "created_at": "2020-04-30T20:26:38Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418268675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418268675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418269914",
      "pull_request_review_id": 403853872,
      "id": 418269914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2OTkxNA==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Pubkey creation on a valid Context with a verified seckey should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1));\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey1);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    /* Should be the same size as the size of the output */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey2);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /* Perform ECDH with seckey1 and pubkey2, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL));\n+\n+    /* Perform ECDH with seckey2 and pubkey1, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL));\n+\n+    /* Both parties should end up with the same shared secret */\n+    assert(memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1)) == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+",
      "path": "examples/ecdh.c",
      "position": 125,
      "original_position": 75,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418263792,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should I do try to do some best effort in that regard? (ie #636)",
      "created_at": "2020-04-30T20:29:08Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418269914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418269914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418468573",
      "pull_request_review_id": 404076422,
      "id": 418468573,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2ODU3Mw==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);",
      "path": "examples/random.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418202541,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh weird, it's really not in Ubuntu LTS 16.04. You need glibc 2.25 at least. -.- I wanted to point out `getrandom` too...\r\n\r\nI think we should at least add an explanatory comment or a link to an explanation. And to be honest, I'd prefer to use `getrandom` here and have an example that breaks compilation if it's not available and refer people to `/dev/urandom` then.\r\n\r\nAt least LTS 16.04 will have \"end of standard support\" in 2021.",
      "created_at": "2020-05-01T08:56:45Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418468573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418468573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418490365",
      "pull_request_review_id": 404101494,
      "id": 418490365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MDM2NQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);",
      "path": "examples/random.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418202541,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought about that, but how do you propose to do this?\r\nlike should I involve autotools in this now?(to detect getrandom) I really preferred to keep the examples minimal and self standing.\r\n\r\nanother advantage of `/dev/urandom` is that I can just stick MacOS and BSD variants on it and it should work  ",
      "created_at": "2020-05-01T10:19:56Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418490365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418490365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418502092",
      "pull_request_review_id": 404114881,
      "id": 418502092,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMjA5Mg==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);",
      "path": "examples/random.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418202541,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> like should I involve autotools in this now?(to detect getrandom) I really preferred to keep the examples minimal and self standing.\r\n\r\nHm ok, what I had in mind was rather not compiling the examples at all in our build system. \r\nBut I see that this is not great either....\r\n\r\nedit: see discussion below",
      "created_at": "2020-05-01T11:07:57Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418502092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418502092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418502781",
      "pull_request_review_id": 404115583,
      "id": 418502781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMjc4MQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, I hadn't read this conversation here before. Maybe it's really better not to compile the examples in our build system. If the concern is CI, we can compile them in the CI. If we want, we could add a super simple standalone Makefile that's entirely decoupled from our autoconf stuff. ",
      "created_at": "2020-05-01T11:10:50Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418502781",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418502781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418504704",
      "pull_request_review_id": 404117693,
      "id": 418504704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNDcwNA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm trying to redo the travis and at least add MacOS to the CI\r\nhmm stand alone make can be interesting, should that compile libsecp by it self? \r\nI can write something simple.\r\n\r\nOtherwise we can still compile it in our CI, turn it off by default and bump our travis to bionic",
      "created_at": "2020-05-01T11:18:21Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418504704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418504704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418505733",
      "pull_request_review_id": 404118712,
      "id": 418505733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNTczMw==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Pubkey creation on a valid Context with a verified seckey should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1));\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey1);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    /* Should be the same size as the size of the output */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey2);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /* Perform ECDH with seckey1 and pubkey2, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL));\n+\n+    /* Perform ECDH with seckey2 and pubkey1, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL));\n+\n+    /* Both parties should end up with the same shared secret */\n+    assert(memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1)) == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+",
      "path": "examples/ecdh.c",
      "position": 125,
      "original_position": 75,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418263792,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shall I export a function to clear memory in #636?",
      "created_at": "2020-05-01T11:22:06Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418505733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418505733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418507589",
      "pull_request_review_id": 404120824,
      "id": 418507589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNzU4OQ==",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char uncompressed_pubkey[65];\n+    size_t len;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {",
      "path": "examples/keygen.c",
      "position": null,
      "original_position": 24,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd prefer not to loop here and instead bail out if we hit an invalid key.\r\n\r\n The probability of hitting an invalid key is negligible if your randomness is good.\r\nSo this loop is only relevant if your randomness is broken. And then it hides the fact that your randomness is broken.",
      "created_at": "2020-05-01T11:29:36Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418507589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418507589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418634494",
      "pull_request_review_id": 404275296,
      "id": 418634494,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzNDQ5NA==",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char uncompressed_pubkey[65];\n+    size_t len;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {",
      "path": "examples/keygen.c",
      "position": null,
      "original_position": 24,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418507589,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FWIW:\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/key.cpp#L157\r\nhttps://github.com/rust-bitcoin/rust-secp256k1/blob/master/src/key.rs#L118\r\nhttps://github.com/bitcoin-core/secp256k1/blob/f39f99be0e6add959f534c03b93044cef066fe09/src/tests.c#L130:L141",
      "created_at": "2020-05-01T17:02:42Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418634494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418634494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418964027",
      "pull_request_review_id": 404531818,
      "id": 418964027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NDAyNw==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Pubkey creation on a valid Context with a verified seckey should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1));\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey1);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    /* Should be the same size as the size of the output */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey2);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /* Perform ECDH with seckey1 and pubkey2, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL));\n+\n+    /* Perform ECDH with seckey2 and pubkey1, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL));\n+\n+    /* Both parties should end up with the same shared secret */\n+    assert(memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1)) == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+",
      "path": "examples/ecdh.c",
      "position": 125,
      "original_position": 75,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418263792,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's an improvement, although probably most serious users will have their own mechanism.",
      "created_at": "2020-05-02T14:16:42Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418964027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418964027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998081",
      "pull_request_review_id": 404554458,
      "id": 418998081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5ODA4MQ==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on sucess, and 0 on failure. */\n+int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS) {\n+        return 0;\n+    }\n+#elif defined(__linux__)\n+    ssize_t res;\n+    int fd = open(\"/dev/urandom\", O_RDONLY);\n+    if (fd == -1 ) {\n+        return 0;\n+    }\n+    res = read(fd, data, size);\n+    close(fd);\n+    if (res != (ssize_t)size) {\n+        return 0;\n+    }\n+#endif\n+    return 1;",
      "path": "examples/random.h",
      "position": null,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418189079,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-02T19:30:16Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418998081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998138",
      "pull_request_review_id": 404554501,
      "id": 418998138,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5ODEzOA==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;",
      "path": "examples/ecdh.c",
      "position": null,
      "original_position": 33,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418179018,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks. Done",
      "created_at": "2020-05-02T19:30:50Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418998138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998144",
      "pull_request_review_id": 404554508,
      "id": 418998144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5ODE0NA==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);",
      "path": "examples/ecdh.c",
      "position": 38,
      "original_position": 29,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418190255,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it better?",
      "created_at": "2020-05-02T19:30:54Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418998144",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998264",
      "pull_request_review_id": 404554585,
      "id": 418998264,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5ODI2NA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added macOS and BSD, and will add macOS to the CI soon so we could actually test this.\r\nrn they all use /dev/urandom, but if we bump to bionic I can replace with getrandom/getentropy",
      "created_at": "2020-05-02T19:32:02Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418998264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998341",
      "pull_request_review_id": 404554648,
      "id": 418998341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5ODM0MQ==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+                return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Pubkey creation on a valid Context with a verified seckey should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1));\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey1);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    /* Should be the same size as the size of the output */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize the pubkey in a compressed form */\n+    len = sizeof(compressed_pubkey2);\n+    secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /* Perform ECDH with seckey1 and pubkey2, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL));\n+\n+    /* Perform ECDH with seckey2 and pubkey1, should never fail with a verified seckey and valid pubkey */\n+    assert(secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL));\n+\n+    /* Both parties should end up with the same shared secret */\n+    assert(memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1)) == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+",
      "path": "examples/ecdh.c",
      "position": 125,
      "original_position": 75,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418263792,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, I added memset with a TODO, so we could either copy your function to the example, or if we actually export it use that.",
      "created_at": "2020-05-02T19:32:58Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r418998341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/418998341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/419254800",
      "pull_request_review_id": 404759102,
      "id": 419254800,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1NDgwMA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the advantage of covering anything other than Linux for now is small compared to the maintenance overhead and bikeshedding. I'd suggest to do Linux only, use /dev/urandom, add comment to use `getrandom` if available, not compile by default, but add a travis test. Easy to revisit this later if there is demand for other systems but most important is the code, and not that it compiles on every user's system. ",
      "created_at": "2020-05-04T07:30:40Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r419254800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/419254800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/419267678",
      "pull_request_review_id": 404774492,
      "id": 419267678,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NzY3OA==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);",
      "path": "examples/ecdh.c",
      "position": 38,
      "original_position": 29,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418190255,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I think it's helpful (if only for making sure that people pay attention to the flags).",
      "created_at": "2020-05-04T07:58:29Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r419267678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/419267678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/420627818",
      "pull_request_review_id": 406404790,
      "id": 420627818,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNzgxOA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I didn't see your comment here. I suggested Linux/MacOS/Windows here:\r\nhttps://github.com/bitcoin-core/secp256k1/issues/749#issuecomment-623964688 But I'd also be okay with just Linux. I think the main point is that we good documentation.\r\n\r\nAnd I have a somewhat strong opinion on `/dev/urandom` vs `getrandom`. The issue with `/dev/urandom` is that it never blocks, i.e., it doesn't block at early boot when there has never been enough entropy. That's rare for Linux on the desktop but may be the case for a lightweight Linux on some device. So I'd really prefer `getrandom` and a comment to use `/dev/urandom` if `getrandom` is not available. If we don't compile the examples, then it does not matter if it's not available.\r\n\r\nAs I said, I'll try to find some refs. If you want, go ahead with this PR and I'll open a PR on top of it.",
      "created_at": "2020-05-06T08:34:36Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r420627818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/420627818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/420628657",
      "pull_request_review_id": 406405862,
      "id": 420628657,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODY1Nw==",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char uncompressed_pubkey[65];\n+    size_t len;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {",
      "path": "examples/keygen.c",
      "position": null,
      "original_position": 24,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418507589,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, I see. I still think that my argument holds up. Maybe @sipa can chime in for the code in Core. ",
      "created_at": "2020-05-06T08:36:04Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r420628657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/420628657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/420862112",
      "pull_request_review_id": 406702762,
      "id": 420862112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2MjExMg==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since we're updating travis to bionic in #750 (which I support), what you're suggesting sounds good to me (`getrandom` or gtfo) and test that in travis.",
      "created_at": "2020-05-06T15:01:00Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r420862112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/420862112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/427066290",
      "pull_request_review_id": 414145602,
      "id": 427066290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NjI5MA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done :)",
      "created_at": "2020-05-19T06:46:49Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r427066290",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/427066290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/427067534",
      "pull_request_review_id": 414147195,
      "id": 427067534,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NzUzNA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__)\n+#include <fcntl.h>\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"",
      "path": "examples/random.h",
      "position": 28,
      "original_position": 7,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418203780,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, And added explanations about the different random sources for each platform",
      "created_at": "2020-05-19T06:49:45Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r427067534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/427067534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/443108083",
      "pull_request_review_id": 434408724,
      "id": 443108083,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwODA4Mw==",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char uncompressed_pubkey[65];\n+    size_t len;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    while (1) {",
      "path": "examples/keygen.c",
      "position": null,
      "original_position": 24,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2e7decf546b08d5fa80ab38b03a9c140c10e1f36",
      "in_reply_to_id": 418507589,
      "user": {
        "login": "nickfarrow",
        "id": 24557779,
        "node_id": "MDQ6VXNlcjI0NTU3Nzc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/24557779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nickfarrow",
        "html_url": "https://github.com/nickfarrow",
        "followers_url": "https://api.github.com/users/nickfarrow/followers",
        "following_url": "https://api.github.com/users/nickfarrow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nickfarrow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nickfarrow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nickfarrow/subscriptions",
        "organizations_url": "https://api.github.com/users/nickfarrow/orgs",
        "repos_url": "https://api.github.com/users/nickfarrow/repos",
        "events_url": "https://api.github.com/users/nickfarrow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nickfarrow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While the probability of an invalid key is negligible (something like 1/2^128?),  I feel that if the verify function is provided in the library then it could still be informative to include in the examples.\r\n\r\n```\r\nif (!secp256k1_ec_seckey_verify(ctx, seckey)) {\r\n\tprintf(\"Invalid secret key\\n\");\r\n\treturn 1;\r\n}\r\n```",
      "created_at": "2020-06-20T07:00:04Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r443108083",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/443108083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/462180997",
      "pull_request_review_id": 457370460,
      "id": 462180997,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4MDk5Nw==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * Which is why we create a context for signing(SECP256K1_CONTEXT_SIGN).\n+     * (The docs for `secp256k1_ecdh` don't require any special context, just some context) */\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);",
      "path": "examples/ecdh.c",
      "position": 38,
      "original_position": 40,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "485c68b486fd545d2d90304f543fc69efd24ff06",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The context should be randomized here.",
      "created_at": "2020-07-29T09:55:27Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r462180997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/462180997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/462850610",
      "pull_request_review_id": 458211145,
      "id": 462850610,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1MDYxMA==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * Which is why we create a context for signing(SECP256K1_CONTEXT_SIGN).\n+     * (The docs for `secp256k1_ecdh` don't require any special context, just some context) */\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);",
      "path": "examples/ecdh.c",
      "position": 38,
      "original_position": 40,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "485c68b486fd545d2d90304f543fc69efd24ff06",
      "in_reply_to_id": 462180997,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-07-30T08:54:08Z",
      "updated_at": "2020-11-09T16:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r462850610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/462850610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524590882",
      "pull_request_review_id": 531786121,
      "id": 524590882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5MDg4Mg==",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 2,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "8698027d7cb6de95e25f4d6e4beaaaab056008d7",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's quite a few trailing whitespaces and tabs in this PR.",
      "created_at": "2020-11-16T21:16:23Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524590882",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524590882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524593634",
      "pull_request_review_id": 531786121,
      "id": 524593634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5MzYzNA==",
      "diff_hunk": "@@ -68,6 +68,13 @@ libsecp256k1 is built using autotools:\n     $ make check\n     $ sudo make install  # optional\n \n+Usage Examples\n+-----------\n+  Usage Examples can be found in the [examples](examples) directory:",
      "path": "README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be helpful to mention the `--enable-examples` configuration flag.",
      "created_at": "2020-11-16T21:18:54Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524593634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524593634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524594319",
      "pull_request_review_id": 531786121,
      "id": 524594319,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5NDMxOQ==",
      "diff_hunk": "@@ -10,10 +10,14 @@ tests\n exhaustive_tests\n gen_context\n valgrind_ctime_test\n+keygen_example",
      "path": ".gitignore",
      "position": null,
      "original_position": 4,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't exist anymore and `ecdsa_example` and `schnorr_example` are missing.",
      "created_at": "2020-11-16T21:19:32Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524594319",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524594319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524596242",
      "pull_request_review_id": 531786121,
      "id": 524596242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5NjI0Mg==",
      "diff_hunk": "@@ -123,6 +124,31 @@ exhaustive_tests_LDFLAGS = -static\n TESTS += exhaustive_tests\n endif\n \n+if USE_EXAMPLES\n+noinst_PROGRAMS += ecdsa_example\n+ecdsa_example_SOURCES = examples/ecdsa.c\n+ecdsa_example_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+ecdsa_example_LDADD = libsecp256k1.la $(SECP_LIBS)\n+ecdsa_example_LDFLAGS = -static\n+TESTS += ecdsa_example\n+endif",
      "path": "Makefile.am",
      "position": 20,
      "original_position": 19,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it intentional that this endif is here? I would have expected `USE_EXAMPLES` applies to all examples.",
      "created_at": "2020-11-16T21:21:13Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524596242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524596242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524605472",
      "pull_request_review_id": 531786121,
      "id": 524605472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNTQ3Mg==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom",
      "path": "examples/random.h",
      "position": 15,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not `arc4random` as recommended in the [getentropy](https://man.openbsd.org/getentropy.2) man page? Same for macOS.",
      "created_at": "2020-11-16T21:29:20Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524605472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524605472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524610039",
      "pull_request_review_id": 531786121,
      "id": 524610039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxMDAzOQ==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);",
      "path": "examples/random.h",
      "position": 39,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What does the `BCRYPT_USE_SYSTEM_PREFERRED_RNG` flag do? ",
      "created_at": "2020-11-16T21:33:11Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524610039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524610039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524620931",
      "pull_request_review_id": 531786121,
      "id": 524620931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyMDkzMQ==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 53,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the second half of this sentence isn't a consequence of the first. Generally I think the quality of the doc would be improved quite a bit by using proper punctuation because there are a lot of places where a dot is missing or a comma is used instead of a dot.",
      "created_at": "2020-11-16T21:42:54Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524620931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524620931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524621570",
      "pull_request_review_id": 531786121,
      "id": 524621570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyMTU3MA==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble\n+     * non the less we try generating a new key if failed  */",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 54,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "non the less -> nonetheless",
      "created_at": "2020-11-16T21:43:30Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524621570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524621570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524622396",
      "pull_request_review_id": 531786121,
      "id": 524622396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyMjM5Ng==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble\n+     * non the less we try generating a new key if failed  */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair wit a valid context, it should only fail if the seckey is zero or out of range. */\n+        if (secp256k1_keypair_create(ctx, &keypair, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Extract the XOnly Public Key from the Keypair, ",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 66,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "XOnly -> X-only as in the bip.",
      "created_at": "2020-11-16T21:44:14Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524622396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524622396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524622916",
      "pull_request_review_id": 531786121,
      "id": 524622916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyMjkxNg==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble\n+     * non the less we try generating a new key if failed  */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair wit a valid context, it should only fail if the seckey is zero or out of range. */",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 60,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo \"wit\"",
      "created_at": "2020-11-16T21:44:38Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524622916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524622916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524623575",
      "pull_request_review_id": 531786121,
      "id": 524623575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyMzU3NQ==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "auxilary -> auxiliary",
      "created_at": "2020-11-16T21:45:16Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524623575",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524623575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524632197",
      "pull_request_review_id": 531786121,
      "id": 524632197,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYzMjE5Nw==",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    unsigned char randomize[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * Which is why we create a context for signing(SECP256K1_CONTEXT_SIGN).\n+     * (The docs for `secp256k1_ecdh` don't require any special context, just some context) */\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    while (1) {",
      "path": "examples/ecdh.c",
      "position": 54,
      "original_position": 51,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the other example files you have a comment here explaining why there's a loop and why we verify the seckey.",
      "created_at": "2020-11-16T21:50:49Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524632197",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524632197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524634217",
      "pull_request_review_id": 531786121,
      "id": 524634217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYzNDIxNw==",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 15,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would be slightly better if this wasn't repeated in every example.",
      "created_at": "2020-11-16T21:52:09Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524634217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524634217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524643856",
      "pull_request_review_id": 531786121,
      "id": 524643856,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY0Mzg1Ng==",
      "diff_hunk": "@@ -123,6 +124,31 @@ exhaustive_tests_LDFLAGS = -static\n TESTS += exhaustive_tests\n endif\n \n+if USE_EXAMPLES\n+noinst_PROGRAMS += ecdsa_example\n+ecdsa_example_SOURCES = examples/ecdsa.c\n+ecdsa_example_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+ecdsa_example_LDADD = libsecp256k1.la $(SECP_LIBS)",
      "path": "Makefile.am",
      "position": null,
      "original_position": 16,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like we don't need to specify `$(SECP_LIBS)$ nor $CPPFLAGS$ for any of the examples, except that schnorrsig needs `CPPFLAGS` (but no `$(SECP_INCLUDES)` necessary).",
      "created_at": "2020-11-16T21:58:26Z",
      "updated_at": "2020-11-16T22:15:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524643856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524643856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524665023",
      "pull_request_review_id": 531786121,
      "id": 524665023,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2NTAyMw==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res == STATUS_SUCCESS) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res == (ssize_t)size) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 39,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`unsigned long` may not fit in an `ssize_t`. On 32 bit systems it can therefore happen that getrandom returns -1 but `fill_random` returns `1`. Perhaps change the `size` argument of `fill_random` to `size_t`, add `res != -1` to this `if` condition and, for WIN32, check whether size exceeds `unsigned long`?",
      "created_at": "2020-11-16T22:13:58Z",
      "updated_at": "2020-11-16T22:15:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524665023",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/524665023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/525004967",
      "pull_request_review_id": 532170126,
      "id": 525004967,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNDk2Nw==",
      "diff_hunk": "@@ -123,6 +124,31 @@ exhaustive_tests_LDFLAGS = -static\n TESTS += exhaustive_tests\n endif\n \n+if USE_EXAMPLES\n+noinst_PROGRAMS += ecdsa_example\n+ecdsa_example_SOURCES = examples/ecdsa.c\n+ecdsa_example_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+ecdsa_example_LDADD = libsecp256k1.la $(SECP_LIBS)\n+ecdsa_example_LDFLAGS = -static\n+TESTS += ecdsa_example\n+endif",
      "path": "Makefile.am",
      "position": 20,
      "original_position": 19,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524596242,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nope, accidentally moved it when added schnorrsig",
      "created_at": "2020-11-17T09:27:05Z",
      "updated_at": "2020-11-17T09:27:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r525004967",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/525004967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/525048277",
      "pull_request_review_id": 532224912,
      "id": 525048277,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0ODI3Nw==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res == STATUS_SUCCESS) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res == (ssize_t)size) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 39,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524665023,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice catch. I hate C integers.",
      "created_at": "2020-11-17T10:31:36Z",
      "updated_at": "2020-11-17T10:31:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r525048277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/525048277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/603295709",
      "pull_request_review_id": 623230625,
      "id": 603295709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzI5NTcwOQ==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom",
      "path": "examples/random.h",
      "position": 15,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524605472,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the reason was that some platforms still use RC4 for that syscall: https://security.stackexchange.com/a/172905/188909\r\n\r\nLooking over implementations, it looks like OpenSSL[0], libsodium *internal*[1], Rust's getrandom[2], Go's[3], CPython[4], GnuTLS[5], Bitcoin[6] all use `getentropy` in OpenBSD, but libsodium's *external* API uses `arc4random`[7].\r\nArguably, OpenSSL, libsodium internal, GnuTLS and bitcoin all use it to seed a CPRNG, but Rust, Go, and Python's implementations are generally meant for end users AFAIU(and are used like that).\r\nThe only implementation I've found that uses `arc4random` is libsodium's external randomness (you could argue that it's the only one that's explicitly meant for cryptography end users)\r\n\r\nSo yeah, maybe for user facing API's `arc4random` is better, I'm not sure though (note that these days getentropy->arc4random: https://github.com/openbsd/src/blob/master/sys/dev/rnd.c#L814)\r\n\r\n[0] https://github.com/openssl/openssl/blob/c8830891e6cb8d0782986662ca50b8fa7c97f49f/providers/implementations/rands/seeding/rand_unix.c#L362\r\n[1] https://github.com/jedisct1/libsodium/blob/ae4add868124a32d4e54da10f9cd99240aecc0aa/src/libsodium/randombytes/internal/randombytes_internal_random.c#L189\r\n[2] https://github.com/rust-random/getrandom/blob/master/src/openbsd.rs#L14\r\n[3] https://golang.org/src/crypto/rand/rand_openbsd.go#L23\r\n[4] https://github.com/python/cpython/blob/41761933c1c30bb6003b65eef1ba23a83db4eae4/Python/bootstrap_hash.c#L463\r\n[5] https://gitlab.com/gnutls/gnutls/-/blob/master/lib/nettle/sysrng-getentropy.c#L57\r\n[6] https://github.com/bitcoin/bitcoin/blob/master/src/random.cpp#L314\r\n[7] https://github.com/jedisct1/libsodium/blob/ae4add868124a32d4e54da10f9cd99240aecc0aa/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c#L101",
      "created_at": "2021-03-29T13:30:49Z",
      "updated_at": "2021-03-29T13:31:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r603295709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/603295709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/603359036",
      "pull_request_review_id": 623316958,
      "id": 603359036,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzM1OTAzNg==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);",
      "path": "examples/random.h",
      "position": 39,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524610039,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AFAIU this means use the default CPRNG, otherwise we can't pass in NULL as the `hAlgorithm` and we need to instead need to pass a specific algorithm",
      "created_at": "2021-03-29T14:48:44Z",
      "updated_at": "2021-03-29T14:48:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r603359036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/603359036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663500440",
      "pull_request_review_id": 698672291,
      "id": 663500440,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUwMDQ0MA==",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 15,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524634217,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should I move it to `random.h`? should I rename `random.h` to `util.h`?",
      "created_at": "2021-07-04T12:57:02Z",
      "updated_at": "2021-07-04T12:57:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663500440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663500440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663502167",
      "pull_request_review_id": 698673595,
      "id": 663502167,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUwMjE2Nw==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res == STATUS_SUCCESS) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res == (ssize_t)size) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 39,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524665023,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Argh,how do I check if `size` exceeds `ULONG_MAX` if the standard doesn't even tell me what's bigger `size_t` or `unsigned long`?.\r\n\r\nWhat's the \"right\" way to do this? :(",
      "created_at": "2021-07-04T13:11:02Z",
      "updated_at": "2021-07-04T13:11:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663502167",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663502167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514711",
      "pull_request_review_id": 698682441,
      "id": 663514711,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDcxMQ==",
      "diff_hunk": "@@ -123,6 +124,31 @@ exhaustive_tests_LDFLAGS = -static\n TESTS += exhaustive_tests\n endif\n \n+if USE_EXAMPLES\n+noinst_PROGRAMS += ecdsa_example\n+ecdsa_example_SOURCES = examples/ecdsa.c\n+ecdsa_example_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+ecdsa_example_LDADD = libsecp256k1.la $(SECP_LIBS)",
      "path": "Makefile.am",
      "position": null,
      "original_position": 16,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524643856,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I removed `$(SECP_INCLUDES)` and `$(SECP_LIBS)`, anything else I should change in the automake?",
      "created_at": "2021-07-04T14:47:47Z",
      "updated_at": "2021-07-04T14:47:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514745",
      "pull_request_review_id": 698682464,
      "id": 663514745,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDc0NQ==",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_ecdh.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    unsigned char randomize[32];\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * Which is why we create a context for signing(SECP256K1_CONTEXT_SIGN).\n+     * (The docs for `secp256k1_ecdh` don't require any special context, just some context) */\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    while (1) {",
      "path": "examples/ecdh.c",
      "position": 54,
      "original_position": 51,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524632197,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2021-07-04T14:47:59Z",
      "updated_at": "2021-07-04T14:47:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514755",
      "pull_request_review_id": 698682473,
      "id": 663514755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDc1NQ==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524623575,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, Thanks!",
      "created_at": "2021-07-04T14:48:04Z",
      "updated_at": "2021-07-04T14:48:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514755",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514769",
      "pull_request_review_id": 698682478,
      "id": 663514769,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDc2OQ==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble\n+     * non the less we try generating a new key if failed  */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair wit a valid context, it should only fail if the seckey is zero or out of range. */",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 60,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524622916,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, Thanks!",
      "created_at": "2021-07-04T14:48:08Z",
      "updated_at": "2021-07-04T14:48:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514779",
      "pull_request_review_id": 698682487,
      "id": 663514779,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDc3OQ==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble\n+     * non the less we try generating a new key if failed  */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair wit a valid context, it should only fail if the seckey is zero or out of range. */\n+        if (secp256k1_keypair_create(ctx, &keypair, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Extract the XOnly Public Key from the Keypair, ",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 66,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524622396,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, Thanks!",
      "created_at": "2021-07-04T14:48:13Z",
      "updated_at": "2021-07-04T14:48:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514829",
      "pull_request_review_id": 698682514,
      "id": 663514829,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDgyOQ==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 53,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524620931,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rephrased, is it better now?",
      "created_at": "2021-07-04T14:48:29Z",
      "updated_at": "2021-07-04T14:48:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514862",
      "pull_request_review_id": 698682546,
      "id": 663514862,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDg2Mg==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble\n+     * non the less we try generating a new key if failed  */",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 54,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524621570,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I just removed that word :)",
      "created_at": "2021-07-04T14:48:51Z",
      "updated_at": "2021-07-04T14:48:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514862",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514923",
      "pull_request_review_id": 698682574,
      "id": 663514923,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDkyMw==",
      "diff_hunk": "@@ -10,10 +10,14 @@ tests\n exhaustive_tests\n gen_context\n valgrind_ctime_test\n+keygen_example",
      "path": ".gitignore",
      "position": null,
      "original_position": 4,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524594319,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Fixed",
      "created_at": "2021-07-04T14:49:08Z",
      "updated_at": "2021-07-04T14:49:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514936",
      "pull_request_review_id": 698682585,
      "id": 663514936,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDkzNg==",
      "diff_hunk": "@@ -68,6 +68,13 @@ libsecp256k1 is built using autotools:\n     $ make check\n     $ sudo make install  # optional\n \n+Usage Examples\n+-----------\n+  Usage Examples can be found in the [examples](examples) directory:",
      "path": "README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524593634,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added, Thanks :)",
      "created_at": "2021-07-04T14:49:14Z",
      "updated_at": "2021-07-04T14:49:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514996",
      "pull_request_review_id": 698682624,
      "id": 663514996,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNDk5Ng==",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 2,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "8698027d7cb6de95e25f4d6e4beaaaab056008d7",
      "in_reply_to_id": 524590882,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see any trailing whitespaces now, is this still an issue? do you mean the way the copyright header is?",
      "created_at": "2021-07-04T14:49:41Z",
      "updated_at": "2021-07-04T14:49:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663514996",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663514996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663515011",
      "pull_request_review_id": 698682631,
      "id": 663515011,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzUxNTAxMQ==",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 2,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "8698027d7cb6de95e25f4d6e4beaaaab056008d7",
      "in_reply_to_id": 524590882,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see any trailing whitespaces now, is this still an issue? do you mean the way the copyright header is?",
      "created_at": "2021-07-04T14:49:45Z",
      "updated_at": "2021-07-04T14:49:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r663515011",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663515011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664715675",
      "pull_request_review_id": 700168828,
      "id": 664715675,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDcxNTY3NQ==",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 2,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "8698027d7cb6de95e25f4d6e4beaaaab056008d7",
      "in_reply_to_id": 524590882,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see them either now.",
      "created_at": "2021-07-06T16:39:13Z",
      "updated_at": "2021-07-06T16:39:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r664715675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664715675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664715925",
      "pull_request_review_id": 700169151,
      "id": 664715925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDcxNTkyNQ==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom",
      "path": "examples/random.h",
      "position": 15,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524605472,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think the reason was that some platforms still use RC4 for that syscall:\r\n\r\n  Urgh. But we're only targeting `APPLE` and `OpenBSD` here, whose manpages both recommend arc4random. But agree that `getentropy` should be ok too.\r\n\r\n  How about we replace the sentence \"In this file only the best practice randomness sources are used\" at the top of the file with:\r\n  \"This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems. It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\"\r\n",
      "created_at": "2021-07-06T16:39:36Z",
      "updated_at": "2021-07-06T16:39:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r664715925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664715925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664716136",
      "pull_request_review_id": 700169400,
      "id": 664716136,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDcxNjEzNg==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);",
      "path": "examples/random.h",
      "position": 39,
      "original_position": 30,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524610039,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see, thx",
      "created_at": "2021-07-06T16:39:52Z",
      "updated_at": "2021-07-06T16:39:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r664716136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664716136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717061",
      "pull_request_review_id": 700170508,
      "id": 664717061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDcxNzA2MQ==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 53,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524620931,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The sentence is better now. I pushed a commit that improves the punctuation (and layout) of the doc comments here https://github.com/jonasnick/secp256k1/commits/2020-07-docs-jn. Feel free to cherry-pick (and squash) if you agree.",
      "created_at": "2021-07-06T16:41:06Z",
      "updated_at": "2021-07-06T16:41:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r664717061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717221",
      "pull_request_review_id": 700170725,
      "id": 664717221,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDcxNzIyMQ==",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 15,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524634217,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sgtm",
      "created_at": "2021-07-06T16:41:20Z",
      "updated_at": "2021-07-06T16:41:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r664717221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717394",
      "pull_request_review_id": 700170964,
      "id": 664717394,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDcxNzM5NA==",
      "diff_hunk": "@@ -123,6 +124,31 @@ exhaustive_tests_LDFLAGS = -static\n TESTS += exhaustive_tests\n endif\n \n+if USE_EXAMPLES\n+noinst_PROGRAMS += ecdsa_example\n+ecdsa_example_SOURCES = examples/ecdsa.c\n+ecdsa_example_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+ecdsa_example_LDADD = libsecp256k1.la $(SECP_LIBS)",
      "path": "Makefile.am",
      "position": null,
      "original_position": 16,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524643856,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you can remove `ecdsa_example_CPPFLAGS` and `ecdh_example_CPPFLAGS`.\r\n",
      "created_at": "2021-07-06T16:41:35Z",
      "updated_at": "2021-07-06T16:41:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r664717394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717852",
      "pull_request_review_id": 700171472,
      "id": 664717852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDcxNzg1Mg==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res == STATUS_SUCCESS) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res == (ssize_t)size) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 39,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524665023,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's wrong with `if (size > ULONG_MAX) return 0;`? Also, instead of checking `res != 1`, I think it would be better to check that `size <= SSIZE_MAX`.",
      "created_at": "2021-07-06T16:42:08Z",
      "updated_at": "2021-07-06T16:42:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r664717852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664717852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665160655",
      "pull_request_review_id": 700727334,
      "id": 665160655,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTE2MDY1NQ==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res == STATUS_SUCCESS) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res == (ssize_t)size) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 39,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524665023,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was worried about what if `size_t` is smaller than `unsigned long`, the constant will overflow and the condition won't be the one it seems to be.\r\nBut I re-read the integer promotion rules and I think it checks out, if I don't explicitly convert them to a specific type then they'll be converted to the integer with the higher rank, preserving the right values.",
      "created_at": "2021-07-07T08:32:47Z",
      "updated_at": "2021-07-07T08:32:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665160655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665160655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665173787",
      "pull_request_review_id": 700744363,
      "id": 665173787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTE3Mzc4Nw==",
      "diff_hunk": "@@ -123,6 +124,31 @@ exhaustive_tests_LDFLAGS = -static\n TESTS += exhaustive_tests\n endif\n \n+if USE_EXAMPLES\n+noinst_PROGRAMS += ecdsa_example\n+ecdsa_example_SOURCES = examples/ecdsa.c\n+ecdsa_example_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+ecdsa_example_LDADD = libsecp256k1.la $(SECP_LIBS)",
      "path": "Makefile.am",
      "position": null,
      "original_position": 16,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524643856,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't as they're importing `#include \"secp256k1.h\"`, I could remove it if I change it to `#include \"include/secp256k1.h\"` But I think actual users will pass `-Isecp256k1/include`",
      "created_at": "2021-07-07T08:49:39Z",
      "updated_at": "2021-07-07T08:49:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665173787",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665173787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665220101",
      "pull_request_review_id": 700805694,
      "id": 665220101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTIyMDEwMQ==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, unsigned long size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res == STATUS_SUCCESS) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res == (ssize_t)size) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 39,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524665023,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, sounds correct what you say about the promotion rules.",
      "created_at": "2021-07-07T09:50:59Z",
      "updated_at": "2021-07-07T09:51:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665220101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665220101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665231707",
      "pull_request_review_id": 700821137,
      "id": 665231707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTIzMTcwNw==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom",
      "path": "examples/random.h",
      "position": 15,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524605472,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That sounds good. I hate that OSs are so bad that no one can actually tell what it actually the best practice",
      "created_at": "2021-07-07T10:07:16Z",
      "updated_at": "2021-07-07T10:19:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665231707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665231707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665240073",
      "pull_request_review_id": 700832027,
      "id": 665240073,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI0MDA3Mw==",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+static void print_hex(unsigned char* data, size_t size) {\n+    size_t i;\n+    printf(\"0x\");\n+    for (i = 0; i < size; i++) {\n+        printf(\"%02x\", data[i]);\n+    }\n+    printf(\"\\n\");\n+}\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxilary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create` function say:\n+     * \"pointer to a context object, initialized for signing\"\n+     * And the docs above the `secp256k1_schnorrsig_verify` function say:\n+     * \"a secp256k1 context object, initialized for verification\"\n+     * Which is why we create a context for both signing and verification (SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY). */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel leakage\n+     * See `secp256k1_context_randomize` in secp256k1.h for more information about it\n+     * Should never fail */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1 order), the probablity of this happening is negligble",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 53,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524620931,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! cherry-picked",
      "created_at": "2021-07-07T10:19:21Z",
      "updated_at": "2021-07-07T10:19:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665240073",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665240073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665675090",
      "pull_request_review_id": 701406112,
      "id": 665675090,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NTA5MA==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2020 Elichai Turkel\t                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+/*\n+ * In this file only the best practice randomness sources are used\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom",
      "path": "examples/random.h",
      "position": 15,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524605472,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: better formatting\r\n```\r\n * This file is an attempt at collecting best practice methods for obtaining\r\n * randomness with different operating systems. It may be out-of-date. Consult\r\n * the documentation of the operating system before considering to use the\r\n * methods below.\r\n *\r\n * Platform randomness sources:\r\n ```",
      "created_at": "2021-07-07T20:11:24Z",
      "updated_at": "2021-07-07T20:11:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665675090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665675090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665675695",
      "pull_request_review_id": 701406825,
      "id": 665675695,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NTY5NQ==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res != (ssize_t)size || size > SSIZE_MAX) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 45,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "99fbf6816bb5192559b9feb1d73fb3d6ae515a9b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Better to first check SSIZE, otherwise the function can return 1 even though not enough random bytes have been read.",
      "created_at": "2021-07-07T20:12:22Z",
      "updated_at": "2021-07-07T20:12:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665675695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665675695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665676114",
      "pull_request_review_id": 701407361,
      "id": 665676114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NjExNA==",
      "diff_hunk": "@@ -123,6 +124,31 @@ exhaustive_tests_LDFLAGS = -static\n TESTS += exhaustive_tests\n endif\n \n+if USE_EXAMPLES\n+noinst_PROGRAMS += ecdsa_example\n+ecdsa_example_SOURCES = examples/ecdsa.c\n+ecdsa_example_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+ecdsa_example_LDADD = libsecp256k1.la $(SECP_LIBS)",
      "path": "Makefile.am",
      "position": null,
      "original_position": 16,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0be44b413257b19054494572c7fd91ecb00c2a48",
      "in_reply_to_id": 524643856,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hm okay",
      "created_at": "2021-07-07T20:13:06Z",
      "updated_at": "2021-07-07T20:13:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665676114",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665676114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665974118",
      "pull_request_review_id": 701772213,
      "id": 665974118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3NDExOA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res != (ssize_t)size || size > SSIZE_MAX) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 45,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "99fbf6816bb5192559b9feb1d73fb3d6ae515a9b",
      "in_reply_to_id": 665675695,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't mind checking it first, but how can it return 1 even though not enough random bytes have been read?\r\nif `size` is bigger than `SSIZE_MAX` or `size` isn't the same as `res` this will return 0.",
      "created_at": "2021-07-08T08:17:50Z",
      "updated_at": "2021-07-08T08:17:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r665974118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/665974118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/666131626",
      "pull_request_review_id": 701980006,
      "id": 666131626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjEzMTYyNg==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res != (ssize_t)size || size > SSIZE_MAX) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 45,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "99fbf6816bb5192559b9feb1d73fb3d6ae515a9b",
      "in_reply_to_id": 665675695,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "right, sorry, nevermind",
      "created_at": "2021-07-08T12:07:43Z",
      "updated_at": "2021-07-08T12:07:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r666131626",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/666131626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780249259",
      "pull_request_review_id": 846588669,
      "id": 780249259,
      "node_id": "PRRC_kwDOAP4Jqs4ugair",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res != (ssize_t)size || size > SSIZE_MAX) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 45,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "99fbf6816bb5192559b9feb1d73fb3d6ae515a9b",
      "in_reply_to_id": 665675695,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So to access `SSIZE_MAX` I'll need to define some weird POSIX macros, I'll instead use `if (res < 0 || (size_t)res != size )` which should work assuming `ssize_t = signed size_t` which honestly I'm not 100% sure I can assume. sigh.\r\nI could also cast to `unsigned long` as both `man size_t` and `man ssize_t` say that they're no greater than the width of `long`",
      "created_at": "2022-01-07T13:01:45Z",
      "updated_at": "2022-01-07T13:01:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780249259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780249259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780672469",
      "pull_request_review_id": 847159260,
      "id": 780672469,
      "node_id": "PRRC_kwDOAP4Jqs4uiB3V",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 41,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would not put code with side-effects in `assert()`, as those get removed when compiled with `-DNDEBUG`.",
      "created_at": "2022-01-08T14:12:59Z",
      "updated_at": "2022-01-08T16:57:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780672469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780672469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780677315",
      "pull_request_review_id": 847159260,
      "id": 780677315,
      "node_id": "PRRC_kwDOAP4Jqs4uiDDD",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't it be better to use `#include <...>`? As people looking at examples would likely be linking from outside the project.",
      "created_at": "2022-01-08T15:14:08Z",
      "updated_at": "2022-01-08T16:56:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780677315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780677315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685404",
      "pull_request_review_id": 847159260,
      "id": 780685404,
      "node_id": "PRRC_kwDOAP4Jqs4uiFBc",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 27,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0e5437fb0deb67313b2911898982da8cafccf137",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's remarkably specific, and may go outdated if the header files are restructured a bit.\r\n\r\nWhat about \"The specification in secp256k1_extrakeys.h states that secp256k1_schnorrsig_verify needs ...\"?",
      "created_at": "2022-01-08T16:52:11Z",
      "updated_at": "2022-01-08T16:56:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780685404",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685468",
      "pull_request_review_id": 847159260,
      "id": 780685468,
      "node_id": "PRRC_kwDOAP4Jqs4uiFCc",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair with a valid context, it should only fail if\n+         * the secret key is zero or out of range. */\n+        if (secp256k1_keypair_create(ctx, &keypair, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Extract the X-only public key from the keypair. We pass NULL for\n+     * `pk_parity` as we don't care about the parity of the key, only advanced\n+     * users might care about the parity. This should never fail with a valid\n+     * context and public key. */\n+    assert(secp256k1_keypair_xonly_pub(ctx, &pubkey, NULL, &keypair));",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 64,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0e5437fb0deb67313b2911898982da8cafccf137",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "assert with side effects",
      "created_at": "2022-01-08T16:52:44Z",
      "updated_at": "2022-01-08T16:56:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780685468",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685472",
      "pull_request_review_id": 847159260,
      "id": 780685472,
      "node_id": "PRRC_kwDOAP4Jqs4uiFCg",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair with a valid context, it should only fail if\n+         * the secret key is zero or out of range. */\n+        if (secp256k1_keypair_create(ctx, &keypair, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Extract the X-only public key from the keypair. We pass NULL for\n+     * `pk_parity` as we don't care about the parity of the key, only advanced\n+     * users might care about the parity. This should never fail with a valid\n+     * context and public key. */\n+    assert(secp256k1_keypair_xonly_pub(ctx, &pubkey, NULL, &keypair));\n+\n+    /* Serialize the public key. Should always return 1 for a valid public key. */\n+    assert(secp256k1_xonly_pubkey_serialize(ctx, serialized_pubkey, &pubkey));",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 67,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0e5437fb0deb67313b2911898982da8cafccf137",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "assert with side effects",
      "created_at": "2022-01-08T16:52:50Z",
      "updated_at": "2022-01-08T16:56:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780685472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685496",
      "pull_request_review_id": 847159260,
      "id": 780685496,
      "node_id": "PRRC_kwDOAP4Jqs4uiFC4",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair with a valid context, it should only fail if\n+         * the secret key is zero or out of range. */\n+        if (secp256k1_keypair_create(ctx, &keypair, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Extract the X-only public key from the keypair. We pass NULL for\n+     * `pk_parity` as we don't care about the parity of the key, only advanced\n+     * users might care about the parity. This should never fail with a valid\n+     * context and public key. */\n+    assert(secp256k1_keypair_xonly_pub(ctx, &pubkey, NULL, &keypair));\n+\n+    /* Serialize the public key. Should always return 1 for a valid public key. */\n+    assert(secp256k1_xonly_pubkey_serialize(ctx, serialized_pubkey, &pubkey));\n+\n+    /*** Signing ***/\n+\n+    /* Generate 32 bytes of randomness to use with BIP-340 schnorr signing. */\n+    if (!fill_random(auxiliary_rand, sizeof(auxiliary_rand))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+\n+    /* Generate a Schnorr signature `noncefp` and `ndata` allows you to pass a\n+    * custom nonce function, passing `NULL` will use the BIP-340 safe default.\n+    * BIP-340 recommends passing 32 bytes of randomness to the nonce function to\n+    * improve security against side-channel attacks. Signing with a valid\n+    * context, verified keypair and the default nonce function should never\n+    * fail. */\n+    assert(secp256k1_schnorrsig_sign(ctx, signature, msg_hash, &keypair, auxiliary_rand));",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 83,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0e5437fb0deb67313b2911898982da8cafccf137",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "assert with side effects",
      "created_at": "2022-01-08T16:53:15Z",
      "updated_at": "2022-01-08T16:56:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780685496",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685697",
      "pull_request_review_id": 847159260,
      "id": 780685697,
      "node_id": "PRRC_kwDOAP4Jqs4uiFGB",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair with a valid context, it should only fail if\n+         * the secret key is zero or out of range. */\n+        if (secp256k1_keypair_create(ctx, &keypair, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Extract the X-only public key from the keypair. We pass NULL for\n+     * `pk_parity` as we don't care about the parity of the key, only advanced\n+     * users might care about the parity. This should never fail with a valid\n+     * context and public key. */\n+    assert(secp256k1_keypair_xonly_pub(ctx, &pubkey, NULL, &keypair));\n+\n+    /* Serialize the public key. Should always return 1 for a valid public key. */\n+    assert(secp256k1_xonly_pubkey_serialize(ctx, serialized_pubkey, &pubkey));\n+\n+    /*** Signing ***/\n+\n+    /* Generate 32 bytes of randomness to use with BIP-340 schnorr signing. */\n+    if (!fill_random(auxiliary_rand, sizeof(auxiliary_rand))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+\n+    /* Generate a Schnorr signature `noncefp` and `ndata` allows you to pass a\n+    * custom nonce function, passing `NULL` will use the BIP-340 safe default.\n+    * BIP-340 recommends passing 32 bytes of randomness to the nonce function to\n+    * improve security against side-channel attacks. Signing with a valid\n+    * context, verified keypair and the default nonce function should never\n+    * fail. */\n+    assert(secp256k1_schnorrsig_sign(ctx, signature, msg_hash, &keypair, auxiliary_rand));\n+\n+    /*** Verification ***/\n+\n+    /* Deserialize the public key. This will return 0 if the public key can't\n+     * be parsed correctly */\n+    if (!secp256k1_xonly_pubkey_parse(ctx, &pubkey, serialized_pubkey)) {\n+        printf(\"Failed parsing the public key\\n\");\n+        return 1;\n+    }\n+\n+    /* Verify a signature. This will return 1 if it's valid and 0 if it's not. */\n+    is_signature_valid = secp256k1_schnorrsig_verify(ctx, signature, msg_hash, 32, &pubkey);\n+\n+\n+    printf(\"Is the signature valid? %s\\n\", is_signature_valid ? \"true\" : \"false\");\n+    printf(\"Secret Key: \");\n+    print_hex(seckey, sizeof(seckey));\n+    printf(\"Public Key: \");\n+    print_hex(serialized_pubkey, sizeof(serialized_pubkey));\n+    printf(\"Signature: \");\n+    print_hex(signature, sizeof(signature));\n+\n+    /* This will clear everything from the context and free the memory */\n+    secp256k1_context_destroy(ctx);\n+\n+    /* It's best practice to try to remove secrets from memory after using them.\n+     * This is done because some bugs can allow an attacker leak memory, for",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 110,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0e5437fb0deb67313b2911898982da8cafccf137",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Grammar seems off here.\r\n\r\nAlso: an attacker accessing memory through an exploit isn't the only reason; another one is the risk that the OS swaps out the application to disk, where it may end up on permanent storage (which might be less well-protected from attackers). Secrets in general should not be kept in memory longer than necessary.\r\n\r\nHere and elsewhere.",
      "created_at": "2022-01-08T16:55:26Z",
      "updated_at": "2022-01-08T16:56:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780685697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780685697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780703274",
      "pull_request_review_id": 847190605,
      "id": 780703274,
      "node_id": "PRRC_kwDOAP4Jqs4uiJYq",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res != (ssize_t)size || size > SSIZE_MAX) {",
      "path": "examples/random.h",
      "position": null,
      "original_position": 45,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "99fbf6816bb5192559b9feb1d73fb3d6ae515a9b",
      "in_reply_to_id": 665675695,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks good to me.",
      "created_at": "2022-01-08T19:53:11Z",
      "updated_at": "2022-01-08T19:53:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780703274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780703274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780704408",
      "pull_request_review_id": 847191771,
      "id": 780704408,
      "node_id": "PRRC_kwDOAP4Jqs4uiJqY",
      "diff_hunk": "@@ -68,6 +70,10 @@ case $host_os in\n        fi\n      fi\n    ;;\n+   cygwin*|mingw*)\n+",
      "path": "configure.ac",
      "position": null,
      "original_position": 14,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "0e5437fb0deb67313b2911898982da8cafccf137",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: unnecessary newline?",
      "created_at": "2022-01-08T20:07:08Z",
      "updated_at": "2022-01-08T20:07:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780704408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780704408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780754058",
      "pull_request_review_id": 847231932,
      "id": 780754058,
      "node_id": "PRRC_kwDOAP4Jqs4uiVyK",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 41,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": 780672469,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh you're 100% right",
      "created_at": "2022-01-09T09:13:58Z",
      "updated_at": "2022-01-09T09:13:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780754058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780754058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780755403",
      "pull_request_review_id": 847233180,
      "id": 780755403,
      "node_id": "PRRC_kwDOAP4Jqs4uiWHL",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": 780677315,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doesn't that mean that they've installed the library on the user's system? \r\nIf I understood this correctly then if an app ships a vendored libsecp (like bitcoin core) it technically shouldn't be included via the system path",
      "created_at": "2022-01-09T09:25:49Z",
      "updated_at": "2022-01-09T09:25:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780755403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780755403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780760636",
      "pull_request_review_id": 847238125,
      "id": 780760636,
      "node_id": "PRRC_kwDOAP4Jqs4uiXY8",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 41,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": 780672469,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you think users should even assert the return value? if so then only in debug or also in release?",
      "created_at": "2022-01-09T10:12:13Z",
      "updated_at": "2022-01-09T10:12:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780760636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780760636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780788352",
      "pull_request_review_id": 847265178,
      "id": 780788352,
      "node_id": "PRRC_kwDOAP4Jqs4uieKA",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 12,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": 780677315,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you set -I arguments to the compiler correctly, there is no problem with using <...>.\r\n\r\nThe only difference is that \"...\" also looks in the current path, and as that is not where one would expect the included headers, it's pointless and I would say confusing.\r\n\r\nFWIW Bitcoin Core does *everything* using <...> includes, also internal headers.",
      "created_at": "2022-01-09T14:25:32Z",
      "updated_at": "2022-01-09T18:05:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780788352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780788352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780816181",
      "pull_request_review_id": 847290337,
      "id": 780816181,
      "node_id": "PRRC_kwDOAP4Jqs4uik81",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 41,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": 780672469,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think for `secp256k1_context_randomize` it's reasonable to change the API documentation that it always returns 1. I don't see under what conditions you'd ever want to return failure here. In that case, it seems unnecessary to check.\r\n\r\nThere are lots of operations that only returns 0 if you pass in invalid arguments (e.g. serializing a public key to an area that's too small). For those I think it can be recommended practice to check, but I wouldn't consider it incorrect usage not to check if you know your code will always provide enough space.",
      "created_at": "2022-01-09T18:28:30Z",
      "updated_at": "2022-01-09T18:28:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r780816181",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/780816181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/786954591",
      "pull_request_review_id": 855699495,
      "id": 786954591,
      "node_id": "PRRC_kwDOAP4Jqs4u5_lf",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+\n+#include \"random.h\"\n+\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    unsigned char randomize[32];\n+    int return_val;\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+\n+    /* The specification in secp256k1.h states that `secp256k1_ec_pubkey_create`\n+     * needs a context object initialized for signing, which is why we create\n+     * a context with the SECP256K1_CONTEXT_SIGN flag.\n+     * (The docs for `secp256k1_ecdh` don't require any special context, just\n+     * some initialized context) */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    return_val = secp256k1_context_randomize(ctx, randomize);\n+    assert(return_val);\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Public key creation using a valid context with a verified secret key should never fail */\n+    return_val = secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1);\n+    assert(return_val);\n+    return_val = secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2);\n+    assert(return_val);\n+\n+    /* Serialize pubkey1 in a compressed form (33 bytes), should always return 1 */\n+    len = sizeof(compressed_pubkey1);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+    /* Should be the same size as the size of the output, because we passed a 33 bytes array. */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize pubkey2 in a compressed form (33 bytes) */\n+    len = sizeof(compressed_pubkey2);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+    /* Should be the same size as the size of the output, because we passed a 33 bytes array. */\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /*** Creating the shared secret ***/\n+\n+    /* Perform ECDH with seckey1 and pubkey2. Should never fail with a verified\n+     * seckey and valid pubkey */\n+    return_val = secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL);\n+    assert(return_val);\n+\n+    /* Perform ECDH with seckey2 and pubkey1. Should never fail with a verified\n+     * seckey and valid pubkey */\n+    return_val = secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL);\n+    assert(return_val);\n+\n+    /* Both parties should end up with the same shared secret */\n+    return_val = memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1));\n+    assert(return_val == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+    /* This will clear everything from the context and free the memory */\n+    secp256k1_context_destroy(ctx);\n+\n+    /* It's best practice to try to clear secrets from memory after using them.\n+     * This is done because some bugs can allow an attacker to leak memory, for\n+     * example through \"out of bounds\" array access (see Heartbleed), Or the OS\n+     * swapping them to disk. Hence, we overwrite the secret key buffer with zeros.\n+     *\n+     * TODO: Prevent these writes from being optimized out, as any good compiler\n+     * will remove any writes that aren't used. */",
      "path": "examples/ecdh.c",
      "position": 120,
      "original_position": 117,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "in_reply_to_id": null,
      "user": {
        "login": "kristapsk",
        "id": 4500994,
        "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kristapsk",
        "html_url": "https://github.com/kristapsk",
        "followers_url": "https://api.github.com/users/kristapsk/followers",
        "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
        "organizations_url": "https://api.github.com/users/kristapsk/orgs",
        "repos_url": "https://api.github.com/users/kristapsk/repos",
        "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kristapsk/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Check for C11 (`#if (__STDC_VERSION__ >=  201112L)`) could be added and then `memset_s()` used instead.",
      "created_at": "2022-01-18T16:44:16Z",
      "updated_at": "2022-01-18T16:49:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r786954591",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/786954591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/787007546",
      "pull_request_review_id": 855773700,
      "id": 787007546,
      "node_id": "PRRC_kwDOAP4Jqs4u6Mg6",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+\n+#include \"random.h\"\n+\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    unsigned char randomize[32];\n+    int return_val;\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+\n+    /* The specification in secp256k1.h states that `secp256k1_ec_pubkey_create`\n+     * needs a context object initialized for signing, which is why we create\n+     * a context with the SECP256K1_CONTEXT_SIGN flag.\n+     * (The docs for `secp256k1_ecdh` don't require any special context, just\n+     * some initialized context) */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    return_val = secp256k1_context_randomize(ctx, randomize);\n+    assert(return_val);\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey1, sizeof(seckey1)) || !fill_random(seckey2, sizeof(seckey2))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey1) && secp256k1_ec_seckey_verify(ctx, seckey2)) {\n+            break;\n+        }\n+    }\n+\n+    /* Public key creation using a valid context with a verified secret key should never fail */\n+    return_val = secp256k1_ec_pubkey_create(ctx, &pubkey1, seckey1);\n+    assert(return_val);\n+    return_val = secp256k1_ec_pubkey_create(ctx, &pubkey2, seckey2);\n+    assert(return_val);\n+\n+    /* Serialize pubkey1 in a compressed form (33 bytes), should always return 1 */\n+    len = sizeof(compressed_pubkey1);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey1, &len, &pubkey1, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+    /* Should be the same size as the size of the output, because we passed a 33 bytes array. */\n+    assert(len == sizeof(compressed_pubkey1));\n+\n+    /* Serialize pubkey2 in a compressed form (33 bytes) */\n+    len = sizeof(compressed_pubkey2);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey2, &len, &pubkey2, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+    /* Should be the same size as the size of the output, because we passed a 33 bytes array. */\n+    assert(len == sizeof(compressed_pubkey2));\n+\n+    /*** Creating the shared secret ***/\n+\n+    /* Perform ECDH with seckey1 and pubkey2. Should never fail with a verified\n+     * seckey and valid pubkey */\n+    return_val = secp256k1_ecdh(ctx, shared_secret1, &pubkey2, seckey1, NULL, NULL);\n+    assert(return_val);\n+\n+    /* Perform ECDH with seckey2 and pubkey1. Should never fail with a verified\n+     * seckey and valid pubkey */\n+    return_val = secp256k1_ecdh(ctx, shared_secret2, &pubkey1, seckey2, NULL, NULL);\n+    assert(return_val);\n+\n+    /* Both parties should end up with the same shared secret */\n+    return_val = memcmp(shared_secret1, shared_secret2, sizeof(shared_secret1));\n+    assert(return_val == 0);\n+\n+    printf(\"Secret Key1: \");\n+    print_hex(seckey1, sizeof(seckey1));\n+    printf(\"Compressed Pubkey1: \");\n+    print_hex(compressed_pubkey1, sizeof(compressed_pubkey1));\n+    printf(\"\\nSecret Key2: \");\n+    print_hex(seckey2, sizeof(seckey2));\n+    printf(\"Compressed Pubkey2: \");\n+    print_hex(compressed_pubkey2, sizeof(compressed_pubkey2));\n+    printf(\"\\nShared Secret: \");\n+    print_hex(shared_secret1, sizeof(shared_secret1));\n+\n+    /* This will clear everything from the context and free the memory */\n+    secp256k1_context_destroy(ctx);\n+\n+    /* It's best practice to try to clear secrets from memory after using them.\n+     * This is done because some bugs can allow an attacker to leak memory, for\n+     * example through \"out of bounds\" array access (see Heartbleed), Or the OS\n+     * swapping them to disk. Hence, we overwrite the secret key buffer with zeros.\n+     *\n+     * TODO: Prevent these writes from being optimized out, as any good compiler\n+     * will remove any writes that aren't used. */",
      "path": "examples/ecdh.c",
      "position": 120,
      "original_position": 117,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "in_reply_to_id": 786954591,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`memset_s()` is optional in C11, it's in Annex K. You need more than `_STDC_VERSION__ >= 201112L` to check for its presence, see for example https://en.cppreference.com/w/c/string/byte/memset. Also, almost no compiler supports Annex K, so I doubt it's useful in practice, see for example https://stackoverflow.com/a/50724865.",
      "created_at": "2022-01-18T17:46:00Z",
      "updated_at": "2022-01-18T17:46:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r787007546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/787007546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/795947605",
      "pull_request_review_id": 868254740,
      "id": 795947605,
      "node_id": "PRRC_kwDOAP4Jqs4vcTJV",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function\n+     * say: \"pointer to a context object, initialized for signing\" And the docs\n+     * above the `secp256k1_ecdsa_verify` function say: \"a secp256k1 context\n+     * object, initialized for verification\" which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);",
      "path": "examples/ecdsa.c",
      "position": 46,
      "original_position": 32,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Could assert that the context was created successfully (here and in the two other examples)? I.e. `assert(ctx != NULL);`\r\nIIUC returning NULL can only happen in the unlikely case that allocating dynamic memory fails, but it can't hurt. We also do that check in Bitcoin Core: https://github.com/bitcoin/bitcoin/blob/8f137e69caeb2a2ffe1aa930bd6fbc49cee4087c/src/key.cpp#L394-L395",
      "created_at": "2022-01-31T18:24:54Z",
      "updated_at": "2022-01-31T18:26:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r795947605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/795947605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796048118",
      "pull_request_review_id": 868395503,
      "id": 796048118,
      "node_id": "PRRC_kwDOAP4Jqs4vcrr2",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 17,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rather than initializing the hash to all zero's and repeatedly warning the user not to do that, how about something like this?\r\n\r\n```c\r\nunsigned char msg_hash[32] = \"This must be a hash of the msg.\";\r\n```",
      "created_at": "2022-01-31T20:42:42Z",
      "updated_at": "2022-01-31T21:06:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796048118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796048118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796050363",
      "pull_request_review_id": 868395503,
      "id": 796050363,
      "node_id": "PRRC_kwDOAP4Jqs4vcsO7",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function\n+     * say: \"pointer to a context object, initialized for signing\" And the docs\n+     * above the `secp256k1_ecdsa_verify` function say: \"a secp256k1 context\n+     * object, initialized for verification\" which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Public key creation using a valid context with a verified secret key should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey, seckey));\n+\n+    /* Serialize the pubkey in a compressed form(33 bytes). Should always return 1. */\n+    len = sizeof(compressed_pubkey);\n+    assert(secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey, &len, &pubkey, SECP256K1_EC_COMPRESSED));\n+    /* Should be the same size as the size of the output, because we passed a 33 bytes array. */",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 63,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    /* Should be the same size as the size of the output, because we passed a 33 byte array. */\r\n```",
      "created_at": "2022-01-31T20:45:55Z",
      "updated_at": "2022-01-31T21:06:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796050363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796050363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796051465",
      "pull_request_review_id": 868395503,
      "id": 796051465,
      "node_id": "PRRC_kwDOAP4Jqs4vcsgJ",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function\n+     * say: \"pointer to a context object, initialized for signing\" And the docs\n+     * above the `secp256k1_ecdsa_verify` function say: \"a secp256k1 context\n+     * object, initialized for verification\" which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Public key creation using a valid context with a verified secret key should never fail */\n+    assert(secp256k1_ec_pubkey_create(ctx, &pubkey, seckey));\n+\n+    /* Serialize the pubkey in a compressed form(33 bytes). Should always return 1. */\n+    len = sizeof(compressed_pubkey);\n+    assert(secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey, &len, &pubkey, SECP256K1_EC_COMPRESSED));\n+    /* Should be the same size as the size of the output, because we passed a 33 bytes array. */\n+    assert(len == sizeof(compressed_pubkey));\n+\n+    /*** Signing ***/\n+\n+    /* Generate an ECDSA signature, note that even though here `msg_hash` is set\n+    * to zeros, it MUST contain a hash, otherwise ECDSA is easily broken.\n+    * `noncefp` and `ndata` allows you to pass a custom nonce function, passing\n+    * `NULL` will use the RFC-6979 safe default. Signing with a valid context,\n+    * verified secret key and the default nonce function should never fail. */\n+    assert(secp256k1_ecdsa_sign(ctx, &sig, msg_hash, seckey, NULL, NULL));\n+\n+    /* Serialize the signature in a compact form. Should always return 1\n+     * according to the documentation in secp256k1.h. */\n+    assert(secp256k1_ecdsa_signature_serialize_compact(ctx, serialized_signature, &sig));\n+\n+\n+    /*** Verification ***/\n+\n+    /* Deserialize the signature. This will return 0 if the signature can't be parsed correctly. */\n+    if (!secp256k1_ecdsa_signature_parse_compact(ctx, &sig, serialized_signature)) {\n+        printf(\"Failed parsing the signature\\n\");\n+        return 1;\n+    }\n+\n+    /*** Verification ***/",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 88,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this second `/*** Verification ***/` label be removed?",
      "created_at": "2022-01-31T20:47:27Z",
      "updated_at": "2022-01-31T21:06:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796051465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796051465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796052418",
      "pull_request_review_id": 868395503,
      "id": 796052418,
      "node_id": "PRRC_kwDOAP4Jqs4vcsvC",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res < 0 || (size_t)res != size ) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__APPLE__) || defined(__OpenBSD__)\n+    /* If `getentropy(2)` is not available you should fallback to either\n+     * `SecRandomCopyBytes` or /dev/urandom */\n+    int res = getentropy(data, size);\n+    if (res == 0) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#endif\n+    return 0;\n+}\n+\n+static void print_hex(unsigned char* data, size_t size) {",
      "path": "examples/random.h",
      "position": 66,
      "original_position": 63,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this go in another file like `util.h`?",
      "created_at": "2022-01-31T20:49:02Z",
      "updated_at": "2022-01-31T21:06:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796052418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796052418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796056368",
      "pull_request_review_id": 868395503,
      "id": 796056368,
      "node_id": "PRRC_kwDOAP4Jqs4vctsw",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+#include \"secp256k1_extrakeys.h\"\n+#include \"secp256k1_schnorrsig.h\"\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The docs in secp256k1_extrakeys.h above the `secp256k1_keypair_create`\n+     * function say: \"pointer to a context object, initialized for signing\" And\n+     * the docs above the `secp256k1_schnorrsig_verify` function say: \"a\n+     * secp256k1 context object, initialized for verification\" which is why we\n+     * create a context for both signing and verification with the\n+     * SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    assert(secp256k1_context_randomize(ctx, randomize));\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        /* Try to create a keypair with a valid context, it should only fail if\n+         * the secret key is zero or out of range. */\n+        if (secp256k1_keypair_create(ctx, &keypair, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Extract the X-only public key from the keypair. We pass NULL for\n+     * `pk_parity` as we don't care about the parity of the key, only advanced",
      "path": "examples/schnorr.c",
      "position": null,
      "original_position": 61,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "60c3f7bc72d402e7f1287b602e35d1e04a3406d9",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of \"only advanced users might care about the parity\", how about something like this?\r\n\r\n\"We pass NULL for `pk_parity` as the parity isn't needed for signing or verification. `secp256k1_keypair_xonly_pub` supports returning the parity for other use cases such as tests or verifying Taproot tweaks.\"",
      "created_at": "2022-01-31T20:54:48Z",
      "updated_at": "2022-01-31T21:06:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796056368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796056368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796060678",
      "pull_request_review_id": 868395503,
      "id": 796060678,
      "node_id": "PRRC_kwDOAP4Jqs4vcuwG",
      "diff_hunk": "@@ -69,6 +69,13 @@ libsecp256k1 is built using autotools:\n     $ make check  # run the test suite\n     $ sudo make install  # optional\n \n+Usage Examples\n+-----------\n+  Usage Examples can be found in the [examples](examples) directory, to compile them you need configure with `--enable-examples`.",
      "path": "README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "626a56d0a81dace330792c5bef1123f8998ce987",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n  Usage Examples can be found in the [examples](examples) directory. To compile them you need to configure with `--enable-examples`.\r\n  For experimental modules, you will also need `--enable-experimental` as well as a flag for each individual module, e.g. `--enable-module-ecdh`.\r\n```",
      "created_at": "2022-01-31T21:01:08Z",
      "updated_at": "2022-01-31T21:06:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796060678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796060678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796503714",
      "pull_request_review_id": 868997975,
      "id": 796503714,
      "node_id": "PRRC_kwDOAP4Jqs4vea6i",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 17,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": 796048118,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can't this make some users think that signing directly on some meaningful string with length 32 is secure?\r\ntoo bad we don't have access to sha2 here.",
      "created_at": "2022-02-01T11:30:34Z",
      "updated_at": "2022-02-01T11:30:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796503714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796503714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796770541",
      "pull_request_review_id": 869390163,
      "id": 796770541,
      "node_id": "PRRC_kwDOAP4Jqs4vfcDt",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 17,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": 796048118,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! Maybe something like this instead?\r\n\r\n```suggestion\r\n    /* Instead of signing the message directly, we must sign a 32-byte hash.\r\n     * Here the message is \"Hello, world!\" and the hash function was SHA-256.\r\n     * An actual implementation should just call SHA-256, but this example\r\n     * hardcodes the output to avoid depending on an additional library. */\r\n    unsigned char msg_hash[32] = {\r\n        0x31, 0x5F, 0x5B, 0xDB, 0x76, 0xD0, 0x78, 0xC4,\r\n        0x3B, 0x8A, 0xC0, 0x06, 0x4E, 0x4A, 0x01, 0x64,\r\n        0x61, 0x2B, 0x1F, 0xCE, 0x77, 0xC8, 0x69, 0x34,\r\n        0x5B, 0xFC, 0x94, 0xC7, 0x58, 0x94, 0xED, 0xD3,\r\n    };\r\n```",
      "created_at": "2022-02-01T16:24:13Z",
      "updated_at": "2022-02-01T16:25:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r796770541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/796770541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797610845",
      "pull_request_review_id": 870546076,
      "id": 797610845,
      "node_id": "PRRC_kwDOAP4Jqs4vipNd",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);\n+    if (res < 0 || (size_t)res != size ) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__APPLE__) || defined(__OpenBSD__)\n+    /* If `getentropy(2)` is not available you should fallback to either\n+     * `SecRandomCopyBytes` or /dev/urandom */\n+    int res = getentropy(data, size);\n+    if (res == 0) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+#endif\n+    return 0;\n+}\n+\n+static void print_hex(unsigned char* data, size_t size) {",
      "path": "examples/random.h",
      "position": 66,
      "original_position": 63,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": 796052418,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that this doesn't really fit in this file and should go in something like util.h. See also https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r524634217.",
      "created_at": "2022-02-02T13:33:54Z",
      "updated_at": "2022-02-02T13:33:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r797610845",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797610845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797676581",
      "pull_request_review_id": 870639958,
      "id": 797676581,
      "node_id": "PRRC_kwDOAP4Jqs4vi5Ql",
      "diff_hunk": "@@ -0,0 +1,122 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_extrakeys.h>\n+#include <secp256k1_schnorrsig.h>\n+\n+#include \"random.h\"\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This should be a hash of the message. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char auxiliary_rand[32];\n+    unsigned char serialized_pubkey[32];\n+    unsigned char signature[64];\n+    int is_signature_valid;\n+    int return_val;\n+    secp256k1_xonly_pubkey pubkey;\n+    secp256k1_keypair keypair;\n+    /* The specification in secp256k1_extrakeys.h states that `secp256k1_keypair_create`\n+     * needs a context object initialized for signing. And in secp256k1_schnorrsig.h\n+     * they state that `secp256k1_schnorrsig_verify` needs a context initialized for\n+     * verification, which is why we create a context for both signing and verification\n+     * with the SECP256K1_CONTEXT_SIGN and SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    return_val = secp256k1_context_randomize(ctx, randomize);\n+    assert(return_val);\n+    /*** Key Generation ***/",
      "path": "examples/schnorr.c",
      "position": 56,
      "original_position": 43,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "in_reply_to_id": null,
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "minor nit: leave an empty line before this heading to match `/*** Signing ***/` and `/*** Verification ***/`. ",
      "created_at": "2022-02-02T14:42:49Z",
      "updated_at": "2022-02-02T15:03:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r797676581",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797676581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797678564",
      "pull_request_review_id": 870643295,
      "id": 797678564,
      "node_id": "PRRC_kwDOAP4Jqs4vi5vk",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function\n+     * say: \"pointer to a context object, initialized for signing\" And the docs\n+     * above the `secp256k1_ecdsa_verify` function say: \"a secp256k1 context\n+     * object, initialized for verification\" which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);",
      "path": "examples/ecdsa.c",
      "position": 46,
      "original_position": 32,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": 795947605,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> returning NULL can only happen in the unlikely case that allocating dynamic memory fails\r\n\r\nIf that was the case then I would agree that the examples should do the check. However, `context_create` calls `checked_malloc` which will call the \"error callback\" if the result of malloc is NULL. The default behavior of the error callback is crashing. It could theoretically be overriden by the user to not crash (`context_set_error_callback`) but that would be inadvisable given that the API docs state that after the callback the originally called API function can do anything, in particular its return values are undefined. That's why the API doc for `secp256k1_context_create` says that it returns a \"context object\" and not a \"context object or NULL\".",
      "created_at": "2022-02-02T14:44:47Z",
      "updated_at": "2022-02-02T14:45:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r797678564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797678564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797698609",
      "pull_request_review_id": 870639958,
      "id": 797698609,
      "node_id": "PRRC_kwDOAP4Jqs4vi-ox",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+\n+#include \"random.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 18,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "in_reply_to_id": null,
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: It isn't immediately clear to me (without spending time thinking about it or looking it up) why ECDSA is easily broken if we sign the message rather than the hash of the message. Adding a keyword or simple and short explanation could be helpful. \r\n",
      "created_at": "2022-02-02T15:01:50Z",
      "updated_at": "2022-02-02T15:03:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r797698609",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797698609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797707664",
      "pull_request_review_id": 870684626,
      "id": 797707664,
      "node_id": "PRRC_kwDOAP4Jqs4vjA2Q",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+\n+#include \"random.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 18,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "in_reply_to_id": 797698609,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It certainly isn't obvious. Perhaps we can include this link https://bitcoin.stackexchange.com/questions/81115/if-someone-wanted-to-pretend-to-be-satoshi-by-posting-a-fake-signature-to-defrau/81116#81116",
      "created_at": "2022-02-02T15:10:11Z",
      "updated_at": "2022-02-02T15:10:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r797707664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797707664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797736004",
      "pull_request_review_id": 870725045,
      "id": 797736004,
      "node_id": "PRRC_kwDOAP4Jqs4vjHxE",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"random.h\"\n+#include \"secp256k1.h\"\n+\n+\n+\n+int main(void) {\n+    unsigned char msg_hash[32] = {0}; /* This must be a hash of the message. otherwise ECDSA is easily broken. */\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The docs in secp256k1.h above the `secp256k1_ec_pubkey_create` function\n+     * say: \"pointer to a context object, initialized for signing\" And the docs\n+     * above the `secp256k1_ecdsa_verify` function say: \"a secp256k1 context\n+     * object, initialized for verification\" which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);",
      "path": "examples/ecdsa.c",
      "position": 46,
      "original_position": 32,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "1e5f3b1a080361dbc1eabbb4c2142823b9cce2b5",
      "in_reply_to_id": 795947605,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting, thanks for elaborating! Wasn't aware of `checked_malloc` and error callbacks being used. Considering that, I agree that the assert is not needed.",
      "created_at": "2022-02-02T15:37:10Z",
      "updated_at": "2022-02-02T15:37:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r797736004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797736004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797769142",
      "pull_request_review_id": 870771228,
      "id": 797769142,
      "node_id": "PRRC_kwDOAP4Jqs4vjP22",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ *\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <windows.h>\n+#include <ntstatus.h>\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);",
      "path": "examples/random.h",
      "position": 47,
      "original_position": 47,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "in_reply_to_id": null,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there any specific reason why `getrandom()` is used for Linux whereas `getentropy()` is used for macOS? availability issues?\r\n\r\nThe GNU C library manual says this:\r\n>Most applications should use getentropy. The getrandom function is intended for low-level applications which need additional control over blocking behavior.\r\n\r\nhttps://www.gnu.org/software/libc/manual/html_node/Unpredictable-Bytes.html",
      "created_at": "2022-02-02T16:05:07Z",
      "updated_at": "2022-02-02T16:18:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r797769142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/797769142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/798743746",
      "pull_request_review_id": 872094933,
      "id": 798743746,
      "node_id": "PRRC_kwDOAP4Jqs4vm9zC",
      "diff_hunk": "@@ -69,6 +69,13 @@ libsecp256k1 is built using autotools:\n     $ make check  # run the test suite\n     $ sudo make install  # optional\n \n+Usage Examples\n+-----------\n+  Usage Examples can be found in the [examples](examples) directory, to compile them you need configure with `--enable-examples`.",
      "path": "README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "626a56d0a81dace330792c5bef1123f8998ce987",
      "in_reply_to_id": 796060678,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "and s/Examples/examples",
      "created_at": "2022-02-03T16:27:24Z",
      "updated_at": "2022-02-03T16:27:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r798743746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/798743746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/811821054",
      "pull_request_review_id": 889622544,
      "id": 811821054,
      "node_id": "PRRC_kwDOAP4Jqs4wY2f-",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+/*\n+ * This file is an attempt at collecting best practice methods for obtaining randomness with different operating systems.\n+ * It may be out-of-date. Consult the documentation of the operating system before considering to use the methods below.\n+ *\n+ * Platform randomness sources:\n+ * Linux   -> `getrandom(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. http://man7.org/linux/man-pages/man2/getrandom.2.html, https://linux.die.net/man/4/urandom\n+ * macOS   -> `getentropy(2)`(`sys/random.h`), if not available `/dev/urandom` should be used. https://www.unix.com/man-page/mojave/2/getentropy, https://opensource.apple.com/source/xnu/xnu-517.12.7/bsd/man/man4/random.4.auto.html\n+ * FreeBSD -> `getrandom(2)`(`sys/random.h`), if not available `kern.arandom` should be used. https://www.freebsd.org/cgi/man.cgi?query=getrandom, https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n+ * OpenBSD -> `getentropy(2)`(`unistd.h`), if not available `/dev/urandom` should be used. https://man.openbsd.org/getentropy, https://man.openbsd.org/urandom\n+ * Windows -> `BCryptGenRandom`(`bcrypt.h`). https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+ */\n+\n+#if defined(_WIN32)\n+#include <windows.h>\n+#include <ntstatus.h>\n+#include <bcrypt.h>\n+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#include <sys/random.h>\n+#elif defined(__OpenBSD__)\n+#include <unistd.h>\n+#else\n+#error \"Couldn't identify the OS\"\n+#endif\n+\n+#include <stddef.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+\n+/* Returns 1 on success, and 0 on failure. */\n+static int fill_random(unsigned char* data, size_t size) {\n+#if defined(_WIN32)\n+    NTSTATUS res = BCryptGenRandom(NULL, data, size, BCRYPT_USE_SYSTEM_PREFERRED_RNG);\n+    if (res != STATUS_SUCCESS || size > ULONG_MAX) {\n+        return 0;\n+    } else {\n+        return 1;\n+    }\n+#elif defined(__linux__) || defined(__FreeBSD__)\n+    /* If `getrandom(2)` is not available you should fallback to /dev/urandom */\n+    ssize_t res = getrandom(data, size, 0);",
      "path": "examples/random.h",
      "position": 47,
      "original_position": 47,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "4c433823a85cac975b0746203d94ce041c10299d",
      "in_reply_to_id": 797769142,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, mostly because I read the linux docs etc, and `getrandom` is a kernel thing, while `getentropy` is a glibc thing to emulate what OpenBSD does.\r\nAlso, most other libs also call `getrandom` on linux even though they call `getentropy` on OpenBSD/MacOS:\r\nhttps://github.com/bitcoin-core/secp256k1/pull/748#discussion_r603295709\r\n\r\nNot sure if this is convincing enough or not",
      "created_at": "2022-02-22T10:56:46Z",
      "updated_at": "2022-02-22T10:56:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r811821054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/811821054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812714391",
      "pull_request_review_id": 890831217,
      "id": 812714391,
      "node_id": "PRRC_kwDOAP4Jqs4wcQmX",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/",
      "path": "examples/ecdh.c",
      "position": null,
      "original_position": 5,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "beecb9a3b3f4936eadb678e7e931c90e8fa83de6",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry interrupting with legal stuff and not noticing earlier... I think it's weird to say \"Copyright\" and CC0 at the same time. And CC0 is strictly speaking not a software license. https://wiki.creativecommons.org/wiki/CC0_FAQ#May_I_apply_CC0_to_computer_software.3F_If_so.2C_is_there_a_recommended_implementation.3F  provides some boilerplate.\r\n\r\nHere's a suggestion, slightly adopted from the above to make sure it applies only to a single file. \r\n\r\n```suggestion\r\n/*************************************************************************\r\n * Written in 2020-2022 by Elichai Turkel                                *\r\n * To the extent possible under law, the author(s) have dedicated all    *\r\n * copyright and related and neighboring rights to the software in this  *\r\n * file to the public domain worldwide. This software is distributed     *\r\n * without any warranty. For the CC0 Public Domain Dedication, see       *\r\n * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\r\n *************************************************************************/\r\n```",
      "created_at": "2022-02-23T09:46:42Z",
      "updated_at": "2022-02-23T11:51:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r812714391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812714391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": 1,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812753825",
      "pull_request_review_id": 890831217,
      "id": 812753825,
      "node_id": "PRRC_kwDOAP4Jqs4wcaOh",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+\n+#include \"random.h\"\n+\n+\n+\n+int main(void) {\n+    /* Instead of signing the message directly, we must sign a 32-byte hash.\n+     * Here the message is \"Hello, world!\" and the hash function was SHA-256.\n+     * An actual implementation should just call SHA-256, but this example\n+     * hardcodes the output to avoid depending on an additional library.\n+     * See https://bitcoin.stackexchange.com/questions/81115/if-someone-wanted-to-pretend-to-be-satoshi-by-posting-a-fake-signature-to-defrau/81116#81116 */\n+    unsigned char msg_hash[32] = {\n+        0x31, 0x5F, 0x5B, 0xDB, 0x76, 0xD0, 0x78, 0xC4,\n+        0x3B, 0x8A, 0xC0, 0x06, 0x4E, 0x4A, 0x01, 0x64,\n+        0x61, 0x2B, 0x1F, 0xCE, 0x77, 0xC8, 0x69, 0x34,\n+        0x5B, 0xFC, 0x94, 0xC7, 0x58, 0x94, 0xED, 0xD3,\n+    };\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    int return_val;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The specification in secp256k1.h states that `secp256k1_ec_pubkey_create` needs\n+     * a context object initialized for signing and `secp256k1_ecdsa_verify` needs\n+     * a context initialized for verification, which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    return_val = secp256k1_context_randomize(ctx, randomize);\n+    assert(return_val);\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Public key creation using a valid context with a verified secret key should never fail */\n+    return_val = secp256k1_ec_pubkey_create(ctx, &pubkey, seckey);\n+    assert(return_val);\n+\n+    /* Serialize the pubkey in a compressed form(33 bytes). Should always return 1. */\n+    len = sizeof(compressed_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey, &len, &pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+    /* Should be the same size as the size of the output, because we passed a 33 byte array. */\n+    assert(len == sizeof(compressed_pubkey));\n+\n+    /*** Signing ***/\n+\n+    /* Generate an ECDSA signature, note that even though here `msg_hash` is set\n+    * to zeros, it MUST contain a hash, otherwise ECDSA is easily broken.",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 83,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2fd3e2fda176a3f8e2803c1f8c99e354b8e8123c",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`msg_hash` is not set to zeros.",
      "created_at": "2022-02-23T10:33:18Z",
      "updated_at": "2022-02-23T11:51:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r812753825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812753825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812761827",
      "pull_request_review_id": 890831217,
      "id": 812761827,
      "node_id": "PRRC_kwDOAP4Jqs4wccLj",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+\n+#include \"random.h\"\n+\n+\n+\n+int main(void) {\n+    /* Instead of signing the message directly, we must sign a 32-byte hash.\n+     * Here the message is \"Hello, world!\" and the hash function was SHA-256.\n+     * An actual implementation should just call SHA-256, but this example\n+     * hardcodes the output to avoid depending on an additional library.\n+     * See https://bitcoin.stackexchange.com/questions/81115/if-someone-wanted-to-pretend-to-be-satoshi-by-posting-a-fake-signature-to-defrau/81116#81116 */\n+    unsigned char msg_hash[32] = {\n+        0x31, 0x5F, 0x5B, 0xDB, 0x76, 0xD0, 0x78, 0xC4,\n+        0x3B, 0x8A, 0xC0, 0x06, 0x4E, 0x4A, 0x01, 0x64,\n+        0x61, 0x2B, 0x1F, 0xCE, 0x77, 0xC8, 0x69, 0x34,\n+        0x5B, 0xFC, 0x94, 0xC7, 0x58, 0x94, 0xED, 0xD3,\n+    };\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    int return_val;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The specification in secp256k1.h states that `secp256k1_ec_pubkey_create` needs\n+     * a context object initialized for signing and `secp256k1_ecdsa_verify` needs\n+     * a context initialized for verification, which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    return_val = secp256k1_context_randomize(ctx, randomize);\n+    assert(return_val);\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Public key creation using a valid context with a verified secret key should never fail */\n+    return_val = secp256k1_ec_pubkey_create(ctx, &pubkey, seckey);\n+    assert(return_val);\n+\n+    /* Serialize the pubkey in a compressed form(33 bytes). Should always return 1. */\n+    len = sizeof(compressed_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey, &len, &pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+    /* Should be the same size as the size of the output, because we passed a 33 byte array. */\n+    assert(len == sizeof(compressed_pubkey));\n+\n+    /*** Signing ***/\n+\n+    /* Generate an ECDSA signature, note that even though here `msg_hash` is set\n+    * to zeros, it MUST contain a hash, otherwise ECDSA is easily broken.\n+    * `noncefp` and `ndata` allows you to pass a custom nonce function, passing\n+    * `NULL` will use the RFC-6979 safe default. Signing with a valid context,\n+    * verified secret key and the default nonce function should never fail. */\n+    return_val = secp256k1_ecdsa_sign(ctx, &sig, msg_hash, seckey, NULL, NULL);\n+    assert(return_val);\n+\n+    /* Serialize the signature in a compact form. Should always return 1\n+     * according to the documentation in secp256k1.h. */\n+    return_val = secp256k1_ecdsa_signature_serialize_compact(ctx, serialized_signature, &sig);\n+    assert(return_val);\n+\n+\n+    /*** Verification ***/\n+\n+    /* Deserialize the signature. This will return 0 if the signature can't be parsed correctly. */\n+    if (!secp256k1_ecdsa_signature_parse_compact(ctx, &sig, serialized_signature)) {\n+        printf(\"Failed parsing the signature\\n\");\n+        return 1;\n+    }\n+\n+    /* Deserialize the public key. This will return 0 if the public key can't be parsed correctly. */\n+    if (!secp256k1_ec_pubkey_parse(ctx, &pubkey, compressed_pubkey, sizeof(compressed_pubkey))) {\n+        printf(\"Failed parsing the public key\\n\");\n+        return 1;\n+    }\n+\n+    /* Verify a signature. This will return 1 if it's valid and 0 if it's not. */\n+    is_signature_valid = secp256k1_ecdsa_verify(ctx, &sig, msg_hash, &pubkey);\n+\n+    printf(\"Is the signature valid? %s\\n\", is_signature_valid ? \"true\" : \"false\");\n+    printf(\"Secret Key: \");\n+    print_hex(seckey, sizeof(seckey));\n+    printf(\"Public Key: \");\n+    print_hex(compressed_pubkey, sizeof(compressed_pubkey));\n+    printf(\"Signature: \");\n+    print_hex(serialized_signature, sizeof(serialized_signature));\n+\n+\n+    /* This will clear everything from the context and free the memory */\n+    secp256k1_context_destroy(ctx);\n+\n+    /* It's best practice to try to clear secrets from memory after using them.\n+     * This is done because some bugs can allow an attacker to leak memory, for\n+     * example through \"out of bounds\" array access (see Heartbleed), Or the OS\n+     * swapping them to disk. Hence, we overwrite the secret key buffer with zeros.\n+     *\n+     * TODO: Prevent these writes from being optimized out, as any good compiler\n+     * will remove any writes that aren't used. */\n+    memset(seckey, 0, sizeof(seckey));",
      "path": "examples/ecdsa.c",
      "position": 134,
      "original_position": 132,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2fd3e2fda176a3f8e2803c1f8c99e354b8e8123c",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't like the idea of having a `TODO` here. I mean we spent days getting the randomness right, then this feels wrong. \r\n\r\nWe could copy https://github.com/bitcoin/bitcoin/blob/7fcf53f7b4524572d1d0c9a5fdc388e87eb02416/src/support/cleanse.cpp#L14 and then really call the file `util.h` or refer to it... \r\n\r\nIn the interest of moving this forward, we suggest to leave this as is and I'm happy to open a further PR that fixes it. ",
      "created_at": "2022-02-23T10:43:03Z",
      "updated_at": "2022-02-23T11:51:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r812761827",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812761827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": 127,
      "original_start_line": 125,
      "start_side": "RIGHT",
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812776002",
      "pull_request_review_id": 890831217,
      "id": 812776002,
      "node_id": "PRRC_kwDOAP4Jqs4wcfpC",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+\n+#include \"random.h\"\n+\n+\n+int main(void) {\n+    unsigned char seckey1[32];\n+    unsigned char seckey2[32];\n+    unsigned char compressed_pubkey1[33];\n+    unsigned char compressed_pubkey2[33];\n+    unsigned char shared_secret1[32];\n+    unsigned char shared_secret2[32];\n+    unsigned char randomize[32];\n+    int return_val;\n+    size_t len;\n+    secp256k1_pubkey pubkey1;\n+    secp256k1_pubkey pubkey2;\n+\n+    /* The specification in secp256k1.h states that `secp256k1_ec_pubkey_create`\n+     * needs a context object initialized for signing, which is why we create\n+     * a context with the SECP256K1_CONTEXT_SIGN flag.\n+     * (The docs for `secp256k1_ecdh` don't require any special context, just\n+     * some initialized context) */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    return_val = secp256k1_context_randomize(ctx, randomize);\n+    assert(return_val);\n+\n+    /*** Key Generation ***/",
      "path": "examples/ecdh.c",
      "position": 49,
      "original_position": 46,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "8312d43ba733e637af63641b2cfbbdd02e1648d5",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It may be good to add a header to every code section in this part, e.g., \"Party 1: \" and \"Party 2:\" or similar, to make sure.\r\n\r\nThis would require splitting the key generation loop but I think that's really better than. Real code wouldn't work like this, so I think we should avoid it in example code.\r\n\r\nThis is also something I can do in a follow-up PR.",
      "created_at": "2022-02-23T11:00:30Z",
      "updated_at": "2022-02-23T11:51:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r812776002",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812776002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812935092",
      "pull_request_review_id": 891142981,
      "id": 812935092,
      "node_id": "PRRC_kwDOAP4Jqs4wdGe0",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+\n+#include \"random.h\"\n+\n+\n+\n+int main(void) {\n+    /* Instead of signing the message directly, we must sign a 32-byte hash.\n+     * Here the message is \"Hello, world!\" and the hash function was SHA-256.\n+     * An actual implementation should just call SHA-256, but this example\n+     * hardcodes the output to avoid depending on an additional library.\n+     * See https://bitcoin.stackexchange.com/questions/81115/if-someone-wanted-to-pretend-to-be-satoshi-by-posting-a-fake-signature-to-defrau/81116#81116 */\n+    unsigned char msg_hash[32] = {\n+        0x31, 0x5F, 0x5B, 0xDB, 0x76, 0xD0, 0x78, 0xC4,\n+        0x3B, 0x8A, 0xC0, 0x06, 0x4E, 0x4A, 0x01, 0x64,\n+        0x61, 0x2B, 0x1F, 0xCE, 0x77, 0xC8, 0x69, 0x34,\n+        0x5B, 0xFC, 0x94, 0xC7, 0x58, 0x94, 0xED, 0xD3,\n+    };\n+    unsigned char seckey[32];\n+    unsigned char randomize[32];\n+    unsigned char compressed_pubkey[33];\n+    unsigned char serialized_signature[64];\n+    size_t len;\n+    int is_signature_valid;\n+    int return_val;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    /* The specification in secp256k1.h states that `secp256k1_ec_pubkey_create` needs\n+     * a context object initialized for signing and `secp256k1_ecdsa_verify` needs\n+     * a context initialized for verification, which is why we create a context\n+     * for both signing and verification with the SECP256K1_CONTEXT_SIGN and\n+     * SECP256K1_CONTEXT_VERIFY flags. */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    return_val = secp256k1_context_randomize(ctx, randomize);\n+    assert(return_val);\n+\n+    /*** Key Generation ***/\n+\n+    /* If the secret key is zero or out of range (bigger than secp256k1's\n+     * order), we try to sample a new key. Note that the probability of this\n+     * happening is negligible. */\n+    while (1) {\n+        if (!fill_random(seckey, sizeof(seckey))) {\n+            printf(\"Failed to generate randomness\\n\");\n+            return 1;\n+        }\n+        if (secp256k1_ec_seckey_verify(ctx, seckey)) {\n+            break;\n+        }\n+    }\n+\n+    /* Public key creation using a valid context with a verified secret key should never fail */\n+    return_val = secp256k1_ec_pubkey_create(ctx, &pubkey, seckey);\n+    assert(return_val);\n+\n+    /* Serialize the pubkey in a compressed form(33 bytes). Should always return 1. */\n+    len = sizeof(compressed_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, compressed_pubkey, &len, &pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+    /* Should be the same size as the size of the output, because we passed a 33 byte array. */\n+    assert(len == sizeof(compressed_pubkey));\n+\n+    /*** Signing ***/\n+\n+    /* Generate an ECDSA signature, note that even though here `msg_hash` is set\n+    * to zeros, it MUST contain a hash, otherwise ECDSA is easily broken.",
      "path": "examples/ecdsa.c",
      "position": null,
      "original_position": 83,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "2fd3e2fda176a3f8e2803c1f8c99e354b8e8123c",
      "in_reply_to_id": 812753825,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! fixed ",
      "created_at": "2022-02-23T14:16:02Z",
      "updated_at": "2022-02-23T14:16:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r812935092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812935092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812935409",
      "pull_request_review_id": 891143420,
      "id": 812935409,
      "node_id": "PRRC_kwDOAP4Jqs4wdGjx",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+/*************************************************************************\n+ * Copyright (c) 2020-2021 Elichai Turkel                                *\n+ * Distributed under the CC0 software license, see the accompanying file *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/",
      "path": "examples/ecdh.c",
      "position": null,
      "original_position": 5,
      "commit_id": "7c9502cece9c9e8d811333f7ab5bb22f4eb01c04",
      "original_commit_id": "beecb9a3b3f4936eadb678e7e931c90e8fa83de6",
      "in_reply_to_id": 812714391,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I hate dealing with licenses. fixed",
      "created_at": "2022-02-23T14:16:18Z",
      "updated_at": "2022-02-23T14:16:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/748#discussion_r812935409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/812935409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/748"
        }
      },
      "start_line": null,
      "original_start_line": 1,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    }
  ]
}