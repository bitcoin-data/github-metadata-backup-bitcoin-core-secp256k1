{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261",
    "id": 38441150,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDExNTA=",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/261.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/261.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/261",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/261/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/765742021af54d27a7d6ca018922219bff997074",
    "number": 261,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Correct `secp256k1_gej_add_ge` with 3% performance hit on signing",
    "user": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixes https://github.com/bitcoin/secp256k1/issues/257 by catching the degenerate case, which appears as an intermediate variable being 0/0, and using an alternate expression for that variable in this case.\n\nThis results in only a ~3% perf hit on signing. There are no changes in the multiplication or squaring count; this is entirely due to additions and cmovs. \"I doubt we can do better\" but I said that about an earlier revision with a 6% hit and Peter Dettman found a way to beat it, so my doubts aren't worth much :)\n",
    "labels": [],
    "created_at": "2015-06-24T13:24:32Z",
    "updated_at": "2017-06-19T13:20:38Z",
    "closed_at": "2015-06-29T16:30:44Z",
    "mergeable_state": "unknown",
    "merged_at": "2015-06-29T16:30:44Z",
    "merge_commit_sha": "875d2ff2f714ae7e670c42ec334fe8ee0b8bc677",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "apoelstra:add-fix",
      "ref": "add-fix",
      "sha": "765742021af54d27a7d6ca018922219bff997074",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 33787691,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMzc4NzY5MQ==",
        "name": "secp256k1",
        "full_name": "apoelstra/secp256k1",
        "owner": {
          "login": "apoelstra",
          "id": 1351933,
          "node_id": "MDQ6VXNlcjEzNTE5MzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/apoelstra",
          "html_url": "https://github.com/apoelstra",
          "followers_url": "https://api.github.com/users/apoelstra/followers",
          "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
          "organizations_url": "https://api.github.com/users/apoelstra/orgs",
          "repos_url": "https://api.github.com/users/apoelstra/repos",
          "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/apoelstra/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/apoelstra/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/apoelstra/secp256k1",
        "archive_url": "https://api.github.com/repos/apoelstra/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/apoelstra/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/apoelstra/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/apoelstra/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/apoelstra/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/apoelstra/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/apoelstra/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/apoelstra/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/apoelstra/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/apoelstra/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/apoelstra/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/apoelstra/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/apoelstra/secp256k1/events",
        "forks_url": "https://api.github.com/repos/apoelstra/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/apoelstra/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/apoelstra/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/apoelstra/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/apoelstra/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/apoelstra/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/apoelstra/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/apoelstra/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/apoelstra/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/apoelstra/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/apoelstra/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/apoelstra/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/apoelstra/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/apoelstra/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/apoelstra/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/apoelstra/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:apoelstra/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/apoelstra/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/apoelstra/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/apoelstra/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/apoelstra/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/apoelstra/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/apoelstra/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/apoelstra/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/apoelstra/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/apoelstra/secp256k1/hooks",
        "svn_url": "https://github.com/apoelstra/secp256k1",
        "language": "C",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 2888,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-05-06T18:52:16Z",
        "created_at": "2015-04-11T18:42:06Z",
        "updated_at": "2020-04-18T08:27:37Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "873a453d26b326cc71b3c5ff509058dfe0ce6884",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 157,
    "deletions": 20,
    "changed_files": 2,
    "commits": 4,
    "review_comments": 20,
    "comments": 5
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YmNmMmZjZmQzYTZkNzAxYjM2ZDVkMWRkNGE3NmMxMzM2YTJkZTNjZA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bcf2fcfd3a6d701b36d5d1dd4a76c1336a2de3cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bcf2fcfd3a6d701b36d5d1dd4a76c1336a2de3cd",
      "tree": {
        "sha": "71c55fc2bfbd581c6d1621e9695519b99c714f7a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/71c55fc2bfbd581c6d1621e9695519b99c714f7a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 71c55fc2bfbd581c6d1621e9695519b99c714f7a\nparent 873a453d26b326cc71b3c5ff509058dfe0ce6884\nauthor Andrew Poelstra <asp11@sfu.ca> 1435088120 -0700\ncommitter Andrew Poelstra <asp11@sfu.ca> 1435088655 -0700\n\ngej_add_ge: rearrange algebra\n\nThere is zero functionality or opcount changes here; I need to do\nthis to make sure both R and M are computed before they are used,\nsince a future patch will replace either none or both of them.\n\nAlso compute r->y directly in terms of r->x, which again will be\nused in a future patch.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJVibcPAAoJEMWI1jzkG5fB93wH/Aw2BLAGV/uoOUYMiWwr6/80\nJfhWegDU9GPEIspQGcr/KqLHlUf6gLon4WCR3bTZEBhtFQqBQLfZpDq54N/7O0jB\nd8j2wOpHjU8oevW7xa8VPCJxzf5BV1FHto5283+z8YbhyWBWVmPtsK8Y0YYymDFd\n618HoCehLjyWDRh6IqFj9Vk4jHFBXgh6v2oLmLJxpPgi1FJcHUKWj8mcQCYaXYKl\nRUuCELMiDm/ilXd0spNdoidnaJPmK1tTA/XheEQyXIKYs4mrLfK+tv+V2KUuwDbD\nXFhbzK2pNoDNbHRk9/irVte94AfxR7hwvzpjVCXjOYyuNY29g/9nt0FoY/W9lZ4=\n=N5lA\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/873a453d26b326cc71b3c5ff509058dfe0ce6884",
          "sha": "873a453d26b326cc71b3c5ff509058dfe0ce6884",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/873a453d26b326cc71b3c5ff509058dfe0ce6884"
        }
      ],
      "message": "gej_add_ge: rearrange algebra\n\nThere is zero functionality or opcount changes here; I need to do\nthis to make sure both R and M are computed before they are used,\nsince a future patch will replace either none or both of them.\n\nAlso compute r->y directly in terms of r->x, which again will be\nused in a future patch.",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2015-06-23T19:44:15Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2015-06-23T19:35:20Z"
      },
      "sha": "bcf2fcfd3a6d701b36d5d1dd4a76c1336a2de3cd"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-24T13:29:03Z",
      "updated_at": "2015-06-24T13:29:03Z",
      "source": {
        "issue": {
          "id": 76836617,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzU1NDQ4MjQ=",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/252",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/252/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/252/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/252/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/252",
          "number": 252,
          "state": "closed",
          "state_reason": null,
          "title": "Add constant-time point multplication for ECDH",
          "body": "Add constant-time `secp256k1_point_multiply` for ECDH\n\nDesigned with clear separation of the wNAF conversion, precomputation\nand exponentiation (since the precomp at least we will probably want\nto separate in the API for users who reuse points a lot).\n\nFuture work:\n- actually separate precomp in the API \n- do multiexp rather than single exponentiation\n",
          "user": {
            "login": "apoelstra",
            "id": 1351933,
            "node_id": "MDQ6VXNlcjEzNTE5MzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/apoelstra",
            "html_url": "https://github.com/apoelstra",
            "followers_url": "https://api.github.com/users/apoelstra/followers",
            "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
            "organizations_url": "https://api.github.com/users/apoelstra/orgs",
            "repos_url": "https://api.github.com/users/apoelstra/repos",
            "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/apoelstra/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/252",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/252",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/252.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/252.patch"
          },
          "closed_at": "2015-08-02T17:33:20Z",
          "created_at": "2015-05-15T19:48:41Z",
          "updated_at": "2017-06-19T13:21:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2MTA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2MTM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2MTU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2MTg6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2MjE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2MjQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "head_ref_force_pushed",
      "id": 339153624,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM5MTUzNjI0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/339153624",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-24T16:45:01Z"
    },
    {
      "event": "commented",
      "id": 114938588,
      "node_id": "MDEyOklzc3VlQ29tbWVudDExNDkzODU4OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/114938588",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-24T16:45:44Z",
      "updated_at": "2015-06-24T16:45:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Push to fix everyone's comments (comment fixes and Peter's awesome speedup).\n",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#issuecomment-114938588",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/261"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2Mjc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 115089095,
      "node_id": "MDEyOklzc3VlQ29tbWVudDExNTA4OTA5NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/115089095",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T03:26:20Z",
      "updated_at": "2015-06-25T03:26:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "We might want to update the citation above to point out that the additive law given in the citation is actually not complete, lest some unwary traveler see the citation and go there rather than reading the code. \n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#issuecomment-115089095",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/261"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2Mjk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ2MzI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 115236730,
      "node_id": "MDEyOklzc3VlQ29tbWVudDExNTIzNjczMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/115236730",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T12:38:27Z",
      "updated_at": "2015-06-25T12:38:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "For what it's worth, the citation does say that it's assuming the y1 = -y2 case does not occur.\n",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#issuecomment-115236730",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 340548209,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQwNTQ4MjA5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/340548209",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T21:53:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 340550154,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQwNTUwMTU0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/340550154",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T21:55:21Z"
    },
    {
      "event": "commented",
      "id": 115411810,
      "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQxMTgxMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/115411810",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T21:57:42Z",
      "updated_at": "2015-06-25T22:18:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Push with comment fixes and a much-expanded comment about our high-level strategy for obtaining constant-time multiplication for all pairs of points (well, except those with a = infinity).\n\nWe might be the first to have produced a fast, constant-time algorithm which works for all pairs of points. When developing this fix I checked both Trezor and OpenSSL, and their constant-time additions both have degenerate cases (specifically both don't work when asked to double) which they avoid by being careful about how constadds are used in their larger algorithms.\n\n**Edit:** We did discuss using this strategy; however we were uncertain how it interacted with our existing blinding and optimization tricks throughout the codebase (which OpenSSL and Trezor do not have to worry about) and none of us wanted to have to keep \"oh, provably make sure you avoid the cases that break constadd\" in our heads for all future work.\n",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#issuecomment-115411810",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/261"
    },
    {
      "event": "mentioned",
      "id": 340567544,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwNTY3NTQ0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/340567544",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T22:15:56Z"
    },
    {
      "event": "subscribed",
      "id": 340567545,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDU2NzU0NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/340567545",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T22:15:56Z"
    },
    {
      "event": "renamed",
      "id": 340580326,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzQwNTgwMzI2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/340580326",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-25T22:36:06Z",
      "rename": {
        "from": "Correct `secp256k1_gej_add_ge` with 2M - S performance hit",
        "to": "Correct `secp256k1_gej_add_ge` with 3% performance hit on signing"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NWRlNGM1ZGZmZDIyYWE0NTEwYTVjOTdkMGFkNGE5YzJlZWQ3MWQ4NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5de4c5dffd22aa4510a5c97d0ad4a9c2eed71d85",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5de4c5dffd22aa4510a5c97d0ad4a9c2eed71d85",
      "tree": {
        "sha": "9266d0e140556b81a1a6eeca2a7ed3b674676668",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9266d0e140556b81a1a6eeca2a7ed3b674676668"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9266d0e140556b81a1a6eeca2a7ed3b674676668\nparent bcf2fcfd3a6d701b36d5d1dd4a76c1336a2de3cd\nauthor Andrew Poelstra <asp11@sfu.ca> 1435088462 -0700\ncommitter Andrew Poelstra <asp11@sfu.ca> 1435591318 -0700\n\ngej_add_ge: fix degenerate case when computing P + (-lambda)P\n\nIf two points (x1, y1) and (x2, y2) are given to gej_add_ge with\nx1 != x2 but y1 = -y2, the function gives a wrong answer since\nthis causes it to compute \"lambda = 0/0\" during an intermediate\nstep. (Here lambda refers to an auxiallary variable in the point\naddition formula, not the cube-root of 1 used by the endomorphism\noptimization.)\n\nThis commit catches the 0/0 and replaces it with an alternate\nexpression for lambda, cmov'ing it in place if necessary.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJVkWKbAAoJEMWI1jzkG5fBlj0IAII67r5D81J51ENzlprW54k3\n9uE5f496UjR5upcNVdjxI22kBUMZ7cjeQslEskjGdEgK/j5ersiKxSl3+P5/e3oU\nSz4Y4RQebI24Q8NICij/d2d0LYF1wU5uq6mtVX1Ky8JKoQXQA6ixNlKuO6wYU4lZ\n4tjdIprbuXYNMjbk8uWZ5SOXBBFX38kJ4KQp0wqL+pGKrxGv7EOLrtheSV6qSyV/\nveVxWEWYQrX7rhnlP2BLaWj0kHIPm2bCPD62gvJvj0LhBqfTspSyzsR0Eg7lnc/E\ngWGVj6FefgfqglrABJ0u9yAAW0azK55DlF62Xx8lrjguOsFCqkmskUT0ixaoXtY=\n=m/iT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bcf2fcfd3a6d701b36d5d1dd4a76c1336a2de3cd",
          "sha": "bcf2fcfd3a6d701b36d5d1dd4a76c1336a2de3cd",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bcf2fcfd3a6d701b36d5d1dd4a76c1336a2de3cd"
        }
      ],
      "message": "gej_add_ge: fix degenerate case when computing P + (-lambda)P\n\nIf two points (x1, y1) and (x2, y2) are given to gej_add_ge with\nx1 != x2 but y1 = -y2, the function gives a wrong answer since\nthis causes it to compute \"lambda = 0/0\" during an intermediate\nstep. (Here lambda refers to an auxiallary variable in the point\naddition formula, not the cube-root of 1 used by the endomorphism\noptimization.)\n\nThis commit catches the 0/0 and replaces it with an alternate\nexpression for lambda, cmov'ing it in place if necessary.",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2015-06-29T15:21:58Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2015-06-23T19:41:02Z"
      },
      "sha": "5de4c5dffd22aa4510a5c97d0ad4a9c2eed71d85"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OGM1ZDVmN2I1YmVhYWQ2MGUwZjRjNjFiOTgyMzVmYTJhMzkxMDdkNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8c5d5f7b5beaad60e0f4c61b98235fa2a39107d6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8c5d5f7b5beaad60e0f4c61b98235fa2a39107d6",
      "tree": {
        "sha": "a312ff8a86a4bf0d881a74ee2ae941462b955c43",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a312ff8a86a4bf0d881a74ee2ae941462b955c43"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a312ff8a86a4bf0d881a74ee2ae941462b955c43\nparent 5de4c5dffd22aa4510a5c97d0ad4a9c2eed71d85\nauthor Andrew Poelstra <asp11@sfu.ca> 1434906710 -0700\ncommitter Andrew Poelstra <asp11@sfu.ca> 1435591326 -0700\n\ntests: Add failing unit test for #257 (bad addition formula)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJVkWKeAAoJEMWI1jzkG5fBDVQIAIivBNSWxcK3UmE2yRTfE9UT\n8RYlG2tnIsM4V/+TpoxISlgfCrsEvV/7Mflm2nLBMUNHPSHN4p1pg4IQBHrQi6HO\njegzL0OF4eVi/qMQ4Ie08hW4cL3eRJ854xMaLkH4HX4BJ+cFrHU7ku61xMkwj1nY\ny/VLlxzrUvruogNLo0yiQ7KkY6ASie+C46Z3l7QVeqynQo3UlXrDR8k9SLIqbthx\n/OKhxmEglqDgFXcFxlWghFrG7XnJyw5gKk4Ncx1Gi+XFKHSQclcv6mcbcYn/BXht\nA/XXNJ75ZHYM8bvXxVY4MW8wFzB3+MH0TPqAJ1wQCGqIIYF6YmbzJuc8UGNT8tM=\n=ENSm\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5de4c5dffd22aa4510a5c97d0ad4a9c2eed71d85",
          "sha": "5de4c5dffd22aa4510a5c97d0ad4a9c2eed71d85",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5de4c5dffd22aa4510a5c97d0ad4a9c2eed71d85"
        }
      ],
      "message": "tests: Add failing unit test for #257 (bad addition formula)",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2015-06-29T15:22:06Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2015-06-21T17:11:50Z"
      },
      "sha": "8c5d5f7b5beaad60e0f4c61b98235fa2a39107d6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NzY1NzQyMDIxYWY1NGQyN2E3ZDZjYTAxODkyMjIxOWJmZjk5NzA3NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/765742021af54d27a7d6ca018922219bff997074",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/765742021af54d27a7d6ca018922219bff997074",
      "tree": {
        "sha": "7df551b5bb4364c9c81f7562db662b0dae972641",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7df551b5bb4364c9c81f7562db662b0dae972641"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7df551b5bb4364c9c81f7562db662b0dae972641\nparent 8c5d5f7b5beaad60e0f4c61b98235fa2a39107d6\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1435055629 +0200\ncommitter Andrew Poelstra <asp11@sfu.ca> 1435591326 -0700\n\nAdd tests for adding P+Q with P.x!=Q.x and P.y=-Q.y\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJVkWKeAAoJEMWI1jzkG5fBpKcH/37B5QmTJ+E/lP28o/mExBKN\n2xB254JdTPO9XY84fnUJiVtAbbjuBtzYJFNbQN7SKxR3gTkg8hj2C8bfdPjrzPY0\nmnn99xbBO+OcSdiOGTg+MbfbQjLJd6wVFLbt4FJBg6q7DSYNkEbzNByIfC6GMyMm\nQCb8+cYj9D3GgoLduYmNarjwESb1B3eJC1Tz/z+7pVE7Hd2CYOTb1i2mQXN2+MJJ\nJMPnE+GM9wr6SrTU3ejsL/81BTi6ZeyHCQN+LO2ucVpUvWQ0hosFZbe/hjAobgda\nHhm7jEevuu9kl+cws8xNVOq22Vuruen/dLczdZNMR0HSfDo/kBnodEp9XdIgD4s=\n=TBba\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8c5d5f7b5beaad60e0f4c61b98235fa2a39107d6",
          "sha": "8c5d5f7b5beaad60e0f4c61b98235fa2a39107d6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8c5d5f7b5beaad60e0f4c61b98235fa2a39107d6"
        }
      ],
      "message": "Add tests for adding P+Q with P.x!=Q.x and P.y=-Q.y",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2015-06-29T15:22:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-06-23T10:33:49Z"
      },
      "sha": "765742021af54d27a7d6ca018922219bff997074"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 343143054,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzMTQzMDU0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/343143054",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-29T15:22:17Z"
    },
    {
      "event": "commented",
      "id": 116750302,
      "node_id": "MDEyOklzc3VlQ29tbWVudDExNjc1MDMwMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/116750302",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-29T16:27:41Z",
      "updated_at": "2015-06-29T16:27:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#issuecomment-116750302",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/261"
    },
    {
      "event": "merged",
      "id": 343213049,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzQzMjEzMDQ5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/343213049",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/765742021af54d27a7d6ca018922219bff997074",
      "created_at": "2015-06-29T16:30:44Z"
    },
    {
      "event": "closed",
      "id": 343213051,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzQzMjEzMDUx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/343213051",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-06-29T16:30:44Z"
    },
    {
      "event": "referenced",
      "id": 343213055,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MzIxMzA1NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/343213055",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "17f7148606172e23e938255c680de4951f621fe3",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/17f7148606172e23e938255c680de4951f621fe3",
      "created_at": "2015-06-29T16:30:44Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 1129079806,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQxMTI5MDc5ODA2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1129079806",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-19T13:20:38Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33150621",
      "pull_request_review_id": null,
      "id": 33150621,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTUwNjIx",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In\n+     * this case the correct value of lambda is (y1 - y2)/(x1 - x2),\n+     * so set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - Y1*Z2^2 */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 37,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\n/* m = X1*Z2^2 - X2*Z1^2 */\n```\n",
      "created_at": "2015-06-24T14:09:31Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33150621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33150621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33153336",
      "pull_request_review_id": null,
      "id": 33153336,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTUzMzM2",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 31,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\nx1 = beta*x2 or beta*x1 = x2\n```\n\nmight make it clearer there are just the two possibilities.\n",
      "created_at": "2015-06-24T14:34:46Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33153336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33153336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33153691",
      "pull_request_review_id": null,
      "id": 33153691,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTUzNjkx",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In\n+     * this case the correct value of lambda is (y1 - y2)/(x1 - x2),",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 32,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, this is the reciprocal of what it should be.\n",
      "created_at": "2015-06-24T14:37:42Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33153691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33153691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33154297",
      "pull_request_review_id": null,
      "id": 33154297,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTU0Mjk3",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 31,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, agreed. And I should probably add that these are exactly the nontrivial cases for which `x1^3 == x2^3`, which explains why there are only the two of them.\n",
      "created_at": "2015-06-24T14:42:57Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33154297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33154297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33154503",
      "pull_request_review_id": null,
      "id": 33154503,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTU0NTAz",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 28,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using & instead of \\* is probably slightly faster.\n",
      "created_at": "2015-06-24T14:44:36Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33154503",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33154503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33155146",
      "pull_request_review_id": null,
      "id": 33155146,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTU1MTQ2",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 28,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I can also probably drop the `* (1 - a->infinity)` since if this is 0, the cmov code at the bottom of the function will overwrite everything I do anyway.\n",
      "created_at": "2015-06-24T14:50:47Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33155146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33155146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33155247",
      "pull_request_review_id": null,
      "id": 33155247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTU1MjQ3",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 28,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed!\n",
      "created_at": "2015-06-24T14:51:40Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33155247",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33155247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33155367",
      "pull_request_review_id": null,
      "id": 33155367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTU1MzY3",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In\n+     * this case the correct value of lambda is (y1 - y2)/(x1 - x2),\n+     * so set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - Y1*Z2^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 41,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be nice if you could also update the algebra in the comments above to reflect this case.\n",
      "created_at": "2015-06-24T14:52:49Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33155367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33155367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 550,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33156611",
      "pull_request_review_id": null,
      "id": 33156611,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTU2NjEx",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In\n+     * this case the correct value of lambda is (y1 - y2)/(x1 - x2),\n+     * so set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - Y1*Z2^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * We keep the old values in R, M because we will need them\n+     * for other reasons. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = M^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n+    secp256k1_fe_mul(&n, &n, &m);                       /* n = M^4 (1) */\n+    secp256k1_fe_mul(&n, &n, &m_alt);                   /* n = M^4 (1) */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 47,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't test code right now, but it seems to me that 526,527:\n\n```\nn = n * m * m_alt\n```\n\ncould be replaced with:\n\n```\nn = n * m^2\n```\n\nbecause either m == m_alt or m == 0.\n\nOr even:\n\n```\nn = n^2; cmov n,m,degenerate\n```\n",
      "created_at": "2015-06-24T15:02:36Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33156611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33156611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33159728",
      "pull_request_review_id": null,
      "id": 33159728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTU5NzI4",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In\n+     * this case the correct value of lambda is (y1 - y2)/(x1 - x2),\n+     * so set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - Y1*Z2^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * We keep the old values in R, M because we will need them\n+     * for other reasons. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = M^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n+    secp256k1_fe_mul(&n, &n, &m);                       /* n = M^4 (1) */\n+    secp256k1_fe_mul(&n, &n, &m_alt);                   /* n = M^4 (1) */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 47,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't test for another hour, but if this cmov thing works I think it erases the perf hit!\n",
      "created_at": "2015-06-24T15:28:00Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33159728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33159728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33162093",
      "pull_request_review_id": null,
      "id": 33162093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTYyMDkz",
      "diff_hunk": "@@ -499,24 +500,43 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) *\n+                 secp256k1_fe_normalizes_to_zero(&rr) *\n+                 (1 - a->infinity);\n+    /* This only occurs when x1 = beta*x2 or x1 = beta^2*x2. In\n+     * this case the correct value of lambda is (y1 - y2)/(x1 - x2),\n+     * so set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - Y1*Z2^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * We keep the old values in R, M because we will need them\n+     * for other reasons. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = M^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n+    secp256k1_fe_mul(&n, &n, &m);                       /* n = M^4 (1) */\n+    secp256k1_fe_mul(&n, &n, &m_alt);                   /* n = M^4 (1) */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 47,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "80efd6849a3fa50d959bebb941c0320d5ab0940c",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tried it (using vim on phone keyboard, ugh, but I couldn't wait..). It works, and drops the perf hit I measure from 5.7% to 3.8%! :D\n\n**Edit:** Now I see 2.9% hit for signing: 48.7us vs 47.3us.\n",
      "created_at": "2015-06-24T15:47:46Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33162093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33162093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33203174",
      "pull_request_review_id": null,
      "id": 33203174,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjAzMTc0",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I had the expression for lambda right the first time :) it _should_ be `(y1 - y2)/(x1 - x2)`.\n",
      "created_at": "2015-06-24T22:13:21Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33203174",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33203174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33223291",
      "pull_request_review_id": null,
      "id": 33223291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjIzMjkx",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - X2*Z1^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * From here on out Ralt and Malt represent the numerator\n+     * and denominator of lambda; R and M represent the explicit\n+     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */\n+    /* These two lines use a clever observation of Peter Dettman's,\n+     * that either M == Malt or M == 0. So M^3 * Malt is either Malt^4\n+     * (which is computed by squaring), or zero (which is computed by\n+     * the cmov). So the cost is one squaring versus two multiplications. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's of course nice to be appreciated, but I think code comments would be better kept to the immediate technical details.\n",
      "created_at": "2015-06-25T05:24:00Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33223291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33223291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33224399",
      "pull_request_review_id": null,
      "id": 33224399,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjI0Mzk5",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - X2*Z1^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * From here on out Ralt and Malt represent the numerator\n+     * and denominator of lambda; R and M represent the explicit\n+     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */\n+    /* These two lines use a clever observation of Peter Dettman's,\n+     * that either M == Malt or M == 0. So M^3 * Malt is either Malt^4\n+     * (which is computed by squaring), or zero (which is computed by\n+     * the cmov). So the cost is one squaring versus two multiplications. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Direct experience shows that people do find attribution in commit messages just fine. E.g. I had people contact me on the inversion free R == r trick.\n",
      "created_at": "2015-06-25T05:56:34Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33224399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33224399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33231670",
      "pull_request_review_id": null,
      "id": 33231670,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjMxNjcw",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 24,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "comment: tt instead of t\n",
      "created_at": "2015-06-25T08:19:52Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33231670",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33231670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33309705",
      "pull_request_review_id": null,
      "id": 33309705,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA5NzA1",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it (y1 - y2)/(x1 - x2) or the inverse? The comment still says the inverse.\n",
      "created_at": "2015-06-25T21:56:42Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33309705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33309705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33311139",
      "pull_request_review_id": null,
      "id": 33311139,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzExMTM5",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - X2*Z1^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * From here on out Ralt and Malt represent the numerator\n+     * and denominator of lambda; R and M represent the explicit\n+     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */\n+    /* These two lines use a clever observation of Peter Dettman's,\n+     * that either M == Malt or M == 0. So M^3 * Malt is either Malt^4\n+     * (which is computed by squaring), or zero (which is computed by\n+     * the cmov). So the cost is one squaring versus two multiplications. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you'd like me to remove your name, I will. But I agree with @gmaxwell that it's probably good for readers that it be there.\n",
      "created_at": "2015-06-25T22:15:56Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33311139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33311139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33316004",
      "pull_request_review_id": null,
      "id": 33316004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzE2MDA0",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - X2*Z1^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * From here on out Ralt and Malt represent the numerator\n+     * and denominator of lambda; R and M represent the explicit\n+     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */\n+    /* These two lines use a clever observation of Peter Dettman's,\n+     * that either M == Malt or M == 0. So M^3 * Malt is either Malt^4\n+     * (which is computed by squaring), or zero (which is computed by\n+     * the cmov). So the cost is one squaring versus two multiplications. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually I was saying that people will find it if it's just in the commit message rather than a comment in the code.\n",
      "created_at": "2015-06-25T23:26:18Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33316004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33316004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33325257",
      "pull_request_review_id": null,
      "id": 33325257,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzI1MjU3",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - X2*Z1^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * From here on out Ralt and Malt represent the numerator\n+     * and denominator of lambda; R and M represent the explicit\n+     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */\n+    /* These two lines use a clever observation of Peter Dettman's,\n+     * that either M == Malt or M == 0. So M^3 * Malt is either Malt^4\n+     * (which is computed by squaring), or zero (which is computed by\n+     * the cmov). So the cost is one squaring versus two multiplications. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh :) well if you're both against me I'll take it out of the source comment.\n",
      "created_at": "2015-06-26T02:52:42Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33325257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33325257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33349141",
      "pull_request_review_id": null,
      "id": 33349141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzQ5MTQx",
      "diff_hunk": "@@ -499,29 +500,55 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_mul(&tt, &u1, &u2); secp256k1_fe_negate(&tt, &tt, 1); /* t = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                                        /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (x1 - x2)/(y1 - y2),\n+     * so we set R/M equal to this. */\n+    secp256k1_fe_negate(&rr_alt, &s2, 1);   /* rr = -Y2*Z1^3  */\n+    secp256k1_fe_add(&rr_alt, &s1);         /* rr = Y1*Z2^3 - Y2*Z1^3 */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);    /* m = -X2*Z1^2 */\n+    secp256k1_fe_add(&m_alt, &u1);          /* m = X1*Z2^2 - X2*Z1^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * From here on out Ralt and Malt represent the numerator\n+     * and denominator of lambda; R and M represent the explicit\n+     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */\n+    /* These two lines use a clever observation of Peter Dettman's,\n+     * that either M == Malt or M == 0. So M^3 * Malt is either Malt^4\n+     * (which is computed by squaring), or zero (which is computed by\n+     * the cmov). So the cost is one squaring versus two multiplications. */",
      "path": "src/group_impl.h",
      "position": null,
      "original_position": 51,
      "commit_id": "765742021af54d27a7d6ca018922219bff997074",
      "original_commit_id": "335ac43b8dcf9699f3d3dbcd43912781f0b3bae1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we eventually want some AUTHORS document that explains who contributed what - that's easier to access than digging through commit messages, and less invasive than putting it in the code.\n\nSome documentation in the source tree that explains the various tricks and optimizations implemented would be even nicer.\n",
      "created_at": "2015-06-26T11:54:36Z",
      "updated_at": "2015-06-29T15:22:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/261#discussion_r33349141",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/33349141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}