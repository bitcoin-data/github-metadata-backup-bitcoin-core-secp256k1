{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319",
    "id": 1360425352,
    "node_id": "PR_kwDOAP4Jqs5RFnGI",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1319.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1319.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/326329ba1db5d95079290805a68987085195aa67",
    "number": 1319,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Replace the 64-bit C field implementation by fiat-crypto output ",
    "user": {
      "login": "dderjoel",
      "id": 13455345,
      "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dderjoel",
      "html_url": "https://github.com/dderjoel",
      "followers_url": "https://api.github.com/users/dderjoel/followers",
      "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
      "organizations_url": "https://api.github.com/users/dderjoel/orgs",
      "repos_url": "https://api.github.com/users/dderjoel/repos",
      "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dderjoel/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR is result of https://github.com/bitcoin-core/secp256k1/issues/1261\r\nIn a nutshell, it replaces the current C-Implementation for the field arithmetic multiply and Square with the proven-correct implementation from the Fiat Cryptography Framework.",
    "labels": [
      {
        "id": 165017692,
        "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
        "name": "assurance",
        "description": "",
        "color": "A6DF3D",
        "default": false
      }
    ],
    "created_at": "2023-05-23T01:23:40Z",
    "updated_at": "2023-11-22T14:19:04Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "f54cdcb91205581831321b749f5d1b7d9bdc7405",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "dderjoel:only-c",
      "ref": "only-c",
      "sha": "326329ba1db5d95079290805a68987085195aa67",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 620160024,
        "node_id": "R_kgDOJPbkGA",
        "name": "secp256k1",
        "full_name": "dderjoel/secp256k1",
        "owner": {
          "login": "dderjoel",
          "id": 13455345,
          "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
          "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dderjoel",
          "html_url": "https://github.com/dderjoel",
          "followers_url": "https://api.github.com/users/dderjoel/followers",
          "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
          "organizations_url": "https://api.github.com/users/dderjoel/orgs",
          "repos_url": "https://api.github.com/users/dderjoel/repos",
          "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dderjoel/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/dderjoel/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/dderjoel/secp256k1",
        "archive_url": "https://api.github.com/repos/dderjoel/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dderjoel/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dderjoel/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dderjoel/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dderjoel/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dderjoel/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dderjoel/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dderjoel/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dderjoel/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dderjoel/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/dderjoel/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/dderjoel/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/dderjoel/secp256k1/events",
        "forks_url": "https://api.github.com/repos/dderjoel/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/dderjoel/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dderjoel/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dderjoel/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dderjoel/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/dderjoel/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dderjoel/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dderjoel/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dderjoel/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dderjoel/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dderjoel/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/dderjoel/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/dderjoel/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dderjoel/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dderjoel/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dderjoel/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:dderjoel/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/dderjoel/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/dderjoel/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dderjoel/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/dderjoel/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/dderjoel/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/dderjoel/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/dderjoel/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dderjoel/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/dderjoel/secp256k1/hooks",
        "svn_url": "https://github.com/dderjoel/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 10533,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-04T04:39:45Z",
        "created_at": "2023-03-28T06:31:21Z",
        "updated_at": "2023-03-28T08:05:44Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "65c79fe2d05d05258eb95a9c51a306841c8febf2",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 1043,
        "stargazers_count": 1861,
        "watchers_count": 1861,
        "size": 10661,
        "default_branch": "master",
        "open_issues_count": 138,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-11-16T08:46:20Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-11-16T16:04:25Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 233,
    "deletions": 252,
    "changed_files": 4,
    "commits": 4,
    "review_comments": 14,
    "comments": 17
  },
  "events": [
    {
      "event": "commented",
      "id": 1558512765,
      "node_id": "IC_kwDOAP4Jqs5c5QR9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558512765",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T04:46:30Z",
      "updated_at": "2023-05-23T04:46:30Z",
      "author_association": "NONE",
      "body": "Hi, I think I need some help here, too.\r\nthe first attempt, in 273bda3 used (as per fiat crypto default) the type `__int128`, but this fails on some MSVCs\r\nthe second attempt, in fc926f4 used \"int128.h\", but similarly fails (e.g. `<<` not defined on structs).\r\nand the third attempt in baa416f fails similar as well.\r\n\r\nWould we need to rewrite the code from Fiat Cryptography to use the `secp256k1_u128_mul` and its siblings? But then I believe we \r\n1. end up with the same code that is currently there\r\n2. and we're not guarded by the formal assurances anymore that we would have with the untouched Fiat-C code.",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1558512765",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1558841013,
      "node_id": "IC_kwDOAP4Jqs5c6ga1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558841013",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T08:53:26Z",
      "updated_at": "2023-05-23T08:53:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, yes, that is a problem...\r\n\r\n> Would we need to rewrite the code from Fiat Cryptography to use the `secp256k1_u128_mul` and its siblings?\r\n\r\nYeah, I think so.\r\n> But then I believe we\r\n> \r\n> 1. end up with the same code that is currently there\r\n\r\nWell, that is somewhat expected, no?\r\n \r\n> 2. and we're not guarded by the formal assurances anymore that we would have with the untouched Fiat-C code.\r\n\r\nThe good thing is that our int128 implementation is formally proven correct, too. That means in practice we get meaningful guarantees. However, then things seem to get inelegant, and we need to fiddle a bit. We could translate the code \"manually\". It's probably easy to inspect, but this defeats the idea of using a code generator, at least somewhat. (We'd need to redo this every time we want to update the Fiat-Crypto code... Most likely that doesn't happen very frequently, though.) The most elegant solution will be changes in fiat-crypto, but that means more work on their side. I commented in https://github.com/mit-plv/fiat-crypto/issues/1560 about this.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1558841013",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "unsubscribed",
      "id": 9313815372,
      "node_id": "UE_lADOAP4Jqs5mk_HHzwAAAAIrJYtM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9313815372",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T09:49:55Z"
    },
    {
      "event": "commented",
      "id": 1559663965,
      "node_id": "IC_kwDOAP4Jqs5c9pVd",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1559663965",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T15:25:32Z",
      "updated_at": "2023-05-23T15:25:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Unless I am mistaken, there is no correctness proof for the translation from whatever Fiat Crypto's algorithm representation format is into C code, so mucking about with that translation layer won't lose any formal assurances because there weren't any for that layer to begin with.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1559663965",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1560625842,
      "node_id": "IC_kwDOAP4Jqs5dBUKy",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1560625842",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T07:54:10Z",
      "updated_at": "2023-05-24T07:54:10Z",
      "author_association": "NONE",
      "body": "> Well, that is somewhat expected, no?\r\n\r\nYes, but then I don't see the point adapting in the first place.\r\n\r\nI've just read through https://github.com/mit-plv/fiat-crypto/issues/1560, seems like they are aware of this. I also like Andres's three level approach. Either we'd wait for that (which is the most sensible I believe) or instead of replacing the current implementation, we can add the fiat-c and use it if the compiler supports it, and fall back to the existing one if not.",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1560625842",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T15:12:42Z",
      "updated_at": "2023-06-21T15:12:42Z",
      "source": {
        "issue": {
          "id": 1590206278,
          "node_id": "I_kwDOAoT5bM5eyJ9G",
          "url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1560",
          "repository_url": "https://api.github.com/repos/mit-plv/fiat-crypto",
          "labels_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1560/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1560/comments",
          "events_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1560/events",
          "html_url": "https://github.com/mit-plv/fiat-crypto/issues/1560",
          "number": 1560,
          "state": "open",
          "state_reason": "reopened",
          "title": "Alternative to uint128",
          "body": "The 64-bit fiat-c files rely on uint128, which doesn't work in MSVC. Instead, MSVC has its own intrinsics. (Irritatingly, they're different between x86_64 and aarch64. There's `_umul128` on x86_64 and then `__umulh` on aarch64.)\r\n\r\n@andres-erbsen mentioned the `--split-multiret` exists which would get most of the way there, so if we could regenerate fiat-c with that, then we could probably, at least as a start, just patch out the resulting multiplication intrinsic and see how it works. And then perhaps, from there, figure out how to make the output do it automatically.",
          "user": {
            "login": "davidben",
            "id": 109690,
            "node_id": "MDQ6VXNlcjEwOTY5MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/109690?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidben",
            "html_url": "https://github.com/davidben",
            "followers_url": "https://api.github.com/users/davidben/followers",
            "following_url": "https://api.github.com/users/davidben/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/davidben/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/davidben/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/davidben/subscriptions",
            "organizations_url": "https://api.github.com/users/davidben/orgs",
            "repos_url": "https://api.github.com/users/davidben/repos",
            "events_url": "https://api.github.com/users/davidben/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/davidben/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 62,
          "created_at": "2023-02-18T04:47:41Z",
          "updated_at": "2023-07-27T17:48:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9929875116,
      "node_id": "HRFPE_lADOAP4Jqs5mk_HHzwAAAAJP3d6s",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9929875116",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T00:07:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9930073285,
      "node_id": "HRFPE_lADOAP4Jqs5mk_HHzwAAAAJP4OTF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9930073285",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T00:41:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9930081952,
      "node_id": "HRFPE_lADOAP4Jqs5mk_HHzwAAAAJP4Qag",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9930081952",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T00:43:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9930161497,
      "node_id": "HRFPE_lADOAP4Jqs5mk_HHzwAAAAJP4j1Z",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9930161497",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T01:00:13Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdjNjdkMzQ0MjM1NDU5MjIxZGU5ZjIxZWQ1MDVmYTgzZGQxNDBmN2E",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7c67d344235459221de9f21ed505fa83dd140f7a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7c67d344235459221de9f21ed505fa83dd140f7a",
      "tree": {
        "sha": "a75e29fbe8c8e183b0bbb8b52f550f3012484d45",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a75e29fbe8c8e183b0bbb8b52f550f3012484d45"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0e00fc7d10af4035cb22749c6f9a8973eeb87f7d",
          "sha": "0e00fc7d10af4035cb22749c6f9a8973eeb87f7d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0e00fc7d10af4035cb22749c6f9a8973eeb87f7d"
        }
      ],
      "message": "replace current field arith with fiat arithmetic",
      "committer": {
        "name": "Joel",
        "email": "rootjdev@gmail.com",
        "date": "2023-07-27T01:07:47Z"
      },
      "author": {
        "name": "Joel",
        "email": "rootjdev@gmail.com",
        "date": "2023-07-27T00:07:12Z"
      },
      "sha": "7c67d344235459221de9f21ed505fa83dd140f7a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9930194668,
      "node_id": "HRFPE_lADOAP4Jqs5mk_HHzwAAAAJP4r7s",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9930194668",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T01:07:57Z"
    },
    {
      "event": "reviewed",
      "id": 1549209180,
      "node_id": "PRR_kwDOAP4Jqs5cVw5c",
      "url": null,
      "actor": null,
      "commit_id": "7c67d344235459221de9f21ed505fa83dd140f7a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "One interesting point here is the discussion starting in https://github.com/mit-plv/fiat-crypto/issues/1560#issuecomment-1652124172.\r\n\r\nThe wrappers you add here return and take structs. I think there's, in general, no problem with this, it's just our (historical and possibly performance-guided) coding style to always structs by pointer. But as @roconnor-blockstream points out, passing or returning structs by value is incompatible with VST.  As long as we use these wrappers only in this file, this seems perfectly fine to me. (And we may still reconsider this if @roconnor-blockstream wants to prove the entire codebase correct and is close to finishing this. :wink:)\r\n\r\nedit:  @sipa @jonasnick It will be good to hear your opinion on this before @dderjoel and others start to dig deeper.   \r\n\r\n---\r\n\r\nCode comments:\r\n\r\n - I think it will be better to add a real uint128 function for `u128_add_u128_u128` (which can use pointers). The current wrapper you propose here is a bit inelegant and probably hurts performance. Are you willing to give it a try, or should we come up with something?\r\n - The wrappers should probably moved above the `/* Autogerated` part. \r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#pullrequestreview-1549209180",
      "submitted_at": "2023-07-27T07:59:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
    },
    {
      "event": "commented",
      "id": 1653882301,
      "node_id": "IC_kwDOAP4Jqs5ilD29",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1653882301",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T15:46:19Z",
      "updated_at": "2023-07-27T16:04:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "It was my intention on proving the field, then group operations correct after finishing (one of) the modular inverse implementation.\r\n\r\nI think performance should probably be the primary concern.  However if correctness is the main motivation for this PR, then things get debatable.  Each approach to formal correctness comes with a boatload of their own caveats.\r\n\r\nP.S.  If it makes a difference I could expedite my proof of correctness of the field operations.  Certainly this code is far easier to reason about than the modular inverse code, and could be completed much quicker.  Still the various caveats remain.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1653882301",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "labeled",
      "id": 9937634280,
      "node_id": "LE_lADOAP4Jqs5mk_HHzwAAAAJQVEPo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9937634280",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T15:54:17Z",
      "label": {
        "name": "assurance",
        "color": "A6DF3D"
      }
    },
    {
      "event": "labeled",
      "id": 9937635366,
      "node_id": "LE_lADOAP4Jqs5mk_HHzwAAAAJQVEgm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9937635366",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T15:54:23Z",
      "label": {
        "name": "next-meeting",
        "color": "B1A0FE"
      }
    },
    {
      "event": "commented",
      "id": 1653903198,
      "node_id": "IC_kwDOAP4Jqs5ilI9e",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1653903198",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T15:56:56Z",
      "updated_at": "2023-07-27T15:56:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think we should discuss this in the next IRC meeting on Monday. (I created a \"next-meeting\" tag for convenience.)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1653903198",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1653919513,
      "node_id": "IC_kwDOAP4Jqs5ilM8Z",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1653919513",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T16:06:52Z",
      "updated_at": "2023-07-27T16:06:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think performance should probably be the primary concern. However if correctness is the main motivation for this PR, then things get debatable.\r\n\r\nIdeally, this PR should not affect performance, as the algorithm should be ours (modulo some low-level C details). So the primary concern here is indeed correctness (if you ask me).\r\n\r\nWhat would improve performance is cryptopt asm, which requires fiat-crypto. In principle, we could add the asm without updating the C code. (We felt it's better to update the C code first, see https://github.com/bitcoin-core/secp256k1/issues/1261, but this could be reconsidered...)\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1653919513",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1653919615,
      "node_id": "IC_kwDOAP4Jqs5ilM9_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1653919615",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-27T16:06:56Z",
      "updated_at": "2023-07-27T16:07:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sure thing.  I was really hoping we'd land at a place where we could do both.  https://github.com/mit-plv/fiat-crypto/issues/1560#issuecomment-1652241177 mentions some bedrock2 thing which sounds like we  might eventually get there, but not today.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1653919615",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGNjNzQxZjM4ZDNiZjM2ZjdiYTJkZGIxZWFkOTljNmEwMGRkOGUyNjU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cc741f38d3bf36f7ba2ddb1ead99c6a00dd8e265",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cc741f38d3bf36f7ba2ddb1ead99c6a00dd8e265",
      "tree": {
        "sha": "1d7c9a4ef0340c45d3e60e1601d7920e9ac38a26",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1d7c9a4ef0340c45d3e60e1601d7920e9ac38a26"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7c67d344235459221de9f21ed505fa83dd140f7a",
          "sha": "7c67d344235459221de9f21ed505fa83dd140f7a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7c67d344235459221de9f21ed505fa83dd140f7a"
        }
      ],
      "message": "moved u128+u128 to int128.h",
      "committer": {
        "name": "Joel",
        "email": "rootjdev@gmail.com",
        "date": "2023-07-28T00:06:17Z"
      },
      "author": {
        "name": "Joel",
        "email": "rootjdev@gmail.com",
        "date": "2023-07-27T23:56:40Z"
      },
      "sha": "cc741f38d3bf36f7ba2ddb1ead99c6a00dd8e265"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGUzYWZmYTE0M2Y1MTBlNDVkMWUyM2Y3MWMwYjhjMTFjMDMwNjgwYWM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "tree": {
        "sha": "326e3a690455bb180a57d8795e69b22e18b4fddf",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/326e3a690455bb180a57d8795e69b22e18b4fddf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cc741f38d3bf36f7ba2ddb1ead99c6a00dd8e265",
          "sha": "cc741f38d3bf36f7ba2ddb1ead99c6a00dd8e265",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cc741f38d3bf36f7ba2ddb1ead99c6a00dd8e265"
        }
      ],
      "message": "chore: reorderd functions, beautified comment",
      "committer": {
        "name": "Joel",
        "email": "rootjdev@gmail.com",
        "date": "2023-07-28T00:06:20Z"
      },
      "author": {
        "name": "Joel",
        "email": "rootjdev@gmail.com",
        "date": "2023-07-27T23:57:13Z"
      },
      "sha": "e3affa143f510e45d1e23f71c0b8c11c030680ac"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9941976190,
      "node_id": "HRFPE_lADOAP4Jqs5mk_HHzwAAAAJQloR-",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9941976190",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T00:06:52Z"
    },
    {
      "event": "commented",
      "id": 1654830282,
      "node_id": "IC_kwDOAP4Jqs5iorTK",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1654830282",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T01:11:56Z",
      "updated_at": "2023-07-28T01:11:56Z",
      "author_association": "NONE",
      "body": "I've incorporated the changes:\r\n- moved `u128_add_u128_u128` with pointers to `int128.h` and implemented `native` and `struct`\r\n- moved the wrappers above the autogenerated comment\r\n\r\nI've also ran my benchmark suite (secp_bench) on my 10 machines. With Clang and GCC, with defaults and `-O3 -mtune=native -march=native`\r\n\r\n## Clang `-O3 -mtune=native -march=native`\r\n|      implementation |    default_asm |      default_c |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |        15.4785 |        15.1864 |        14.9061 |        13.9127 |\r\n|        ecmult_const |        29.3045 |        28.0044 |        27.2884 |        26.4647 |\r\n|           ecmult_1p |        23.2979 |        21.9812 |        21.5529 |        20.9758 |\r\n|         ecmult_0p_g |        16.9407 |          15.72 |        15.4955 |        15.3359 |\r\n|         ecmult_1p_g |        13.6274 |        12.8632 |        12.6361 |        12.2814 |\r\n|          field_half |     0.00518161 |     0.00510187 |     0.00493484 |     0.00512773 |\r\n|     field_normalize |      0.0047701 |     0.00483506 |      0.0047308 |     0.00475533 |\r\n|field_normalize_weak |     0.00283401 |     0.00282353 |      0.0028121 |     0.00286139 |\r\n|           field_sqr |      0.0136218 |      0.0141461 |      0.0138296 |      0.0119747 |\r\n|           field_mul |       0.017029 |      0.0167826 |       0.016331 |       0.014328 |\r\n|       field_inverse |        1.51311 |         1.5147 |        1.64789 |        1.64148 |\r\n|   field_inverse_var |       0.921765 |       0.918659 |       0.924158 |       0.924338 |\r\n| field_is_square_var |        1.21284 |        1.21378 |        1.22373 |        1.22978 |\r\n|          field_sqrt |        3.81394 |        3.11671 |        3.79821 |        3.41099 |\r\n\r\n## GCC `-O3 -mtune=native -march=native`\r\n|      implementation |    default_asm |      default_c |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |        16.7344 |        16.2269 |        15.7203 |        14.9838 |\r\n|        ecmult_const |        31.0237 |        29.2068 |        29.1693 |        27.2251 |\r\n|           ecmult_1p |        24.5181 |        23.3218 |        22.5183 |        21.2852 |\r\n|         ecmult_0p_g |        17.5664 |         16.801 |        16.2549 |        15.3251 |\r\n|         ecmult_1p_g |        14.3227 |        13.5419 |        13.1658 |        12.4306 |\r\n|          field_half |     0.00260505 |      0.0024295 |       0.002416 |     0.00248083 |\r\n|     field_normalize |     0.00717501 |     0.00694626 |     0.00684726 |      0.0070481 |\r\n|field_normalize_weak |     0.00302477 |     0.00293117 |     0.00286769 |     0.00298777 |\r\n|           field_sqr |      0.0143681 |       0.012288 |      0.0163989 |       0.012114 |\r\n|           field_mul |      0.0176796 |       0.014202 |      0.0178385 |       0.014767 |\r\n|       field_inverse |        1.45613 |        1.44189 |        1.60521 |        1.66405 |\r\n|   field_inverse_var |       0.905133 |        0.87939 |       0.867982 |       0.893649 |\r\n| field_is_square_var |        1.26129 |        1.21327 |        1.20329 |        1.23029 |\r\n|          field_sqrt |        3.94966 |        3.52407 |        4.29576 |        3.41179 |\r\n\r\n\r\n## Clang default\r\n|      implementation |    default_asm |      default_c |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |        14.5922 |        14.8619 |        15.2704 |        13.0178 |\r\n|        ecmult_const |        28.9864 |        29.0937 |        30.0857 |        25.7223 |\r\n|           ecmult_1p |        22.7649 |        22.5667 |        23.2965 |        20.3805 |\r\n|         ecmult_0p_g |        16.5215 |        16.1956 |        16.8933 |        14.6744 |\r\n|         ecmult_1p_g |        13.3438 |        13.1968 |        13.6445 |        11.9628 |\r\n|          field_half |     0.00268292 |     0.00246003 |     0.00239556 |     0.00242083 |\r\n|     field_normalize |     0.00700584 |     0.00699441 |       0.006914 |     0.00695979 |\r\n|field_normalize_weak |     0.00282523 |     0.00282798 |     0.00280225 |     0.00281053 |\r\n|           field_sqr |      0.0137319 |      0.0128169 |      0.0146826 |      0.0119927 |\r\n|           field_mul |      0.0171099 |      0.0166114 |       0.017404 |      0.0142171 |\r\n|       field_inverse |        1.44857 |        1.44306 |        1.61719 |        1.61457 |\r\n|   field_inverse_var |       0.965295 |       0.963569 |       0.957785 |       0.960852 |\r\n| field_is_square_var |        1.26972 |         1.2628 |        1.26665 |        1.26727 |\r\n|          field_sqrt |        3.77267 |        3.51891 |        4.02258 |        3.33573 |\r\n\r\n\r\n## GCC with default\r\n\r\n|      implementation |    default_asm |      default_c |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |        15.9837 |        14.9299 |        14.9616 |        14.4035 |\r\n|        ecmult_const |        30.1929 |        28.1791 |        28.0992 |        26.7815 |\r\n|           ecmult_1p |        23.8301 |        21.9197 |         21.971 |        20.8491 |\r\n|         ecmult_0p_g |        16.8746 |        15.8356 |        15.8409 |        14.9011 |\r\n|         ecmult_1p_g |        13.9126 |        12.8102 |        12.8655 |        12.1725 |\r\n|          field_half |     0.00263405 |     0.00241618 |     0.00236633 |     0.00249735 |\r\n|     field_normalize |     0.00737182 |     0.00743337 |     0.00731607 |     0.00734032 |\r\n|field_normalize_weak |     0.00293929 |      0.0029294 |     0.00290844 |     0.00289157 |\r\n|           field_sqr |      0.0140036 |      0.0125453 |      0.0122373 |      0.0120457 |\r\n|           field_mul |      0.0169176 |      0.0143035 |      0.0148859 |      0.0143003 |\r\n|       field_inverse |        1.39951 |        1.39713 |        1.61788 |        1.61036 |\r\n|   field_inverse_var |       0.911792 |       0.912018 |       0.908337 |       0.907321 |\r\n| field_is_square_var |        1.19553 |        1.20238 |        1.18607 |        1.19135 |\r\n|          field_sqrt |        3.86876 |        3.56773 |        3.46217 |        3.36305 |\r\n\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1654830282",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1655003765,
      "node_id": "IC_kwDOAP4Jqs5ipVp1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1655003765",
      "actor": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T04:55:16Z",
      "updated_at": "2023-07-28T04:55:16Z",
      "author_association": "NONE",
      "body": "> I think performance should probably be the primary concern. However if correctness is the main motivation for this PR, then things get debatable. Each approach to formal correctness comes with a boatload of their own caveats.\r\n\r\nI just want to let you know that I'd be more than happy to explain the good/bad/ugly of what we fiat-crypto proofs are about in detail, if this would be of interest to the maintainers. Evaluating verification techniques can indeed be subtle, and I would try to be as unbiased of a resource as I can.\r\n\r\nIn short, fiat-crypto proofs about field arithmetic cover limb representation and modular-reduction algorithm, correct determination of bit-sizes of intermediate values (no unexpected overflow / lost carries), and low-level arithmetic optimization. The last verified format of code fiat-crypto-to-C translation is arithmetic operators with truncating casts `r` encoding desired value ranges of C types to be used for intermediates, as they appear on the left-hand sides of [this match statement](https://github.com/mit-plv/fiat-crypto/blob/master/src/Stringification/IR.v#L722-L786). Translating word arithmetic in fiat-crypto to word arithmetic in C is not covered by the proofs, and loading of the inputs and storing of the outputs isn't either. The latter is easy to inspect, but the former can be subtle due to integer promotion and other type-based arithmetic. These aspects *are* [modeled](https://github.com/mit-plv/fiat-crypto/blob/7b43573cb053c0f99bff761ca8fb1021bf1cd123/src/Stringification/C.v#L344-L579) in fiat cryptography, and the C-code generation explicitly [considers](https://github.com/mit-plv/fiat-crypto/blob/7b43573cb053c0f99bff761ca8fb1021bf1cd123/src/Stringification/C.v#L497-L504) that model, but in the end we are taking on faith that clang and gcc follow the same rules as encoded in our model. This same assumption would be present even if the last translation was verified against a semantics of C, as that semantics would refer to the same (or very similar) arithmetic rules. Every seriously-exercised formal model of C I have used or built has had corner cases where it didn't cover the behavior of some popular C compiler. That said, larger-than-int unsigned-integer arithmetic is as simple as C semantics get. For reviewing the generated code, it may also be helpful to consider how the same arithmetic was expressed in a different language such as [Zig](https://github.com/mit-plv/fiat-crypto/blob/master/fiat-zig/src/secp256k1_dettman_64.zig).\r\n\r\nThe main goal of the ongoing fiat-crypto-bedrock2 integration is to enable computer-checked integration proofs of generated field-arithmetic code, underlying polyfills, elliptic-curve algorithms, and application code above. In other words, we are looking to ensure that one proven layer of the cryptographic implementation does not make incompatible assumptions about another layer; we are working to avoid broken integration of individually proven components. Having a slightly lower-level language between fiat-crypto and C is a side benefit from our perspective. Similarly, pretty-printing (in bedrock2) and parsing (in CompCert before VST) do not represent a significant difference in our key considerations for semantic correctness; we chose pretty-printing to alleviate the user-experience concerns around ruling out common but poorly understood features of C that would be hard to model soundly. (The status of this work is that we have an x25519 implementation and some more proven and under submission, but not all performance-hurting shortcuts have been removed yet.)",
      "user": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1655003765",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "renamed",
      "id": 9945775601,
      "node_id": "RTE_lADOAP4Jqs5mk_HHzwAAAAJQ0H3x",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9945775601",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T09:03:05Z",
      "rename": {
        "from": "Update the 64-bit C field implementations ",
        "to": "Replace the 64-bit C field implementation by fiat-crypto output "
      }
    },
    {
      "event": "commented",
      "id": 1655327590,
      "node_id": "IC_kwDOAP4Jqs5iqktm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1655327590",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T09:04:24Z",
      "updated_at": "2023-07-28T09:04:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "If anyone wants to look at the compiler output of e3affa143f510e45d1e23f71c0b8c11c030680ac vs master:  https://godbolt.org/z/fPTafdqd8",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1655327590",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1655787737,
      "node_id": "IC_kwDOAP4Jqs5isVDZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1655787737",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T14:28:33Z",
      "updated_at": "2023-07-28T15:07:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Here are my notes on the topic of caveats of formal proofs:\r\n\r\n## Regarding using VST\r\n\r\n* The C-lightgen program to convert C to Coq is proprietary and requires a license to use.  So this step of the proof cannot easily be independently checked by the community.  At best we can distribute the output of C-lightgen.\r\n  + Currently Blockstream is paying to use C-lightgen for Simplicity, and thus only those aspects of [libsecp256k1](https://github.com/BlockstreamResearch/simplicity/tree/master/C/secp256k1) (the validation side of the library) are available for us to run C-lightgen on.\r\n\r\n* VST only proves the correctness with respect to the (non-free) CompCert compiler and makes no guarantees about GCC or Clang or any other compiler.\r\n  + Furthermore each VST proof only applies to one of either the 32-bit or 64-bit versions of Compcert.\r\n  + VST does provide a best-effort job to disallow signed integer overflow, but makes no formal guarantees about whether it achieves this or not (e.g. see [No check for signed overflow in some cases. · Issue #561 · PrincetonUniversity/VST](https://github.com/PrincetonUniversity/VST/issues/561))\r\n\r\n* VST specifications do not cover termination.  In other words, only partial correctness is verified.\r\n\r\n* VST is restricted to a subset of C that doesn’t use structures directly as values, i.e. no assignment or passing by copy to functions or returning them from functions.\r\n  + Other restrictions also apply, such as no Duff's Device and no longjmps.\r\n\r\n* To first-order approximation, I would end up as the sole maintainer of any VST proofs.\r\n\r\n## Regarding using Fiat-Crypto\r\n\r\nI’m less familiar with Fiat-Crypto, so the following caveats are only to the best of my knowledge.  @andres-erbsen has written more on this topic above.\r\n\r\n* The generated C code is translated from a proven correct algorithm (that terminates) but makes no formal guarantees about the resulting C code at all, no matter what compiler it is compiled on.\r\n\r\n* The proofs cannot be extended beyond what Fiat-Crypto generates, whereas VST can, in principle, reason about the full libsecp256k1 library in a fully integrated manner (no need to translate specifications between various proof systems.)\r\n\r\n## Miscellaneous \r\n\r\nNeither system makes any guarantees about constant-timedness, and arguably it is impossible to make any such statements about C code anyways.\r\n\r\nIdeally we’d have Fiat-Crypto generate C code that operates within VST’s limitations, however that seem to require an unknown amount of work on the Fiat-Crypto side, with some hints that sometime in the future it might be doable with bedrock2.\r\n\r\nIf we want to go on beyond the field code and prove the group code correct, or the multi-exponentiation with VST, we either need to machine generate the specifications of the field code functions, or generate the specifications by hand.  Either way, the correctness of the VST proof of the code would only be correct upto the correctness of the specifications of any non-VST compatible Fiat-Crypto generated code.  Whereas if everything were done in VST, then we would have correctness all the way to the bottom (subject to VST’s own caveats).",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1655787737",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "mentioned",
      "id": 9948783712,
      "node_id": "MEE_lADOAP4Jqs5mk_HHzwAAAAJQ_mRg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9948783712",
      "actor": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T14:28:33Z"
    },
    {
      "event": "subscribed",
      "id": 9948783721,
      "node_id": "SE_lADOAP4Jqs5mk_HHzwAAAAJQ_mRp",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9948783721",
      "actor": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T14:28:33Z"
    },
    {
      "event": "commented",
      "id": 1655913793,
      "node_id": "IC_kwDOAP4Jqs5isz1B",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1655913793",
      "actor": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T15:49:13Z",
      "updated_at": "2023-07-28T16:08:00Z",
      "author_association": "NONE",
      "body": "@roconnor-blockstream thank you for the overview. FWIW, I think we are trying to communicate very similar perspectives about current state of the tooling, though with different words.\r\n\r\nAs for grand plans for future proofs, I would like to discuss them more, but perhaps outside this thread? I think we are pursuing quite similar directions and one would hope that we would be able to do something to minimize duplication of effort. In particular, ongoing work is also [proving](https://github.com/mit-plv/fiat-crypto/blob/be2bfa67d9eda9fc86bc1ad94bfa696ce476a1fc/src/Bedrock/End2End/X25519/AddPrecomputed.v#L52) elliptic-[curve code](https://github.com/mit-plv/fiat-crypto/blob/be2bfa67d9eda9fc86bc1ad94bfa696ce476a1fc/src/Bedrock/End2End/X25519/MontgomeryLadder.v#L178-L195) and its [use cases](https://github.com/mit-plv/fiat-crypto/blob/be2bfa67d9eda9fc86bc1ad94bfa696ce476a1fc/src/Bedrock/End2End/X25519/GarageDoorTop.v#L42-L58) on top of fiat-crypto using bedrock2 (and we are connecting the proofs in Coq using the fiat-crypto field-arithmetic specifications). Instead of proving the same code twice using different tools, I am guessing that our time would be better spent increasing proof coverage throughout the codebase, connecting between different toolchains informally at simple interfaces as needed. I am saying this partly because I believe bedrock2 C is even further semantically diverged from CompCert C ([details in §2.4;2.5](http://adam.chlipala.net/theses/andreser.pdf)) than the fiat-crypto output here, but also I think it's just a good idea regardless. Or perhaps there's an even better strategy, but more coordination seems desirable either way.",
      "user": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1655913793",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "mentioned",
      "id": 9949658021,
      "node_id": "MEE_lADOAP4Jqs5mk_HHzwAAAAJRC7ul",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9949658021",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T15:49:14Z"
    },
    {
      "event": "subscribed",
      "id": 9949658041,
      "node_id": "SE_lADOAP4Jqs5mk_HHzwAAAAJRC7u5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9949658041",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T15:49:14Z"
    },
    {
      "event": "commented",
      "id": 1655966672,
      "node_id": "IC_kwDOAP4Jqs5itAvQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1655966672",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T16:25:42Z",
      "updated_at": "2023-07-28T16:25:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ooph!  Sounds like hypothetical bedrock2 generated C would end up containing a lot of `uintptr_t` to pointer casts.  I wonder how libsecp256k1 maintainers would feel about that?  Sure technically it is all fine ... but for some reason I feel uneasy about it.\r\n\r\nBut yeah, I guess the hypothetical bedrock2 generated C is likely even worse with respect to also facilitating VST proofs.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1655966672",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1656029688,
      "node_id": "IC_kwDOAP4Jqs5itQH4",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1656029688",
      "actor": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-28T17:10:01Z",
      "updated_at": "2023-07-28T17:10:01Z",
      "author_association": "NONE",
      "body": "Yeah, I'm bitter about the `uintptr_t` casts too; you can see some checked-in output [here](https://github.com/andres-erbsen/fiat-crypto/blob/master/fiat-bedrock2/src/poly1305_64.c#L332-L351). I'd love to have neater output, but it is unclear whether it would be even feasible to accurately formalize the cases of pointer-manipulation semantics where standard C threatens undefined behavior even though VST & CompCert assume that something reasonable happens.\r\n\r\nDo you think https://github.com/bitcoin-core/secp256k1/issues/181 would be a good place to continue this discussion, or shall we create a new issue?",
      "user": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1656029688",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "commented",
      "id": 1656593371,
      "node_id": "IC_kwDOAP4Jqs5ivZvb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1656593371",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-29T08:15:29Z",
      "updated_at": "2023-07-29T08:15:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "\r\n> Do you think #181 would be a good place to continue this discussion, or shall we create a new issue?\r\n\r\nSure, that works. (I'd love to have the ability to move comments/threads into other issues...) ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1656593371",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "reviewed",
      "id": 1555270374,
      "node_id": "PRR_kwDOAP4Jqs5cs4rm",
      "url": null,
      "actor": null,
      "commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#pullrequestreview-1555270374",
      "submitted_at": "2023-07-31T16:23:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-31T19:23:19Z",
      "updated_at": "2023-07-31T19:23:19Z",
      "source": {
        "issue": {
          "id": 1829870065,
          "node_id": "I_kwDOAoT5bM5tEZnx",
          "url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1629",
          "repository_url": "https://api.github.com/repos/mit-plv/fiat-crypto",
          "labels_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1629/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1629/comments",
          "events_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1629/events",
          "html_url": "https://github.com/mit-plv/fiat-crypto/issues/1629",
          "number": 1629,
          "state": "open",
          "state_reason": null,
          "title": "Consider libsecp256k1 \"magnitude\" semantics instead of tight and loose bounds",
          "body": "Looks like libsecpk25k1 has a generalization of our tight_bounds and loose_bounds. We might benefit from adopting something similar.\r\n\r\nhttps://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279564533\r\nhttps://github.com/bitcoin-core/secp256k1/blob/26392da2fb7153addae0bd604495eb96f995d76c/src/field_5x52.h#L24-L26",
          "user": {
            "login": "andres-erbsen",
            "id": 918403,
            "node_id": "MDQ6VXNlcjkxODQwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andres-erbsen",
            "html_url": "https://github.com/andres-erbsen",
            "followers_url": "https://api.github.com/users/andres-erbsen/followers",
            "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
            "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
            "repos_url": "https://api.github.com/users/andres-erbsen/repos",
            "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 0,
          "created_at": "2023-07-31T19:23:19Z",
          "updated_at": "2023-07-31T19:23:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-31T21:06:40Z",
      "updated_at": "2023-07-31T21:06:40Z",
      "source": {
        "issue": {
          "id": 1830027065,
          "node_id": "PR_kwDOAoT5bM5W2C9m",
          "url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1630",
          "repository_url": "https://api.github.com/repos/mit-plv/fiat-crypto",
          "labels_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1630/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1630/comments",
          "events_url": "https://api.github.com/repos/mit-plv/fiat-crypto/issues/1630/events",
          "html_url": "https://github.com/mit-plv/fiat-crypto/pull/1630",
          "number": 1630,
          "state": "open",
          "state_reason": null,
          "title": "default to magnitude 8->1 in Dettman multiplication",
          "body": "See https://github.com/bitcoin-core/secp256k1/pull/1319#pullrequestreview-1555270374 and https://github.com/bitcoin-core/secp256k1/blob/26392da2fb7153addae0bd604495eb96f995d76c/src/field_impl.h#L329-L334",
          "user": {
            "login": "andres-erbsen",
            "id": 918403,
            "node_id": "MDQ6VXNlcjkxODQwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andres-erbsen",
            "html_url": "https://github.com/andres-erbsen",
            "followers_url": "https://api.github.com/users/andres-erbsen/followers",
            "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
            "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
            "repos_url": "https://api.github.com/users/andres-erbsen/repos",
            "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/mit-plv/fiat-crypto/pulls/1630",
            "html_url": "https://github.com/mit-plv/fiat-crypto/pull/1630",
            "diff_url": "https://github.com/mit-plv/fiat-crypto/pull/1630.diff",
            "patch_url": "https://github.com/mit-plv/fiat-crypto/pull/1630.patch"
          },
          "created_at": "2023-07-31T21:06:39Z",
          "updated_at": "2023-08-09T16:29:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1555788924,
      "node_id": "PRR_kwDOAP4Jqs5cu3R8",
      "url": null,
      "actor": null,
      "commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#pullrequestreview-1555788924",
      "submitted_at": "2023-07-31T21:15:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-08T00:45:43Z",
      "updated_at": "2023-08-08T00:45:43Z",
      "source": {
        "issue": {
          "id": 1725091020,
          "node_id": "PR_kwDOAP4Jqs5RTmtB",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1329",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1329/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1329/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1329/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1329",
          "number": 1329,
          "state": "open",
          "state_reason": null,
          "title": "Replace ASM with CryptOpt generated",
          "body": "In this PR the auto detection of  x86_64 is removed and the configure file will default to the C implementation.\r\nFurther, if asm has explicitly been requested with `--with-asm=x86_64`, \r\nthe `selfcheck` method check by calling the `cpuid` instruction, if the flags `BMI2` (bit 8) and `ADX` (bit 19) are set, and will exit early, if not. \r\n",
          "user": {
            "login": "dderjoel",
            "id": 13455345,
            "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
            "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dderjoel",
            "html_url": "https://github.com/dderjoel",
            "followers_url": "https://api.github.com/users/dderjoel/followers",
            "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
            "organizations_url": "https://api.github.com/users/dderjoel/orgs",
            "repos_url": "https://api.github.com/users/dderjoel/repos",
            "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dderjoel/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 165017692,
              "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
              "name": "assurance",
              "description": "",
              "color": "A6DF3D",
              "default": false
            },
            {
              "id": 4975389731,
              "node_id": "LA_kwDOAP4Jqs8AAAABKI5sIw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/performance",
              "name": "performance",
              "description": "",
              "color": "DE3CCC",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1329",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1329",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1329.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1329.patch"
          },
          "created_at": "2023-05-25T05:02:29Z",
          "updated_at": "2023-09-04T04:39:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDMyNjMyOWJhMWRiNWQ5NTA3OTI5MDgwNWE2ODk4NzA4NTE5NWFhNjc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/326329ba1db5d95079290805a68987085195aa67",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/326329ba1db5d95079290805a68987085195aa67",
      "tree": {
        "sha": "19299828047a71d14497cdd41f0035fae733f474",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/19299828047a71d14497cdd41f0035fae733f474"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 19299828047a71d14497cdd41f0035fae733f474\nparent e3affa143f510e45d1e23f71c0b8c11c030680ac\nparent 65c79fe2d05d05258eb95a9c51a306841c8febf2\nauthor Joel <dderjoel@users.noreply.github.com> 1693802330 +0930\ncommitter GitHub <noreply@github.com> 1693802330 +0930\n\nMerge branch 'bitcoin-core:master' into only-c\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJk9V9aCRBK7hj4Ov3rIwAAoC8IABD5NGzbiCvdnyi9Ft3yodhH\nkFhnNbX3zYV4gi+Og3b5otkGQ+b6IVU0WQWQ8VneIBZ4uBPrOsPUz3dhOo8R3UsN\n1cIIkcpcifZs3RICxBfvH69ITHcBhcHxmf5OHtp4SgyjVHHzJ2xA1E/GLh94FK6S\nfjxaodrKHJuVM7CTjM3QwE5+081/0WcpoY2+6LPXnXw2yQFZ4Avx62RJ8OlvhU6c\nbG6OGgl11TIZCao7WKZFutfQ03f5Jac9YN1zYM5lB+rNlm+7LEsHqI8VUmmq/FiB\nl1PfoTP8HTmp3DJ4IBwuqvZqKN3VIM9PfiAClImH9AtrTU/ie4xBYVQz5mAsHzE=\n=HFfD\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e3affa143f510e45d1e23f71c0b8c11c030680ac",
          "sha": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e3affa143f510e45d1e23f71c0b8c11c030680ac"
        },
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/65c79fe2d05d05258eb95a9c51a306841c8febf2",
          "sha": "65c79fe2d05d05258eb95a9c51a306841c8febf2",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/65c79fe2d05d05258eb95a9c51a306841c8febf2"
        }
      ],
      "message": "Merge branch 'bitcoin-core:master' into only-c",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2023-09-04T04:38:50Z"
      },
      "author": {
        "name": "Joel",
        "email": "dderjoel@users.noreply.github.com",
        "date": "2023-09-04T04:38:50Z"
      },
      "sha": "326329ba1db5d95079290805a68987085195aa67"
    },
    {
      "event": "unlabeled",
      "id": 10631822965,
      "node_id": "UNLE_lADOAP4Jqs5mk_HHzwAAAAJ5tL51",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/10631822965",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-12T13:42:00Z",
      "label": {
        "name": "next-meeting",
        "color": "B1A0FE"
      }
    },
    {
      "event": "commented",
      "id": 1821834018,
      "node_id": "IC_kwDOAP4Jqs5slvsi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1821834018",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-21T23:02:09Z",
      "updated_at": "2023-11-22T14:19:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've finished the correctness proofs in VST of `secp256k1_fe_mul_inner` and `secp256k1_fe_sqr_inner`.  You can find the rendered proof at <https://htmlpreview.github.io/?https://github.com/ElementsProject/simplicity/blob/verif_field_5x52_int128_impl_0/alectryon/verif_field_5x52_int128_impl.v.html>.\r\n\r\nThe proof itself is probably not all that interesting beyond the fact of its existence.  You can step through it if you like and watch the Hoare clauses evolve as it is progresses through the C implementation.  The proof also covers all the VERIFY_CHECK statements.  I've also taken the liberty of applying #1438 and #1442, presuming that they will be merged, though the proof script itself works even without these PR applied.\r\n\r\nThe more relevant bit is the formal specification of the functions that the proofs relate to.  These are `secp256k1_fe_mul_inner_spec` and `secp256k1_fe_sqr_inner_spec` which have rendered versions at <https://htmlpreview.github.io/?https://github.com/ElementsProject/simplicity/blob/verif_field_5x52_int128_impl_0/alectryon/spec_field_5x52.v.html>.\r\n\r\nThese specifications are written in the formal separation logic language of VST.  These specification are made somewhat complicated by needing to support the fact that the `r` parameter may or may not alias the `a` parameter.  To that end, I've written \"sub-specifications\" `secp256k1_fe_mul_inner_spec_restrict` and `secp256k1_fe_mul_inner_spec_alias` which provided somewhat simpler specification for the specific cases where `r` does not/does alias `a`.  These sub-specifications can be found in the same file, along with the proofs that these are indeed sub-specifications of the formal specification.\r\n\r\nI'm happy to go over these specification in this thread here, or perhaps at the next IRC meeting, or more generally discuss the future of this PR.\r\n\r\nThe last meeting where this topic was discussed was <https://gnusha.org/secp256k1/2023-07-31.log>, and the formalization of these two functions is me addressing the comment\r\n\r\n    < real_or_random> I mean it would certainly be interesting to compare the VST efforts for the field code to fiat\r\n\r\nwhich we can now do.\r\n\r\nIt's been 17 weeks since the last meeting, which means I worked a little bit less than 17 days on the effort.  Let's call it three weeks of work. (Edit: I didn't start working on it right away, so maybe closer to two weeks of work.)\r\n\r\nAs for this PR; my personal preference is to close it.  With this VST proof in hand we have comparable assurance to what the fiat-crypto code gives us, but in a way that can let us proof the (functional) correctness of subsequent functions. At some point in time, if VST ever supports passing/returning structs, or fiat-crypto is able to generate VST compatible C code, or we get some other formal system able to practically reason about arbitrary C code, we can revisit the inclusion of the fiat-crypto code.\r\n\r\nHowever, whether or not to close this PR is certainly debatable, and we can discuss the issue here and/or at the next IRC meeting.  I am not the decider.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#issuecomment-1821834018",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1319"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-22T14:22:51Z",
      "updated_at": "2023-11-22T14:22:51Z",
      "source": {
        "issue": {
          "id": 53981474,
          "node_id": "MDU6SXNzdWU1Mzk4MTQ3NA==",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/181",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/181/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/181/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/181/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/181",
          "number": 181,
          "state": "open",
          "state_reason": null,
          "title": "Formal methods progress",
          "body": "So far we have manually checkable proofs for the field mul and square inner loops, and machine verification (via frama-c) of overflow-freeness for 10x26 (5x52 requires hacking on frama-c to get a 128 bit type into it.)\n\nI believe know how to machine check the field and scalar in a reasonable amount of time, but not straight from the C; so the effort would be one-time and rot, and I'm not sure it's worth the time.\n\nThere may be other areas of the code that are good targets for formal methods. I'd hoped previously to get some researchers working in this space interested; but so far no luck.\n",
          "user": {
            "login": "gmaxwell",
            "id": 858454,
            "node_id": "MDQ6VXNlcjg1ODQ1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmaxwell",
            "html_url": "https://github.com/gmaxwell",
            "followers_url": "https://api.github.com/users/gmaxwell/followers",
            "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
            "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
            "repos_url": "https://api.github.com/users/gmaxwell/repos",
            "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 165017692,
              "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
              "name": "assurance",
              "description": "",
              "color": "A6DF3D",
              "default": false
            }
          ],
          "assignee": {
            "login": "gmaxwell",
            "id": 858454,
            "node_id": "MDQ6VXNlcjg1ODQ1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmaxwell",
            "html_url": "https://github.com/gmaxwell",
            "followers_url": "https://api.github.com/users/gmaxwell/followers",
            "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
            "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
            "repos_url": "https://api.github.com/users/gmaxwell/repos",
            "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "gmaxwell",
              "id": 858454,
              "node_id": "MDQ6VXNlcjg1ODQ1NA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gmaxwell",
              "html_url": "https://github.com/gmaxwell",
              "followers_url": "https://api.github.com/users/gmaxwell/followers",
              "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
              "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
              "repos_url": "https://api.github.com/users/gmaxwell/repos",
              "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "created_at": "2015-01-11T04:31:10Z",
          "updated_at": "2023-11-22T14:22:52Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1275866910",
      "pull_request_review_id": 1549209180,
      "id": 1275866910,
      "node_id": "PRRC_kwDOAP4Jqs5MDC8e",
      "diff_hunk": "@@ -12,268 +6,262 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static\n+ * --use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul\n+ * square */\n+/* curve description: secp256k1_dettman */\n+/* machine_wordsize = 64 (from \"64\") */\n+/* requested operations: mul, square */\n+/* n = 5 (from \"5\") */\n+/* last_limb_width = 48 (from \"48\") */\n+/* last_reduction = 2 (from \"2\") */\n+/* s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\") */\n+/* inbounds_multiplier: None (from \"\") */\n+/*  */\n+/* Computed values: */\n+/*  */\n+/*  */\n+\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-\n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128\n+    fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {",
      "path": "src/field_5x52_int128_impl.h",
      "position": 144,
      "original_position": 209,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "7c67d344235459221de9f21ed505fa83dd140f7a",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it will be better to add a real uint128 function for this. This wrapper is a bit inelegant (and probably hurts performance.)",
      "created_at": "2023-07-27T07:47:26Z",
      "updated_at": "2023-07-27T07:59:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1275866910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1275866910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279564533",
      "pull_request_review_id": 1555270374,
      "id": 1279564533,
      "node_id": "PRRC_kwDOAP4Jqs5MRJr1",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How should I be reading this specification?\r\n\r\n`fe_mul` is supposed to allow up to magnitude 8 input, which means the lower limbs are bounded by `0xFFFFFFFFFFFFF * 8 = 0x7ffffffffffff8` .  But the statement here suggests the precondition is `0x1ffffffffffffe` which is only magnitude 2.",
      "created_at": "2023-07-31T16:23:31Z",
      "updated_at": "2023-07-31T16:24:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279564533",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279564533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279766426",
      "pull_request_review_id": 1555587091,
      "id": 1279766426,
      "node_id": "PRRC_kwDOAP4Jqs5MR6-a",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279564533,
      "user": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds like you're reading it successfully already: it means `0x0 <= arg1[0] && arg1[0] <= 0x1ffffffffffffe` and etc.\r\n\r\nI instantiated the template with arguments that I think match the magnitude requirement you describe. The generated code didn't change, but here are the new specifications:\r\n\r\n<details>\r\n<summary>outdated diff</summary>\r\n\r\n```diff\r\n--- fiat-c/src/secp256k1_dettman_64.c   2023-07-31 18:50:07.191232393 +0000\r\n+++ /tmp/det    2023-07-31 19:15:11.379514514 +0000\r\n@@ -1,4 +1,4 @@\r\n-/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static --use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square */\r\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static --use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square --inbounds-multiplier 4 */\r\n /* curve description: secp256k1_dettman */\r\n /* machine_wordsize = 64 (from \"64\") */\r\n /* requested operations: mul, square */\r\n@@ -6,7 +6,7 @@\r\n /* last_limb_width = 48 (from \"48\") */\r\n /* last_reduction = 2 (from \"2\") */\r\n /* s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\") */\r\n-/* inbounds_multiplier: None (from \"\") */\r\n+/* inbounds_multiplier: Some 4 (from \"4\") */\r\n /*  */\r\n /* Computed values: */\r\n /*  */\r\n@@ -36,10 +36,10 @@\r\n  *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\r\n  *\r\n  * Input Bounds:\r\n- *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n- *   arg2: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n+ *   arg1: [[0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7fffffffffff8]]\r\n+ *   arg2: [[0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7fffffffffff8]]\r\n  * Output Bounds:\r\n- *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x17fffffffffff]]\r\n+ *   out1: [[0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x47ffffffffffc]]\r\n  */\r\n static FIAT_SECP256K1_DETTMAN_FIAT_INLINE void fiat_secp256k1_dettman_mul(uint64_t out1[5], const uint64_t arg1[5], const uint64_t arg2[5]) {\r\n   fiat_secp256k1_dettman_uint128 x1;\r\n@@ -122,9 +122,9 @@\r\n  *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg1) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\r\n  *\r\n  * Input Bounds:\r\n- *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n+ *   arg1: [[0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7ffffffffffff8], [0x0 ~> 0x7fffffffffff8]]\r\n  * Output Bounds:\r\n- *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x17fffffffffff]]\r\n+ *   out1: [[0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x4ffffffffffffb], [0x0 ~> 0x47ffffffffffc]]\r\n  */\r\n static FIAT_SECP256K1_DETTMAN_FIAT_INLINE void fiat_secp256k1_dettman_square(uint64_t out1[5], const uint64_t arg1[5]) {\r\n   uint64_t x1;\r\n```\r\n\r\n</details>",
      "created_at": "2023-07-31T19:19:14Z",
      "updated_at": "2023-07-31T20:23:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279766426",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279766426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279781604",
      "pull_request_review_id": 1555611059,
      "id": 1279781604,
      "node_id": "PRRC_kwDOAP4Jqs5MR-rk",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279564533,
      "user": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looking at https://github.com/bitcoin-core/secp256k1/blob/26392da2fb7153addae0bd604495eb96f995d76c/src/field_5x52.h#L24-L26\r\n\r\nI get the sense that maybe both fiat-crypto and libsecp256k1 allow twice as large limb values as I assumed would be required during my previous comment, so here's another version:\r\n\r\n<details>\r\n\r\n```diff\r\n--- fiat-c/src/secp256k1_dettman_64.c   2023-07-31 18:50:07.191232393 +0000\r\n+++ /tmp/det2   2023-07-31 19:29:41.278022868 +0000\r\n@@ -1,4 +1,4 @@\r\n-/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static --use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square */\r\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static --use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square --inbounds-multiplier 8 */\r\n /* curve description: secp256k1_dettman */\r\n /* machine_wordsize = 64 (from \"64\") */\r\n /* requested operations: mul, square */\r\n@@ -6,7 +6,7 @@\r\n /* last_limb_width = 48 (from \"48\") */\r\n /* last_reduction = 2 (from \"2\") */\r\n /* s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\") */\r\n-/* inbounds_multiplier: None (from \"\") */\r\n+/* inbounds_multiplier: Some 8 (from \"8\") */\r\n /*  */\r\n /* Computed values: */\r\n /*  */\r\n@@ -36,10 +36,10 @@\r\n  *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\r\n  *\r\n  * Input Bounds:\r\n- *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n- *   arg2: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n+ *   arg1: [[0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xffffffffffff0]]\r\n+ *   arg2: [[0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xffffffffffff0]]\r\n  * Output Bounds:\r\n- *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x17fffffffffff]]\r\n+ *   out1: [[0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x87ffffffffff8]]\r\n  */\r\n static FIAT_SECP256K1_DETTMAN_FIAT_INLINE void fiat_secp256k1_dettman_mul(uint64_t out1[5], const uint64_t arg1[5], const uint64_t arg2[5]) {\r\n   fiat_secp256k1_dettman_uint128 x1;\r\n@@ -122,9 +122,9 @@\r\n  *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg1) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\r\n  *\r\n  * Input Bounds:\r\n- *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n+ *   arg1: [[0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xffffffffffff0]]\r\n  * Output Bounds:\r\n- *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x17fffffffffff]]\r\n+ *   out1: [[0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x8ffffffffffff7], [0x0 ~> 0x87ffffffffff8]]\r\n  */\r\n static FIAT_SECP256K1_DETTMAN_FIAT_INLINE void fiat_secp256k1_dettman_square(uint64_t out1[5], const uint64_t arg1[5]) {\r\n   uint64_t x1;\r\n```\r\n\r\n</details>",
      "created_at": "2023-07-31T19:35:32Z",
      "updated_at": "2023-07-31T20:23:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279781604",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279781604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279842532",
      "pull_request_review_id": 1555716187,
      "id": 1279842532,
      "node_id": "PRRC_kwDOAP4Jqs5MSNjk",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279564533,
      "user": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe third time is the charm. Taking into account my reading of what \"magnitude\" means, setting input magnitude to 8, and also asserting output magnitude 1 gives us\r\n\r\n```diff\r\ndiff --git a/fiat-c/src/secp256k1_dettman_64.c b/fiat-c/src/secp256k1_dettman_64.c\r\nindex e666946ea..bfd47ce91 100644\r\n--- a/fiat-c/src/secp256k1_dettman_64.c\r\n+++ b/fiat-c/src/secp256k1_dettman_64.c\r\n@@ -36,10 +36,10 @@ FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef unsigned __int128 fiat_secp256k1_d\r\n  *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\r\n  *\r\n  * Input Bounds:\r\n- *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n- *   arg2: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n+ *   arg1: [[0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xffffffffffff0]]\r\n+ *   arg2: [[0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xffffffffffff0]]\r\n  * Output Bounds:\r\n- *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x17fffffffffff]]\r\n+ *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n  */\r\n static FIAT_SECP256K1_DETTMAN_FIAT_INLINE void fiat_secp256k1_dettman_mul(uint64_t out1[5], const uint64_t arg1[5], const uint64_t arg2[5]) {\r\n   fiat_secp256k1_dettman_uint128 x1;\r\n@@ -122,9 +122,9 @@ static FIAT_SECP256K1_DETTMAN_FIAT_INLINE void fiat_secp256k1_dettman_mul(uint64\r\n  *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg1) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\r\n  *\r\n  * Input Bounds:\r\n- *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n+ *   arg1: [[0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xfffffffffffff0], [0x0 ~> 0xffffffffffff0]]\r\n  * Output Bounds:\r\n- *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x17fffffffffff]]\r\n+ *   out1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]\r\n  */\r\n static FIAT_SECP256K1_DETTMAN_FIAT_INLINE void fiat_secp256k1_dettman_square(uint64_t out1[5], const uint64_t arg1[5]) {\r\n   uint64_t x1;\r\n```\r\n\r\nwith no changes 64-bit code still. However, this change causes a number of intermediates in the 32-bit code to be [assigned larger types than before](https://gist.github.com/andres-erbsen/a8f6c694e80168354b19710fc811c5c4), which I figure is why the more restrictive magnitude specifications got checked into fiat-crypto in the first place.\r\n\r\n(Note on hiding previous comments: the generated specifications there are still covered by all proofs in fiat-crypto, and so is this one, but I think the previous specifications do not capture libsecp256k1 relies on.)",
      "created_at": "2023-07-31T20:22:52Z",
      "updated_at": "2023-07-31T23:31:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279842532",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279842532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279884706",
      "pull_request_review_id": 1555787380,
      "id": 1279884706,
      "node_id": "PRRC_kwDOAP4Jqs5MSX2i",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279564533,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the correction.  Magnitude 8 means the limbs are bounded by 0xFFFFFFFFFFFFF * 2 * 8, so I was off by a factor of 2.",
      "created_at": "2023-07-31T21:14:24Z",
      "updated_at": "2023-07-31T21:14:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279884706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279884706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279885674",
      "pull_request_review_id": 1555788924,
      "id": 1279885674,
      "node_id": "PRRC_kwDOAP4Jqs5MSYFq",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would you willing to format your printed values in the comments with leading zeros to make everything 64 bits (or 32-bits) wide?",
      "created_at": "2023-07-31T21:15:44Z",
      "updated_at": "2023-07-31T21:15:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279885674",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279885674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279929699",
      "pull_request_review_id": 1555873815,
      "id": 1279929699,
      "node_id": "PRRC_kwDOAP4Jqs5MSi1j",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279885674,
      "user": {
        "login": "Aminkavoos",
        "id": 106019725,
        "node_id": "U_kgDOBlG7jQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106019725?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Aminkavoos",
        "html_url": "https://github.com/Aminkavoos",
        "followers_url": "https://api.github.com/users/Aminkavoos/followers",
        "following_url": "https://api.github.com/users/Aminkavoos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Aminkavoos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Aminkavoos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Aminkavoos/subscriptions",
        "organizations_url": "https://api.github.com/users/Aminkavoos/orgs",
        "repos_url": "https://api.github.com/users/Aminkavoos/repos",
        "events_url": "https://api.github.com/users/Aminkavoos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Aminkavoos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> ایا مایل هستید مقادیر چاپ شده خود را در نظرات با صفرهای پیشرو فرمت کنید تا همه چیز 64 بیت (یا 32 بیت) عرض داشته باشد؟\r\n\r\n",
      "created_at": "2023-07-31T22:08:01Z",
      "updated_at": "2023-08-01T12:35:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1279929699",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1279929699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1286493232",
      "pull_request_review_id": 1566316536,
      "id": 1286493232,
      "node_id": "PRRC_kwDOAP4Jqs5MrlQw",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279885674,
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@andres-erbsen, would you want to do that on fiat's side or should I just manually edit that?",
      "created_at": "2023-08-08T00:46:45Z",
      "updated_at": "2023-08-08T00:46:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1286493232",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1286493232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1286541727",
      "pull_request_review_id": 1566389847,
      "id": 1286541727,
      "node_id": "PRRC_kwDOAP4Jqs5MrxGf",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279885674,
      "user": {
        "login": "andres-erbsen",
        "id": 918403,
        "node_id": "MDQ6VXNlcjkxODQwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/918403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andres-erbsen",
        "html_url": "https://github.com/andres-erbsen",
        "followers_url": "https://api.github.com/users/andres-erbsen/followers",
        "following_url": "https://api.github.com/users/andres-erbsen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andres-erbsen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andres-erbsen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andres-erbsen/subscriptions",
        "organizations_url": "https://api.github.com/users/andres-erbsen/orgs",
        "repos_url": "https://api.github.com/users/andres-erbsen/repos",
        "events_url": "https://api.github.com/users/andres-erbsen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andres-erbsen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't have specific preferences, but perhaps a more general solution  [here](https://github.com/mit-plv/fiat-crypto/blob/60efd195b71a696a9f36f5f001d0a92eba96e4a6/src/Stringification/Language.v#L1566) is more likely to be typo-free. I'd be happy to implement this if that's what this PR needs to move forward.",
      "created_at": "2023-08-08T02:47:12Z",
      "updated_at": "2023-08-08T02:47:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1286541727",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1286541727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1290841606",
      "pull_request_review_id": 1572937057,
      "id": 1290841606,
      "node_id": "PRRC_kwDOAP4Jqs5M8K4G",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279885674,
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I assume it is not too tricky to do it on the fiat side. Let's do that and let the maintainers comment, what else is needed to get this merged :)",
      "created_at": "2023-08-11T02:35:41Z",
      "updated_at": "2023-08-11T02:35:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1290841606",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1290841606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1291376257",
      "pull_request_review_id": 1573727129,
      "id": 1291376257,
      "node_id": "PRRC_kwDOAP4Jqs5M-NaB",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279885674,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe it is still unclear whether it is better to merge this or simply prove the existing C code correct in VST.  Unfortunately, I don't think any conclusions were reached in the last meeting.\r\n\r\nI've offered to move up my priority on creating a VST proof of the correctness of these functions (right after I finish up with the correctness of `secp256k1_modinv64_divsteps_62_var`) so we have something to compare with, but I only work 1 day a week on VST.",
      "created_at": "2023-08-11T13:58:32Z",
      "updated_at": "2023-08-11T13:58:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1291376257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1291376257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1348178786",
      "pull_request_review_id": 1661022455,
      "id": 1348178786,
      "node_id": "PRRC_kwDOAP4Jqs5QW5Ni",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279885674,
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "kindly bumping this as it has been a couple of weeks now. Has there been any decision made yet to (not) integrate that?",
      "created_at": "2023-10-06T02:28:41Z",
      "updated_at": "2023-10-06T02:28:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1348178786",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1348178786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1348928418",
      "pull_request_review_id": 1662225748,
      "id": 1348928418,
      "node_id": "PRRC_kwDOAP4Jqs5QZwOi",
      "diff_hunk": "@@ -12,268 +6,241 @@\n #include \"int128.h\"\n #include \"util.h\"\n \n-#ifdef VERIFY\n-#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)\n-#define VERIFY_BITS_128(x, n) VERIFY_CHECK(secp256k1_u128_check_bits((x), (n)))\n+#if defined(__GNUC__) || defined(__clang__)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION __extension__\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE __inline__\n #else\n-#define VERIFY_BITS(x, n) do { } while(0)\n-#define VERIFY_BITS_128(x, n) do { } while(0)\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION\n+#  define FIAT_SECP256K1_DETTMAN_FIAT_INLINE\n #endif\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n-    secp256k1_uint128 c, d;\n-    uint64_t t3, t4, tx, u0;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-    VERIFY_BITS(b[0], 56);\n-    VERIFY_BITS(b[1], 56);\n-    VERIFY_BITS(b[2], 56);\n-    VERIFY_BITS(b[3], 56);\n-    VERIFY_BITS(b[4], 52);\n-    VERIFY_CHECK(r != b);\n-    VERIFY_CHECK(a != b);\n-\n-    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n-     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n-\n-    secp256k1_u128_mul(&d, a0, b[3]);\n-    secp256k1_u128_accum_mul(&d, a1, b[2]);\n-    secp256k1_u128_accum_mul(&d, a2, b[1]);\n-    secp256k1_u128_accum_mul(&d, a3, b[0]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, b[4]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_mul_u64_u64(uint64_t a, uint64_t b) {\n+  secp256k1_uint128 r;\n+  secp256k1_u128_mul(&r, a, b);\n+  return r;\n+}\n \n-    secp256k1_u128_accum_mul(&d, a0, b[4]);\n-    secp256k1_u128_accum_mul(&d, a1, b[3]);\n-    secp256k1_u128_accum_mul(&d, a2, b[2]);\n-    secp256k1_u128_accum_mul(&d, a3, b[1]);\n-    secp256k1_u128_accum_mul(&d, a4, b[0]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_shr_u128(secp256k1_uint128 a, unsigned int n) {\n+  secp256k1_uint128 r = a;\n+  secp256k1_u128_rshift(&r, n);\n+  return secp256k1_u128_to_u64(&r);\n+}\n \n-    secp256k1_u128_mul(&c, a0, b[0]);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, b[4]);\n-    secp256k1_u128_accum_mul(&d, a2, b[3]);\n-    secp256k1_u128_accum_mul(&d, a3, b[2]);\n-    secp256k1_u128_accum_mul(&d, a4, b[1]);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 115);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE uint64_t u64_and_u128_u64(secp256k1_uint128 a, uint64_t b) {\n+  return secp256k1_u128_to_u64(&a) & b;\n+}\n \n-    secp256k1_u128_accum_mul(&c, a0, b[1]);\n-    secp256k1_u128_accum_mul(&c, a1, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, b[4]);\n-    secp256k1_u128_accum_mul(&d, a3, b[3]);\n-    secp256k1_u128_accum_mul(&d, a4, b[2]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u128_u128(secp256k1_uint128 a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = a;\n \n-    secp256k1_u128_accum_mul(&c, a0, b[2]);\n-    secp256k1_u128_accum_mul(&c, a1, b[1]);\n-    secp256k1_u128_accum_mul(&c, a2, b[0]);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, b[4]);\n-    secp256k1_u128_accum_mul(&d, a4, b[3]);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  secp256k1_u128_accum(&r, &b);\n \n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));\n-    secp256k1_u128_accum_u64(&c, t3);\n-    VERIFY_BITS_128(&c, 100);\n-    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[3], 52);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[4] = secp256k1_u128_to_u64(&c) + t4;\n-    VERIFY_BITS(r[4], 49);\n-    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+  return r;\n+}\n+static FIAT_SECP256K1_DETTMAN_FIAT_INLINE secp256k1_uint128 u128_add_u64_u128(uint64_t a, secp256k1_uint128 b) {\n+  secp256k1_uint128 r = b;\n+  secp256k1_u128_accum_u64(&r, a);\n+  return r;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n-    secp256k1_uint128 c, d;\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-    int64_t t3, t4, tx, u0;\n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n-\n-    VERIFY_BITS(a[0], 56);\n-    VERIFY_BITS(a[1], 56);\n-    VERIFY_BITS(a[2], 56);\n-    VERIFY_BITS(a[3], 56);\n-    VERIFY_BITS(a[4], 52);\n-\n-    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n-     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n-     *  Note that [x 0 0 0 0 0] = [x*R].\n-     */\n+/* Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --inline --static -use-value-barrier secp256k1_dettman 64 5 48 2 '2^256 - 4294968273' mul square\n+ * curve description: secp256k1_dettman\n+ * machine_wordsize = 64 (from \"64\")\n+ * requested operations: mul, square\n+ * n = 5 (from \"5\")\n+ * last_limb_width = 48 (from \"48\")\n+ * last_reduction = 2 (from \"2\")\n+ * s-c = 2^256 - [(1, 4294968273)] (from \"2^256 - 4294968273\")\n+ * inbounds_multiplier: None (from \"\")\n+ */\n \n-    secp256k1_u128_mul(&d, a0*2, a3);\n-    secp256k1_u128_accum_mul(&d, a1*2, a2);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 0] = [p3 0 0 0] */\n-    secp256k1_u128_mul(&c, a4, a4);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);\n-    VERIFY_BITS_128(&d, 115);\n-    VERIFY_BITS_128(&c, 48);\n-    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t3, 52);\n-    VERIFY_BITS_128(&d, 63);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    a4 *= 2;\n-    secp256k1_u128_accum_mul(&d, a0, a4);\n-    secp256k1_u128_accum_mul(&d, a1*2, a3);\n-    secp256k1_u128_accum_mul(&d, a2, a2);\n-    VERIFY_BITS_128(&d, 115);\n-    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));\n-    VERIFY_BITS_128(&d, 116);\n-    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(t4, 52);\n-    VERIFY_BITS_128(&d, 64);\n-    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    tx = (t4 >> 48); t4 &= (M >> 4);\n-    VERIFY_BITS(tx, 4);\n-    VERIFY_BITS(t4, 48);\n-    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n+FIAT_SECP256K1_DETTMAN_FIAT_EXTENSION typedef secp256k1_uint128 fiat_secp256k1_dettman_uint128;\n \n-    secp256k1_u128_mul(&c, a0, a0);\n-    VERIFY_BITS_128(&c, 112);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&d, a1, a4);\n-    secp256k1_u128_accum_mul(&d, a2*2, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS(u0, 52);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    u0 = (u0 << 4) | tx;\n-    VERIFY_BITS(u0, 56);\n-    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    secp256k1_u128_accum_mul(&c, u0, R >> 4);\n-    VERIFY_BITS_128(&c, 113);\n-    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[0], 52);\n-    VERIFY_BITS_128(&c, 61);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n+#define secp256k1_fe_sqr_inner fiat_secp256k1_dettman_square\n+#define secp256k1_fe_mul_inner fiat_secp256k1_dettman_mul\n \n-    a0 *= 2;\n-    secp256k1_u128_accum_mul(&c, a0, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a2, a4);\n-    secp256k1_u128_accum_mul(&d, a3, a3);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 62);\n-    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n-    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[1], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n+#if (-1 & 3) != 3\n+#error \"This code only works on a two's complement system\"\n+#endif\n \n-    secp256k1_u128_accum_mul(&c, a0, a2);\n-    secp256k1_u128_accum_mul(&c, a1, a1);\n-    VERIFY_BITS_128(&c, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&d, a3, a4);\n-    VERIFY_BITS_128(&d, 114);\n-    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);\n-    VERIFY_BITS_128(&c, 115);\n-    VERIFY_BITS_128(&d, 50);\n-    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);\n-    VERIFY_BITS(r[2], 52);\n-    VERIFY_BITS_128(&c, 63);\n-    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n+/*\n+ * The function fiat_secp256k1_dettman_mul multiplies two field elements.\n+ *\n+ * Postconditions:\n+ *   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663\n+ *\n+ * Input Bounds:\n+ *   arg1: [[0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1ffffffffffffe], [0x0 ~> 0x1fffffffffffe]]",
      "path": "src/field_5x52_int128_impl.h",
      "position": 314,
      "original_position": 314,
      "commit_id": "326329ba1db5d95079290805a68987085195aa67",
      "original_commit_id": "e3affa143f510e45d1e23f71c0b8c11c030680ac",
      "in_reply_to_id": 1279885674,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've begun work on a VST proof of correctness of the current implementation of `secp256k1_fe_mul_inner`.  I've gone as far as proving the correctness of a functional implementation of the dettman algorithm.  Next up is proving that if the input has suitably bounded inputs then the outputs will be suitably bounded, and then proving the correctness of the actual C implementation by showing none of the operations overflow and none of the VERIFY_CHECK statements fail (given the magnitude preconditions are satisfied).\r\n\r\nSpeaking only for myself, my thinking is that I complete this proof and then we can look at were we are with regards to these two (unfortunately incompatible) approaches to correctness and decide from there.  Or I give up on my work.  Or you folks call me out in not making progress.\r\n\r\nAgain, I only work 1 day a week on this project, so I'm guessing several more weeks will still be needed on my end.",
      "created_at": "2023-10-06T16:13:31Z",
      "updated_at": "2023-10-06T16:13:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1319#discussion_r1348928418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1348928418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1319"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    }
  ]
}