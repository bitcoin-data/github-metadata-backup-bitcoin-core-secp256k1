{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112",
    "id": 978297682,
    "node_id": "PR_kwDOAP4Jqs46T6NS",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1112.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1112.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
    "number": 1112,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Cross tests with libecc",
    "user": {
      "login": "BerryYoghurt",
      "id": 58439150,
      "node_id": "MDQ6VXNlcjU4NDM5MTUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BerryYoghurt",
      "html_url": "https://github.com/BerryYoghurt",
      "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
      "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
      "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
      "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
      "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See #1108 \r\n\r\nTODO:\r\n\r\n- [x] Try the test `test_secp256k1_sign_libecc_verify()`. (I still need to figure out how to try it without the whole ci overhead)\r\n- [x] Write a test to sign with `libecc` and verify with `libsecp256k1`\r\n- [x] Perform a byte-by-byte comparison\r\n- [ ] Add to ci properly",
    "labels": [],
    "created_at": "2022-06-24T12:47:02Z",
    "updated_at": "2023-05-08T16:06:28Z",
    "closed_at": "2023-05-08T16:06:27Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "cd70d4111ec84bc4043e988c771a31814700fe54",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "BerryYoghurt:libecc-cross-tests",
      "ref": "libecc-cross-tests",
      "sha": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 503857522,
        "node_id": "R_kgDOHghBcg",
        "name": "secp256k1",
        "full_name": "BerryYoghurt/secp256k1",
        "owner": {
          "login": "BerryYoghurt",
          "id": 58439150,
          "node_id": "MDQ6VXNlcjU4NDM5MTUw",
          "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/BerryYoghurt",
          "html_url": "https://github.com/BerryYoghurt",
          "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
          "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
          "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
          "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
          "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/BerryYoghurt/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/BerryYoghurt/secp256k1",
        "archive_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/events",
        "forks_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/BerryYoghurt/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:BerryYoghurt/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/BerryYoghurt/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/BerryYoghurt/secp256k1/hooks",
        "svn_url": "https://github.com/BerryYoghurt/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 7728,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2022-07-07T14:45:31Z",
        "created_at": "2022-06-15T17:14:47Z",
        "updated_at": "2022-06-30T19:17:59Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "43756da819a235d813e7ecd53eae6df073b53247",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 240,
    "deletions": 0,
    "changed_files": 1,
    "commits": 7,
    "review_comments": 15,
    "comments": 6
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDUwNDhiZDU1OWQ2MGVhNmQ1NGFkOTNiZmM2Yjc2ODQyNGVhMWFhMWY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5048bd559d60ea6d54ad93bfc6b768424ea1aa1f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5048bd559d60ea6d54ad93bfc6b768424ea1aa1f",
      "tree": {
        "sha": "3da79c904cf28fb76c41c6901fc9051f3e81fea6",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3da79c904cf28fb76c41c6901fc9051f3e81fea6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/44c2452fd387f7ca604ab42d73746e7d3a44d8a2",
          "sha": "44c2452fd387f7ca604ab42d73746e7d3a44d8a2",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/44c2452fd387f7ca604ab42d73746e7d3a44d8a2"
        }
      ],
      "message": "Cross test: sign with secp256k1, verify with libecc",
      "committer": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-24T12:23:41Z"
      },
      "author": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-24T12:23:41Z"
      },
      "sha": "5048bd559d60ea6d54ad93bfc6b768424ea1aa1f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDUxYzE4YzE4ZjgxNzFmYTAyMWYxYTI2ZGRhNDg2MmJkMWFiOWRlNjc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "tree": {
        "sha": "faa80e32c42d9867b56accd72e5c0723c47ed7dd",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/faa80e32c42d9867b56accd72e5c0723c47ed7dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5048bd559d60ea6d54ad93bfc6b768424ea1aa1f",
          "sha": "5048bd559d60ea6d54ad93bfc6b768424ea1aa1f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5048bd559d60ea6d54ad93bfc6b768424ea1aa1f"
        }
      ],
      "message": "sign with secp256k1 - verify with libecc tested and runs correctly",
      "committer": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-25T18:45:59Z"
      },
      "author": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-25T18:45:59Z"
      },
      "sha": "51c18c18f8171fa021f1a26dda4862bd1ab9de67"
    },
    {
      "event": "reviewed",
      "id": 1025193379,
      "node_id": "PRR_kwDOAP4Jqs49GzWj",
      "url": null,
      "actor": null,
      "commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Nice :)\r\n\r\nDo you have some instructions on how to build this together with libecc, so that people can play around with it?\r\n\r\nI think the next step would be to try to produce the same signature with libsecp256k1 and libecc, and see if they match exactly. This should work out as libecc also uses deterministic ECDSA with RFC6979, so it should be the exact same algorithm. (If not, we need to see if they do something differently, and you may need to switch to their low-level function https://github.com/ANSSI-FR/libecc/blob/master/src/sig/fuzzing_ecdsa.c#L31.)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#pullrequestreview-1025193379",
      "submitted_at": "2022-06-30T18:19:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGZiYWRhOGZjNWVkNWJkZjdjNTNhZTljMTYyNjA4OTk1MzQ2NTdiZTg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/fbada8fc5ed5bdf7c53ae9c16260899534657be8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/fbada8fc5ed5bdf7c53ae9c16260899534657be8",
      "tree": {
        "sha": "3ea3cb41a95328f07c35c24a97446d52dc5054e1",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3ea3cb41a95328f07c35c24a97446d52dc5054e1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/51c18c18f8171fa021f1a26dda4862bd1ab9de67",
          "sha": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/51c18c18f8171fa021f1a26dda4862bd1ab9de67"
        }
      ],
      "message": "fix an over-optimization",
      "committer": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-30T19:03:00Z"
      },
      "author": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-30T19:03:00Z"
      },
      "sha": "fbada8fc5ed5bdf7c53ae9c16260899534657be8"
    },
    {
      "event": "commented",
      "id": 1171582235,
      "node_id": "IC_kwDOAP4Jqs5F1O0b",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1171582235",
      "actor": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T19:15:23Z",
      "updated_at": "2022-07-07T15:04:15Z",
      "author_association": "NONE",
      "body": "> Do you have some instructions on how to build this together with libecc, so that people can play around with it?\r\n\r\nThe way I build them is a bit hacky and I am actually looking for a better way. But here it is:\r\n1. clone libecc into the secp256k1/src\r\n2. build libecc with `CFLAGS=\"-W -Werror -Wextra -Wall -pedantic -fno-builtin -O3 -DWITH_LIBECC_CONFIG_OVERRIDE -DWITH_CURVE_SECP256K1 -DWITH_HASH_SHA256 -DWITH_SIG_ECDSA -DWITH_SIG_DECDSA -DWITH_HMAC -DWITH_STDLIB -fPIC\" make debug` (I used debug to know why tests failed when they did)\r\n3. compile the tests.c file with `gcc -ggdb -Wall -Wextra -Wno-unused-function tests.c ./precomputed_*.c ./libecc/src/external_deps/rand.o -I.. -L./libecc/build -lsign -o tests -D ECMULT_GEN_PREC_BITS=4 -D ECMULT_WINDOW_SIZE=15 -DENABLE_LIBECC_TESTS -DWITH_STDLIB -DWITH_LIBECC_CONFIG_OVERRIDE -DWITH_CURVE_SECP256K1 -DWITH_HASH_SHA256 -DWITH_SIG_ECDSA -DWITH_SIG_DECDSA -DWITH_HMAC` . I don't like that I have to (seemingly?) compile libecc twice. So I was thinking I could just declare the structs and functions I use in a little header file to be a part of libsecp, but I was postponing this decision till the end.\r\n4. run `./tests 1` (to reach the libecc cross-tests quickly)\r\n\r\nEDIT: modified to accommodate *deterministic* ECDSA ",
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#issuecomment-1171582235",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRjMzczOTMwNGFmMWNiMTIzYzFlMGE2MWFkNWQ5ZDI2YzVmNGQ5M2M",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dc3739304af1cb123c1e0a61ad5d9d26c5f4d93c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dc3739304af1cb123c1e0a61ad5d9d26c5f4d93c",
      "tree": {
        "sha": "1ac51d11922adc9b8630a5e4c2ce9e4ad4a7b282",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1ac51d11922adc9b8630a5e4c2ce9e4ad4a7b282"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/fbada8fc5ed5bdf7c53ae9c16260899534657be8",
          "sha": "fbada8fc5ed5bdf7c53ae9c16260899534657be8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/fbada8fc5ed5bdf7c53ae9c16260899534657be8"
        },
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/43756da819a235d813e7ecd53eae6df073b53247",
          "sha": "43756da819a235d813e7ecd53eae6df073b53247",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/43756da819a235d813e7ecd53eae6df073b53247"
        }
      ],
      "message": "Merge branch 'master' of github.com:BerryYoghurt/secp256k1 into libecc-cross-tests\nci fails",
      "committer": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-30T19:18:10Z"
      },
      "author": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-30T19:18:10Z"
      },
      "sha": "dc3739304af1cb123c1e0a61ad5d9d26c5f4d93c"
    },
    {
      "event": "commented",
      "id": 1171588871,
      "node_id": "IC_kwDOAP4Jqs5F1QcH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1171588871",
      "actor": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T19:23:54Z",
      "updated_at": "2022-06-30T19:23:54Z",
      "author_association": "NONE",
      "body": "> I think the next step would be to try to produce the same signature with libsecp256k1 and libecc, and see if they match exactly. This should work out as libecc also uses deterministic ECDSA with RFC6979, so it should be the exact same algorithm. (If not, we need to see if they do something differently, and you may need to switch to their low-level function https://github.com/ANSSI-FR/libecc/blob/master/src/sig/fuzzing_ecdsa.c#L31.)\r\n\r\nBy this, do you mean comparing the signatures byte by byte?\r\n",
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#issuecomment-1171588871",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112"
    },
    {
      "event": "commented",
      "id": 1171615883,
      "node_id": "IC_kwDOAP4Jqs5F1XCL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1171615883",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T19:52:09Z",
      "updated_at": "2022-06-30T19:52:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> By this, do you mean comparing the signatures byte by byte?\r\n\r\nYes, the serialized representations should be identical byte by byte.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#issuecomment-1171615883",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM5ZTZhODhiYzU2ZjA5NTQyYTk3M2M5NDdhNWFkZWJlYjAxYTMzNTE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c9e6a88bc56f09542a973c947a5adebeb01a3351",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c9e6a88bc56f09542a973c947a5adebeb01a3351",
      "tree": {
        "sha": "7c1ef2398aac1d3384816e8f61266d4cadfb3bea",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7c1ef2398aac1d3384816e8f61266d4cadfb3bea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dc3739304af1cb123c1e0a61ad5d9d26c5f4d93c",
          "sha": "dc3739304af1cb123c1e0a61ad5d9d26c5f4d93c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dc3739304af1cb123c1e0a61ad5d9d26c5f4d93c"
        }
      ],
      "message": "Cross test: sign with libecc, verify with secp256k1",
      "committer": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-30T21:50:52Z"
      },
      "author": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-06-30T21:50:52Z"
      },
      "sha": "c9e6a88bc56f09542a973c947a5adebeb01a3351"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdlNTBjODBiMGJiOWY5MjUyMjlmYmVkY2Y3MzQzYzI0N2ZlODFkZDA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7e50c80b0bb9f925229fbedcf7343c247fe81dd0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7e50c80b0bb9f925229fbedcf7343c247fe81dd0",
      "tree": {
        "sha": "d1d2aefd659de104bb67fa1d91a7654b4b89de66",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d1d2aefd659de104bb67fa1d91a7654b4b89de66"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c9e6a88bc56f09542a973c947a5adebeb01a3351",
          "sha": "c9e6a88bc56f09542a973c947a5adebeb01a3351",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c9e6a88bc56f09542a973c947a5adebeb01a3351"
        }
      ],
      "message": "apostrophes are evil?",
      "committer": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-07-01T14:15:17Z"
      },
      "author": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-07-01T14:15:17Z"
      },
      "sha": "7e50c80b0bb9f925229fbedcf7343c247fe81dd0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDI2YmQyZDM5ZTMwNThmODcxNWNjMGZhNzRhYzViNmViZmNiNTA3YmE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "tree": {
        "sha": "638cab942eadab0fc3094c4403a4afd960b9dffd",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/638cab942eadab0fc3094c4403a4afd960b9dffd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7e50c80b0bb9f925229fbedcf7343c247fe81dd0",
          "sha": "7e50c80b0bb9f925229fbedcf7343c247fe81dd0",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7e50c80b0bb9f925229fbedcf7343c247fe81dd0"
        }
      ],
      "message": "byte-by-byte comparison",
      "committer": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-07-07T14:17:34Z"
      },
      "author": {
        "name": "BerryYoghurt",
        "email": "jehadaly@gmail.com",
        "date": "2022-07-07T14:17:34Z"
      },
      "sha": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba"
    },
    {
      "event": "commented",
      "id": 1177777140,
      "node_id": "IC_kwDOAP4Jqs5GM3P0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1177777140",
      "actor": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-07T15:17:24Z",
      "updated_at": "2022-07-07T15:17:24Z",
      "author_association": "NONE",
      "body": "I am having some difficulty in including `libecc` cleanly.\r\n\r\nWhat I thought I could do: \r\n1. Write a header file `libsig.h` in `src` of `libsecp256k1`. In this header, forward declare all `libecc` structs and functions which will be used in `tests.c`. Include this file in `tests.c`, naturally.\r\n2. Clone `libecc` in any directory, x, and build it. Then link the archive while compiling `tests.c`.\r\n\r\nBut the problem I'm facing right now is that most (if not all) `libecc`'s structs are anonymous (e.g., https://github.com/ANSSI-FR/libecc/blob/master/src/curves/ec_params.h#L51), and [anonymous structs cannot be forward-declared](https://stackoverflow.com/questions/7256436/forward-declarations-of-unnamed-struct).\r\n\r\nI think there must be a way of \"plugging in\" `libecc`'s archive without compiling it twice.. \r\n\r\nAny help would be appreciated!",
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#issuecomment-1177777140",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112"
    },
    {
      "event": "commented",
      "id": 1178088909,
      "node_id": "IC_kwDOAP4Jqs5GODXN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1178088909",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-07T19:03:42Z",
      "updated_at": "2022-07-07T19:03:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hm, I'm not sure I can follow. So why would you want to forward-declare those?\r\n\r\nSo the usual way to use a C library is include its header in your source file and then later link against the compiled library. So you would \r\n 1. Create a file `src/libecc-tests.c` or similar (you could also use `tests.c` but I think a separate program will be cleaner, just make sure you `#include \"secp256k1.c` like in `tests.c` to have full access to all internal functions).\r\n 2. Then include libsig.h from libecc,\r\n 3.  which makes sure you can call public libecc functions in your `src/libecc-tests.c`\r\n 4. if you link to libecc later.\r\n\r\nOr if item 1 adds complexity, first skip it and use the existing `tests.c`.\r\n\r\nOr is the problem that you need access to internal functions or types of libecc?",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#issuecomment-1178088909",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112"
    },
    {
      "event": "commented",
      "id": 1538658013,
      "node_id": "IC_kwDOAP4Jqs5btg7d",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1538658013",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-08T16:06:27Z",
      "updated_at": "2023-05-08T16:06:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closing due to lack of activity. Cross-testing is tracked in #691.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#issuecomment-1538658013",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1112"
    },
    {
      "event": "closed",
      "id": 9192033784,
      "node_id": "CE_lADOAP4Jqs5Mg95nzwAAAAIj4034",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9192033784",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-08T16:06:27Z"
    },
    {
      "event": "unsubscribed",
      "id": 9192372166,
      "node_id": "UE_lADOAP4Jqs5Mg95nzwAAAAIj6HfG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9192372166",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-08T16:45:38Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911238447",
      "pull_request_review_id": 1025193379,
      "id": 911238447,
      "node_id": "PRRC_kwDOAP4Jqs42UGUv",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0\n+\n+    ec_pub_key ec_pubkey;\n+    CHECK(ec_pub_key_import_from_aff_buf(&ec_pubkey, (const ec_params *)&params,\n+                                         pubkey_buf + 1, pubkey_len - 1,",
      "path": "src/tests.c",
      "position": 67,
      "original_position": 70,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this intentional given the lines above, where you already modify `pubkey_buf` and `pubkey_len`?",
      "created_at": "2022-06-30T16:38:42Z",
      "updated_at": "2022-06-30T18:19:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911238447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911238447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6915,
      "original_line": 6918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911239019",
      "pull_request_review_id": 1025193379,
      "id": 911239019,
      "node_id": "PRRC_kwDOAP4Jqs42UGdr",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is B0?\r\n\r\nAre you sure libecc doesn't support compressed keys? that would surprise me.\r\n\r\nand typo: \"recoginze\" ;)",
      "created_at": "2022-06-30T16:39:22Z",
      "updated_at": "2022-06-30T18:19:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911239019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911239019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911348396",
      "pull_request_review_id": 1025351556,
      "id": 911348396,
      "node_id": "PRRC_kwDOAP4Jqs42UhKs",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0\n+\n+    ec_pub_key ec_pubkey;\n+    CHECK(ec_pub_key_import_from_aff_buf(&ec_pubkey, (const ec_params *)&params,\n+                                         pubkey_buf + 1, pubkey_len - 1,",
      "path": "src/tests.c",
      "position": 67,
      "original_position": 70,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911238447,
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh. That's a careless mistake I always make. After I successfully ran the test (without first modifying `pubkey_buf` and `pubkey_len`), I thought modifying them first would \"look\" better. So I did it and forgot to run the test again to check. \r\nI turns out that the code doesn't even compile with `pubkey_buf += 1`, so the \"better looking\" modification is actually worse. I'll correct the mistake. My bad!",
      "created_at": "2022-06-30T18:45:15Z",
      "updated_at": "2022-06-30T18:45:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911348396",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911348396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6915,
      "original_line": 6918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911355011",
      "pull_request_review_id": 1025361392,
      "id": 911355011,
      "node_id": "PRRC_kwDOAP4Jqs42UiyD",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After reading https://github.com/ANSSI-FR/libecc/blob/master/src/sig/ec_key.h several times, I concluded that `libecc` supports importing projective or affine coordinates, in either a \"structured\" or an \"unstructured\" format. By structured they mean that the buffer includes the curve parameters, the signature algorithm, etc., in addition to the key. So I thought the simplest way to port `libsecp`'s public key to `libecc` is through an unstructured affine buffer.\r\n\r\nBy B0 I just mean the first byte :). I took this terminology from [here](https://tools.ietf.org/id/draft-jivsov-ecc-compact-05.html). I was puzzled why the public key produced by `libsecp` is 65 bytes long when a key is really two 32-byte values. So I googled a bit and found that \"uncompressed keys\" have an extra `04` at the beginning.",
      "created_at": "2022-06-30T18:54:03Z",
      "updated_at": "2022-06-30T18:54:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911355011",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911355011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911359414",
      "pull_request_review_id": 1025367912,
      "id": 911359414,
      "node_id": "PRRC_kwDOAP4Jqs42Uj22",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you confusing jacobian/projective coordinates with compressed/uncompressed encoding?\r\n\r\n* Affine coordinates are tuples (x, y) on the curve.\r\n* Projective coordinates are tuples (X, Y, Z) representing the affine coordinate (X/Z, Y/Z).\r\n* Jacobian coordinates are tuples (X, Y, Z) representing the affine coordinates (X/Z^2, Y/Z^3).\r\n\r\nSECG encoding of public keys is (all representing affine coordinates):\r\n* Compressed encoding\r\n  * (0x02 || x) for even y\r\n  * (0x03 || x) for odd y\r\n* Uncompressed encoding\r\n  * (0x04 || x || y)\r\n\r\n",
      "created_at": "2022-06-30T19:00:00Z",
      "updated_at": "2022-06-30T19:00:14Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911359414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911359414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911364469",
      "pull_request_review_id": 1025375330,
      "id": 911364469,
      "node_id": "PRRC_kwDOAP4Jqs42UlF1",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for succinctly summarizing the different presentations :), but I don't think I'm confusing them. I believe I've used the correct formats/encodings/presentations in the code..? The only mistake I've done is offsetting `pubkey_buf` twice. ",
      "created_at": "2022-06-30T19:07:03Z",
      "updated_at": "2022-06-30T19:07:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911364469",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911364469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911394167",
      "pull_request_review_id": 1025418780,
      "id": 911394167,
      "node_id": "PRRC_kwDOAP4Jqs42UsV3",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@BerryYoghurt Now you updated the comment to \"does not recognize B0 = 04\". But that wouldn't that mean it supports *only compressed* and not *only uncompressed*?",
      "created_at": "2022-06-30T19:49:53Z",
      "updated_at": "2022-06-30T19:49:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911394167",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911394167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911398227",
      "pull_request_review_id": 1025424478,
      "id": 911398227,
      "node_id": "PRRC_kwDOAP4Jqs42UtVT",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0\n+\n+    ec_pub_key ec_pubkey;\n+    CHECK(ec_pub_key_import_from_aff_buf(&ec_pubkey, (const ec_params *)&params,\n+                                         pubkey_buf + 1, pubkey_len - 1,",
      "path": "src/tests.c",
      "position": 67,
      "original_position": 70,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911238447,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  My bad!\r\n\r\nNo worries, we all have bugs in our draft code. ^^",
      "created_at": "2022-06-30T19:55:40Z",
      "updated_at": "2022-06-30T19:55:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911398227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911398227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6915,
      "original_line": 6918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911459700",
      "pull_request_review_id": 1025513139,
      "id": 911459700,
      "node_id": "PRRC_kwDOAP4Jqs42U8V0",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@real-or-random I think we have a misunderstanding because I did not word my comment correctly. The best wording will probably be \"does not recognize the header byte\". `libecc` really only supports uncompressed keys, but throws errors at the header byte. It explicitly checks that the public key is exactly 64 bytes long (for curve secp256k1). Does that clear the misunderstanding?",
      "created_at": "2022-06-30T21:31:02Z",
      "updated_at": "2022-06-30T21:31:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911459700",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911459700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911786832",
      "pull_request_review_id": 1025962112,
      "id": 911786832,
      "node_id": "PRRC_kwDOAP4Jqs42WMNQ",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, yes. It's surprising to me that libecc does not support compressed keys but I agree after looking at their code...\r\n\r\nAnyway, this problem will just disappear if you simply pass the secret key to libecc and let libecc compute the public key (in whatever format it needs). That's anyway necessary if you want to compare the result of signing (see below) and it's also simpler.   ",
      "created_at": "2022-07-01T09:23:58Z",
      "updated_at": "2022-07-01T09:23:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r911786832",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/911786832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/912000794",
      "pull_request_review_id": 1026276636,
      "id": 912000794,
      "node_id": "PRRC_kwDOAP4Jqs42XAca",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@real-or-random For byte-by-byte comparison I'll do that, but when signing with libsecp and verifying with libecc, isn't it more logical to give libecc access only to the public key? I mean, the verifier doesn't normally have the private key, they're supposed to read the public key and the message from the signer then check the signature. Right?",
      "created_at": "2022-07-01T14:12:42Z",
      "updated_at": "2022-07-01T14:12:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r912000794",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/912000794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/912015320",
      "pull_request_review_id": 1026299338,
      "id": 912015320,
      "node_id": "PRRC_kwDOAP4Jqs42XD_Y",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps it's better to refer to this format supported by libecc as \"raw public keys\" or something like that; \"uncompressed\" is likely to be understood as SECG's (0x04 || X || Y) format.",
      "created_at": "2022-07-01T14:30:20Z",
      "updated_at": "2022-07-01T14:30:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r912015320",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/912015320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/912045924",
      "pull_request_review_id": 1026345592,
      "id": 912045924,
      "node_id": "PRRC_kwDOAP4Jqs42XLdk",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\r\n\r\n\r\n\r\n> @real-or-random For byte-by-byte comparison I'll do that, but when signing with libsecp and verifying with libecc, isn't it more logical to give libecc access only to the public key? I mean, the verifier doesn't normally have the private key, they're supposed to read the public key and the message from the signer then check the signature. Right?\r\n\r\nSo yes, in the real world, the signer obviously wouldn't reveal the secret key.\r\n\r\nFor our purpose of cross-testing however, this is fine. If libecc recomputes the public key, then the cross-test would also cover the computation of the public key from the secret key. So if there's a difference between the two libs in that algorithm, the test would also catch it. ",
      "created_at": "2022-07-01T15:08:31Z",
      "updated_at": "2022-07-01T15:08:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r912045924",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/912045924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/915980658",
      "pull_request_review_id": 1031732044,
      "id": 915980658,
      "node_id": "PRRC_kwDOAP4Jqs42mMFy",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "BerryYoghurt",
        "id": 58439150,
        "node_id": "MDQ6VXNlcjU4NDM5MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/58439150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BerryYoghurt",
        "html_url": "https://github.com/BerryYoghurt",
        "followers_url": "https://api.github.com/users/BerryYoghurt/followers",
        "following_url": "https://api.github.com/users/BerryYoghurt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BerryYoghurt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BerryYoghurt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BerryYoghurt/subscriptions",
        "organizations_url": "https://api.github.com/users/BerryYoghurt/orgs",
        "repos_url": "https://api.github.com/users/BerryYoghurt/repos",
        "events_url": "https://api.github.com/users/BerryYoghurt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BerryYoghurt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@real-or-random I was convinced of cross-testing the key generation algorithm, and it is now done in the same testcase that compares signatures byte by byte. However, after writing the new testcase, I am still reluctant to derive the public key from the private key in the other two -- for two reasons. \r\nFirst, it's not much simpler (code-wise) to import the private key instead of the public key. The only difference is avoiding the header byte. \r\nSecond, since it's already done in `test_compare_libecc_secp256k1`, I think having both is better, more or less.\r\nWhat do you think?",
      "created_at": "2022-07-07T15:01:54Z",
      "updated_at": "2022-07-07T15:01:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r915980658",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/915980658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917820040",
      "pull_request_review_id": 1034181183,
      "id": 917820040,
      "node_id": "PRRC_kwDOAP4Jqs42tNKI",
      "diff_hunk": "@@ -6856,6 +6860,75 @@ void run_ecdsa_edge_cases(void) {\n     test_ecdsa_edge_cases();\n }\n \n+#ifdef ENABLE_LIBECC_TESTS\n+void test_secp256k1_sign_libecc_verify(void){\n+    printf(\"In libecc test\\n\");\n+    /* generate public private key pair */\n+    secp256k1_scalar key;\n+    unsigned char privkey_buf[32];\n+    unsigned char pubkey_buf[65];\n+    size_t pubkey_len = sizeof(pubkey_buf);\n+    secp256k1_pubkey secp_pubkey;\n+\n+    random_scalar_order_test(&key);\n+    secp256k1_scalar_get_b32(privkey_buf, &key);\n+\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &secp_pubkey, privkey_buf) == 1);\n+    secp256k1_ec_pubkey_serialize(ctx, pubkey_buf, &pubkey_len , &secp_pubkey, SECP256K1_EC_UNCOMPRESSED);\n+\n+    /* generate random message */\n+    secp256k1_scalar msg;\n+    unsigned char msg_buf[32];\n+\n+    random_scalar_order_test(&msg);\n+    secp256k1_scalar_get_b32(msg_buf, &msg);\n+\n+    /* hash and sign with libsecp256k1 */\n+    unsigned char to_sign[32];\n+    unsigned char sig_buf[64];\n+    secp256k1_ecdsa_signature sig;\n+    secp256k1_sha256 sha;\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, msg_buf, sizeof(msg_buf));\n+    secp256k1_sha256_finalize(&sha, to_sign);\n+\n+    CHECK(secp256k1_ecdsa_sign(ctx, &sig, to_sign, privkey_buf, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &sig, to_sign, &secp_pubkey) == 1);\n+\n+    secp256k1_ecdsa_signature_serialize_compact(ctx, sig_buf, &sig);\n+\n+    /* verify with libecc */\n+    const char *curve_name = \"SECP256K1\";\n+    const int curve_name_length = strlen(curve_name) + 1;\n+    const ec_str_params *str_params;\n+    CHECK(ec_get_curve_params_by_name((const uint8_t *)curve_name, curve_name_length, &str_params) == 0);\n+\n+    ec_params params;\n+    CHECK(import_params(&params, str_params) == 0);\n+\n+    const ec_sig_mapping *sig_mapping;\n+    CHECK(get_sig_by_name(\"ECDSA\", &sig_mapping) == 0);\n+\n+    pubkey_buf += 1; // this is needed because libecc only supports uncompressed points\n+    pubkey_len -= 1; // and does not recoginze B0",
      "path": "src/tests.c",
      "position": null,
      "original_position": 66,
      "commit_id": "26bd2d39e3058f8715cc0fa74ac5b6ebfcb507ba",
      "original_commit_id": "51c18c18f8171fa021f1a26dda4862bd1ab9de67",
      "in_reply_to_id": 911239019,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, I think if we verify with libsecp256k1 and libecc in `test_compare_libecc_secp256k1`, then we won't need the other two tests anymore. \r\n\r\nedit: Let me try to explain in more detail. So in general, I see that it makes sense to have multiple test cases. But one of the goals here should be efficiency because later on we want to run many iterations in a loop. In that sense\r\n\r\n - sign with libecc\r\n - sign with libsecp256k1\r\n - check sigs are identical\r\n - verify with libecc\r\n - verify with libsecp256k1  \r\n\r\nseems a rather efficient way of doing tests, i.e., we get a lot of \"test value\" per running time.",
      "created_at": "2022-07-11T11:21:19Z",
      "updated_at": "2022-07-11T11:24:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1112#discussion_r917820040",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/917820040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1112"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6914,
      "side": "RIGHT"
    }
  ]
}