{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734",
    "id": 2800197744,
    "node_id": "PR_kwDOAP4Jqs6m56Bw",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1734.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1734.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
    "number": 1734,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Introduce (mini) unit test framework",
    "user": {
      "login": "furszy",
      "id": 5377650,
      "node_id": "MDQ6VXNlcjUzNzc2NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/furszy",
      "html_url": "https://github.com/furszy",
      "followers_url": "https://api.github.com/users/furszy/followers",
      "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
      "organizations_url": "https://api.github.com/users/furszy/orgs",
      "repos_url": "https://api.github.com/users/furszy/repos",
      "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/furszy/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Early Note:\r\nDon’t be scared by the PR’s line changes count — most of it’s just doc or part of the test framework API.\r\n\r\nContext:\r\nCurrently, all tests run single-threaded sequentially and the library lacks the ability to specify which test (or group of tests) you would like to run. This is not only inconvenient as more tests are added but also time consuming during development and affects downstream projects that may want to parallelize the workload (such as Bitcoin-Core CI).\r\n\r\nPR Goal:\r\nIntroduce a lightweight, extensible C89 unit test framework with no dynamic memory allocations, providing a structured way to register, execute, and report tests. The framework supports named command-line arguments in `-key=value` form, parallel test execution across multiple worker processes, granular test selection (selecting tests either by name or by module name), and time accumulation reports.\r\n\r\nThe introduced framework supports:\r\n* `-help` or `-h`: display list of available commands along with their descriptions.\r\n* `-jobs=<num>`: distribute tests across multiple worker processes (default: sequential if 0).\r\n* `-target=<name>` or `-t=<name>`: run only specific tests by name; can be repeated to select multiple tests.\r\n*  `-target=<module name>`, `-t=<module>`  Run all tests within a specific module (can be provided multiple times)\r\n* `-seed=<hex>`: set a specific RNG seed (defaults to random if unspecified).\r\n* `-iterations=<n>`: specify the number of iterations.\r\n* `-list_tests`:   display list of available tests and modules you can run.\r\n* `-log=<0|1>`: enable or disable test execution logging (default: 0 = disabled).\r\n\r\nBeyond these features, the idea is to also make future developments smoother, as adding new tests require only a single entry in the central test registry, and new command-line options can be introduced easily by extending the framework’s `parse_arg()` function.\r\n\r\nCompatibility Note:\r\nThe framework continues accepting the two positional arguments previously supported (iterations and seed), ensuring existing workflows remain intact.\r\n\r\nTesting Notes:\r\nHave fun. You can quickly try it through `./tests -j=<workers_num>` for parallel execution  or `./tests -t=<test_name>` to run a specific test (call `./tests -print_tests` to display all available tests and modules).\r\n\r\nExtra Note:\r\nI haven't checked the exhaustive tests file so far, but I will soon. For now, this only runs all tests declared in the `tests` binary.\r\n\r\nTesting Results: (Current master branch vs PR in seconds)\r\n\r\n* Raspberry Pi 5: master \\~100 s → PR \\~38 s (5 jobs)\r\n* MacBook Pro M1: master \\~30 s → PR \\~10 s (6 jobs)\r\n",
    "labels": [
      {
        "id": 165017692,
        "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
        "name": "assurance",
        "description": "",
        "color": "A6DF3D",
        "default": false
      },
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      }
    ],
    "created_at": "2025-09-04T17:12:36Z",
    "updated_at": "2025-10-25T21:02:44Z",
    "closed_at": "2025-10-15T06:37:30Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2025-10-15T06:37:30Z",
    "merged_by": {
      "login": "real-or-random",
      "id": 1071625,
      "node_id": "MDQ6VXNlcjEwNzE2MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/real-or-random",
      "html_url": "https://github.com/real-or-random",
      "followers_url": "https://api.github.com/users/real-or-random/followers",
      "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
      "organizations_url": "https://api.github.com/users/real-or-random/orgs",
      "repos_url": "https://api.github.com/users/real-or-random/repos",
      "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/real-or-random/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "d543c0d917a76a201578948701cc30ef336e0fe6",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "furszy:2025_unit_test_framework",
      "ref": "2025_unit_test_framework",
      "sha": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1049838831,
        "node_id": "R_kgDOPpNE7w",
        "name": "secp256k1",
        "full_name": "furszy/secp256k1",
        "owner": {
          "login": "furszy",
          "id": 5377650,
          "node_id": "MDQ6VXNlcjUzNzc2NTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/furszy",
          "html_url": "https://github.com/furszy",
          "followers_url": "https://api.github.com/users/furszy/followers",
          "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
          "organizations_url": "https://api.github.com/users/furszy/orgs",
          "repos_url": "https://api.github.com/users/furszy/repos",
          "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/furszy/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/furszy/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/furszy/secp256k1",
        "archive_url": "https://api.github.com/repos/furszy/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/furszy/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/furszy/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/furszy/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/furszy/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/furszy/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/furszy/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/furszy/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/furszy/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/furszy/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/furszy/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/furszy/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/furszy/secp256k1/events",
        "forks_url": "https://api.github.com/repos/furszy/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/furszy/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/furszy/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/furszy/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/furszy/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/furszy/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/furszy/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/furszy/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/furszy/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/furszy/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/furszy/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/furszy/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/furszy/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/furszy/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/furszy/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/furszy/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:furszy/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/furszy/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/furszy/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/furszy/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/furszy/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/furszy/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/furszy/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/furszy/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/furszy/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/furszy/secp256k1/hooks",
        "svn_url": "https://github.com/furszy/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 12819,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-17T15:16:36Z",
        "created_at": "2025-09-03T15:10:42Z",
        "updated_at": "2025-10-17T13:32:08Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "baa265429fa8f1686138380e52a75c25b0344719",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 1096,
        "stargazers_count": 2326,
        "watchers_count": 2326,
        "size": 12733,
        "default_branch": "master",
        "open_issues_count": 153,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-17T07:09:52Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2025-10-24T20:26:49Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 929,
    "deletions": 239,
    "changed_files": 14,
    "commits": 7,
    "review_comments": 163,
    "comments": 28
  },
  "events": [
    {
      "event": "renamed",
      "id": 19510084729,
      "node_id": "RTE_lADOAP4Jqs7JvTsvzwAAAASK5ER5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19510084729",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T17:16:26Z",
      "rename": {
        "from": "Introduce (mini) unit test framework",
        "to": "WIP: Introduce (mini) unit test framework"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19511434329,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASK-NxZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19511434329",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "303ac0bff947922001c6f0757678d2384aab37cd",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/303ac0bff947922001c6f0757678d2384aab37cd",
      "created_at": "2025-09-04T18:13:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19511858684,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASK_1X8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19511858684",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1af6e6c18de603f24611cf7b94de2a29282547cc",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/1af6e6c18de603f24611cf7b94de2a29282547cc",
      "created_at": "2025-09-04T18:31:21Z"
    },
    {
      "event": "unsubscribed",
      "id": 19511884332,
      "node_id": "UE_lADOAP4Jqs7JvTsvzwAAAASK_7os",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19511884332",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T18:32:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19512159238,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASLA-wG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19512159238",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bd0b00199973b74ac677801ab08d5e0601206d64",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/bd0b00199973b74ac677801ab08d5e0601206d64",
      "created_at": "2025-09-04T18:44:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19514688196,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASLKoLE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19514688196",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "16822f51a6585d19aa67424bd0fae9f0a10f8a3b",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/16822f51a6585d19aa67424bd0fae9f0a10f8a3b",
      "created_at": "2025-09-04T20:37:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19519845184,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASLeTNA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19519845184",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5fcb69c5f126d321b3202ccea5a5a1056e00d690",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/5fcb69c5f126d321b3202ccea5a5a1056e00d690",
      "created_at": "2025-09-05T01:05:10Z"
    },
    {
      "event": "connected",
      "id": 19522648755,
      "node_id": "COE_lADOAP4Jqs7JvTsvzwAAAASLo_qz",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19522648755",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T06:28:32Z"
    },
    {
      "event": "labeled",
      "id": 19522691256,
      "node_id": "LE_lADOAP4Jqs7JvTsvzwAAAASLpKC4",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19522691256",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T06:32:18Z",
      "label": {
        "name": "assurance",
        "color": "A6DF3D"
      }
    },
    {
      "event": "labeled",
      "id": 19522691264,
      "node_id": "LE_lADOAP4Jqs7JvTsvzwAAAASLpKDA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19522691264",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T06:32:18Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    },
    {
      "event": "commented",
      "id": 3257234819,
      "node_id": "IC_kwDOAP4Jqs7CJXWD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3257234819",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T06:36:15Z",
      "updated_at": "2025-09-05T06:36:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice!\r\n\r\nI looked at existing unit test frameworks in the past, but nothing seemed appropriate for us. There are not that many for C, and they were either overkill or too simple (just handful of ifdefs) so they didn't add any functionality. I thought writing our own is too annoying (or I was just lazy). But the framework is ~300 lines, that seems fine to me.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3257234819",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3188181909,
      "node_id": "PRR_kwDOAP4Jqs6-B8uV",
      "url": null,
      "actor": null,
      "commit_id": "8a3b9d3141ba66bf5a759854abbaa2257cf56c30",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-05T06:40:28Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3188181909",
      "submitted_at": "2025-09-05T06:40:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3257536001,
      "node_id": "IC_kwDOAP4Jqs7CKg4B",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3257536001",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T08:34:43Z",
      "updated_at": "2025-09-05T08:34:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "see also #1211 ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3257536001",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19533049594,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASMQq76",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19533049594",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b1de6412f4c856d37f65cd4fce16384122ff6ed3",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/b1de6412f4c856d37f65cd4fce16384122ff6ed3",
      "created_at": "2025-09-05T17:13:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19534163919,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASMU6_P",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19534163919",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7b184a171b67b1bab86b1f583c1c0f944a6f8e2f",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/7b184a171b67b1bab86b1f583c1c0f944a6f8e2f",
      "created_at": "2025-09-05T18:36:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19538780770,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASMmiJi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19538780770",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fdffb0fbfe4abad19264a19e302757b1e12e0687",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/fdffb0fbfe4abad19264a19e302757b1e12e0687",
      "created_at": "2025-09-06T02:47:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19539038117,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASMng-l",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19539038117",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "938962336d36e659157b75750d57b27d0ef1d77d",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/938962336d36e659157b75750d57b27d0ef1d77d",
      "created_at": "2025-09-06T03:33:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19543903952,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASM6E7Q",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19543903952",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f49e57004aa34fe8afda489c6154e3c79a8e828e",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/f49e57004aa34fe8afda489c6154e3c79a8e828e",
      "created_at": "2025-09-06T14:37:22Z"
    },
    {
      "event": "reviewed",
      "id": 3194488618,
      "node_id": "PRR_kwDOAP4Jqs6-aAcq",
      "url": null,
      "actor": null,
      "commit_id": "f49e57004aa34fe8afda489c6154e3c79a8e828e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-07T15:21:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @furszy. I played around with this a little bit. It reduces the execution time on my machine from 26 seconds to 10 seconds (`-jobs=16`). Very nice! Some observations:\r\n\r\n- It would be helpful if a helptext would be output when `tests` is run with `-h` or `--help`.\r\n- I think showing all the tests that have passed is a bit overkill. I'm already assuming that the tests pass if they do not show up in the output. I only need to see tests that don't pass.\r\n- Maybe a future PR can autodetect the number of cores and set `-jobs` automatically by default? \r\n- There's an `-iter` command line flag, but the test output shows \"`test count`\". It would be better if we were consistent.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3194488618",
      "submitted_at": "2025-09-07T15:21:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3263851731,
      "node_id": "IC_kwDOAP4Jqs7CimzT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3263851731",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-07T15:29:35Z",
      "updated_at": "2025-09-07T15:29:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "- The available \"targets\" seem to be a bit arbitary. Maybe we can try to put them into groups (perhaps similar to the [grouping in #1211](https://github.com/bitcoin-core/secp256k1/pull/1211/files#diff-c2d5f1f7616875ab71cd41b053cfb428696988ff89642b931a0963d50f34f7e8R7495))?\r\n    ```\r\n    ./tests -print_tests\r\n    Available tests (58):\r\n        --------------------------------------------------\r\n        [  1] selftest_tests\r\n        [  2] all_proper_context_tests\r\n        [  3] all_static_context_tests\r\n        [  4] deprecated_context_flags_test\r\n        [  5] scratch_tests\r\n        [  6] int128_tests\r\n        [  7] ctz_tests\r\n        [  8] modinv_tests\r\n        [  9] inverse_tests\r\n        [ 10] hsort_tests\r\n        [ 11] sha256_known_output_tests\r\n        [ 12] sha256_counter_tests\r\n        [ 13] hmac_sha256_tests\r\n        [ 14] rfc6979_hmac_sha256_tests\r\n        [ 15] tagged_sha256_tests\r\n        [ 16] scalar_tests\r\n        [ 17] field_half\r\n        [ 18] field_misc\r\n        [ 19] field_convert\r\n        [ 20] field_be32_overflow\r\n        [ 21] fe_mul\r\n        [ 22] sqr\r\n        [ 23] sqrt\r\n        [ 24] ge\r\n        [ 25] gej\r\n        [ 26] group_decompress\r\n        [ 27] ecmult_pre_g\r\n        [ 28] wnaf\r\n        [ 29] point_times_order\r\n        [ 30] ecmult_near_split_bound\r\n        [ 31] ecmult_chain\r\n        [ 32] ecmult_constants\r\n        [ 33] ecmult_gen_blind\r\n        [ 34] ecmult_const_tests\r\n        [ 35] ecmult_multi_tests\r\n        [ 36] ec_combine\r\n        [ 37] endomorphism_tests\r\n        [ 38] ec_pubkey_parse_test\r\n        [ 39] eckey_edge_case_test\r\n        [ 40] eckey_negate_test\r\n        [ 41] ecdh_tests\r\n        [ 42] ec_illegal_argument_tests\r\n        [ 43] pubkey_comparison\r\n        [ 44] pubkey_sort\r\n        [ 45] random_pubkeys\r\n        [ 46] ecdsa_der_parse\r\n        [ 47] ecdsa_sign_verify\r\n        [ 48] ecdsa_end_to_end\r\n        [ 49] ecdsa_edge_cases\r\n        [ 50] ecdsa_wycheproof\r\n        [ 51] extrakeys_tests\r\n        [ 52] schnorrsig_tests\r\n        [ 53] musig_tests\r\n        [ 54] ellswift_tests\r\n        [ 55] secp256k1_memczero_test\r\n        [ 56] secp256k1_is_zero_array_test\r\n        [ 57] secp256k1_byteorder_tests\r\n        [ 58] cmov_tests\r\n    ```",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3263851731",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19571195804,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASOiL-c",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19571195804",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "050d455270389032b6553be655106a3d07104185",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/050d455270389032b6553be655106a3d07104185",
      "created_at": "2025-09-08T18:25:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19571338225,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASOiuvx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19571338225",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "af43348419eeef9a0a2a264be7a0bee66e70b819",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/af43348419eeef9a0a2a264be7a0bee66e70b819",
      "created_at": "2025-09-08T18:33:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19572361215,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASOmof_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19572361215",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b3c74f95ba03789a02028c0bd6144999cc8f97f",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/0b3c74f95ba03789a02028c0bd6144999cc8f97f",
      "created_at": "2025-09-08T19:29:16Z"
    },
    {
      "event": "commented",
      "id": 3270923881,
      "node_id": "IC_kwDOAP4Jqs7C9lZp",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3270923881",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T14:10:37Z",
      "updated_at": "2025-09-09T14:10:37Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review jonasnick!\r\n\r\n> Thanks @furszy. I played around with this a little bit. It reduces the execution time on my machine from 26 seconds to 10 seconds (`-jobs=16`). Very nice! \r\n\r\nAwesome :). I think we can actually do even better, will do some changes.\r\n\r\n> * It would be helpful if a helptext would be output when `tests` is run with `-h` or `--help`.\r\n\r\nThe help message was actually already there, but for `-help` only (with a single `-` and I forgot to add it to the PR description).\r\nI just pushed support for `-h` as well.\r\n\r\n> * I think showing all the tests that have passed is a bit overkill. I'm already assuming that the tests pass if they do not show up in the output. I only need to see tests that don't pass.\r\n\r\nSure. Will hide the logging behind a `-log` option (or `-silent` if we want the opposite behavior).\r\nFrom my experience, logging sometimes helps spot regressions or areas that can be improved (like when a test suddenly takes longer than usual), and it’s also reassuring to see them run and pass when you have a large number of them.\r\nI’ve also been thinking about adding per-test execution time loggings, might be a good opportunity to include it too.\r\n\r\n> * Maybe a future PR can autodetect the number of cores and set `-jobs` automatically by default?\r\n\r\nI'm not sure we want that. Sequential execution is usually \"standard\" on any system because we don’t know what else the user might be running. Picking a number of parallel tasks automatically (even if it is a low number) could hang the CPU or even make it run slower than sequential if the system is overloaded.\r\n\r\n> * There's an `-iter` command line flag, but the test output shows \"`test count`\". It would be better if we were consistent.\r\n\r\nSure 👍🏼. That was carried over from the previous code; will improve it.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3270923881",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "mentioned",
      "id": 19591206998,
      "node_id": "MEE_lADOAP4Jqs7JvTsvzwAAAASPuhhW",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19591206998",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T14:10:39Z"
    },
    {
      "event": "subscribed",
      "id": 19591207036,
      "node_id": "SE_lADOAP4Jqs7JvTsvzwAAAASPuhh8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19591207036",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T14:10:39Z"
    },
    {
      "event": "commented",
      "id": 3270969135,
      "node_id": "IC_kwDOAP4Jqs7C9wcv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3270969135",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T14:21:20Z",
      "updated_at": "2025-09-09T15:20:31Z",
      "author_association": "MEMBER",
      "body": "> The available \"targets\" seem to be a bit arbitary. Maybe we can try to put them into groups (perhaps similar to the [grouping in #1211](https://github.com/bitcoin-core/secp256k1/pull/1211/files#diff-c2d5f1f7616875ab71cd41b053cfb428696988ff89642b931a0963d50f34f7e8R7495))?\r\n\r\nYeah. Just reworked the framework to support registering and running groups of tests in a generic manner. This means we can now run specific tests and/or specific groups of tests via the `-target`/`-t` arg.\r\n\r\nOn top of that, made the framework reusable across binaries and improved the overall API (we can now easily connect the `tests_exhaustive` binary to it too — probably something for a follow-up), along with improvements to the consumers’ structure, enforcing consistency and a specific pattern that all consumers will follow.\r\n\r\nOther than that, the `-print_tests` option was improved to display the available modules and tests.\r\n\r\nA simple usage example:\r\n`./tests -print_tests` → pick any module (like `field`) and run: `./tests -t=field`\r\nYou can also combine this with `-j=<num_workers>`, plus specify multiple targets as needed.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3270969135",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19592729730,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASP0VSC",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19592729730",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4900aee07d528522098e82f4d7e45692407839e4",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/4900aee07d528522098e82f4d7e45692407839e4",
      "created_at": "2025-09-09T15:16:54Z"
    },
    {
      "event": "reviewed",
      "id": 3202289828,
      "node_id": "PRR_kwDOAP4Jqs6-3xCk",
      "url": null,
      "actor": null,
      "commit_id": "4900aee07d528522098e82f4d7e45692407839e4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-09T15:58:00Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3202289828",
      "submitted_at": "2025-09-09T15:58:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19597422408,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASQGO9I",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19597422408",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "created_at": "2025-09-09T19:41:38Z"
    },
    {
      "event": "renamed",
      "id": 19598167506,
      "node_id": "RTE_lADOAP4Jqs7JvTsvzwAAAASQJE3S",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19598167506",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T20:27:59Z",
      "rename": {
        "from": "WIP: Introduce (mini) unit test framework",
        "to": "Introduce (mini) unit test framework"
      }
    },
    {
      "event": "commented",
      "id": 3275069300,
      "node_id": "IC_kwDOAP4Jqs7DNZd0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275069300",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T13:49:23Z",
      "updated_at": "2025-09-10T13:49:23Z",
      "author_association": "MEMBER",
      "body": "> Context:\r\n> Currently, all tests run single-threaded sequentially and the library lacks the ability to specify which test (or group of tests) you would like to run. This is not only inconvenient as more tests are added but also time consuming during development and affects downstream projects that may want to parallelize the workload (such as Bitcoin-Core CI).\r\n\r\nI agree with this assessment.\r\n\r\nFor now, I slightly prefer https://github.com/bitcoin-core/secp256k1/pull/1211 for the following reasons:\r\n- smaller diff;\r\n- adding a new test does not seem convoluted in that branch;\r\n- it [scales reasonably well](https://github.com/bitcoin-core/secp256k1/pull/1211#pullrequestreview-3206161437) (though not perfectly).\r\n\r\nIn general, I believe parallelism management could (and I believe it should) be offloaded from the C code to the build system. Moreover, CTest provides a range of options to customize test execution and output. This functionality could of course be ported to the Autotools-based build system, but I am not sure it would be worth the effort.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275069300",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "commented",
      "id": 3275261629,
      "node_id": "IC_kwDOAP4Jqs7DOIa9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275261629",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T14:33:34Z",
      "updated_at": "2025-09-10T14:33:34Z",
      "author_association": "MEMBER",
      "body": "> smaller diff;\r\n\r\nI wouldn’t consider the larger diff a complication. The size comes from reorganizing tests under a proper framework and introducing features like granular test/group selection and a named command-line options. In my view, it should be seen as a one-off restructuring that makes testing scalable and smoother for development, and it sets us up much better long term.\r\n\r\n> * adding a new test does not seem convoluted in that branch;\r\n\r\nAdding new tests is not hard but granularly selecting them to run in isolation is not possible. You will continue be forced to comment code from a long main function if you just want to run a single test or a mix of single tests from different groups.\r\n\r\n> * it [scales reasonably well](https://github.com/bitcoin-core/secp256k1/pull/1211#pullrequestreview-3206161437) (though not perfectly).\r\n\r\nHave you tested how fast this one gets if you parallelize it in the same way you did for #1211? This one should go faster because we can select and run each individual test on a different process (in #1211 you can only run groups of tests).\r\n\r\n> In general, I believe parallelism management could (and I believe it should) be offloaded from the C code to the build system. Moreover, CTest provides a range of options to customize test execution and output. This functionality could of course be ported to the Autotools-based build system, but I am not sure it would be worth the effort.\r\n\r\nIt could be added here for CI too (I would be very interested to see your results), but I don’t think `ctest` is very useful for daily development. It adds another layer of complexity; for example, you can’t easily pass command-line arguments to the binaries you’re running (as far as I have seen, it requires you to enable the \"script mode\" and even that is not enough). I think both approaches can coexist as long as the maintenance burden stays minimal.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275261629",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3206568066,
      "node_id": "PRR_kwDOAP4Jqs6_IFiC",
      "url": null,
      "actor": null,
      "commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-10T14:54:32Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3206568066",
      "submitted_at": "2025-09-10T14:54:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3206644081,
      "node_id": "PRR_kwDOAP4Jqs6_IYFx",
      "url": null,
      "actor": null,
      "commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-10T15:13:39Z",
      "author_association": "MEMBER",
      "body": "In case of a disable module, could the output be made more explanatory instead of this:\r\n```\r\n$ ./build/bin/tests -target=recovery\r\nError: target not found: 'recovery'\r\n```\r\n\r\nFor example (from https://github.com/bitcoin-core/secp256k1/pull/1211): https://github.com/bitcoin-core/secp256k1/blob/3e404f2b8643493854e664389dbc7817763ad4ac/src/tests.c#L7475-L7482",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3206644081",
      "submitted_at": "2025-09-10T15:13:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3275440608,
      "node_id": "IC_kwDOAP4Jqs7DO0Hg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275440608",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T15:19:21Z",
      "updated_at": "2025-09-10T15:19:21Z",
      "author_association": "MEMBER",
      "body": "> In case of a disable module, could the output be made more explanatory instead of this:\r\n> \r\n> ```\r\n> $ ./build/bin/tests -target=recovery\r\n> Error: target not found: 'recovery'\r\n> ```\r\n\r\nYeah sure.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275440608",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3206862857,
      "node_id": "PRR_kwDOAP4Jqs6_JNgJ",
      "url": null,
      "actor": null,
      "commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-10T16:16:44Z",
      "author_association": "MEMBER",
      "body": "~Removed~\r\n\r\nnm",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3206862857",
      "submitted_at": "2025-09-10T16:09:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3275667392,
      "node_id": "IC_kwDOAP4Jqs7DPrfA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275667392",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T16:24:43Z",
      "updated_at": "2025-09-10T16:27:33Z",
      "author_association": "MEMBER",
      "body": "> Have you tested how fast this one gets if you parallelize it in the same way you did for #1211? This one should go faster because we can select and run each individual test on a different process (in #1211 you can only run groups of tests).\r\n\r\n[This](https://github.com/hebasto/secp256k1/commits/pr1734/0910/) branch with splitting by modules:\r\n```\r\n$ ctest --test-dir build -j 16 --output-on-failure\r\nTest project /home/hebasto/dev/secp256k1/secp256k1/build\r\n      Start  1: secp256k1_tests::general\r\n      Start  2: secp256k1_tests::integer\r\n      Start  3: secp256k1_tests::hash\r\n      Start  4: secp256k1_tests::scalar\r\n      Start  5: secp256k1_tests::field\r\n      Start  6: secp256k1_tests::group\r\n      Start  7: secp256k1_tests::ecmult\r\n      Start  8: secp256k1_tests::ec\r\n      Start  9: secp256k1_tests::ecdh\r\n      Start 10: secp256k1_tests::ecdsa\r\n      Start 11: secp256k1_tests::recovery\r\n      Start 12: secp256k1_tests::extrakeys\r\n      Start 13: secp256k1_tests::schnorrsig\r\n      Start 14: secp256k1_tests::musig\r\n      Start 15: secp256k1_tests::ellswift\r\n      Start 16: secp256k1_tests::utils\r\n 1/33 Test  #1: secp256k1_tests::general ...............   Passed    0.01 sec\r\n 2/33 Test #11: secp256k1_tests::recovery ..............***Skipped   0.00 sec\r\n      Start 17: secp256k1_noverify_tests::general\r\n      Start 18: secp256k1_noverify_tests::integer\r\n 3/33 Test #16: secp256k1_tests::utils .................   Passed    0.00 sec\r\n 4/33 Test #17: secp256k1_noverify_tests::general ......   Passed    0.00 sec\r\n      Start 19: secp256k1_noverify_tests::hash\r\n      Start 20: secp256k1_noverify_tests::scalar\r\n 5/33 Test  #3: secp256k1_tests::hash ..................   Passed    0.02 sec\r\n      Start 21: secp256k1_noverify_tests::field\r\n 6/33 Test  #8: secp256k1_tests::ec ....................   Passed    0.03 sec\r\n      Start 22: secp256k1_noverify_tests::group\r\n 7/33 Test #12: secp256k1_tests::extrakeys .............   Passed    0.03 sec\r\n 8/33 Test #19: secp256k1_noverify_tests::hash .........   Passed    0.02 sec\r\n      Start 23: secp256k1_noverify_tests::ecmult\r\n      Start 24: secp256k1_noverify_tests::ec\r\n 9/33 Test #20: secp256k1_noverify_tests::scalar .......   Passed    0.03 sec\r\n      Start 25: secp256k1_noverify_tests::ecdh\r\n10/33 Test #24: secp256k1_noverify_tests::ec ...........   Passed    0.02 sec\r\n      Start 26: secp256k1_noverify_tests::ecdsa\r\n11/33 Test  #4: secp256k1_tests::scalar ................   Passed    0.05 sec\r\n      Start 27: secp256k1_noverify_tests::recovery\r\n12/33 Test #27: secp256k1_noverify_tests::recovery .....***Skipped   0.00 sec\r\n      Start 28: secp256k1_noverify_tests::extrakeys\r\n13/33 Test #28: secp256k1_noverify_tests::extrakeys ....   Passed    0.01 sec\r\n      Start 29: secp256k1_noverify_tests::schnorrsig\r\n14/33 Test #13: secp256k1_tests::schnorrsig ............   Passed    0.07 sec\r\n      Start 30: secp256k1_noverify_tests::musig\r\n15/33 Test #25: secp256k1_noverify_tests::ecdh .........   Passed    0.05 sec\r\n      Start 31: secp256k1_noverify_tests::ellswift\r\n16/33 Test #29: secp256k1_noverify_tests::schnorrsig ...   Passed    0.03 sec\r\n      Start 32: secp256k1_noverify_tests::utils\r\n17/33 Test #32: secp256k1_noverify_tests::utils ........   Passed    0.00 sec\r\n      Start 33: secp256k1_exhaustive_tests\r\n18/33 Test  #9: secp256k1_tests::ecdh ..................   Passed    0.13 sec\r\n19/33 Test #30: secp256k1_noverify_tests::musig ........   Passed    0.11 sec\r\n20/33 Test #14: secp256k1_tests::musig .................   Passed    0.29 sec\r\n21/33 Test #26: secp256k1_noverify_tests::ecdsa ........   Passed    0.98 sec\r\n22/33 Test  #5: secp256k1_tests::field .................   Passed    1.24 sec\r\n23/33 Test #22: secp256k1_noverify_tests::group ........   Passed    1.71 sec\r\n24/33 Test #10: secp256k1_tests::ecdsa .................   Passed    1.95 sec\r\n25/33 Test #21: secp256k1_noverify_tests::field ........   Passed    1.94 sec\r\n26/33 Test  #2: secp256k1_tests::integer ...............   Passed    2.47 sec\r\n27/33 Test #18: secp256k1_noverify_tests::integer ......   Passed    2.47 sec\r\n28/33 Test  #6: secp256k1_tests::group .................   Passed    4.24 sec\r\n29/33 Test #31: secp256k1_noverify_tests::ellswift .....   Passed    4.32 sec\r\n30/33 Test #33: secp256k1_exhaustive_tests .............   Passed    7.87 sec\r\n31/33 Test #23: secp256k1_noverify_tests::ecmult .......   Passed    8.77 sec\r\n32/33 Test #15: secp256k1_tests::ellswift ..............   Passed   13.11 sec\r\n33/33 Test  #7: secp256k1_tests::ecmult ................   Passed   17.27 sec\r\n\r\n100% tests passed, 0 tests failed out of 33\r\n\r\nTotal Test time (real) =  17.31 sec\r\n\r\nThe following tests did not run:\r\n\t 11 - secp256k1_tests::recovery (Skipped)\r\n\t 27 - secp256k1_noverify_tests::recovery (Skipped)\r\n```\r\n\r\nUPD. Even after splitting up the `ecmult` tests, the `ellswift` tests are still the longest.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275667392",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "commented",
      "id": 3275695689,
      "node_id": "IC_kwDOAP4Jqs7DPyZJ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275695689",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T16:34:29Z",
      "updated_at": "2025-09-10T16:34:54Z",
      "author_association": "MEMBER",
      "body": "> [This](https://github.com/hebasto/secp256k1/commits/pr1734/0910/) branch with splitting by modules\r\n\r\nNice thanks, so this doesn’t introduce any overhead compared to #1211 when run by modules (same functionality in both places). That’s good to know.\r\n\r\nNow, here you can go faster by parallelizing by test cases instead of modules. Can run `./tests -print_tests` to see all available individual cases.\r\n\r\n> UPD. Even after splitting up the ecmult tests, the ellswift tests are still the longest.\r\n\r\nI left a todo comment about that. We can subdivide the `ellswift` tests (there is a single function atm) and they will be automatically parallelizable here too.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275695689",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "connected",
      "id": 19617248588,
      "node_id": "COE_lADOAP4Jqs7JvTsvzwAAAASRR3VM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19617248588",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T16:43:33Z"
    },
    {
      "event": "commented",
      "id": 3275778970,
      "node_id": "IC_kwDOAP4Jqs7DQGua",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275778970",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T17:04:52Z",
      "updated_at": "2025-09-10T17:04:52Z",
      "author_association": "MEMBER",
      "body": "> Now, here you can go faster by parallelizing by test cases instead of modules. Can run `./tests -print_tests` to see all available individual cases.\r\n\r\nYes, but that output can be quite noisy, especially when running in downstream projects such as Bitcoin Core.\r\n\r\nThat said, combining both approaches should work.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275778970",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "commented",
      "id": 3275863496,
      "node_id": "IC_kwDOAP4Jqs7DQbXI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275863496",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T17:28:19Z",
      "updated_at": "2025-09-10T17:28:19Z",
      "author_association": "MEMBER",
      "body": "> > Now, here you can go faster by parallelizing by test cases instead of modules. Can run `./tests -print_tests` to see all available individual cases.\r\n> \r\n> Yes, but that output can be quite noisy, especially when running in downstream projects such as Bitcoin Core.\r\n> \r\n> That said, combining both approaches should work.\r\n\r\nFor example, for [this](https://github.com/hebasto/secp256k1/commits/pr1734/0910a/) branch:\r\n```\r\n$ ctest --test-dir build -j 16 --output-on-failure\r\nTest project /home/hebasto/dev/secp256k1/secp256k1/build\r\n      Start  1: secp256k1_tests::ecmult_constants\r\n      Start  2: secp256k1_tests::ecmult\r\n      Start  3: secp256k1_tests::general\r\n      Start  4: secp256k1_tests::integer\r\n      Start  5: secp256k1_tests::hash\r\n      Start  6: secp256k1_tests::scalar\r\n      Start  7: secp256k1_tests::field\r\n      Start  8: secp256k1_tests::group\r\n      Start  9: secp256k1_tests::ec\r\n      Start 10: secp256k1_tests::ecdh\r\n      Start 11: secp256k1_tests::ecdsa\r\n      Start 12: secp256k1_tests::recovery\r\n      Start 13: secp256k1_tests::extrakeys\r\n      Start 14: secp256k1_tests::schnorrsig\r\n      Start 15: secp256k1_tests::musig\r\n      Start 16: secp256k1_tests::ellswift\r\n 1/35 Test  #3: secp256k1_tests::general .....................   Passed    0.01 sec\r\n 2/35 Test #12: secp256k1_tests::recovery ....................***Skipped   0.00 sec\r\n      Start 17: secp256k1_tests::utils\r\n      Start 18: secp256k1_noverify_tests::ecmult_constants\r\n 3/35 Test #17: secp256k1_tests::utils .......................   Passed    0.00 sec\r\n      Start 19: secp256k1_noverify_tests::ecmult\r\n 4/35 Test  #5: secp256k1_tests::hash ........................   Passed    0.02 sec\r\n      Start 20: secp256k1_noverify_tests::general\r\n 5/35 Test #20: secp256k1_noverify_tests::general ............   Passed    0.00 sec\r\n      Start 21: secp256k1_noverify_tests::integer\r\n 6/35 Test #13: secp256k1_tests::extrakeys ...................   Passed    0.03 sec\r\n      Start 22: secp256k1_noverify_tests::hash\r\n 7/35 Test  #9: secp256k1_tests::ec ..........................   Passed    0.03 sec\r\n      Start 23: secp256k1_noverify_tests::scalar\r\n 8/35 Test  #6: secp256k1_tests::scalar ......................   Passed    0.05 sec\r\n      Start 24: secp256k1_noverify_tests::field\r\n 9/35 Test #22: secp256k1_noverify_tests::hash ...............   Passed    0.02 sec\r\n      Start 25: secp256k1_noverify_tests::group\r\n10/35 Test #23: secp256k1_noverify_tests::scalar .............   Passed    0.03 sec\r\n      Start 26: secp256k1_noverify_tests::ec\r\n11/35 Test #26: secp256k1_noverify_tests::ec .................   Passed    0.01 sec\r\n      Start 27: secp256k1_noverify_tests::ecdh\r\n12/35 Test #14: secp256k1_tests::schnorrsig ..................   Passed    0.07 sec\r\n      Start 28: secp256k1_noverify_tests::ecdsa\r\n13/35 Test #27: secp256k1_noverify_tests::ecdh ...............   Passed    0.05 sec\r\n      Start 29: secp256k1_noverify_tests::recovery\r\n14/35 Test #29: secp256k1_noverify_tests::recovery ...........***Skipped   0.00 sec\r\n      Start 30: secp256k1_noverify_tests::extrakeys\r\n15/35 Test #30: secp256k1_noverify_tests::extrakeys ..........   Passed    0.01 sec\r\n      Start 31: secp256k1_noverify_tests::schnorrsig\r\n16/35 Test #10: secp256k1_tests::ecdh ........................   Passed    0.14 sec\r\n      Start 32: secp256k1_noverify_tests::musig\r\n17/35 Test #31: secp256k1_noverify_tests::schnorrsig .........   Passed    0.03 sec\r\n      Start 33: secp256k1_noverify_tests::ellswift\r\n18/35 Test #32: secp256k1_noverify_tests::musig ..............   Passed    0.12 sec\r\n      Start 34: secp256k1_noverify_tests::utils\r\n19/35 Test #34: secp256k1_noverify_tests::utils ..............   Passed    0.00 sec\r\n      Start 35: secp256k1_exhaustive_tests\r\n20/35 Test #15: secp256k1_tests::musig .......................   Passed    0.29 sec\r\n21/35 Test #28: secp256k1_noverify_tests::ecdsa ..............   Passed    0.97 sec\r\n22/35 Test  #7: secp256k1_tests::field .......................   Passed    1.62 sec\r\n23/35 Test #25: secp256k1_noverify_tests::group ..............   Passed    1.75 sec\r\n24/35 Test #24: secp256k1_noverify_tests::field ..............   Passed    1.97 sec\r\n25/35 Test #11: secp256k1_tests::ecdsa .......................   Passed    2.80 sec\r\n26/35 Test #21: secp256k1_noverify_tests::integer ............   Passed    3.79 sec\r\n27/35 Test  #4: secp256k1_tests::integer .....................   Passed    3.99 sec\r\n28/35 Test #33: secp256k1_noverify_tests::ellswift ...........   Passed    4.26 sec\r\n29/35 Test  #8: secp256k1_tests::group .......................   Passed    4.75 sec\r\n30/35 Test #18: secp256k1_noverify_tests::ecmult_constants ...   Passed    5.71 sec\r\n31/35 Test #19: secp256k1_noverify_tests::ecmult .............   Passed    8.26 sec\r\n32/35 Test #35: secp256k1_exhaustive_tests ...................   Passed    8.61 sec\r\n33/35 Test  #1: secp256k1_tests::ecmult_constants ............   Passed   10.30 sec\r\n34/35 Test  #2: secp256k1_tests::ecmult ......................   Passed   10.98 sec\r\n35/35 Test #16: secp256k1_tests::ellswift ....................   Passed   12.77 sec\r\n\r\n100% tests passed, 0 tests failed out of 35\r\n\r\nTotal Test time (real) =  12.78 sec\r\n\r\nThe following tests did not run:\r\n\t 12 - secp256k1_tests::recovery (Skipped)\r\n\t 29 - secp256k1_noverify_tests::recovery (Skipped)\r\n```",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275863496",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "commented",
      "id": 3275867033,
      "node_id": "IC_kwDOAP4Jqs7DQcOZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275867033",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T17:28:57Z",
      "updated_at": "2025-09-10T17:28:57Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275867033",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "commented",
      "id": 3275930639,
      "node_id": "IC_kwDOAP4Jqs7DQrwP",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275930639",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T17:42:10Z",
      "updated_at": "2025-09-10T17:42:10Z",
      "author_association": "MEMBER",
      "body": "> > > Now, here you can go faster by parallelizing by test cases instead of modules. Can run `./tests -print_tests` to see all available individual cases.\r\n> > \r\n> > \r\n> > Yes, but that output can be quite noisy, especially when running in downstream projects such as Bitcoin Core.\r\n> > That said, combining both approaches should work.\r\n> \r\n> For example, for [this](https://github.com/hebasto/secp256k1/commits/pr1734/0910a/) branch:\r\n> \r\n> ```\r\n> $ ctest --test-dir build -j 16 --output-on-failure\r\n> ...\r\n> \r\n> 100% tests passed, 0 tests failed out of 35\r\n> \r\n> Total Test time (real) =  12.78 sec\r\n> \r\n\r\nCool, thanks for testing! That's a good speedup.\r\nAnd we can do even better, because your branch only specifies a few single test cases, not all, to run in isolation; the rest are still running as a single process group (the library currently has 88 single test cases, and your output shows that only 35 were run - so you must have grouped most of them).\r\n\r\n> > Now, here you can go faster by parallelizing by test cases instead of modules. Can run `./tests -print_tests` to see all available individual cases.\r\n> \r\n> Yes, but that output can be quite noisy, especially when running in downstream projects such as Bitcoin Core.\r\n\r\nIt may worth to try using the binary `-j` (or `-jobs`) command-line arg from `ctest` in some way if excessive logging is a concern on the CI. Because we can control it internally; the output will be minimal (unless you specify `-log=1`).\r\n\r\n",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275930639",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "commented",
      "id": 3275942928,
      "node_id": "IC_kwDOAP4Jqs7DQuwQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3275942928",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T17:46:55Z",
      "updated_at": "2025-09-10T17:46:55Z",
      "author_association": "MEMBER",
      "body": "> And we can do even better, because your branch only specifies a few single test cases, not all, to run in isolation; the rest are still running as a single process group (the library currently has 88 single test cases, and your output shows that only 35 were run - so you must have grouped most of them).\r\n\r\nI doubt this would improve performance, since the total runtime is now constrained by the longest-running test.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275942928",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "commented",
      "id": 3276213192,
      "node_id": "IC_kwDOAP4Jqs7DRwvI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3276213192",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T19:15:38Z",
      "updated_at": "2025-09-10T19:15:38Z",
      "author_association": "MEMBER",
      "body": "> I doubt this would improve performance, since the total runtime is now constrained by the longest-running test.\r\n\r\nAh, I see. We could split the test in a follow-up then. At first glance, it seems internal cases are well defined.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3276213192",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19620199698,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASRdH0S",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19620199698",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "created_at": "2025-09-10T19:26:17Z"
    },
    {
      "event": "reviewed",
      "id": 3210722154,
      "node_id": "PRR_kwDOAP4Jqs6_X7tq",
      "url": null,
      "actor": null,
      "commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-11T11:47:16Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3210722154",
      "submitted_at": "2025-09-11T11:47:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3212434784,
      "node_id": "PRR_kwDOAP4Jqs6_ed1g",
      "url": null,
      "actor": null,
      "commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-11T15:41:18Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3212434784",
      "submitted_at": "2025-09-11T15:41:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3216917039,
      "node_id": "PRR_kwDOAP4Jqs6_vkIv",
      "url": null,
      "actor": null,
      "commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-12T15:09:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nTested this quickly on an arm64 machine and observed a nice >2x speedup (~24.4s `j=1` vs. ~11.1s `j=6`), also played around running only tests of certain modules, which worked as expected. Left just a few first-look nits.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3216917039",
      "submitted_at": "2025-09-12T15:09:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19667095849,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASUQBEp",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19667095849",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/5a501061ea082d66e193234023843738a328e4a4",
      "created_at": "2025-09-12T18:40:19Z"
    },
    {
      "event": "commented",
      "id": 3286462029,
      "node_id": "IC_kwDOAP4Jqs7D425N",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3286462029",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-12T18:46:10Z",
      "updated_at": "2025-09-12T18:46:10Z",
      "author_association": "MEMBER",
      "body": "Updated per feedback, thanks theStack and hebasto!",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3286462029",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3220441643,
      "node_id": "PRR_kwDOAP4Jqs6_9Aor",
      "url": null,
      "actor": null,
      "commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-13T11:57:59Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3220441643",
      "submitted_at": "2025-09-13T11:57:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3220531146,
      "node_id": "PRR_kwDOAP4Jqs6_9WfK",
      "url": null,
      "actor": null,
      "commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-13T12:16:30Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3220531146",
      "submitted_at": "2025-09-13T12:16:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3220629500,
      "node_id": "PRR_kwDOAP4Jqs6_9uf8",
      "url": null,
      "actor": null,
      "commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-13T12:48:39Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3220629500",
      "submitted_at": "2025-09-13T12:48:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3220704460,
      "node_id": "PRR_kwDOAP4Jqs6_-AzM",
      "url": null,
      "actor": null,
      "commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-13T13:13:25Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3220704460",
      "submitted_at": "2025-09-13T13:13:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3220733885,
      "node_id": "PRR_kwDOAP4Jqs6_-H-9",
      "url": null,
      "actor": null,
      "commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-13T13:21:50Z",
      "author_association": "MEMBER",
      "body": "Approach ACK 5a501061ea082d66e193234023843738a328e4a4.\r\n\r\nI've completed my first round of reviewing. The code looks good.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3220733885",
      "submitted_at": "2025-09-13T13:21:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDljY2U3MDM4NjM1YWZhN2U5NGM0MzRmMTU3MWE4ZTQzNTM1MGNiNTE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9cce7038635afa7e94c434f1571a8e435350cb51",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9cce7038635afa7e94c434f1571a8e435350cb51",
      "tree": {
        "sha": "e97c592e8ad6aba0d0001220bb8cfa0068d5917b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e97c592e8ad6aba0d0001220bb8cfa0068d5917b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e97c592e8ad6aba0d0001220bb8cfa0068d5917b\nparent 03fb60ad2e38ae9415e64bf5ba523a10100d4c3c\nauthor furszy <matiasfurszyfer@protonmail.com> 1757446547 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1757771728 -0400\n\nrefactor: move 'gettime_i64()' to tests_common.h\n\nRelocate the clock time getter to tests_common.h to\nmake it easily reusable across test programs. This\nwill be useful for the upcoming unit test framework.\n\nContext - why not placing it inside testutil.h?:\nThe bench program links against the production-compiled library,\nnot its own compiled version. Therefore, `gettime_i64()` cannot\nbe moved to testutil.h, because testutil.h calls\n`secp256k1_pubkey_save()`, which exists only in the internal\nsecp256k1.c and not in the public API.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjFd9AACgkQXdI8zGhq\npiNenBAAszAARpOFqJ+AJ40Ptw7HLsV2KvBzQPoA9SJngNQCfBc2aBPw05+lnlZq\n10wCX94HkEe9aTVIhWW5iDPMmHrBRz+N13kBD4TTvO9aYt28fJPd04E3KRdHfFzm\nCKCP1UlDgPiLyrHe7JepVeJcd2pnaReVSRkB8AKIi4Ya1P1pAKMNP6HRtIHsLivu\nDug1w1ovc+g5TrVyCakKqCYl7gJwlqvpczPsvPoLLOYAf9RAl/6DtdaLe/5CoNjc\nNfubYmZd6ojvgHqyagNAj0q/WT4hsKmavoem+30ahQPv00U9y4OERuv5hP2JCF9Y\naHyhh5z7eOEy8SGta9f0KvZA6UJjKuLQr6zKOkPY0l6XPh6hi1yNcFlQgBLhw+iF\n5dyo9R2yjkwA26PomcBzO/DAJFvlR3WvpahQboDE/n9xK1vS/sR9LgcBChPfbps5\nscuYDWZMIuF3iwmuZUMpnw4En4Q0Fb2dsqB6LTh2ILGRLye124/pJZi3x1D70ZQB\noDiKMVdDPhdR0vvUEcTMKSz/VXyvazECuQIfSmpIBoV9D3N8fBkReHifBWiyUeO8\nuD7DVnGrR/LUb7hCbMQNdvhxpJ9bXQ/T1wXelEwB1vbEFY2ZsZ/paiWuOI6095x/\nnQ+r0T0Fbbn9j2dROkH/BLZY/rdwReEbjYEYpgROvHVDTaDP/R0=\n=lTsC\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/03fb60ad2e38ae9415e64bf5ba523a10100d4c3c",
          "sha": "03fb60ad2e38ae9415e64bf5ba523a10100d4c3c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/03fb60ad2e38ae9415e64bf5ba523a10100d4c3c"
        }
      ],
      "message": "refactor: move 'gettime_i64()' to tests_common.h\n\nRelocate the clock time getter to tests_common.h to\nmake it easily reusable across test programs. This\nwill be useful for the upcoming unit test framework.\n\nContext - why not placing it inside testutil.h?:\nThe bench program links against the production-compiled library,\nnot its own compiled version. Therefore, `gettime_i64()` cannot\nbe moved to testutil.h, because testutil.h calls\n`secp256k1_pubkey_save()`, which exists only in the internal\nsecp256k1.c and not in the public API.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-13T13:55:28Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-09T19:35:47Z"
      },
      "sha": "9cce7038635afa7e94c434f1571a8e435350cb51"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19685480168,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASVWJbo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19685480168",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "created_at": "2025-09-14T13:34:59Z"
    },
    {
      "event": "commented",
      "id": 3289554155,
      "node_id": "IC_kwDOAP4Jqs7EEpzr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3289554155",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T13:38:24Z",
      "updated_at": "2025-09-14T13:38:24Z",
      "author_association": "MEMBER",
      "body": "Updated per feedback, thanks Hebasto!  \r\nMoved the headers existence check to the build systems (both).",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3289554155",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3225632653,
      "node_id": "PRR_kwDOAP4Jqs7AQz-N",
      "url": null,
      "actor": null,
      "commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T17:28:38Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3225632653",
      "submitted_at": "2025-09-15T17:28:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3225659345,
      "node_id": "PRR_kwDOAP4Jqs7AQ6fR",
      "url": null,
      "actor": null,
      "commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T17:38:42Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3225659345",
      "submitted_at": "2025-09-15T17:38:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3293257646,
      "node_id": "IC_kwDOAP4Jqs7ESx-u",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3293257646",
      "actor": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T17:40:38Z",
      "updated_at": "2025-09-15T17:40:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I like this a lot. Approach ACK 726e70b",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3293257646",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19709095212,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASWwO0s",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19709095212",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "created_at": "2025-09-15T19:20:42Z"
    },
    {
      "event": "commented",
      "id": 3293644315,
      "node_id": "IC_kwDOAP4Jqs7EUQYb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3293644315",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T19:33:25Z",
      "updated_at": "2025-09-15T19:33:25Z",
      "author_association": "MEMBER",
      "body": "Updated per feedback. Thanks john-moffett!\r\nAdapted the autoconf code for better portability and fixed a misplaced targets size check.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3293644315",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3229857544,
      "node_id": "PRR_kwDOAP4Jqs7Ag7cI",
      "url": null,
      "actor": null,
      "commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T12:53:35Z",
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "kmk142789",
        "id": 208793165,
        "node_id": "U_kgDODHHuTQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/208793165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kmk142789",
        "html_url": "https://github.com/kmk142789",
        "followers_url": "https://api.github.com/users/kmk142789/followers",
        "following_url": "https://api.github.com/users/kmk142789/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kmk142789/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kmk142789/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kmk142789/subscriptions",
        "organizations_url": "https://api.github.com/users/kmk142789/orgs",
        "repos_url": "https://api.github.com/users/kmk142789/repos",
        "events_url": "https://api.github.com/users/kmk142789/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kmk142789/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3229857544",
      "submitted_at": "2025-09-16T12:53:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3205587106,
      "node_id": "PRR_kwDOAP4Jqs6_EWCi",
      "url": null,
      "actor": null,
      "commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T13:15:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "nice! useful to be able to run a subset of tests.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3205587106",
      "submitted_at": "2025-09-16T13:15:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3230111111,
      "node_id": "PRR_kwDOAP4Jqs7Ah5WH",
      "url": null,
      "actor": null,
      "commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T14:34:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Two more nits and one observation. Otherwise all looks good.",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3230111111",
      "submitted_at": "2025-09-16T14:34:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19730511617,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASYB7cB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19730511617",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "906b45a73fc514068b5e4d30c3420857e16ac283",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/906b45a73fc514068b5e4d30c3420857e16ac283",
      "created_at": "2025-09-16T16:01:36Z"
    },
    {
      "event": "reviewed",
      "id": 3230843415,
      "node_id": "PRR_kwDOAP4Jqs7AksIX",
      "url": null,
      "actor": null,
      "commit_id": "906b45a73fc514068b5e4d30c3420857e16ac283",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T16:36:53Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3230843415",
      "submitted_at": "2025-09-16T16:36:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19732477691,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASYJbb7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19732477691",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/7b51e53607889d443b64d90f7a363a962d6a54ec",
      "created_at": "2025-09-16T17:49:00Z"
    },
    {
      "event": "commented",
      "id": 3303310683,
      "node_id": "IC_kwDOAP4Jqs7E5IVb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3303310683",
      "actor": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-17T14:35:13Z",
      "updated_at": "2025-09-17T14:35:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 7b51e53",
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3303310683",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3257729972,
      "node_id": "PRR_kwDOAP4Jqs7CLQO0",
      "url": null,
      "actor": null,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-23T12:25:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nI closed #1211.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3257729972",
      "submitted_at": "2025-09-23T12:25:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19875108023,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASgphS3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19875108023",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "created_at": "2025-09-23T21:02:27Z"
    },
    {
      "event": "reviewed",
      "id": 3259594120,
      "node_id": "PRR_kwDOAP4Jqs7CSXWI",
      "url": null,
      "actor": null,
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-23T22:28:25Z",
      "author_association": "MEMBER",
      "body": "Thanks for the feedback!\r\nEnded up redesigning part of the args-parsing structure to support double-dash multi-char options in a clean and extensible manner.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3259594120",
      "submitted_at": "2025-09-23T21:08:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3261212694,
      "node_id": "PRR_kwDOAP4Jqs7CYigW",
      "url": null,
      "actor": null,
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-24T07:29:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested again with the new parsing logic [1], worked as expected :heavy_check_mark: . I haven't had a chance yet to test on a system where `SUPPORTS_CONCURRENCY` doesn't hold. \r\n\r\n[1] small general rant: it's a bit depressing to see that in the year 2025 command-line parsing still has to be implemented manually. I was about to suggest using [`getopt(3)` ](https://man7.org/linux/man-pages/man3/getopt.3.html), but that is not part of the C standard library (in contrast to what the linked manpage under \"LIBRARY\" might suggest) and only available on POSIX systems :unamused: ",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3261212694",
      "submitted_at": "2025-09-24T07:29:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3328748443,
      "node_id": "IC_kwDOAP4Jqs7GaKub",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3328748443",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-24T14:15:50Z",
      "updated_at": "2025-09-24T14:15:50Z",
      "author_association": "MEMBER",
      "body": "> [1] small general rant: it's a bit depressing to see that in the year 2025 command-line parsing still has to be implemented manually.\r\n\r\nI don’t think we’re allowed to rant; we’re coding in a C89 project with no memory allocations.. in 2025.\r\n",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3328748443",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19894746924,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASh0b8s",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19894746924",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "created_at": "2025-09-24T14:40:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19903988541,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASiXsM9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19903988541",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "created_at": "2025-09-24T22:06:56Z"
    },
    {
      "event": "reviewed",
      "id": 3265194970,
      "node_id": "PRR_kwDOAP4Jqs7Cnuva",
      "url": null,
      "actor": null,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-25T01:42:30Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3265194970",
      "submitted_at": "2025-09-25T01:42:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3269695435,
      "node_id": "PRR_kwDOAP4Jqs7C45fL",
      "url": null,
      "actor": null,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-26T00:13:23Z",
      "author_association": "MEMBER",
      "body": "Tested 0ddcd093def9ac371bff3d4665096c0a10a7d94d on Ubuntu 12.04.5 LTS using GCC 4.6.3. It works as expected, apart from the previously [mentioned](https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2377414417) minor issue.\r\n\r\nUPD. (1) Tested on Windows 11.\r\n\r\n(2) Cross-compiled for Windows and tested on Windows 11.\r\n\r\nIn both cases everything is OK. \"Parallel execution not supported on your system. Running sequentially..\"",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3269695435",
      "submitted_at": "2025-09-25T23:15:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3269777304,
      "node_id": "PRR_kwDOAP4Jqs7C5NeY",
      "url": null,
      "actor": null,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-26T00:14:31Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3269777304",
      "submitted_at": "2025-09-26T00:14:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3271029421,
      "node_id": "PRR_kwDOAP4Jqs7C9_Kt",
      "url": null,
      "actor": null,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-26T09:04:52Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3271029421",
      "submitted_at": "2025-09-26T09:04:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19948778713,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASlCjTZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19948778713",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "created_at": "2025-09-26T17:14:02Z"
    },
    {
      "event": "commented",
      "id": 3339769739,
      "node_id": "IC_kwDOAP4Jqs7HENeL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3339769739",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-26T17:29:38Z",
      "updated_at": "2025-09-26T17:29:38Z",
      "author_association": "MEMBER",
      "body": "Thanks for the feedback, hebasto and theStack.\r\nMerged the `-help`/`print_tests` options parsing with the general parsing procedure to fix the missing double-dash case and removed the UTF-8 arrow.\r\n",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3339769739",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3276966247,
      "node_id": "PRR_kwDOAP4Jqs7DUoln",
      "url": null,
      "actor": null,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-28T16:18:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK fed7e3820031dce3b6af2ed36ec2a5e096c90d42\r\n\r\nTested a bit more and verified that all existing tests have been adapted to the new framework. Didn't review the autotools and CMake changes in-depth as I'm not too familiar with build systems. Left only a few non-blocking nits below. Also, dumping some nice-to-have follow-up ideas came to my mind (not sure if introducing additional complexity is worth it though):\r\n* show summary at the end (number of executed/passed/failed tests)\r\n* if a single test fails, still run the others (would need some deeper changes though, as right now we just crash on a failed condition)\r\n* allow to run tests specified by index numbers shown in `--print_tests`\r\n\r\nnit: unit_test.c is still in UTF-8 according to the `file` utility.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3276966247",
      "submitted_at": "2025-09-28T16:15:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19970018848,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASmTk4g",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19970018848",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "created_at": "2025-09-28T19:52:13Z"
    },
    {
      "event": "reviewed",
      "id": 3277346049,
      "node_id": "PRR_kwDOAP4Jqs7DWFUB",
      "url": null,
      "actor": null,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-28T19:57:12Z",
      "author_association": "MEMBER",
      "body": "> nit: unit_test.c is still in UTF-8 according to the file utility.\r\n\r\nFixed now. Thanks.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3277346049",
      "submitted_at": "2025-09-28T19:57:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3278215891,
      "node_id": "PRR_kwDOAP4Jqs7DZZrT",
      "url": null,
      "actor": null,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T08:09:36Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3278215891",
      "submitted_at": "2025-09-29T08:09:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19987397617,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASnV3vx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19987397617",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "created_at": "2025-09-29T15:30:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19990619009,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASniKOB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19990619009",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eb30dfa9691ed9a79e42f157d763a90e62b58efe",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/eb30dfa9691ed9a79e42f157d763a90e62b58efe",
      "created_at": "2025-09-29T18:20:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19991244998,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASnkjDG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19991244998",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "created_at": "2025-09-29T18:54:18Z"
    },
    {
      "event": "reviewed",
      "id": 3281393600,
      "node_id": "PRR_kwDOAP4Jqs7DlhfA",
      "url": null,
      "actor": null,
      "commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T19:13:27Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3281393600",
      "submitted_at": "2025-09-29T19:13:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3348716717,
      "node_id": "IC_kwDOAP4Jqs7HmVyt",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3348716717",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T19:27:11Z",
      "updated_at": "2025-09-29T19:27:11Z",
      "author_association": "MEMBER",
      "body": "To fix Autotools:\r\n```diff\r\ndiff --git a/Makefile.am b/Makefile.am\r\nindex d379c3f..dc79857 100644\r\n--- a/Makefile.am\r\n+++ b/Makefile.am\r\n@@ -123,7 +123,7 @@ if USE_TESTS\r\n TESTS += noverify_tests\r\n noinst_PROGRAMS += noverify_tests\r\n noverify_tests_SOURCES = src/tests.c\r\n-noverify_tests_CPPFLAGS = $(SECP_CONFIG_DEFINES) -DSUPPORTS_CONCURRENCY=$(SUPPORTS_CONCURRENCY)\r\n+noverify_tests_CPPFLAGS = $(SECP_CONFIG_DEFINES) $(TEST_DEFINES)\r\n noverify_tests_LDADD = $(COMMON_LIB) $(PRECOMPUTED_LIB)\r\n noverify_tests_LDFLAGS = -static\r\n if !ENABLE_COVERAGE\r\ndiff --git a/configure.ac b/configure.ac\r\nindex 55eebdf..6028ee2 100644\r\n--- a/configure.ac\r\n+++ b/configure.ac\r\n@@ -447,8 +447,8 @@ fi\r\n if test \"x$enable_tests\" != x\"no\"; then\r\n   AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\r\n   AS_IF([test \"x$ac_cv_header_sys_types_h\" = xyes && test \"x$ac_cv_header_sys_wait_h\" = xyes &&\r\n-         test \"x$ac_cv_header_unistd_h\" = xyes], [SUPPORTS_CONCURRENCY=1])\r\n-  AC_SUBST(SUPPORTS_CONCURRENCY)\r\n+         test \"x$ac_cv_header_unistd_h\" = xyes], [TEST_DEFINES=\"-DSUPPORTS_CONCURRENCY=1\"], TEST_DEFINES=\"\")\r\n+  AC_SUBST(TEST_DEFINES)\r\n fi\r\n \r\n ###\r\n```",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3348716717",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19992415803,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASnpA47",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19992415803",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "created_at": "2025-09-29T20:01:00Z"
    },
    {
      "event": "commented",
      "id": 3348841906,
      "node_id": "IC_kwDOAP4Jqs7Hm0Wy",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3348841906",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T20:01:40Z",
      "updated_at": "2025-09-29T20:01:40Z",
      "author_association": "MEMBER",
      "body": "Thanks @hebasto! Updated with autotools patch.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3348841906",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "mentioned",
      "id": 19992430300,
      "node_id": "MEE_lADOAP4Jqs7JvTsvzwAAAASnpEbc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19992430300",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T20:01:41Z"
    },
    {
      "event": "subscribed",
      "id": 19992430426,
      "node_id": "SE_lADOAP4Jqs7JvTsvzwAAAASnpEda",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19992430426",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T20:01:41Z"
    },
    {
      "event": "reviewed",
      "id": 3284355740,
      "node_id": "PRR_kwDOAP4Jqs7Dw0qc",
      "url": null,
      "actor": null,
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T12:10:43Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3284355740",
      "submitted_at": "2025-09-30T12:10:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3284764836,
      "node_id": "PRR_kwDOAP4Jqs7DyYik",
      "url": null,
      "actor": null,
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T13:47:11Z",
      "author_association": "MEMBER",
      "body": "ACK modulo https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391156260 (sorry for overlooking that earlier).\r\n\r\n[This](https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2340384653) discussion can be continued in https://github.com/bitcoin-core/secp256k1/pull/1724.\r\n\r\n[This](https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391378997) comment can be addressed in a follow-up PR.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3284764836",
      "submitted_at": "2025-09-30T13:21:54Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20010782265,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASovE45",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/20010782265",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "created_at": "2025-09-30T13:45:41Z"
    },
    {
      "event": "reviewed",
      "id": 3284939167,
      "node_id": "PRR_kwDOAP4Jqs7DzDGf",
      "url": null,
      "actor": null,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T15:02:36Z",
      "author_association": "MEMBER",
      "body": "~ACK b209c65782c4b4fbfa337ecf4dfac2ee142db84b.~\r\n\r\nUPD. See https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391940354",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3284939167",
      "submitted_at": "2025-09-30T13:46:34Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3284918572,
      "node_id": "PRR_kwDOAP4Jqs7Dy-Es",
      "url": null,
      "actor": null,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T14:37:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nTwo overall comments:\r\n* I saw some discussion about it, but I'm unconvinced about ignoring unknown arguments. I think the risk of silently ignoring a misspelled option is worse than the complexity of dealing with testing across versions.\r\n* A big feature I'm missing is integration into the build framework, such that e.g. test invocations get automatically split by module, and have `ctest --test_dir=build -j16` run the `tests` binary once for each module. This would automatically give well-balanced parallellism, that's automatically integrated into CI, even for projects that include it (Bitcoin Core). Is something like that planned?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3284918572",
      "submitted_at": "2025-09-30T14:37:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "commented",
      "id": 3352600996,
      "node_id": "IC_kwDOAP4Jqs7H1KGk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3352600996",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-30T14:54:48Z",
      "updated_at": "2025-09-30T14:54:48Z",
      "author_association": "MEMBER",
      "body": "> * A big feature I'm missing is integration into the build framework, such that e.g. test invocations get automatically split by module, and have `ctest --test_dir=build -j16` run the `tests` binary once for each module. This would automatically give well-balanced parallellism, that's automatically integrated into CI, even for projects that include it (Bitcoin Core). Is something like that planned?\r\n\r\nSee https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3275667392.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3352600996",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20018416765,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASpMMx9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/20018416765",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eed1390205c5315af46be4b2326cb2d0e084a536",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/eed1390205c5315af46be4b2326cb2d0e084a536",
      "created_at": "2025-09-30T20:01:10Z"
    },
    {
      "event": "reviewed",
      "id": 3287883899,
      "node_id": "PRR_kwDOAP4Jqs7D-SB7",
      "url": null,
      "actor": null,
      "commit_id": "eed1390205c5315af46be4b2326cb2d0e084a536",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-01T07:21:57Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3287883899",
      "submitted_at": "2025-10-01T07:21:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQ4Nzg5ZGFmYzJhODY2YmJjNjM5MTg0ZjAzODc2MzdjMGRlY2I4YzU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/48789dafc2a866bbc639184f0387637c0decb8c5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/48789dafc2a866bbc639184f0387637c0decb8c5",
      "tree": {
        "sha": "c10bf0aa4b443e9f700fbc3463057d0bdc64326e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c10bf0aa4b443e9f700fbc3463057d0bdc64326e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c10bf0aa4b443e9f700fbc3463057d0bdc64326e\nparent 9cce7038635afa7e94c434f1571a8e435350cb51\nauthor furszy <matiasfurszyfer@protonmail.com> 1756911577 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1759328277 -0400\n\ntest: introduce (mini) unit test framework\n\nLightweight unit testing framework, providing a structured way to define,\nexecute, and report tests. It includes a central test registry, a flexible\ncommand-line argument parser of the form \"--key=value\" / \"-k=value\" /\n\"-key=value\" (facilitating future framework extensions), ability to run\ntests in parallel and accumulated test time logging reports.\n\nSo far the supported command-line args are:\n- \"--jobs=<num>\" or \"-j=<num>\" to specify the number of parallel workers.\n- \"--seed=<hex>\" to specify the RNG seed (random if not set).\n- \"--iterations=<num>\" or \"-i=<num>\" to specify the number of iterations.\n\nCompatibility Note:\nTo stay compatible with previous versions, the framework also supports\nthe two original positional arguments: the iterations count and the\nRNG seed (in that order).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjdOBUACgkQXdI8zGhq\npiNdIQ/+IV503xWQ2KYISGuIH9NMxT8kcqEYSX4pDnJaQdo4i6jcpFaJ9+Swca9f\npqL5wPq0qUJ/kqlTbM6EKZkXQlXzcR7RRbwHp6amVz23YDu1IMTBNKlCCViEKJYF\ntaiGUIBMaO8SIlClr+52a/PfGFP+0/+2R2q6QJ0IBjchbzYzto4vuqD702dqaudc\necjNVhBz6GLt1z7OUNDh0bnZCeWYWrKoolfNfz7fxYkjq1BRelYFdykLOWJoaOmr\nzHo6qs2bmUbTAW/a3dAAo8t19WNWFd0GVDl65vc67sxmemTiSykqypQyccdRXMI8\n5699UDrlbfGxpZkIvXrivD1gjdA1I/Kod8WkW2SOj4zs9I3mhPGbL4J4Y+BY08ek\n7gO4R1IlyIqIeRjXZ4TaeLEPXwMP0nFR+18gIuER/dusXsez0WWZ/bN8Y0gzASq0\nTphDVvRArM8foQSfMuA0F+GNMXy+/L6XM8MbKSbjHou0OmeNXVI6KI4tRiur4yeq\nrsrS9jBx/u+BhxMvI6qNBvVr+CRA7OivK+Ip/8YQ6cBKLeacBrOTsYjHJtSFroGD\nlFWH8UfHgqiUdPnK+g1ss97HMTWn3PTgMxs2j8yN2j3dwgXdcwjqMiQ9nGXR3P7S\nUUiU1KOYdXwFqu8IAT6dgxl0V1NykCy8PN/wv906s2pKxBPqDRE=\n=TcIX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9cce7038635afa7e94c434f1571a8e435350cb51",
          "sha": "9cce7038635afa7e94c434f1571a8e435350cb51",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9cce7038635afa7e94c434f1571a8e435350cb51"
        }
      ],
      "message": "test: introduce (mini) unit test framework\n\nLightweight unit testing framework, providing a structured way to define,\nexecute, and report tests. It includes a central test registry, a flexible\ncommand-line argument parser of the form \"--key=value\" / \"-k=value\" /\n\"-key=value\" (facilitating future framework extensions), ability to run\ntests in parallel and accumulated test time logging reports.\n\nSo far the supported command-line args are:\n- \"--jobs=<num>\" or \"-j=<num>\" to specify the number of parallel workers.\n- \"--seed=<hex>\" to specify the RNG seed (random if not set).\n- \"--iterations=<num>\" or \"-i=<num>\" to specify the number of iterations.\n\nCompatibility Note:\nTo stay compatible with previous versions, the framework also supports\nthe two original positional arguments: the iterations count and the\nRNG seed (in that order).",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-01T14:17:57Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-03T14:59:37Z"
      },
      "sha": "48789dafc2a866bbc639184f0387637c0decb8c5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDllYzNiZmUyMmRjNjYyODc1ZTZmY2EyNDE5NzEzZWFlMTA1ZGFiZWU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9ec3bfe22dc662875e6fca2419713eae105dabee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9ec3bfe22dc662875e6fca2419713eae105dabee",
      "tree": {
        "sha": "7e6bb44bbdd75f048485c67351f23c66f54b3ee4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7e6bb44bbdd75f048485c67351f23c66f54b3ee4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7e6bb44bbdd75f048485c67351f23c66f54b3ee4\nparent 48789dafc2a866bbc639184f0387637c0decb8c5\nauthor furszy <matiasfurszyfer@protonmail.com> 1757432717 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1759328277 -0400\n\ntest: adapt modules to the new test infrastructure\n\nThis not only provides a structural improvement but also\nallows us to (1) specify individual tests to run and (2)\nexecute each of them concurrently.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjdOBUACgkQXdI8zGhq\npiPmbg/+MEm9fslgncfVga95VRZGlrzRTETVJ83CL6JYY9NRreq10fuWUwkDIv0x\nmP64zjUV5CrKp4Fi2koKSFYX2+qvJ3Ka3M1yDOJm7T75c0rvs5r9BkaltfNcBspv\nC+Zdh0djdX28YWG+OD0a1ZpWLVidd5og+PEK3Z354H7ABobbqCpuVLPLycPU4+mK\nuDLyTXMPhkeWJJLXg4qPc7Ygve/0rws7pI4SCs0JBkkPfyDNaNBnYywzt0voQeG3\nbBG93wUrNQ+JUuxXD4POqlse4KtjvKyh9jfUXpvnUz+z6DEPvM7QyfXclQqlpBSR\n5GhiiYhyPuv3+Z6Pst1G52YWg66xE5qzTa6PdioJgnCCdMXgEH197xjD0IfZQu9v\n+yR8HFysdMQusao04nufJ/Ge5U6XwoCcPih88WI+PxNgr6fIhzIs7KJuLKfRSLQg\n4LqaqcLMuZdZBjPqI9K8s4x7p25yzx1nOsNRA6Mp1Fcv/LL49knakOP4oiEyY+44\nacVmp+00/WWWnTiVft+X5ETU4Sy1TBvxCazwzaLiMBGH7XR1RdTW5O08Jdve1v8W\nQmJxvZMjlIlbPf7yHV3GKQdmcgTX3mRX3mYwkF/3ggt1cR8ZECuTrV5EoWPSgL4j\nU9O25XduM+Y7CmjmpNIArj4RK4S2cU3Hi8SHuICxuKJ95fg2T+k=\n=DIgp\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/48789dafc2a866bbc639184f0387637c0decb8c5",
          "sha": "48789dafc2a866bbc639184f0387637c0decb8c5",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/48789dafc2a866bbc639184f0387637c0decb8c5"
        }
      ],
      "message": "test: adapt modules to the new test infrastructure\n\nThis not only provides a structural improvement but also\nallows us to (1) specify individual tests to run and (2)\nexecute each of them concurrently.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-01T14:17:57Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-09T15:45:17Z"
      },
      "sha": "9ec3bfe22dc662875e6fca2419713eae105dabee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDAzMDJjMWEzZDczMTM3ZmNmNzVhN2NhMGYwZjNjYmNlYzAzNjhlYzg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0302c1a3d73137fcf75a7ca0f0f3cbcec0368ec8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0302c1a3d73137fcf75a7ca0f0f3cbcec0368ec8",
      "tree": {
        "sha": "0c65aa6cb2b421c85678d9696be5a5c1860461c9",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0c65aa6cb2b421c85678d9696be5a5c1860461c9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0c65aa6cb2b421c85678d9696be5a5c1860461c9\nparent 9ec3bfe22dc662875e6fca2419713eae105dabee\nauthor furszy <matiasfurszyfer@protonmail.com> 1756927643 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1759328277 -0400\n\ntest: add --help for command-line options\n\nAdd a help message for the test suite, documenting available options,\ndefaults, and backward-compatible positional arguments.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjdOBUACgkQXdI8zGhq\npiO71A/9GCVA0pkN9CrtAZidMJhAPiu6Jx3LxW3x09dji5+VkBpHsT0Ww6fGzFdx\nFyZKgL5Fm6Md/dReQHj4hY5q6RvFVoL+Ok+7lZrEcBkLlfUlCIXN28GMbKNd4muy\nYmDz51TQPpKTnAnwyvfrpWcShnIG01ImjEBp/R7vIJRAxS23KPxU46w9OqadUnAI\nFPupH3N//4lRRiLhCD/tUw4e3qsHY3SKfgUzFdsIGSd9TqyaPwI4Tlyu95TGxG4C\nkliSY0xca/bAN2sLLWBw5QFLI3NP4+XpdRYu1yuiodldiPySEeFdIxRVVBpAhGWE\nOkXUE+IMI6/k7FDi2dhHmijB1NzVmB/Wdpk7sPTg0PJ5mpvunv3h+K2uU0FyBk/s\n0MzE2TimqliiLXGcV2j5AYHb88PRM7z5bdfaj7B0EzCiiEFcFAiwUYF3i9bj2S9e\nhUZNeFA8XgWQp4kv+2920gCKSpdhlrS56m3FoNKSgIseJpatULZGCjPv9yMlhkz/\nT8CdFU6/7RxQVbODcI7ivjFdPlcv0SzqYqOzCFY2NjqBXH86YN9uy9P0vhM7a/rH\ntDBgrE4CQBXXD/xuaRuNmcc3o3CF3iAdjirN0rOguLn4djTjeB2hMwRjKCORK92o\nYj0/XCAulgCVrXAjTL+g8PNGI2tT8JU23oHDx0NUjAMHS3rZVBw=\n=R2wW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9ec3bfe22dc662875e6fca2419713eae105dabee",
          "sha": "9ec3bfe22dc662875e6fca2419713eae105dabee",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9ec3bfe22dc662875e6fca2419713eae105dabee"
        }
      ],
      "message": "test: add --help for command-line options\n\nAdd a help message for the test suite, documenting available options,\ndefaults, and backward-compatible positional arguments.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-01T14:17:57Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-03T19:27:23Z"
      },
      "sha": "0302c1a3d73137fcf75a7ca0f0f3cbcec0368ec8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDk1M2Y3YjAwODg2NWVkNTAzZjM2YjA0MGM0YWY0ZGI5NmM0ZDU0ZDk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/953f7b008865ed503f36b040c4af4db96c4d54d9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/953f7b008865ed503f36b040c4af4db96c4d54d9",
      "tree": {
        "sha": "1123fc9c2404bfcf1d777b6d14d0ae27147f4d4f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1123fc9c2404bfcf1d777b6d14d0ae27147f4d4f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1123fc9c2404bfcf1d777b6d14d0ae27147f4d4f\nparent 0302c1a3d73137fcf75a7ca0f0f3cbcec0368ec8\nauthor furszy <matiasfurszyfer@protonmail.com> 1756934303 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1759328345 -0400\n\ntest: support running specific tests/modules targets\n\nAdd support for specifying single tests or modules to run via the\n\"--target\" or \"-t\" command-line option. Multiple targets can be\nprovided; only the specified tests or all tests in the specified\nmodule/s will run instead of the full suite.\n\nExamples:\n-t=<test name> runs an specific test.\n-t=<module name> runs all tests within the specified module.\n\nBoth options can be provided multiple times.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjdOFkACgkQXdI8zGhq\npiOwPg//btuZ6+5YtIL4zlPduCjmAlsdBSYc3qVDEYbj+veNaAxsPPtVDVvCgG3S\njAgdjdmXFJwtej/oCmP8H45Ykdm9FIjvI3lO+UjmPcvVyB5hRXoMCdbr27ykzLJd\nN0MqYRQGDIBMe3nUGFvWhMLjm3WZ+QkCPEEi7dYwTih/u2aNIYwJQNJWLnefd6UC\nASzkN54RsJOArcIoPre5wwttPoqKj0Jg9LK1O5NGGPMI/o6+unKJ2X3WCHb/Vjaq\nrL0R4xAYyztmofIe+zD/RPQLf+DIsqGMtKseVi2Mn4vrXpjqwWaLnpQTaEy7qrkQ\nuryha/XaLf/R6ZMQK+xSOTEVAzP8KvWPZ1RT5FT1OfN+d9w/XRHrJcPpmqxNcAdT\nwyj3Suo7Xr74lzNYi5O7cXe5g6d5UAT+mOqmzqL/Bn5PTSWWLcE4zVFm3qnRvEqF\nxu2F0pkvSqDgbwERBieYh0MFIJKgFQJ7rseif8VyQh9EeblOBn9jgA9H6bsnPWhb\nx+ixoZS2YuHh8tXQUBrn24jYvHM5MxIRb7gTw4qMSQUAuXsKHFlB6OeZif7id7A0\nGUK64kQ+1iDpMMedJ5a2HXNyf8EMnm2XYMOVuLq8R1hNF02F7nMzd1TMglynkd0D\nWmvwCAaG+dnHMjIsq7Cz452+V31j07e1DMckhBGmpftlL7mPtVo=\n=yXih\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0302c1a3d73137fcf75a7ca0f0f3cbcec0368ec8",
          "sha": "0302c1a3d73137fcf75a7ca0f0f3cbcec0368ec8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0302c1a3d73137fcf75a7ca0f0f3cbcec0368ec8"
        }
      ],
      "message": "test: support running specific tests/modules targets\n\nAdd support for specifying single tests or modules to run via the\n\"--target\" or \"-t\" command-line option. Multiple targets can be\nprovided; only the specified tests or all tests in the specified\nmodule/s will run instead of the full suite.\n\nExamples:\n-t=<test name> runs an specific test.\n-t=<module name> runs all tests within the specified module.\n\nBoth options can be provided multiple times.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-01T14:19:05Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-03T21:18:23Z"
      },
      "sha": "953f7b008865ed503f36b040c4af4db96c4d54d9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDk1Yjk5NTNlYTQ0YWQ2MjczZGQ4ZGRkMjA0MDg0NGE1NDkzNmVkNzE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/95b9953ea44ad6273dd8ddd2040844a54936ed71",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/95b9953ea44ad6273dd8ddd2040844a54936ed71",
      "tree": {
        "sha": "299b8a74b34294fa35a1c4bdb171068431817889",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/299b8a74b34294fa35a1c4bdb171068431817889"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 299b8a74b34294fa35a1c4bdb171068431817889\nparent 953f7b008865ed503f36b040c4af4db96c4d54d9\nauthor furszy <matiasfurszyfer@protonmail.com> 1757355432 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1759328345 -0400\n\ntest: Add option to display all available tests\n\nUseful option to avoid opening the large tests.c file just to find\nthe test case you want to run.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjdOFkACgkQXdI8zGhq\npiNxYQ/+PBZLHWumAp26cdo4pvzaLjRhafCNH15I82AZu8rv4C9Lg/T9Aq5bAAzu\nRblJhv91xDx3bawxeVmmy7S33NyEKmd7SQ6/vrYLvSsvlqxiXftQzOveQGRbe9iD\nWyVKiIweFU3WtPD7bsAgy3z1CKZSS6JXk1tvQ3HgCfm8wWgdTNenPqWosPAtpVTP\nt9p0nB8NIJUXX3iGOFzDeqBYqqt9wV5ahJyveJNrQ8fQOwhxEzdiZ942uikZaZ6n\ncWb3F3pCW6DKA77ErZJuwS9y/5PiKqhQCvcqLXbKeBQ5wNhji1FzjR59XYwykY5V\nHsOuJtGxAd4/BbI7saViLEzDKN6/QIors9SrpvhnJ1M6jhUAEUQol+Fz0eY9RLgN\n5lBFPcSg6K/cv63bSVwljYYDLHmMgUCnfE/VpkGW2owDRnmoSX9Gn2jacrW/nTOj\nuGgI/dzcCJOa6zwNvhq+i3ONTePsRshTb1vOJo8hDvafuaRWj+RteQFaJY789tN3\no+z/BqB+IcuLI1QT09Z3pra0p6JexJIQUtG0tryDZUyC+u+iY9T1ICB2HgMaES/D\n7Bb4miK9muK2hGqmR9Xn62sIVOso/xh05ApBE3j8NN2D29zA69oOK6L1gKk/qM2Z\ndOR4DYXQjSh6nCMJzQBl95gT8NL/IUzRdFCLi/Hcw5rCRESaGyk=\n=y4ZY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/953f7b008865ed503f36b040c4af4db96c4d54d9",
          "sha": "953f7b008865ed503f36b040c4af4db96c4d54d9",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/953f7b008865ed503f36b040c4af4db96c4d54d9"
        }
      ],
      "message": "test: Add option to display all available tests\n\nUseful option to avoid opening the large tests.c file just to find\nthe test case you want to run.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-01T14:19:05Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-08T18:17:12Z"
      },
      "sha": "95b9953ea44ad6273dd8ddd2040844a54936ed71"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDJmNDU0NmNlNTYxMGY0Zjc4NDFmYzJkYzJlZWY2OGRiZmNkY2M3NjE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "tree": {
        "sha": "3d4d3c8f20405555a694233e6ada22522338e25c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3d4d3c8f20405555a694233e6ada22522338e25c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3d4d3c8f20405555a694233e6ada22522338e25c\nparent 95b9953ea44ad6273dd8ddd2040844a54936ed71\nauthor furszy <matiasfurszyfer@protonmail.com> 1757430125 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1759328345 -0400\n\ntest: add --log option to display tests execution\n\nWhen enabled (--log=1), shows test start, completion, and execution time.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjdOFkACgkQXdI8zGhq\npiNEBRAAw9jhGOH5GcfoD89+QGbTuwq/ai0omXNgzUcLJh8kPPgdefTbZor8TpcA\nWZaUDBRhkHK69rw7jSHMHx5Wjmi/TohCNomR8DNNZiEWJom277mkfFHDBnw4nEXm\nX5CQ12reqGF2LkSQJUKSK+HAw0k7KwLT4GPgRVl+BfAJp/kJOBmMGg2gIIlco0u9\nAklFMsbUJZtp11/CNINhx5si7/Trn1YXKWDKPLqfxwHNyH7ArlO4Vw/yLvr9NFGe\naoxzw7h6TdM4oFYCuX/jvlxb5/tN4NgB4ZvZWw0kjAkBjCQiiWC0szLaATMuJMJW\nflYcxokrrv9SMQe+AYBLJ+EyBqtqnWEN5ljtohaM9eYhQwvoY8GJPXJOAXJopzpj\nh+pmObGx92eEda2LtoPP4jtzafNe0I+Gjhf5Q1BmcRC4xFENw4k6a3+zyt1dBsCD\nAvxCQPtftWPuS5qwwdjjn+N0aC3EEMkyt8yyrNO+EwD6sONNq0/w6mIRou99P9hz\nDlsjg6ySJoT6uRQyN3k/Kk9d+vBWHp8EXBo13xLVcPAOv+RMPLum8m88XorVmMpF\nw5ryOaI8KsaZFpIlHDI/Fd3Ak6xZbLSGyw9t+yMic7/nK90HbHHGIlMQo/3PwE9K\nPc/4kWjZ8wuLGqV/15pYzHn57cZLCNdsH1It1r8A7w+ouOjg/+w=\n=HQrs\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/95b9953ea44ad6273dd8ddd2040844a54936ed71",
          "sha": "95b9953ea44ad6273dd8ddd2040844a54936ed71",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/95b9953ea44ad6273dd8ddd2040844a54936ed71"
        }
      ],
      "message": "test: add --log option to display tests execution\n\nWhen enabled (--log=1), shows test start, completion, and execution time.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-01T14:19:05Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-09-09T15:02:05Z"
      },
      "sha": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20035785352,
      "node_id": "HRFPE_lADOAP4Jqs7JvTsvzwAAAASqOdKI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/20035785352",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "commit_url": "https://api.github.com/repos/furszy/secp256k1/commits/2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "created_at": "2025-10-01T14:20:36Z"
    },
    {
      "event": "commented",
      "id": 3356599363,
      "node_id": "IC_kwDOAP4Jqs7IEaRD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3356599363",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-01T14:23:22Z",
      "updated_at": "2025-10-01T14:23:22Z",
      "author_association": "MEMBER",
      "body": "Updated per feedback. Thanks!\r\n1) Removed `testrand_finish()` call.\r\n2) Added a more descriptive error message for the 255 tests current cap.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3356599363",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    },
    {
      "event": "reviewed",
      "id": 3295184487,
      "node_id": "PRR_kwDOAP4Jqs7EaIZn",
      "url": null,
      "actor": null,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-02T16:39:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761\r\n\r\nSequential vs. parallel test runs on my arm64 workstation with 12 cores, seeing a nice ~2.7x speedup (I guess much more is possible in the futureif the longest-running tests are split up further):\r\n```\r\n$ uname -m -o -s -r -v\r\nLinux 6.17.0-8-qcom-x1e #8-Ubuntu SMP PREEMPT_DYNAMIC Sun Aug 31 21:03:54 UTC 2025 aarch64 GNU/Linux\r\n$ ./build/bin/tests --jobs=0\r\nTests running silently. Use '-log=1' to enable detailed logging\r\niterations = 16\r\njobs = 0. Sequential execution.\r\nrandom seed = 09e628902f7e42bc5be35e96ebf5edee\r\nTotal execution time: 24.329 seconds\r\n$ ./build/bin/tests --jobs=$(nproc)\r\nTests running silently. Use '-log=1' to enable detailed logging\r\niterations = 16\r\njobs = 12. Parallel execution.\r\nrandom seed = 08636e4354f2ffa33260a6506827c00d\r\nTotal execution time: 9.002 seconds\r\n```\r\n(EDIT: noted after posting that I didn't compile in the recovery module, i.e. its 4 tests were not executed. But this doesn't change the numbers significantly.)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3295184487",
      "submitted_at": "2025-10-02T15:24:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3334580070,
      "node_id": "PRR_kwDOAP4Jqs7Gwadm",
      "url": null,
      "actor": null,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-14T08:55:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761\n\nThe remaining comments can be addressed in a follow-up PR.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3334580070",
      "submitted_at": "2025-10-14T08:55:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "reviewed",
      "id": 3337843359,
      "node_id": "PRR_kwDOAP4Jqs7G83Kf",
      "url": null,
      "actor": null,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-14T23:14:33Z",
      "author_association": "MEMBER",
      "body": "ACK 2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761.\n\nnit: 953f7b008865ed503f36b040c4af4db96c4d54d9 commit shouldn't include this line:https://github.com/bitcoin-core/secp256k1/blob/953f7b008865ed503f36b040c4af4db96c4d54d9/src/unit_test.c#L183",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#pullrequestreview-3337843359",
      "submitted_at": "2025-10-14T23:14:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
    },
    {
      "event": "merged",
      "id": 20286391903,
      "node_id": "ME_lADOAP4Jqs7JvTsvzwAAAAS5KcZf",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/20286391903",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d543c0d917a76a201578948701cc30ef336e0fe6",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/d543c0d917a76a201578948701cc30ef336e0fe6",
      "created_at": "2025-10-15T06:37:30Z"
    },
    {
      "event": "closed",
      "id": 20286391927,
      "node_id": "CE_lADOAP4Jqs7JvTsvzwAAAAS5KcZ3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/20286391927",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-15T06:37:30Z"
    },
    {
      "event": "referenced",
      "id": 20289362411,
      "node_id": "REFE_lADOAP4Jqs7JvTsvzwAAAAS5Vxnr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/20289362411",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3cbf7cb3e6ac51492b354732bddbb4f58ce97ed3",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/3cbf7cb3e6ac51492b354732bddbb4f58ce97ed3",
      "created_at": "2025-10-15T08:59:33Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 20296095079,
      "node_id": "HRDE_lADOAP4Jqs7JvTsvzwAAAAS5vdVn",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/20296095079",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-15T13:40:02Z"
    },
    {
      "event": "commented",
      "id": 3447767148,
      "node_id": "IC_kwDOAP4Jqs7NgMBs",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/3447767148",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-25T21:02:44Z",
      "updated_at": "2025-10-25T21:02:44Z",
      "author_association": "MEMBER",
      "body": "While reviewing https://github.com/bitcoin-core/secp256k1/pull/1732, I realized that the commit \"refactor: move 'gettime_i64()' to tests_common.h\" might have been a suboptimal approach. The tests do not really require nanosecond precision, and the standard [`clock()`](https://en.cppreference.com/w/c/chrono/clock.html) should suffice. Moreover, changing the `gettime_i64` implementation would require unnecessary modifications to test source code and/or build targets.   ",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#issuecomment-3447767148",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1734"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2324239128",
      "pull_request_review_id": 3188181909,
      "id": 2324239128,
      "node_id": "PRRC_kwDOAP4Jqs6KiRMY",
      "diff_hunk": "",
      "path": "src/util.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "5fcb69c5f126d321b3202ccea5a5a1056e00d690",
      "original_commit_id": "8a3b9d3141ba66bf5a759854abbaa2257cf56c30",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The commit message says that the function is moved to `testutil.h` but it's actually moved to `util.h`, which is included in the library. But we don't want to add a dependency on headers like `<time.h>` in the real library (we currently call only `malloc`, `free`, `printf`, and `abort` and even these can be avoided if the user insists).\r\n\r\nI think it's perfectly fine to include `testutil.h` in the benchmarks if this is necessary to avoid code duplication.",
      "created_at": "2025-09-05T06:40:27Z",
      "updated_at": "2025-09-05T06:40:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2324239128",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2324239128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2325662100",
      "pull_request_review_id": 3190193578,
      "id": 2325662100,
      "node_id": "PRRC_kwDOAP4Jqs6KnsmU",
      "diff_hunk": "",
      "path": "src/util.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "5fcb69c5f126d321b3202ccea5a5a1056e00d690",
      "original_commit_id": "8a3b9d3141ba66bf5a759854abbaa2257cf56c30",
      "in_reply_to_id": 2324239128,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The commit message says that the function is moved to `testutil.h` but it's actually moved to `util.h`, which is included in the library. But we don't want to add a dependency on headers like `<time.h>` in the real library (we currently call only `malloc`, `free`, `printf`, and `abort` and even these can be avoided if the user insists).\r\n> \r\n> I think it's perfectly fine to include `testutil.h` in the benchmarks if this is necessary to avoid code duplication.\r\n\r\nYeah, I initially did that but ended up moving it to `util.h` (without updating the commit message…) because including `testutil.h` alone in the `bench.h` file was not enough. I also needed to include `testrand_impl.h` to get access to the testrand implementation (which was blocking me from doing it because I wasn’t expecting to have to include implementation files manually at the binary top level file - it just felt odd), as well as `time.h`, and change cmake for the benchmark target to get access to the precomputed tables files.\r\n\r\nBut all good now, got some clarifications from Pieter.\r\nPR updated per feedback. Thanks!",
      "created_at": "2025-09-05T17:24:37Z",
      "updated_at": "2025-09-05T17:25:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2325662100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2325662100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334102368",
      "pull_request_review_id": 3202289828,
      "id": 2334102368,
      "node_id": "PRRC_kwDOAP4Jqs6LH5Ng",
      "diff_hunk": "@@ -7,9 +7,13 @@\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+#include <time.h>\n \n+#include \"secp256k1.c\"",
      "path": "src/bench.c",
      "position": 1,
      "original_position": 6,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "4900aee07d528522098e82f4d7e45692407839e4",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, NACK this.\n\nThe (external) benchmark should link against the production-compiled library, not compile its own version.",
      "created_at": "2025-09-09T15:58:00Z",
      "updated_at": "2025-09-09T15:58:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2334102368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334102368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334181263",
      "pull_request_review_id": 3202409728,
      "id": 2334181263,
      "node_id": "PRRC_kwDOAP4Jqs6LIMeP",
      "diff_hunk": "@@ -7,9 +7,13 @@\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+#include <time.h>\n \n+#include \"secp256k1.c\"",
      "path": "src/bench.c",
      "position": 1,
      "original_position": 6,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "4900aee07d528522098e82f4d7e45692407839e4",
      "in_reply_to_id": 2334102368,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "np, that's from the first move-only commit that is merely there to gain access to the existing `gettime()` function from the test framework. Worst-case scenario I can dedup the code (or create an `util_time.h` file). Will see how to adapt it. I remember that this had some extra complications because including `testutil.h` requires `secp256k1_pubkey_save` which only exists on `secp256k1.c`. But will check it again, I got more insights of the library now.",
      "created_at": "2025-09-09T16:31:47Z",
      "updated_at": "2025-09-09T16:36:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2334181263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334181263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334620199",
      "pull_request_review_id": 3203064618,
      "id": 2334620199,
      "node_id": "PRRC_kwDOAP4Jqs6LJ3on",
      "diff_hunk": "@@ -7,9 +7,13 @@\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+#include <time.h>\n \n+#include \"secp256k1.c\"",
      "path": "src/bench.c",
      "position": 1,
      "original_position": 6,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "4900aee07d528522098e82f4d7e45692407839e4",
      "in_reply_to_id": 2334102368,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done, solved. Introduced a new file `tests_common.h`, to hold general-purpose utility functions shared across test programs that do not depend on the internal library. Which helps avoid code duplication.\r\n\r\nNote: we should probably consider renaming `testutil.h` to `testutil_internals.h` (or similar) to make it clear that it has access to library internals.",
      "created_at": "2025-09-09T19:51:55Z",
      "updated_at": "2025-09-09T19:52:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2334620199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334620199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334678105",
      "pull_request_review_id": 3203150504,
      "id": 2334678105,
      "node_id": "PRRC_kwDOAP4Jqs6LKFxZ",
      "diff_hunk": "",
      "path": "src/util.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "5fcb69c5f126d321b3202ccea5a5a1056e00d690",
      "original_commit_id": "8a3b9d3141ba66bf5a759854abbaa2257cf56c30",
      "in_reply_to_id": 2324239128,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "just in case; connecting this comment to https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2334181263 for the rationale behind the latest change.",
      "created_at": "2025-09-09T20:19:36Z",
      "updated_at": "2025-09-09T20:19:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2334678105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2334678105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2337043438",
      "pull_request_review_id": 3206568066,
      "id": 2337043438,
      "node_id": "PRRC_kwDOAP4Jqs6LTHPu",
      "diff_hunk": "@@ -0,0 +1,408 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_C\n+#define LIBSECP256K1_UNIT_TEST_C\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif\n+#ifndef SUPPORTS_CONCURRENCY\n+#  define SUPPORTS_CONCURRENCY 0\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 90,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a specific reason to overload the `-target` option?  If not, could a different one be used instead?",
      "created_at": "2025-09-10T14:54:31Z",
      "updated_at": "2025-09-10T14:54:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2337043438",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2337043438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2337097836",
      "pull_request_review_id": 3206646889,
      "id": 2337097836,
      "node_id": "PRRC_kwDOAP4Jqs6LTUhs",
      "diff_hunk": "@@ -0,0 +1,408 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_C\n+#define LIBSECP256K1_UNIT_TEST_C\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif\n+#ifndef SUPPORTS_CONCURRENCY\n+#  define SUPPORTS_CONCURRENCY 0\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 90,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "in_reply_to_id": 2337043438,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is there a specific reason to overload the `-target` option? If not, could a different one be used instead?\r\n\r\nMainly because both are targets; the only diff is that one target runs more test cases than the other one.\r\nIn general, it’s similar to how most unit test frameworks work. For example, on `boost` and `gtest` you can run groups of tests and single tests with the same command (`--run_test` and `--gtest_filter` respectively); the only diff with them is that they add the module name as a prefix when specifying single test case (which we could also do here).",
      "created_at": "2025-09-10T15:13:49Z",
      "updated_at": "2025-09-10T15:13:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2337097836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2337097836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2337453799",
      "pull_request_review_id": 3207167380,
      "id": 2337453799,
      "node_id": "PRRC_kwDOAP4Jqs6LUrbn",
      "diff_hunk": "@@ -0,0 +1,408 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_C\n+#define LIBSECP256K1_UNIT_TEST_C\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif\n+#ifndef SUPPORTS_CONCURRENCY\n+#  define SUPPORTS_CONCURRENCY 0\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 90,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "in_reply_to_id": 2337043438,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right. Let's keep it this way. It works nicely with CMake code. See https://github.com/hebasto/secp256k1/commit/3ff3105edc5e78aaceae0dddba5f788ec83a163d.",
      "created_at": "2025-09-10T17:31:09Z",
      "updated_at": "2025-09-10T17:31:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2337453799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2337453799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2340169815",
      "pull_request_review_id": 3210722154,
      "id": 2340169815,
      "node_id": "PRRC_kwDOAP4Jqs6LfChX",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_TEST_COMMON_H\n+#define LIBSECP256K1_TEST_COMMON_H\n+\n+/***********************************************************************\n+ * Test Support Utilities\n+ *\n+ * This file provides general-purpose functions for tests and benchmark\n+ * programs. Unlike testutil.h, this file is not linked to the library,\n+ * allowing each program to choose whether to run against the production\n+ * API or access library internals directly.\n+ ***********************************************************************/\n+\n+#if (defined(_MSC_VER) && _MSC_VER >= 1900)\n+#  include <time.h>\n+#else\n+#  include <sys/time.h>\n+#endif",
      "path": "src/tests_common.h",
      "position": 24,
      "original_position": 22,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a759cf5b9408ca630654e04faea56ff4f6944d45:\r\n\r\nInclude `<stdint.h>` for `int64_t`?",
      "created_at": "2025-09-11T10:58:28Z",
      "updated_at": "2025-09-11T11:47:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2340169815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2340169815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 20,
      "original_start_line": 18,
      "start_side": "RIGHT",
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2340384653",
      "pull_request_review_id": 3210722154,
      "id": 2340384653,
      "node_id": "PRRC_kwDOAP4Jqs6Lf2-N",
      "diff_hunk": "@@ -25,6 +25,8 @@\n #include \"checkmem.h\"\n #include \"testutil.h\"\n #include \"util.h\"\n+#include \"unit_test.h\"\n+#include \"unit_test.c\"",
      "path": "src/tests.c",
      "position": 5,
      "original_position": 5,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e262ba546a9d7b1e7a5977613efe36ff2c67b313:\r\n\r\nI believe there's no reason to keep everything in a single translation unit. Tests are not such a performance-critical task. And this pattern really confuses static analysis tools.\r\n\r\nLet's keep it as a separate module, for example, as done in [this](https://github.com/hebasto/secp256k1/commits/pr1734/0911.2c.alt/) branch.",
      "created_at": "2025-09-11T11:43:15Z",
      "updated_at": "2025-09-11T11:47:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2340384653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2340384653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341117736",
      "pull_request_review_id": 3211924681,
      "id": 2341117736,
      "node_id": "PRRC_kwDOAP4Jqs6Lip8o",
      "diff_hunk": "@@ -25,6 +25,8 @@\n #include \"checkmem.h\"\n #include \"testutil.h\"\n #include \"util.h\"\n+#include \"unit_test.h\"\n+#include \"unit_test.c\"",
      "path": "src/tests.c",
      "position": 5,
      "original_position": 5,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": 2340384653,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just left you a comment there: https://github.com/hebasto/secp256k1/commit/082b928b7d16f83d8749a695f2a4b4e293e322a4#r165610965",
      "created_at": "2025-09-11T14:20:51Z",
      "updated_at": "2025-09-11T14:20:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2341117736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341117736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341119665",
      "pull_request_review_id": 3211927153,
      "id": 2341119665,
      "node_id": "PRRC_kwDOAP4Jqs6Liqax",
      "diff_hunk": "@@ -0,0 +1,408 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_C\n+#define LIBSECP256K1_UNIT_TEST_C\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif\n+#ifndef SUPPORTS_CONCURRENCY\n+#  define SUPPORTS_CONCURRENCY 0\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 90,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aa5f041f2fe77624bb77fdb64ca6974b5cc23542",
      "in_reply_to_id": 2337043438,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nice!",
      "created_at": "2025-09-11T14:21:12Z",
      "updated_at": "2025-09-11T14:21:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2341119665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341119665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341438215",
      "pull_request_review_id": 3212354514,
      "id": 2341438215,
      "node_id": "PRRC_kwDOAP4Jqs6Lj4MH",
      "diff_hunk": "@@ -25,6 +25,8 @@\n #include \"checkmem.h\"\n #include \"testutil.h\"\n #include \"util.h\"\n+#include \"unit_test.h\"\n+#include \"unit_test.c\"",
      "path": "src/tests.c",
      "position": 5,
      "original_position": 5,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": 2340384653,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Cross-posting from https://github.com/hebasto/secp256k1/commit/082b928b7d16f83d8749a695f2a4b4e293e322a4#r165610965:\r\n\r\n@sipa [wrote](https://github.com/hebasto/secp256k1/commit/082b928b7d16f83d8749a695f2a4b4e293e322a4#r165614536):\r\n> The design is there because of performance, to allow inlining across the layers.\r\n>\r\n> That's indeed unnecessary in tests, but that's not a reason to deviate from the design; consistency is nice.\r\n\r\n@hebasto [wrote](https://github.com/hebasto/secp256k1/commit/082b928b7d16f83d8749a695f2a4b4e293e322a4#r165614984):\r\n> While consistency is indeed nice, I still see a reason for doing this, namely, more efficient use of static code analysis tools.",
      "created_at": "2025-09-11T15:26:55Z",
      "updated_at": "2025-09-11T15:26:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2341438215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341438215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341503245",
      "pull_request_review_id": 3212434784,
      "id": 2341503245,
      "node_id": "PRRC_kwDOAP4Jqs6LkIEN",
      "diff_hunk": "@@ -7666,179 +7679,179 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --- Context Independent --- */\n+static struct TestEntry tests_no_ctx[] = {\n+    CASE(xoshiro256pp_tests),\n+    {NULL, NULL}",
      "path": "src/tests.c",
      "position": 1,
      "original_position": 79,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e262ba546a9d7b1e7a5977613efe36ff2c67b313:\r\n\r\nWhy is this necessary?",
      "created_at": "2025-09-11T15:41:18Z",
      "updated_at": "2025-09-11T15:41:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2341503245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341503245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341626289",
      "pull_request_review_id": 3212590094,
      "id": 2341626289,
      "node_id": "PRRC_kwDOAP4Jqs6LkmGx",
      "diff_hunk": "@@ -7666,179 +7679,179 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --- Context Independent --- */\n+static struct TestEntry tests_no_ctx[] = {\n+    CASE(xoshiro256pp_tests),\n+    {NULL, NULL}",
      "path": "src/tests.c",
      "position": 1,
      "original_position": 79,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": 2341503245,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The sentinel avoids specifying the array size for this special case, which is not included in the general modules list. I could include the size to match the structure of the others as well. This was just a small shortcut to avoid doing so.",
      "created_at": "2025-09-11T16:10:02Z",
      "updated_at": "2025-09-11T16:10:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2341626289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341626289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341753619",
      "pull_request_review_id": 3212773917,
      "id": 2341753619,
      "node_id": "PRRC_kwDOAP4Jqs6LlFMT",
      "diff_hunk": "@@ -25,6 +25,8 @@\n #include \"checkmem.h\"\n #include \"testutil.h\"\n #include \"util.h\"\n+#include \"unit_test.h\"\n+#include \"unit_test.c\"",
      "path": "src/tests.c",
      "position": 5,
      "original_position": 5,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": 2340384653,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> And this pattern really confuses static analysis tools.\r\n\r\n@furszy asked me offline to provide an example of such a tool in use.\r\n\r\nLet's take [IWYU](https://include-what-you-use.org/) as an example and run it as follows:\r\n```\r\ncmake -B build -DCMAKE_C_COMPILER=clang-19 -DCMAKE_C_INCLUDE_WHAT_YOU_USE=include-what-you-use\r\ncmake --build build -t tests\r\n```\r\n\r\nWhen run on the [branch](https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2340384653) with a separate TU, it correctly identifies a [missing](https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2340169815) header:\r\n```\r\n[ 60%] Building C object src/CMakeFiles/unit_test.dir/unit_test.c.o\r\nWarning: include-what-you-use reported diagnostics:\r\n\r\n(/home/hebasto/dev/secp256k1/secp256k1/src/unit_test.h has correct #includes/fwd-decls)\r\n\r\n/home/hebasto/dev/secp256k1/secp256k1/src/unit_test.c should add these lines:\r\n#include <stdint.h>         // for int64_t\r\n\r\n/home/hebasto/dev/secp256k1/secp256k1/src/unit_test.c should remove these lines:\r\n\r\nThe full include-list for /home/hebasto/dev/secp256k1/secp256k1/src/unit_test.c:\r\n#include \"unit_test.h\"\r\n#include <stdint.h>         // for int64_t\r\n#include <stdio.h>          // for fprintf, printf, NULL, stderr, perror\r\n#include <stdlib.h>         // for EXIT_FAILURE, strtol, EXIT_SUCCESS, getenv\r\n#include <string.h>         // for strcmp, strchr, strlen\r\n#include <sys/types.h>      // for pid_t\r\n#include <sys/wait.h>       // for waitpid\r\n#include <unistd.h>         // for close, _exit, fork, pipe, read, write\r\n#include \"testrand_impl.h\"  // for testrand_init\r\n#include \"tests_common.h\"   // for gettime_i64\r\n---\r\n```\r\n\r\nOn this branch, `unit_test.c` is skipped during analysis (and I assume the same would happen with other tools).",
      "created_at": "2025-09-11T16:50:05Z",
      "updated_at": "2025-09-11T16:52:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2341753619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2341753619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2344392807",
      "pull_request_review_id": 3216917039,
      "id": 2344392807,
      "node_id": "PRRC_kwDOAP4Jqs6LvJhn",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_TEST_COMMON_H",
      "path": "src/tests_common.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "a759cf5b9408ca630654e04faea56ff4f6944d45",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, for consistency with other headers:\r\n```suggestion\r\n#ifndef SECP256K1_TEST_COMMON_H\r\n```",
      "created_at": "2025-09-12T14:14:01Z",
      "updated_at": "2025-09-12T15:09:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2344392807",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2344392807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2344409459",
      "pull_request_review_id": 3216917039,
      "id": 2344409459,
      "node_id": "PRRC_kwDOAP4Jqs6LvNlz",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_C\n+#define LIBSECP256K1_UNIT_TEST_C",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 8,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "e262ba546a9d7b1e7a5977613efe36ff2c67b313",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "seems unusual to have include guards for .c files and we currently don't follow that practice (looking at e.g. `secp256k1.c`), I presume we prefer a compile error if someone ever tried to include a .c file (which itself is already very unusual as well :p) more than once per translation unit?",
      "created_at": "2025-09-12T14:20:38Z",
      "updated_at": "2025-09-12T15:09:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2344409459",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2344409459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2344524292",
      "pull_request_review_id": 3216917039,
      "id": 2344524292,
      "node_id": "PRRC_kwDOAP4Jqs6LvpoE",
      "diff_hunk": "@@ -7666,179 +7679,179 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --- Context Independent --- */\n+static struct TestEntry tests_no_ctx[] = {\n+    CASE(xoshiro256pp_tests),\n+    {NULL, NULL}",
      "path": "src/tests.c",
      "position": 1,
      "original_position": 79,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": 2341503245,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was a bit confused as well to see these values only in a single `TestEntry` array, would suggest to either use sentinels for all of the arrays or for none of them for consistency.",
      "created_at": "2025-09-12T15:01:33Z",
      "updated_at": "2025-09-12T15:09:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2344524292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2344524292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345133817",
      "pull_request_review_id": 3218331957,
      "id": 2345133817,
      "node_id": "PRRC_kwDOAP4Jqs6Lx-b5",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_TEST_COMMON_H",
      "path": "src/tests_common.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "a759cf5b9408ca630654e04faea56ff4f6944d45",
      "in_reply_to_id": 2344392807,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done, thanks.",
      "created_at": "2025-09-12T18:40:31Z",
      "updated_at": "2025-09-12T18:40:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2345133817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345133817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345134183",
      "pull_request_review_id": 3218333507,
      "id": 2345134183,
      "node_id": "PRRC_kwDOAP4Jqs6Lx-hn",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_TEST_COMMON_H\n+#define LIBSECP256K1_TEST_COMMON_H\n+\n+/***********************************************************************\n+ * Test Support Utilities\n+ *\n+ * This file provides general-purpose functions for tests and benchmark\n+ * programs. Unlike testutil.h, this file is not linked to the library,\n+ * allowing each program to choose whether to run against the production\n+ * API or access library internals directly.\n+ ***********************************************************************/\n+\n+#if (defined(_MSC_VER) && _MSC_VER >= 1900)\n+#  include <time.h>\n+#else\n+#  include <sys/time.h>\n+#endif",
      "path": "src/tests_common.h",
      "position": 24,
      "original_position": 22,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": 2340169815,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "updated, thanks",
      "created_at": "2025-09-12T18:40:43Z",
      "updated_at": "2025-09-12T18:40:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2345134183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345134183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 20,
      "original_start_line": 18,
      "start_side": "RIGHT",
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345136818",
      "pull_request_review_id": 3218341450,
      "id": 2345136818,
      "node_id": "PRRC_kwDOAP4Jqs6Lx_Ky",
      "diff_hunk": "@@ -7666,179 +7679,179 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --- Context Independent --- */\n+static struct TestEntry tests_no_ctx[] = {\n+    CASE(xoshiro256pp_tests),\n+    {NULL, NULL}",
      "path": "src/tests.c",
      "position": 1,
      "original_position": 79,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "785c34ea86ff502ddb774a4c1f3ec8d60879cef2",
      "in_reply_to_id": 2341503245,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. Updated to use the size-based approach everywhere, mainly because the compiler may be able to optimize it.",
      "created_at": "2025-09-12T18:42:15Z",
      "updated_at": "2025-09-12T18:42:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2345136818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345136818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345141847",
      "pull_request_review_id": 3218354813,
      "id": 2345141847,
      "node_id": "PRRC_kwDOAP4Jqs6LyAZX",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_C\n+#define LIBSECP256K1_UNIT_TEST_C",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 8,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "e262ba546a9d7b1e7a5977613efe36ff2c67b313",
      "in_reply_to_id": 2344409459,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah sure. Extra guards removed. Thanks",
      "created_at": "2025-09-12T18:44:45Z",
      "updated_at": "2025-09-12T18:44:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2345141847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2345141847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346485425",
      "pull_request_review_id": 3220441643,
      "id": 2346485425,
      "node_id": "PRRC_kwDOAP4Jqs6L3Iax",
      "diff_hunk": "@@ -0,0 +1,42 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_TEST_COMMON_H",
      "path": "src/tests_common.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "91eac9c9411bf27607ffc1e114fec039a7fca00a: a typo:\r\n```suggestion\r\n#ifndef SECP256K1_TESTS_COMMON_H\r\n```",
      "created_at": "2025-09-13T11:57:35Z",
      "updated_at": "2025-09-13T11:57:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2346485425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346485425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346513889",
      "pull_request_review_id": 3220531146,
      "id": 2346513889,
      "node_id": "PRRC_kwDOAP4Jqs6L3PXh",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 22,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure about this implementation:\r\n\r\n1. `__has_include` works fine with modern compilers. However, it is a [C23 feature](https://en.cppreference.com/w/c/preprocessor/include.html). Should we rely on it?\r\n\r\n2. The availability of headers and symbols is usually a task for the build system, which defines `SUPPORTS_CONCURRENCY` based on the header / symbol checks.",
      "created_at": "2025-09-13T12:16:29Z",
      "updated_at": "2025-09-13T12:17:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2346513889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346513889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 11,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346562153",
      "pull_request_review_id": 3220629500,
      "id": 2346562153,
      "node_id": "PRRC_kwDOAP4Jqs6L3bJp",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif\n+#ifndef SUPPORTS_CONCURRENCY\n+#  define SUPPORTS_CONCURRENCY 0\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    if (tf->args.targets.size >= MAX_ARGS) {\n+        fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+        return -1;\n+    }\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                tf->args.targets.size++;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 241,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "318460c39aec04aa3580df5eadc7a935355968de\r\n\r\nnit: It would be good to check return values of the `pipe()` and `fork()` calls consistently, for example `...==-1`.",
      "created_at": "2025-09-13T12:48:39Z",
      "updated_at": "2025-09-13T12:48:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2346562153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346562153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 240,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346604192",
      "pull_request_review_id": 3220704460,
      "id": 2346604192,
      "node_id": "PRRC_kwDOAP4Jqs6L3lag",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_H\n+#define LIBSECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }",
      "path": "src/unit_test.h",
      "position": 25,
      "original_position": 26,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "6162b7617d3731e08d2b59baf79ba602182cf85e:\r\n\r\nIt's unfortunate to have such a pair of confusing macros. Perhaps their naming could be improved, although I don’t have a concrete suggestion.",
      "created_at": "2025-09-13T13:13:25Z",
      "updated_at": "2025-09-13T13:13:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2346604192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346604192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 24,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346785428",
      "pull_request_review_id": 3220978501,
      "id": 2346785428,
      "node_id": "PRRC_kwDOAP4Jqs6L4RqU",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 22,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": 2346513889,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I'm not sure about this implementation:\r\n> \r\n> 1. `__has_include` works fine with modern compilers. However, it is a [C23 feature](https://en.cppreference.com/w/c/preprocessor/include.html). Should we rely on it?\r\n> 2. The availability of headers and symbols is usually a task for the build system, which defines `SUPPORTS_CONCURRENCY` based on the header / symbol checks.\r\n\r\nHmm, yeah. I was trying to avoid touching the build systems (since we have two now), but can move the code there too. The guards here are mainly to postpone Windows support for future work (if we ever want to add support for such platform).",
      "created_at": "2025-09-13T15:10:06Z",
      "updated_at": "2025-09-13T15:10:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2346785428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346785428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 11,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346798190",
      "pull_request_review_id": 3221021559,
      "id": 2346798190,
      "node_id": "PRRC_kwDOAP4Jqs6L4Uxu",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_H\n+#define LIBSECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }",
      "path": "src/unit_test.h",
      "position": 25,
      "original_position": 26,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": 2346604192,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [6162b76](https://github.com/bitcoin-core/secp256k1/commit/6162b7617d3731e08d2b59baf79ba602182cf85e):\r\n> \r\n> It's unfortunate to have such a pair of confusing macros. Perhaps their naming could be improved, although I don’t have a concrete suggestion.\r\n\r\nA small scripted-diff would improve the situation and let us use only one of them. We just need to rename the test functions that start with \"run_*\" so that is not included in the name. I just tried to avoid expanding the scope of the PR further.",
      "created_at": "2025-09-13T15:41:19Z",
      "updated_at": "2025-09-14T13:10:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2346798190",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2346798190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 24,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2347333776",
      "pull_request_review_id": 3222087121,
      "id": 2347333776,
      "node_id": "PRRC_kwDOAP4Jqs6L6XiQ",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif\n+#ifndef SUPPORTS_CONCURRENCY\n+#  define SUPPORTS_CONCURRENCY 0\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    if (tf->args.targets.size >= MAX_ARGS) {\n+        fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+        return -1;\n+    }\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                tf->args.targets.size++;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 241,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": 2346562153,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure these two functions are directly comparable. They have different return value ranges: `pipe()` just indicates success or failure (`0` or `-1`), while `fork()` has three cases: `-1` for an error, `0` in the child process, and any value greater than `0` is the child’s PID in the parent. So it seemed slightly more accurate to me to describe the entire range for `fork()`.",
      "created_at": "2025-09-14T13:32:20Z",
      "updated_at": "2025-09-14T13:32:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2347333776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2347333776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 240,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2347336565",
      "pull_request_review_id": 3222090456,
      "id": 2347336565,
      "node_id": "PRRC_kwDOAP4Jqs6L6YN1",
      "diff_hunk": "@@ -0,0 +1,407 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* Check for POSIX process headers */\n+#if defined(__has_include)\n+#  if __has_include(<sys/wait.h>) && __has_include(<unistd.h>)\n+#    include <sys/wait.h>\n+#    include <unistd.h>\n+/* Ensure pid_t is defined. Include <sys/types.h> only if necessary (strict C89 mode) */\n+#if !defined(_PID_T) && !defined(pid_t)\n+#   include <sys/types.h>\n+#endif\n+#    define SUPPORTS_CONCURRENCY 1\n+#  endif\n+#endif",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 22,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": 2346513889,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. Let me know if the build system changes can be shrunk even more. I tried to keep them minimal.",
      "created_at": "2025-09-14T13:39:36Z",
      "updated_at": "2025-09-14T13:39:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2347336565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2347336565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 11,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2347336635",
      "pull_request_review_id": 3222090524,
      "id": 2347336635,
      "node_id": "PRRC_kwDOAP4Jqs6L6YO7",
      "diff_hunk": "@@ -0,0 +1,42 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_TEST_COMMON_H",
      "path": "src/tests_common.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": 2346485425,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks.",
      "created_at": "2025-09-14T13:39:46Z",
      "updated_at": "2025-09-14T13:39:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2347336635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2347336635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349501254",
      "pull_request_review_id": 3205587106,
      "id": 2349501254,
      "node_id": "PRRC_kwDOAP4Jqs6MCotG",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Context Independent tests --- */\n+static struct TestEntry tests_no_ctx[] = {\n+    CASE(xoshiro256pp_tests),\n+};\n+static struct TestModule registry_modules_no_ctx = MAKE_TEST_MODULE(no_ctx);\n+\n+/* --- Context-dependent tests start here --- */\n+static struct TestEntry tests_general[] = {\n+    CASE(selftest_tests),",
      "path": "src/tests.c",
      "position": 127,
      "original_position": 87,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "4e7bdc135a6bb876a389431d4df209df212974ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0423532: nit: `selftest_tests` doesn't require a context though unlike other tests inside `tests_general`.",
      "created_at": "2025-09-15T16:17:56Z",
      "updated_at": "2025-09-16T13:15:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2349501254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349501254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 7694,
      "original_line": 7694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349664292",
      "pull_request_review_id": 3225632653,
      "id": 2349664292,
      "node_id": "PRRC_kwDOAP4Jqs6MDQgk",
      "diff_hunk": "@@ -443,6 +443,16 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  SUPPORTS_CONCURRENCY=0\n+  if test \"x$HAVE_SYS_TYPES_H\" = xyes -a \"x$HAVE_SYS_WAIT_H\" = xyes -a \"x$HAVE_UNISTD_H\" = xyes; then",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This always fails for me as written, but works when cache variables are used instead:\r\n\r\n`if test \"x$ac_cv_header_sys_types_h\" = xyes -a \"x$ac_cv_header_sys_wait_h\" = xyes -a \"x$ac_cv_header_unistd_h\" = xyes; then`",
      "created_at": "2025-09-15T17:28:38Z",
      "updated_at": "2025-09-15T17:28:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2349664292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349664292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349683798",
      "pull_request_review_id": 3225659345,
      "id": 2349683798,
      "node_id": "PRRC_kwDOAP4Jqs6MDVRW",
      "diff_hunk": "@@ -0,0 +1,397 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    if (tf->args.targets.size >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 140,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this should be checked in the inner loop, too. Passing a bunch of modules , eg, `./tests -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa -t=ecdsa` and it will write past `slots[149]` and clobbers adjacent struct fields. On my machine, it doesn't even crash but just corrupts the `size` and `logging` fields. ",
      "created_at": "2025-09-15T17:38:42Z",
      "updated_at": "2025-09-15T17:38:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2349683798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349683798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349906507",
      "pull_request_review_id": 3225986524,
      "id": 2349906507,
      "node_id": "PRRC_kwDOAP4Jqs6MELpL",
      "diff_hunk": "@@ -443,6 +443,16 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  SUPPORTS_CONCURRENCY=0\n+  if test \"x$HAVE_SYS_TYPES_H\" = xyes -a \"x$HAVE_SYS_WAIT_H\" = xyes -a \"x$HAVE_UNISTD_H\" = xyes; then",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "in_reply_to_id": 2349664292,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's interesting. Thanks!. Updated per feedback plus also modified it to use the `AS_IF` macro because that seems to be the autoconf-idiomatic way to write conditionals (which might avoid portability issues with the `test … -a …` option). Let me know how it goes on your end now.\r\n",
      "created_at": "2025-09-15T19:27:25Z",
      "updated_at": "2025-09-15T19:27:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2349906507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349906507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349910107",
      "pull_request_review_id": 3225991720,
      "id": 2349910107,
      "node_id": "PRRC_kwDOAP4Jqs6MEMhb",
      "diff_hunk": "@@ -0,0 +1,397 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    if (tf->args.targets.size >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 140,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "in_reply_to_id": 2349683798,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, good catch. Fixed. I should have moved the check when introduced support for module selection.",
      "created_at": "2025-09-15T19:29:25Z",
      "updated_at": "2025-09-15T19:29:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2349910107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2349910107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2350767994",
      "pull_request_review_id": 3205587106,
      "id": 2350767994,
      "node_id": "PRRC_kwDOAP4Jqs6MHd96",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_H",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0423532: `SECP256K1_UNIT_TEST_H` here as well",
      "created_at": "2025-09-16T04:48:55Z",
      "updated_at": "2025-09-16T13:15:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2350767994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2350767994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2351170774",
      "pull_request_review_id": 3205587106,
      "id": 2351170774,
      "node_id": "PRRC_kwDOAP4Jqs6MJATW",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 77,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0423532: weird, not able to use the environment variable option. I'm seeing:\r\n- `time ./build/bin/tests -iter=64` in 1m10.047s\r\n- `time SECP256K1_TEST_ITERS=64 ./build/bin/tests` in 0m26.908s",
      "created_at": "2025-09-16T07:16:07Z",
      "updated_at": "2025-09-16T13:15:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2351170774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2351170774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2351202637",
      "pull_request_review_id": 3205587106,
      "id": 2351202637,
      "node_id": "PRRC_kwDOAP4Jqs6MJIFN",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 86,
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0423532: also don't see the `Iterations count =` [log](https://github.com/bitcoin-core/secp256k1/actions/runs/17744147415/job/50425143241?pr=1734#step:7:1258) in the CI. I guess this is related to the environment variable not being set.\r\n\r\nmaybe useful to always print the log even if it's the default value being used/`-iters` isn't used ?",
      "created_at": "2025-09-16T07:24:54Z",
      "updated_at": "2025-09-16T13:15:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2351202637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2351202637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352411596",
      "pull_request_review_id": 3205587106,
      "id": 2352411596,
      "node_id": "PRRC_kwDOAP4Jqs6MNvPM",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_H\n+#define LIBSECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no context setup */\n+    struct TestModule* registry_no_ctx;",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 75,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0423532: is there any particular reason for separating the tests which don't require context setup? many other tests in the other `registry_modules` like integer, scalar, field, group don't require a context either.\r\n",
      "created_at": "2025-09-16T12:52:32Z",
      "updated_at": "2025-09-16T13:15:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352411596",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352411596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352450501",
      "pull_request_review_id": 3229910841,
      "id": 2352450501,
      "node_id": "PRRC_kwDOAP4Jqs6MN4vF",
      "diff_hunk": "@@ -443,6 +443,16 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  SUPPORTS_CONCURRENCY=0\n+  if test \"x$HAVE_SYS_TYPES_H\" = xyes -a \"x$HAVE_SYS_WAIT_H\" = xyes -a \"x$HAVE_UNISTD_H\" = xyes; then",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "in_reply_to_id": 2349664292,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Successful 👍 ",
      "created_at": "2025-09-16T13:06:22Z",
      "updated_at": "2025-09-16T13:06:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352450501",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352450501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352587180",
      "pull_request_review_id": 3230111111,
      "id": 2352587180,
      "node_id": "PRRC_kwDOAP4Jqs6MOaGs",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 147,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: this fails when the number of targets is exactly `MAX_ARGS` (or greater) rather than strictly `> MAX_ARGS`, which I'd think is more natural.",
      "created_at": "2025-09-16T13:49:43Z",
      "updated_at": "2025-09-16T14:34:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352587180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352587180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352627983",
      "pull_request_review_id": 3230118464,
      "id": 2352627983,
      "node_id": "PRRC_kwDOAP4Jqs6MOkEP",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_H\n+#define LIBSECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no context setup */\n+    struct TestModule* registry_no_ctx;",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 75,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": 2352411596,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [0423532](https://github.com/bitcoin-core/secp256k1/commit/0423532ea998599c9e099e034b163c65aceabb68): is there any particular reason for separating the tests which don't require context setup? many other tests in the other `registry_modules` like integer, scalar, field, group don't require a context either.\r\n\r\nThese are just tests that must run before the RNG initialization, which itself happens before everything else, hence my \"no context\" naming, though that phrase has a different connotation here, agree.\r\nCould call it `registry_no_rng`? unless you have a better suggestion.\r\n",
      "created_at": "2025-09-16T14:02:39Z",
      "updated_at": "2025-09-16T14:38:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352627983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352627983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352669073",
      "pull_request_review_id": 3230111111,
      "id": 2352669073,
      "node_id": "PRRC_kwDOAP4Jqs6MOuGR",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) waitpid(workers[it], &status, 0);\n+\n+    return EXIT_SUCCESS;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set tf->registry and tf->num_tests before calling tf_init. */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.targets.size = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc > MAX_ARGS) {\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {\n+            help();\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Check if we need to print the available tests */\n+        if (argv[1] && strcmp(argv[1], \"-print_tests\") == 0) {\n+            print_test_list(tf);\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(argv[1]) != 0) return EXIT_FAILURE;\n+            if (has_seed) tf->args.custom_seed = (strcmp(argv[2], \"NULL\") == 0) ? NULL : argv[2];\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    tf->fn_run_test = tf->args.logging ? run_test_log : run_test;\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Whether to run all tests */\n+    int run_all;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */\n+    /* Verify 'tf_init' has been called */\n+    if (!tf->fn_run_test) {\n+        fprintf(stderr, \"Error: No test runner set. You must call 'tf_init' first to initialize the framework \"\n+                        \"or manually assign 'fn_run_test' before calling 'tf_run'.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Populate targets with all tests if none were explicitly specified */\n+    run_all = tf->args.targets.size == 0;\n+    if (run_all) {\n+        TestRef ref;\n+        int slot = 0;\n+        for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+            struct TestModule* group = &tf->registry_modules[ref.group];\n+            for (ref.idx = 0; ref.idx < group->size; ref.idx++) {\n+                tf->args.targets.slots[slot++] = ref;\n+                if (slot >= MAX_ARGS) {\n+                    fprintf(stderr, \"Error: Number of tests (%d) exceeds MAX_ARGS (%d). \"\n+                                    \"Increase MAX_ARGS to accommodate all tests.\\n\", slot, MAX_ARGS);\n+                    return EXIT_FAILURE;\n+                }\n+            }\n+        }\n+        tf->args.targets.size = slot;\n+    }\n+\n+    if (!tf->args.logging) printf(\"Tests running silently. Use '-log=1' to enable detailed logging\\n\");\n+\n+    /* Run test RNG tests (must run before we really initialize the test RNG) */\n+    /* Note: currently, these tests are executed sequentially because there */\n+    /* is really only one test. */\n+    for (it = 0; tf->registry_no_ctx && it < tf->registry_no_ctx->size; it++) {\n+        if (run_all) { /* future: support filtering */\n+            tf->fn_run_test(&tf->registry_no_ctx->data[it]);\n+        }\n+    }\n+\n+    /* Initialize test RNG and library contexts */\n+    testrand_init(tf->args.custom_seed);\n+    if (tf->fn_setup && tf->fn_setup() != 0) return EXIT_FAILURE;\n+\n+    /* Check whether to process tests sequentially or concurrently */\n+    if (tf->args.num_processes == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 380,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: should it be sequential for 1 as well?",
      "created_at": "2025-09-16T14:16:34Z",
      "updated_at": "2025-09-16T14:34:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352669073",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352669073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352705072",
      "pull_request_review_id": 3230111111,
      "id": 2352705072,
      "node_id": "PRRC_kwDOAP4Jqs6MO24w",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) waitpid(workers[it], &status, 0);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 264,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There's different exit code behavior between running concurrently and sequentially. Sequentially, the `CHECK` failure will call `abort` and kill the main process and return an error code. Concurrently, the `abort` and error code are printed but discarded and the parent returns `EXIT_SUCCESS` unconditionally. I think if `jobs` were ever auto-detected (or anyone ever relied on exit codes for the concurrent path), this would result in a test harness incorrectly reporting success even on failure. \r\n\r\nMaybe collect the exit codes in this loop and return failure if any fail?",
      "created_at": "2025-09-16T14:27:26Z",
      "updated_at": "2025-09-16T14:34:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352705072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352705072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352709238",
      "pull_request_review_id": 3230118464,
      "id": 2352709238,
      "node_id": "PRRC_kwDOAP4Jqs6MO352",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 77,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": 2351170774,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [0423532](https://github.com/bitcoin-core/secp256k1/commit/0423532ea998599c9e099e034b163c65aceabb68): weird, not able to use the environment variable option. I'm seeing:\r\n> \r\n> * `time ./build/bin/tests -iter=64` in 1m10.047s\r\n> * `time SECP256K1_TEST_ITERS=64 ./build/bin/tests` in 0m26.908s\r\n\r\nHad it on my to do list and it seems I never enabled it (which kinda shows how much I like env vars..).\r\nThanks!. Enabled now.",
      "created_at": "2025-09-16T14:28:45Z",
      "updated_at": "2025-09-16T16:04:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352709238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352709238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352735038",
      "pull_request_review_id": 3230118464,
      "id": 2352735038,
      "node_id": "PRRC_kwDOAP4Jqs6MO-M-",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 86,
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": 2351202637,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [0423532](https://github.com/bitcoin-core/secp256k1/commit/0423532ea998599c9e099e034b163c65aceabb68): also don't see the `Iterations count =` [log](https://github.com/bitcoin-core/secp256k1/actions/runs/17744147415/job/50425143241?pr=1734#step:7:1258) in the CI. I guess this is related to the environment variable not being set.\r\n\r\nYeah. We only print when the arg is provided by the user.\r\n\r\n> maybe useful to always print the log even if it's the default value being used/-iters isn't used ?\r\n\r\nWe should probably unify all args prints within a single place too.",
      "created_at": "2025-09-16T14:37:13Z",
      "updated_at": "2025-09-16T17:58:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352735038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352735038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352737063",
      "pull_request_review_id": 3230118464,
      "id": 2352737063,
      "node_id": "PRRC_kwDOAP4Jqs6MO-sn",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_H",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": 2350767994,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T14:37:51Z",
      "updated_at": "2025-09-16T14:38:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352737063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352737063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352744210",
      "pull_request_review_id": 3230342547,
      "id": 2352744210,
      "node_id": "PRRC_kwDOAP4Jqs6MPAcS",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Context Independent tests --- */\n+static struct TestEntry tests_no_ctx[] = {\n+    CASE(xoshiro256pp_tests),\n+};\n+static struct TestModule registry_modules_no_ctx = MAKE_TEST_MODULE(no_ctx);\n+\n+/* --- Context-dependent tests start here --- */\n+static struct TestEntry tests_general[] = {\n+    CASE(selftest_tests),",
      "path": "src/tests.c",
      "position": 127,
      "original_position": 87,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "4e7bdc135a6bb876a389431d4df209df212974ad",
      "in_reply_to_id": 2349501254,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "related to https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352627983.",
      "created_at": "2025-09-16T14:39:53Z",
      "updated_at": "2025-09-16T14:39:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352744210",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352744210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 7694,
      "original_line": 7694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352901159",
      "pull_request_review_id": 3230573172,
      "id": 2352901159,
      "node_id": "PRRC_kwDOAP4Jqs6MPmwn",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 147,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": 2352587180,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Nit: this fails when the number of targets is exactly `MAX_ARGS` (or greater) rather than strictly `> MAX_ARGS`, which I'd think is more natural.\r\n\r\nThe array has indices `0..MAX_ARGS-1`, so when `size == MAX_ARGS-1` we already have `MAX_ARGS` elements. Using only `>` would allow `size == MAX_ARGS` (which actually means having one more than `MAX_ARGS`), causing the next write to overflow the array before the error is thrown.\r\n",
      "created_at": "2025-09-16T15:32:20Z",
      "updated_at": "2025-09-16T15:32:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352901159",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352901159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352912260",
      "pull_request_review_id": 3230591192,
      "id": 2352912260,
      "node_id": "PRRC_kwDOAP4Jqs6MPpeE",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) waitpid(workers[it], &status, 0);\n+\n+    return EXIT_SUCCESS;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set tf->registry and tf->num_tests before calling tf_init. */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.targets.size = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc > MAX_ARGS) {\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {\n+            help();\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Check if we need to print the available tests */\n+        if (argv[1] && strcmp(argv[1], \"-print_tests\") == 0) {\n+            print_test_list(tf);\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(argv[1]) != 0) return EXIT_FAILURE;\n+            if (has_seed) tf->args.custom_seed = (strcmp(argv[2], \"NULL\") == 0) ? NULL : argv[2];\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    tf->fn_run_test = tf->args.logging ? run_test_log : run_test;\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Whether to run all tests */\n+    int run_all;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */\n+    /* Verify 'tf_init' has been called */\n+    if (!tf->fn_run_test) {\n+        fprintf(stderr, \"Error: No test runner set. You must call 'tf_init' first to initialize the framework \"\n+                        \"or manually assign 'fn_run_test' before calling 'tf_run'.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Populate targets with all tests if none were explicitly specified */\n+    run_all = tf->args.targets.size == 0;\n+    if (run_all) {\n+        TestRef ref;\n+        int slot = 0;\n+        for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+            struct TestModule* group = &tf->registry_modules[ref.group];\n+            for (ref.idx = 0; ref.idx < group->size; ref.idx++) {\n+                tf->args.targets.slots[slot++] = ref;\n+                if (slot >= MAX_ARGS) {\n+                    fprintf(stderr, \"Error: Number of tests (%d) exceeds MAX_ARGS (%d). \"\n+                                    \"Increase MAX_ARGS to accommodate all tests.\\n\", slot, MAX_ARGS);\n+                    return EXIT_FAILURE;\n+                }\n+            }\n+        }\n+        tf->args.targets.size = slot;\n+    }\n+\n+    if (!tf->args.logging) printf(\"Tests running silently. Use '-log=1' to enable detailed logging\\n\");\n+\n+    /* Run test RNG tests (must run before we really initialize the test RNG) */\n+    /* Note: currently, these tests are executed sequentially because there */\n+    /* is really only one test. */\n+    for (it = 0; tf->registry_no_ctx && it < tf->registry_no_ctx->size; it++) {\n+        if (run_all) { /* future: support filtering */\n+            tf->fn_run_test(&tf->registry_no_ctx->data[it]);\n+        }\n+    }\n+\n+    /* Initialize test RNG and library contexts */\n+    testrand_init(tf->args.custom_seed);\n+    if (tf->fn_setup && tf->fn_setup() != 0) return EXIT_FAILURE;\n+\n+    /* Check whether to process tests sequentially or concurrently */\n+    if (tf->args.num_processes == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 380,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": 2352669073,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Nit: should it be sequential for 1 as well?\r\n\r\nthat was actually my testing trick to exercise the concurrent path with a single process. Removed now. Thanks.",
      "created_at": "2025-09-16T15:36:18Z",
      "updated_at": "2025-09-16T15:36:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352912260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352912260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352963182",
      "pull_request_review_id": 3230667065,
      "id": 2352963182,
      "node_id": "PRRC_kwDOAP4Jqs6MP15u",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 147,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": 2352587180,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, wasn't suggesting simply replacing `>=` with `>` there, but rather just pointing out that, eg, doing exactly 5 tests would fail if `MAX_ARGS == 5`, which seems unnatural.\r\n\r\nRight now the code does the write before the guard. I'd switch to before. Something like:\r\n\r\n```\r\nif (tf->args.targets.size >= MAX_ARGS) {\r\n      fprintf(stderr, ...);\r\n      return -1;\r\n}\r\ntf->args.targets.slots[tf->args.targets.size++] = i;\r\n```",
      "created_at": "2025-09-16T15:55:01Z",
      "updated_at": "2025-09-16T15:55:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352963182",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352963182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352985159",
      "pull_request_review_id": 3230706471,
      "id": 2352985159,
      "node_id": "PRRC_kwDOAP4Jqs6MP7RH",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) waitpid(workers[it], &status, 0);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 264,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": 2352705072,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> There's different exit code behavior between running concurrently and sequentially. Sequentially, the `CHECK` failure will call `abort` and kill the main process and return an error code. Concurrently, the `abort` and error code are printed but discarded and the parent returns `EXIT_SUCCESS` unconditionally. I think if `jobs` were ever auto-detected (or anyone ever relied on exit codes for the concurrent path), this would result in a test harness incorrectly reporting success even on failure.\r\n> \r\n> Maybe collect the exit codes in this loop and return failure if any fail?\r\n\r\nHmm yeah, good catch. This is something I introduced during the `run_concurrent` decoupling. The code actually collects the exit values in the `status` variable but misses to return it. Fixed now. Thanks!",
      "created_at": "2025-09-16T16:03:56Z",
      "updated_at": "2025-09-16T16:03:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2352985159",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2352985159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2353072923",
      "pull_request_review_id": 3230843415,
      "id": 2353072923,
      "node_id": "PRRC_kwDOAP4Jqs6MQQsb",
      "diff_hunk": "@@ -0,0 +1,406 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    if (!arg) return 0;\n+    COUNT = (int) strtol(arg, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set tf->registry and tf->num_tests before calling tf_init. */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.targets.size = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env() != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc > MAX_ARGS) {\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {\n+            help();\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Check if we need to print the available tests */\n+        if (argv[1] && strcmp(argv[1], \"-print_tests\") == 0) {\n+            print_test_list(tf);\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(argv[1]) != 0) return EXIT_FAILURE;\n+            if (has_seed) tf->args.custom_seed = (strcmp(argv[2], \"NULL\") == 0) ? NULL : argv[2];\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    tf->fn_run_test = tf->args.logging ? run_test_log : run_test;\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Whether to run all tests */\n+    int run_all;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */\n+    /* Verify 'tf_init' has been called */\n+    if (!tf->fn_run_test) {\n+        fprintf(stderr, \"Error: No test runner set. You must call 'tf_init' first to initialize the framework \"\n+                        \"or manually assign 'fn_run_test' before calling 'tf_run'.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Populate targets with all tests if none were explicitly specified */\n+    run_all = tf->args.targets.size == 0;\n+    if (run_all) {\n+        TestRef ref;\n+        int slot = 0;\n+        for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+            struct TestModule* group = &tf->registry_modules[ref.group];\n+            for (ref.idx = 0; ref.idx < group->size; ref.idx++) {\n+                tf->args.targets.slots[slot++] = ref;\n+                if (slot >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 364,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "906b45a73fc514068b5e4d30c3420857e16ac283",
      "in_reply_to_id": null,
      "user": {
        "login": "john-moffett",
        "id": 116917595,
        "node_id": "U_kgDOBvgFWw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116917595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/john-moffett",
        "html_url": "https://github.com/john-moffett",
        "followers_url": "https://api.github.com/users/john-moffett/followers",
        "following_url": "https://api.github.com/users/john-moffett/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/john-moffett/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/john-moffett/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/john-moffett/subscriptions",
        "organizations_url": "https://api.github.com/users/john-moffett/orgs",
        "repos_url": "https://api.github.com/users/john-moffett/repos",
        "events_url": "https://api.github.com/users/john-moffett/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/john-moffett/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same issue here with the `MAX_ARGS` check. I'd also move the guard to before the write. Sorry for the piecemeal comments!",
      "created_at": "2025-09-16T16:36:52Z",
      "updated_at": "2025-09-16T16:36:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2353072923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2353072923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2353236764",
      "pull_request_review_id": 3231083381,
      "id": 2353236764,
      "node_id": "PRRC_kwDOAP4Jqs6MQ4sc",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 147,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "aaacb77019be040c0e92c1c42c44c48e81dffa9d",
      "in_reply_to_id": 2352587180,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah ok, now we are sync. Updated per feedback. Thanks!",
      "created_at": "2025-09-16T17:50:18Z",
      "updated_at": "2025-09-16T17:50:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2353236764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2353236764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2353239191",
      "pull_request_review_id": 3231087093,
      "id": 2353239191,
      "node_id": "PRRC_kwDOAP4Jqs6MQ5SX",
      "diff_hunk": "@@ -0,0 +1,406 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    if (!arg) return 0;\n+    COUNT = (int) strtol(arg, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                tf->args.targets.slots[tf->args.targets.size] = i;\n+                if (++tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set tf->registry and tf->num_tests before calling tf_init. */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.targets.size = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env() != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc > MAX_ARGS) {\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {\n+            help();\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Check if we need to print the available tests */\n+        if (argv[1] && strcmp(argv[1], \"-print_tests\") == 0) {\n+            print_test_list(tf);\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(argv[1]) != 0) return EXIT_FAILURE;\n+            if (has_seed) tf->args.custom_seed = (strcmp(argv[2], \"NULL\") == 0) ? NULL : argv[2];\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    tf->fn_run_test = tf->args.logging ? run_test_log : run_test;\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Whether to run all tests */\n+    int run_all;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */\n+    /* Verify 'tf_init' has been called */\n+    if (!tf->fn_run_test) {\n+        fprintf(stderr, \"Error: No test runner set. You must call 'tf_init' first to initialize the framework \"\n+                        \"or manually assign 'fn_run_test' before calling 'tf_run'.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Populate targets with all tests if none were explicitly specified */\n+    run_all = tf->args.targets.size == 0;\n+    if (run_all) {\n+        TestRef ref;\n+        int slot = 0;\n+        for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+            struct TestModule* group = &tf->registry_modules[ref.group];\n+            for (ref.idx = 0; ref.idx < group->size; ref.idx++) {\n+                tf->args.targets.slots[slot++] = ref;\n+                if (slot >= MAX_ARGS) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 364,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "906b45a73fc514068b5e4d30c3420857e16ac283",
      "in_reply_to_id": 2353072923,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Same issue here with the `MAX_ARGS` check. I'd also move the guard to before the write. Sorry for the piecemeal comments!\r\n\r\nDon't worry, keep them coming :). Updated per feedback.",
      "created_at": "2025-09-16T17:51:09Z",
      "updated_at": "2025-09-16T17:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2353239191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2353239191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2372140378",
      "pull_request_review_id": 3257729972,
      "id": 2372140378,
      "node_id": "PRRC_kwDOAP4Jqs6NY_1a",
      "diff_hunk": "@@ -0,0 +1,404 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 80,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a reason for not using the GNU standard of using `--` for multi character options?",
      "created_at": "2025-09-23T12:22:43Z",
      "updated_at": "2025-09-23T12:25:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2372140378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2372140378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2372146354",
      "pull_request_review_id": 3257729972,
      "id": 2372146354,
      "node_id": "PRRC_kwDOAP4Jqs6NZBSy",
      "diff_hunk": "@@ -0,0 +1,404 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    if (!arg) return 0;\n+    COUNT = (int) strtol(arg, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set tf->registry and tf->num_tests before calling tf_init. */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 283,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Comment appears to be outdated because it refers to non-existing struct members (same in the tf_init doc in unit_test.h).",
      "created_at": "2025-09-23T12:24:32Z",
      "updated_at": "2025-09-23T12:25:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2372146354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2372146354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 279,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2372510740",
      "pull_request_review_id": 3258234092,
      "id": 2372510740,
      "node_id": "PRRC_kwDOAP4Jqs6NaaQU",
      "diff_hunk": "@@ -0,0 +1,404 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 80,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "in_reply_to_id": 2372140378,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is there a reason for not using the GNU standard of using `--` for multi character options?\r\n\r\nNot a fully rational reason, just way too many years working on Core. Happy to switch to the double-dash style to follow the GNU convention.",
      "created_at": "2025-09-23T14:23:28Z",
      "updated_at": "2025-09-23T17:05:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2372510740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2372510740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2373445348",
      "pull_request_review_id": 3259580207,
      "id": 2373445348,
      "node_id": "PRRC_kwDOAP4Jqs6Nd-bk",
      "diff_hunk": "@@ -0,0 +1,404 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");\n+    printf(\"    -print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    -j=<num>, -jobs=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    -iter=<num>, -iterations=<num>      Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    -seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    -target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    -target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    -log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '-key=value'.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    if (!arg) return 0;\n+    COUNT = (int) strtol(arg, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);\n+    return 0;\n+}\n+\n+static int parse_target(const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+            \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args; all must be \"-key=value\" */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        const char* arg = argv[i];\n+        if (!arg || arg[0] != '-') {\n+            fprintf(stderr, \"Arg '%s' must start with '-'\\n\", arg ? arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(arg, '=');\n+        if (eq == NULL || eq == arg+1) {\n+            fprintf(stderr, \"Arg %s must be -key=value\\n\", arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0';\n+        if (parse_arg(arg + 1, eq + 1, tf) != 0) {\n+            return -1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set tf->registry and tf->num_tests before calling tf_init. */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 283,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "in_reply_to_id": 2372146354,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed. Thanks",
      "created_at": "2025-09-23T21:02:41Z",
      "updated_at": "2025-09-23T21:02:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2373445348",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2373445348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 279,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2374560917",
      "pull_request_review_id": 3261212694,
      "id": 2374560917,
      "node_id": "PRRC_kwDOAP4Jqs6NiOyV",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 68,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there any good reason for not just failing here? Allowing unknown options for command-line tools seems to be a very unusual practice in general (I think I've only seen that in the slightly different context of config file parsing for forward-compatibility).",
      "created_at": "2025-09-24T06:28:20Z",
      "updated_at": "2025-09-24T07:29:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2374560917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2374560917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2374670395",
      "pull_request_review_id": 3261212694,
      "id": 2374670395,
      "node_id": "PRRC_kwDOAP4Jqs6Nipg7",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 95,
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "+1 on always printing the iteration count (also to retain the current behavior on master).\r\n(EDIT: this comment is referring to the previous discussion/suggestion https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2351202637)",
      "created_at": "2025-09-24T07:04:06Z",
      "updated_at": "2025-09-24T07:30:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2374670395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2374670395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2374737863",
      "pull_request_review_id": 3261212694,
      "id": 2374737863,
      "node_id": "PRRC_kwDOAP4Jqs6Ni5_H",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 11,
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: is the `defined(SUPPORTS_CONCURRENCY)` part needed? it's not used in similar pre-processor conditions below",
      "created_at": "2025-09-24T07:25:20Z",
      "updated_at": "2025-09-24T07:29:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2374737863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2374737863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2375921186",
      "pull_request_review_id": 3263031930,
      "id": 2375921186,
      "node_id": "PRRC_kwDOAP4Jqs6Nna4i",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 68,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374560917,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is there any good reason for not just failing here? Allowing unknown options for command-line tools seems to be a very unusual practice in general (I think I've only seen that in the slightly different context of config file parsing for forward-compatibility).\r\n\r\nThe idea is to support downgrades and cross-version testing without forcing changes to automation/people scripts. It gives us more flexibility to change options in the future without breaking the existing setups.\r\n\r\nThat being said, if there’s a strong preference to fail here, could change it.",
      "created_at": "2025-09-24T14:03:55Z",
      "updated_at": "2025-09-24T14:13:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2375921186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2375921186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376006142",
      "pull_request_review_id": 3263221120,
      "id": 2376006142,
      "node_id": "PRRC_kwDOAP4Jqs6Nnvn-",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 68,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374560917,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see. No strong objections from me, happy to ACK with or without. Personally I will very likely never have an use-case for running tests on past versions (this IMHO makes much more sense for benchmarks).",
      "created_at": "2025-09-24T14:29:19Z",
      "updated_at": "2025-09-24T14:29:19Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2376006142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376006142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376041598",
      "pull_request_review_id": 3263272282,
      "id": 2376041598,
      "node_id": "PRRC_kwDOAP4Jqs6Nn4R-",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 95,
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374670395,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-24T14:40:32Z",
      "updated_at": "2025-09-24T14:40:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2376041598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376041598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376041926",
      "pull_request_review_id": 3263272734,
      "id": 2376041926,
      "node_id": "PRRC_kwDOAP4Jqs6Nn4XG",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    out->num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* arg) {\n+    /* Find iteration count */\n+    if (arg) {\n+        COUNT = (int) strtol(arg, NULL, 0);\n+    } else {\n+        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n+        if (env && strlen(env) > 0) {\n+            COUNT = (int) strtol(env, NULL, 0);\n+        }\n+    }\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    printf(\"Iterations count = %i\\n\", COUNT);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 86,
      "commit_id": "93c1dcd4d2a90e9191dd91369729b4d5133f56af",
      "original_commit_id": "0423532ea998599c9e099e034b163c65aceabb68",
      "in_reply_to_id": 2351202637,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-24T14:40:39Z",
      "updated_at": "2025-09-24T14:40:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2376041926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376041926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376063374",
      "pull_request_review_id": 3263302421,
      "id": 2376063374,
      "node_id": "PRRC_kwDOAP4Jqs6Nn9mO",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 68,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374560917,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Personally I will very likely never have an use-case for running tests on past versions (this IMHO makes much more sense for benchmarks).\r\n\r\nI usually compare testing times across versions too. Caught a few regressions in that way.",
      "created_at": "2025-09-24T14:48:07Z",
      "updated_at": "2025-09-24T14:48:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2376063374",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376063374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376069805",
      "pull_request_review_id": 3263310970,
      "id": 2376069805,
      "node_id": "PRRC_kwDOAP4Jqs6Nn_Kt",
      "diff_hunk": "@@ -0,0 +1,404 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 80,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "in_reply_to_id": 2372140378,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. Added support for the multi-char options.",
      "created_at": "2025-09-24T14:50:18Z",
      "updated_at": "2025-09-24T14:50:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2376069805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376069805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376783277",
      "pull_request_review_id": 3264287159,
      "id": 2376783277,
      "node_id": "PRRC_kwDOAP4Jqs6NqtWt",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 11,
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374737863,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The standard mandates that undefined macros evaluate to 0 in an `#if`.",
      "created_at": "2025-09-24T19:03:23Z",
      "updated_at": "2025-09-24T19:03:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2376783277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2376783277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377190305",
      "pull_request_review_id": 3264885755,
      "id": 2377190305,
      "node_id": "PRRC_kwDOAP4Jqs6NsQuh",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 11,
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374737863,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, updated.",
      "created_at": "2025-09-24T22:07:15Z",
      "updated_at": "2025-09-24T22:07:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2377190305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377190305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377414417",
      "pull_request_review_id": 3265194970,
      "id": 2377414417,
      "node_id": "PRRC_kwDOAP4Jqs6NtHcR",
      "diff_hunk": "@@ -282,6 +299,12 @@ static int tf_init(struct TestFramework* tf, int argc, char** argv)\n             return EXIT_FAILURE;\n         }\n \n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 29,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "35b00d0fe6fbfb282599d8b75368953f6d08b42f",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Noticed that `--help` is currently not working, so could add that here, since the double dash variant is explicitly listed in the output. Same for `--print_tests` in the later commit.",
      "created_at": "2025-09-25T01:17:08Z",
      "updated_at": "2025-09-25T01:42:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2377414417",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377414417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377421203",
      "pull_request_review_id": 3265194970,
      "id": 2377421203,
      "node_id": "PRRC_kwDOAP4Jqs6NtJGT",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.\n+ * Parses command-line arguments and configures the framework context.\n+ * The caller must set 'registry' and 'num_tests' before calling.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 90,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "dc45bdf4a6cfa7cac80e540e29a314037e33c180",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * The caller must set 'registry_modules' and 'num_modules' before calling.\r\n```\r\n(guess these fields origin from an earlier iteration of the PR and were then renamed at some point)",
      "created_at": "2025-09-25T01:24:21Z",
      "updated_at": "2025-09-25T01:42:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2377421203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377421203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377439714",
      "pull_request_review_id": 3265194970,
      "id": 2377439714,
      "node_id": "PRRC_kwDOAP4Jqs6NtNni",
      "diff_hunk": "@@ -0,0 +1,340 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 30,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "dc45bdf4a6cfa7cac80e540e29a314037e33c180",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "meta-nit: seeing this fancy single-character arrow made me wonder if this file is UTF-8 encoded, and according to the `file` utility it indeed is:\r\n```\r\n$ file ./src/unit_test.c\r\n./src/unit_test.c: C source, Unicode text, UTF-8 text\r\n```\r\nSeems that other source files in the repo are not (see `$ file ./src/*.h ./src/*.c`, resulting all in \"`C source, ASCII text`\"). I could imagine that in theory really old compilers could struggle with that and using ASCII encoding would be the safe choice, but not sure if that concern is practically relevant at all.",
      "created_at": "2025-09-25T01:38:56Z",
      "updated_at": "2025-09-25T01:42:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2377439714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2377439714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2380574895",
      "pull_request_review_id": 3269777304,
      "id": 2380574895,
      "node_id": "PRRC_kwDOAP4Jqs6N5LCv",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, int* is_long) {\n+    if (!arg || arg[0] != '-') return NULL;\n+    /* Single-dash → could be short or long */\n+    if (arg[1] != '-') { *is_long = 0; return arg + 1; }\n+    /* No more than two dashes allowed */\n+    if (arg[2] == '-') return NULL;\n+    /* Double-dash → long option */\n+    *is_long = 1;\n+    return arg + 2;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    int is_long;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) { /* key is empty */\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        key = normalize_key(raw_arg, &is_long);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid key: '%s'\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        /* forbid --x (double-dash with single-char key) */\n+        if (is_long && key[1] == '\\0') {\n+            fprintf(stderr, \"Invalid key: short option '%s' cannot use double dash\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set the registry and its size before calling tf_init */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.targets.size = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env(tf) != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc - 1 > MAX_ARGS) { /* first arg is always the binary path */\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {\n+            help();\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Check if we need to print the available tests */\n+        if (argv[1] && strcmp(argv[1], \"-print_tests\") == 0) {\n+            print_test_list(tf);\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(\"i\", argv[1], tf) != 0) return EXIT_FAILURE;\n+            if (has_seed) parse_seed(\"seed\", argv[2], tf);\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    tf->fn_run_test = tf->args.logging ? run_test_log : run_test;\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Whether to run all tests */\n+    int run_all;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */\n+    /* Verify 'tf_init' has been called */\n+    if (!tf->fn_run_test) {\n+        fprintf(stderr, \"Error: No test runner set. You must call 'tf_init' first to initialize the framework \"\n+                        \"or manually assign 'fn_run_test' before calling 'tf_run'.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Populate targets with all tests if none were explicitly specified */\n+    run_all = tf->args.targets.size == 0;\n+    if (run_all) {\n+        TestRef ref;\n+        for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+            const struct TestModule* group = &tf->registry_modules[ref.group];\n+            for (ref.idx = 0; ref.idx < group->size; ref.idx++) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Internal Error: Number of tests (%d) exceeds MAX_ARGS (%d). \"\n+                                    \"Increase MAX_ARGS to accommodate all tests.\\n\", tf->args.targets.size, MAX_ARGS);\n+                    return EXIT_FAILURE;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = ref;\n+            }\n+        }\n+    }\n+\n+    if (!tf->args.logging) printf(\"Tests running silently. Use '-log=1' to enable detailed logging\\n\");\n+\n+    /* Log configuration */\n+    print_args(&tf->args);\n+\n+    /* Run test RNG tests (must run before we really initialize the test RNG) */\n+    /* Note: currently, these tests are executed sequentially because there */\n+    /* is really only one test. */\n+    for (it = 0; tf->registry_no_rng && it < tf->registry_no_rng->size; it++) {\n+        if (run_all) { /* future: support filtering */\n+            tf->fn_run_test(&tf->registry_no_rng->data[it]);\n+        }\n+    }\n+\n+    /* Initialize test RNG and library contexts */\n+    testrand_init(tf->args.custom_seed);\n+    if (tf->fn_setup && tf->fn_setup() != 0) return EXIT_FAILURE;\n+\n+    /* Check whether to process tests sequentially or concurrently */\n+    if (tf->args.num_processes <= 1) {\n+        status = run_sequential(tf);\n+    } else {\n+#if SUPPORTS_CONCURRENCY\n+        status = run_concurrent(tf);\n+#else\n+        fputs(\"Parallel execution not supported on your system. Running sequentially..\\n\", stderr);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 448,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        fputs(\"Parallel execution not supported on your system. Running sequentially...\\n\", stderr);\r\n```",
      "created_at": "2025-09-26T00:14:30Z",
      "updated_at": "2025-09-26T00:14:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2380574895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2380574895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2380585931",
      "pull_request_review_id": 3269791448,
      "id": 2380585931,
      "node_id": "PRRC_kwDOAP4Jqs6N5NvL",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 11,
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374737863,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I've grepped the codebase correctly, this will be the only external definition used as `#if DEFINITION`.\r\n\r\n> The standard mandates that undefined macros evaluate to 0 in an `#if`.\r\n\r\nNevertheless, this approach has proven fragile. I would kindly ask to reconsider the design and use `#if defined(DEFINITION)` instead, which would also require slight adjustment in both build systems.\r\n\r\n\r\n",
      "created_at": "2025-09-26T00:26:24Z",
      "updated_at": "2025-09-26T00:26:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2380585931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2380585931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381187075",
      "pull_request_review_id": 3270597905,
      "id": 2381187075,
      "node_id": "PRRC_kwDOAP4Jqs6N7ggD",
      "diff_hunk": "@@ -0,0 +1,340 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 30,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "dc45bdf4a6cfa7cac80e540e29a314037e33c180",
      "in_reply_to_id": 2377439714,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's C89, but hey, at least we got emojis in the source code! :rofl: \r\n\r\nSerious: I don't think it's a problem in practice but it can't be wrong to stick to ASCII for consistency.\r\n\r\n",
      "created_at": "2025-09-26T07:35:35Z",
      "updated_at": "2025-09-26T07:35:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2381187075",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381187075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381507361",
      "pull_request_review_id": 3271029421,
      "id": 2381507361,
      "node_id": "PRRC_kwDOAP4Jqs6N8ush",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFiles)\n+  check_include_files(\"sys/types.h\" HAVE_SYS_TYPES_H)\n+  check_include_files(\"sys/wait.h\" HAVE_SYS_WAIT_H)\n+  check_include_files(\"unistd.h\" HAVE_UNISTD_H)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 7,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The [`CheckIncludeFile`](https://cmake.org/cmake/help/latest/module/CheckIncludeFile.html) module (in singular) appears more suitable:\r\n```suggestion\r\n  include(CheckIncludeFile)\r\n  check_include_file(sys/types.h HAVE_SYS_TYPES_H)\r\n  check_include_file(sys/wait.h HAVE_SYS_WAIT_H)\r\n  check_include_file(unistd.h HAVE_UNISTD_H)\r\n```",
      "created_at": "2025-09-26T09:04:52Z",
      "updated_at": "2025-09-26T09:04:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2381507361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381507361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381543998",
      "pull_request_review_id": 3271075010,
      "id": 2381543998,
      "node_id": "PRRC_kwDOAP4Jqs6N83o-",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFiles)\n+  check_include_files(\"sys/types.h\" HAVE_SYS_TYPES_H)\n+  check_include_files(\"sys/wait.h\" HAVE_SYS_WAIT_H)\n+  check_include_files(\"unistd.h\" HAVE_UNISTD_H)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 7,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2381507361,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It may sound like overkill, but we're actually interested in the symbols provided by headers, not the headers themselves. For example, when cross-compiling for Windows, `unistd.h` is available, but `fork()` is not.\r\n\r\nSo something like the following would be more robust:\r\n```cmake\r\n  include(CheckSymbolExists)\r\n  check_symbol_exists(waitpid \"sys/wait.h\" HAVE_WAITPID)\r\n  check_symbol_exists(fork \"unistd.h\" HAVE_FORK)\r\n  ...\r\n```",
      "created_at": "2025-09-26T09:12:16Z",
      "updated_at": "2025-09-26T09:12:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2381543998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2381543998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2382520751",
      "pull_request_review_id": 3272421762,
      "id": 2382520751,
      "node_id": "PRRC_kwDOAP4Jqs6OAmGv",
      "diff_hunk": "@@ -0,0 +1,340 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 30,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "dc45bdf4a6cfa7cac80e540e29a314037e33c180",
      "in_reply_to_id": 2377439714,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ok, will save my emojis for the blockchain only.",
      "created_at": "2025-09-26T13:58:42Z",
      "updated_at": "2025-09-26T13:58:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2382520751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2382520751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2382986745",
      "pull_request_review_id": 3273129375,
      "id": 2382986745,
      "node_id": "PRRC_kwDOAP4Jqs6OCX35",
      "diff_hunk": "@@ -282,6 +299,12 @@ static int tf_init(struct TestFramework* tf, int argc, char** argv)\n             return EXIT_FAILURE;\n         }\n \n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 29,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "35b00d0fe6fbfb282599d8b75368953f6d08b42f",
      "in_reply_to_id": 2377414417,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "good catch. Fixed.\r\nAlso refactored the code so this doesn't happen again.",
      "created_at": "2025-09-26T17:15:18Z",
      "updated_at": "2025-09-26T17:15:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2382986745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2382986745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2382987061",
      "pull_request_review_id": 3273129847,
      "id": 2382987061,
      "node_id": "PRRC_kwDOAP4Jqs6OCX81",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.\n+ * Parses command-line arguments and configures the framework context.\n+ * The caller must set 'registry' and 'num_tests' before calling.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 90,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "dc45bdf4a6cfa7cac80e540e29a314037e33c180",
      "in_reply_to_id": 2377421203,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah, fixed.",
      "created_at": "2025-09-26T17:15:30Z",
      "updated_at": "2025-09-26T17:15:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2382987061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2382987061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2383036945",
      "pull_request_review_id": 3273202895,
      "id": 2383036945,
      "node_id": "PRRC_kwDOAP4Jqs6OCkIR",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 11,
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374737863,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > The standard mandates that undefined macros evaluate to 0 in an `#if`.\r\n> \r\n> Nevertheless, this approach has proven fragile. I would kindly ask to reconsider the design and use `#if defined(DEFINITION)` instead, which would also require slight adjustment in both build systems.\r\n\r\nHappy to change it either way, but let's try to reach a consensus first.",
      "created_at": "2025-09-26T17:35:37Z",
      "updated_at": "2025-09-26T17:35:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2383036945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2383036945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386086766",
      "pull_request_review_id": 3276966247,
      "id": 2386086766,
      "node_id": "PRRC_kwDOAP4Jqs6OOMtu",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test(const struct TestEntry* t) {\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"%s PASSED\\n\", t->name);\n+}\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    TestRef ref;\n+    const struct TestModule* mdl;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            run_test(&mdl->data[ref.idx]);\n+        }\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &ref, sizeof(ref)) == sizeof(ref)) {\n+                run_test(&tf->registry_modules[ref.group].data[ref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        const struct TestModule* mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            if (write(pipes[worker_idx][1], &ref, sizeof(ref)) == -1) {\n+                perror(\"Error during workload distribution\");\n+                return EXIT_FAILURE;\n+            }\n+            if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+        }\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set the registry and its size before calling tf_init */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env(tf) != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc - 1 > MAX_ARGS) { /* first arg is always the binary path */\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(\"i\", argv[1], tf) != 0) return EXIT_FAILURE;\n+            if (has_seed) parse_seed(\"seed\", argv[2], tf);\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 311,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "f55cf8661552aadd4ea26b0ba161a74a4c7f41d7",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this comment sounds like a TODO? seems reasonable to set `start_time` as late as possible, after all the internal setup work is done (OTOH, setting slots is probably so fast that it doesn't really matter...)",
      "created_at": "2025-09-28T15:15:46Z",
      "updated_at": "2025-09-28T16:15:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386086766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386086766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386099174",
      "pull_request_review_id": 3276966247,
      "id": 2386099174,
      "node_id": "PRRC_kwDOAP4Jqs6OOPvm",
      "diff_hunk": "@@ -197,13 +227,10 @@ static void run_test(const struct TestEntry* t) {\n \n /* Process tests in sequential order */\n static int run_sequential(struct TestFramework* tf) {\n-    TestRef ref;\n-    const struct TestModule* mdl;\n-    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n-        mdl = &tf->registry_modules[ref.group];\n-        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n-            run_test(&mdl->data[ref.idx]);\n-        }\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 71,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "e6ab0b486fc20ae0a13ea475002bb9b72a4a35ab",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "const-correctness nit\r\n```suggestion\r\n        const TestRef* index = &tf->args.targets.slots[it];\r\n```",
      "created_at": "2025-09-28T15:20:42Z",
      "updated_at": "2025-09-28T16:15:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386099174",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386099174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386180686",
      "pull_request_review_id": 3276966247,
      "id": 2386180686,
      "node_id": "PRRC_kwDOAP4Jqs6OOjpO",
      "diff_hunk": "@@ -146,6 +150,32 @@ static const char* normalize_key(const char* arg, const char** err_msg) {\n     return key;\n }\n \n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 30,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "e6ab0b486fc20ae0a13ea475002bb9b72a4a35ab",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: comments don't match the actual field names",
      "created_at": "2025-09-28T16:15:09Z",
      "updated_at": "2025-09-28T16:15:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386180686",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386180686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386303575",
      "pull_request_review_id": 3277340617,
      "id": 2386303575,
      "node_id": "PRRC_kwDOAP4Jqs6OPBpX",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test(const struct TestEntry* t) {\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"%s PASSED\\n\", t->name);\n+}\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    TestRef ref;\n+    const struct TestModule* mdl;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            run_test(&mdl->data[ref.idx]);\n+        }\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &ref, sizeof(ref)) == sizeof(ref)) {\n+                run_test(&tf->registry_modules[ref.group].data[ref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        const struct TestModule* mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            if (write(pipes[worker_idx][1], &ref, sizeof(ref)) == -1) {\n+                perror(\"Error during workload distribution\");\n+                return EXIT_FAILURE;\n+            }\n+            if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+        }\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set the registry and its size before calling tf_init */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env(tf) != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc - 1 > MAX_ARGS) { /* first arg is always the binary path */\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(\"i\", argv[1], tf) != 0) return EXIT_FAILURE;\n+            if (has_seed) parse_seed(\"seed\", argv[2], tf);\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 311,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "f55cf8661552aadd4ea26b0ba161a74a4c7f41d7",
      "in_reply_to_id": 2386086766,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah, will just leave it here for now.",
      "created_at": "2025-09-28T19:52:52Z",
      "updated_at": "2025-09-28T19:52:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386303575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386303575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386303836",
      "pull_request_review_id": 3277340977,
      "id": 2386303836,
      "node_id": "PRRC_kwDOAP4Jqs6OPBtc",
      "diff_hunk": "@@ -197,13 +227,10 @@ static void run_test(const struct TestEntry* t) {\n \n /* Process tests in sequential order */\n static int run_sequential(struct TestFramework* tf) {\n-    TestRef ref;\n-    const struct TestModule* mdl;\n-    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n-        mdl = &tf->registry_modules[ref.group];\n-        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n-            run_test(&mdl->data[ref.idx]);\n-        }\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 71,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "e6ab0b486fc20ae0a13ea475002bb9b72a4a35ab",
      "in_reply_to_id": 2386099174,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2025-09-28T19:53:00Z",
      "updated_at": "2025-09-28T19:53:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386303836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386303836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386304248",
      "pull_request_review_id": 3277341538,
      "id": 2386304248,
      "node_id": "PRRC_kwDOAP4Jqs6OPBz4",
      "diff_hunk": "@@ -146,6 +150,32 @@ static const char* normalize_key(const char* arg, const char** err_msg) {\n     return key;\n }\n \n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 30,
      "commit_id": "fed7e3820031dce3b6af2ed36ec2a5e096c90d42",
      "original_commit_id": "e6ab0b486fc20ae0a13ea475002bb9b72a4a35ab",
      "in_reply_to_id": 2386180686,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "thx, done.",
      "created_at": "2025-09-28T19:53:14Z",
      "updated_at": "2025-09-28T19:53:14Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386304248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386304248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386915345",
      "pull_request_review_id": 3278215891,
      "id": 2386915345,
      "node_id": "PRRC_kwDOAP4Jqs6ORXAR",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)",
      "path": "src/unit_test.c",
      "position": 20,
      "original_position": 21,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: We just use `(void)x;` throughout the entire code base. It's a common C idiom, so I think the indirection through the `UNUSED` macro makes reading the code a tiny bit harder. (But no strong opinions!)",
      "created_at": "2025-09-29T07:06:49Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386915345",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386915345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386921994",
      "pull_request_review_id": 3278215891,
      "id": 2386921994,
      "node_id": "PRRC_kwDOAP4Jqs6ORYoK",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef LIBSECP256K1_UNIT_TEST_H\n+#define LIBSECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }",
      "path": "src/unit_test.h",
      "position": 25,
      "original_position": 26,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "5a501061ea082d66e193234023843738a328e4a4",
      "in_reply_to_id": 2346604192,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, having this in a follow-up PR is fine. (But also here is fine.)",
      "created_at": "2025-09-29T07:09:20Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386921994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386921994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 24,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386926707",
      "pull_request_review_id": 3278215891,
      "id": 2386926707,
      "node_id": "PRRC_kwDOAP4Jqs6ORZxz",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+    /* Test runner function (can be customized) */\n+    run_test_fn fn_run_test;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 119,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"as early as possible in the program.\"\n\nThat seems imprecise. What's the reason for this requirement?",
      "created_at": "2025-09-29T07:11:30Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386926707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386926707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386927607",
      "pull_request_review_id": 3278215891,
      "id": 2386927607,
      "node_id": "PRRC_kwDOAP4Jqs6ORZ_3",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+    /* Test runner function (can be customized) */\n+    run_test_fn fn_run_test;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.\n+ * Parses command-line arguments and configures the framework context.\n+ * The caller must set 'registry_modules' and 'num_modules' before calling.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 121,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n * The caller must set 'tf.registry_modules' and 'tf.num_modules' before calling.\n```",
      "created_at": "2025-09-29T07:11:52Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386927607",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386927607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386930749",
      "pull_request_review_id": 3278215891,
      "id": 2386930749,
      "node_id": "PRRC_kwDOAP4Jqs6ORaw9",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit: These struct names should be lowercase and snake_case for consistency with the rest of the code base.",
      "created_at": "2025-09-29T07:13:14Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386930749",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386930749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386934169",
      "pull_request_review_id": 3278215891,
      "id": 2386934169,
      "node_id": "PRRC_kwDOAP4Jqs6ORbmZ",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 96,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: This is above the \"Public API\" sectioning comment, but this struct seems to be part of the public API,",
      "created_at": "2025-09-29T07:14:36Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386934169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386934169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386938033",
      "pull_request_review_id": 3278215891,
      "id": 2386938033,
      "node_id": "PRRC_kwDOAP4Jqs6ORcix",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 28,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "micronit:\n```suggestion\n#define MAKE_TEST_MODULE(name) { \\\n```\nActually, below in `REPEAT_TEST_MULT`, there's a different style. I think the \"one space\" style is more common in this code base.",
      "created_at": "2025-09-29T07:16:30Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386938033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386938033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386954250",
      "pull_request_review_id": 3278215891,
      "id": 2386954250,
      "node_id": "PRRC_kwDOAP4Jqs6ORggK",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 2,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: \nThis is totally fine to have the year and your name here if you want to keep it, but we recently came to the conclusion that simply omitting the \"Copyright (c)\" line for new files makes maintenance easier (see the ellswift module for example). \n\nRationale: Adding the year and name is legally not required to obtain the copyright. It's merely a hint on who has the copyright and when it will expire, but we have git for this. Updating the date is annoying, so no one does it in practice. And it's never entirely clear when to update the name list, so no one does it in practice. So after a few years, this line will probably be outdated.",
      "created_at": "2025-09-29T07:24:01Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386954250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386954250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386957311",
      "pull_request_review_id": 3278215891,
      "id": 2386957311,
      "node_id": "PRRC_kwDOAP4Jqs6ORhP_",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 234,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It would be nice to support the GNU style `print-tests` here as well now that we support `--`. (Not sure if it must be documented but I guess it won't hurt.)",
      "created_at": "2025-09-29T07:25:26Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386957311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386957311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386968867",
      "pull_request_review_id": 3278215891,
      "id": 2386968867,
      "node_id": "PRRC_kwDOAP4Jqs6ORkEj",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 87,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think `list_tests` would be more precise here (and a bit more in line with other unix programs). Perhaps we could have a `-l` shortcut?",
      "created_at": "2025-09-29T07:28:58Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386968867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386968867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386985943",
      "pull_request_review_id": 3278215891,
      "id": 2386985943,
      "node_id": "PRRC_kwDOAP4Jqs6ORoPX",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 100,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think the sentence structure is a bit weird here. Suggestion:\n\"Iterations and seed can also be passed as positional arguments before any other argument for backward compatibility.\"",
      "created_at": "2025-09-29T07:36:23Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2386985943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2386985943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387022920",
      "pull_request_review_id": 3278215891,
      "id": 2387022920,
      "node_id": "PRRC_kwDOAP4Jqs6ORxRI",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 174,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I pass `--` as `arg` to this function, then `key[1] == arg[3]` and this is beyond the end of the string, so this is UB. \n\n(On my machine, I get \"unknown error\" as the error message. I think having this as a fallback is not good. It simply hides coding errors, and it would be better to assert that `err_msg` is set when an error is indicated via the return value.)",
      "created_at": "2025-09-29T07:52:07Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2387022920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387022920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387035397",
      "pull_request_review_id": 3278215891,
      "id": 2387035397,
      "node_id": "PRRC_kwDOAP4Jqs6OR0UF",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, int* is_long) {\n+    if (!arg || arg[0] != '-') return NULL;\n+    /* Single-dash → could be short or long */\n+    if (arg[1] != '-') { *is_long = 0; return arg + 1; }\n+    /* No more than two dashes allowed */\n+    if (arg[2] == '-') return NULL;\n+    /* Double-dash → long option */\n+    *is_long = 1;\n+    return arg + 2;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    int is_long;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) { /* key is empty */\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        key = normalize_key(raw_arg, &is_long);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid key: '%s'\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        /* forbid --x (double-dash with single-char key) */\n+        if (is_long && key[1] == '\\0') {\n+            fprintf(stderr, \"Invalid key: short option '%s' cannot use double dash\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set the registry and its size before calling tf_init */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.targets.size = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env(tf) != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc - 1 > MAX_ARGS) { /* first arg is always the binary path */\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {\n+            help();\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Check if we need to print the available tests */\n+        if (argv[1] && strcmp(argv[1], \"-print_tests\") == 0) {\n+            print_test_list(tf);\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(\"i\", argv[1], tf) != 0) return EXIT_FAILURE;\n+            if (has_seed) parse_seed(\"seed\", argv[2], tf);\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    tf->fn_run_test = tf->args.logging ? run_test_log : run_test;\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Whether to run all tests */\n+    int run_all;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */\n+    /* Verify 'tf_init' has been called */\n+    if (!tf->fn_run_test) {\n+        fprintf(stderr, \"Error: No test runner set. You must call 'tf_init' first to initialize the framework \"\n+                        \"or manually assign 'fn_run_test' before calling 'tf_run'.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Populate targets with all tests if none were explicitly specified */\n+    run_all = tf->args.targets.size == 0;\n+    if (run_all) {\n+        TestRef ref;\n+        for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+            const struct TestModule* group = &tf->registry_modules[ref.group];\n+            for (ref.idx = 0; ref.idx < group->size; ref.idx++) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Internal Error: Number of tests (%d) exceeds MAX_ARGS (%d). \"\n+                                    \"Increase MAX_ARGS to accommodate all tests.\\n\", tf->args.targets.size, MAX_ARGS);\n+                    return EXIT_FAILURE;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = ref;\n+            }\n+        }\n+    }\n+\n+    if (!tf->args.logging) printf(\"Tests running silently. Use '-log=1' to enable detailed logging\\n\");\n+\n+    /* Log configuration */\n+    print_args(&tf->args);\n+\n+    /* Run test RNG tests (must run before we really initialize the test RNG) */\n+    /* Note: currently, these tests are executed sequentially because there */\n+    /* is really only one test. */\n+    for (it = 0; tf->registry_no_rng && it < tf->registry_no_rng->size; it++) {\n+        if (run_all) { /* future: support filtering */\n+            tf->fn_run_test(&tf->registry_no_rng->data[it]);\n+        }\n+    }\n+\n+    /* Initialize test RNG and library contexts */\n+    testrand_init(tf->args.custom_seed);\n+    if (tf->fn_setup && tf->fn_setup() != 0) return EXIT_FAILURE;\n+\n+    /* Check whether to process tests sequentially or concurrently */\n+    if (tf->args.num_processes <= 1) {\n+        status = run_sequential(tf);\n+    } else {\n+#if SUPPORTS_CONCURRENCY\n+        status = run_concurrent(tf);\n+#else\n+        fputs(\"Parallel execution not supported on your system. Running sequentially..\\n\", stderr);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 448,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2380574895,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: not resolved? (and did you want \".\" instead of \"...\"?)",
      "created_at": "2025-09-29T07:56:56Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2387035397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387035397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387052566",
      "pull_request_review_id": 3278215891,
      "id": 2387052566,
      "node_id": "PRRC_kwDOAP4Jqs6OR4gW",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 58,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps print \"sequential execution\" here additionally to `jobs = 0` or instead.",
      "created_at": "2025-09-29T08:03:30Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2387052566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387052566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387059358",
      "pull_request_review_id": 3278215891,
      "id": 2387059358,
      "node_id": "PRRC_kwDOAP4Jqs6OR6Ke",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {\n+                tf->args.print_tests = 1;\n+                return 0;\n+            }\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        const TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set the registry and its size before calling tf_init */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.help = 0;\n+    tf->args.targets.size = 0;\n+    tf->args.print_tests = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env(tf) != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc - 1 > MAX_ARGS) { /* first arg is always the binary path */\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 378,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think `argv[1]` must hold here because `argc > 1`. (Similar thing in the next line).",
      "created_at": "2025-09-29T08:06:25Z",
      "updated_at": "2025-09-29T08:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2387059358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387059358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387074811",
      "pull_request_review_id": 3278454604,
      "id": 2387074811,
      "node_id": "PRRC_kwDOAP4Jqs6OR977",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFiles)\n+  check_include_files(\"sys/types.h\" HAVE_SYS_TYPES_H)\n+  check_include_files(\"sys/wait.h\" HAVE_SYS_WAIT_H)\n+  check_include_files(\"unistd.h\" HAVE_UNISTD_H)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 7,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2381507361,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did you mark this \"resolved\" unintentionally?",
      "created_at": "2025-09-29T08:11:48Z",
      "updated_at": "2025-09-29T08:11:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2387074811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387074811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387078615",
      "pull_request_review_id": 3278460069,
      "id": 2387078615,
      "node_id": "PRRC_kwDOAP4Jqs6OR-3X",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 11,
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374737863,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree, it's better to use definedness than the actual value, simply for consistency with how we do boolean build flags in the rest of the code base.",
      "created_at": "2025-09-29T08:13:27Z",
      "updated_at": "2025-09-29T08:13:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2387078615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2387078615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388094118",
      "pull_request_review_id": 3280002482,
      "id": 2388094118,
      "node_id": "PRRC_kwDOAP4Jqs6OV2ym",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+    /* Test runner function (can be customized) */\n+    run_test_fn fn_run_test;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 119,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386926707,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> \"as early as possible in the program.\"\r\n> \r\n> That seems imprecise. What's the reason for this requirement?\r\n\r\nIt disables stdout and stderr buffering (the `setbuf()` calls).",
      "created_at": "2025-09-29T13:58:04Z",
      "updated_at": "2025-09-29T13:58:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388094118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388094118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388151044",
      "pull_request_review_id": 3280090258,
      "id": 2388151044,
      "node_id": "PRRC_kwDOAP4Jqs6OWEsE",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386930749,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> style nit: These struct names should be lowercase and snake_case for consistency with the rest of the code base.\r\n\r\nMy concern with that is that it’s easy for struct names to clash with variable names using that style.\r\nIn the rest of the codebase, this isn’t a problem because we prefix structs with `secp256k1`, but here that would mean more boilerplate without much gain?.\r\nI could add the prefix + change them to lowercase if you feel strongly about it. I'm just thinking out loud before entering a large rebase.",
      "created_at": "2025-09-29T14:13:15Z",
      "updated_at": "2025-09-29T14:27:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388151044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388151044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388184816",
      "pull_request_review_id": 3280140682,
      "id": 2388184816,
      "node_id": "PRRC_kwDOAP4Jqs6OWM7w",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 96,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386934169,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> nit: This is above the \"Public API\" sectioning comment, but this struct seems to be part of the public API,\r\n\r\nThat’s because I was initially thinking of adding a factory function that returns an initialized `TestFramework`, but it ended up feeling like extra boilerplate with no real benefit. Will move it.",
      "created_at": "2025-09-29T14:23:23Z",
      "updated_at": "2025-09-29T14:23:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388184816",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388184816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388298712",
      "pull_request_review_id": 3280327044,
      "id": 2388298712,
      "node_id": "PRRC_kwDOAP4Jqs6OWovY",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 174,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2387022920,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> If I pass -- as arg to this function, then key[1] == arg[3] and this is beyond the end of the string, so this is UB.\r\n\r\nNice catch. Fixed.\r\n\r\n> (On my machine, I get \"unknown error\" as the error message. I think having this as a fallback is not good. It simply hides coding errors, and it would be better to assert that err_msg is set when an error is indicated via the return value.)\r\n\r\nYou know, I actually avoided using runtime assertions because I didn’t find any throughout the library.",
      "created_at": "2025-09-29T14:57:53Z",
      "updated_at": "2025-09-29T14:57:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388298712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388298712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388389581",
      "pull_request_review_id": 3280459329,
      "id": 2388389581,
      "node_id": "PRRC_kwDOAP4Jqs6OW-7N",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFiles)\n+  check_include_files(\"sys/types.h\" HAVE_SYS_TYPES_H)\n+  check_include_files(\"sys/wait.h\" HAVE_SYS_WAIT_H)\n+  check_include_files(\"unistd.h\" HAVE_UNISTD_H)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 7,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2381507361,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Did you mark this \"resolved\" unintentionally?\r\n\r\nI pushed hebasto's initial `CheckIncludeFile` suggestion after discussing the `CheckSymbolExists` one via DM, and forgot to update this thread (sorry for that). It just seemed to be an overkill for a feature we might introduce in a follow-up. Adding Windows support is not hard, it is just a bit more code.",
      "created_at": "2025-09-29T15:26:10Z",
      "updated_at": "2025-09-29T15:26:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388389581",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388389581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388396347",
      "pull_request_review_id": 3280469296,
      "id": 2388396347,
      "node_id": "PRRC_kwDOAP4Jqs6OXAk7",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)",
      "path": "src/unit_test.c",
      "position": 20,
      "original_position": 21,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386915345,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Gotcha. Will leave it as is for now to avoid a large rebase. Happy to change it if more of us prefer the direct `(void)x` too.",
      "created_at": "2025-09-29T15:27:56Z",
      "updated_at": "2025-09-29T15:27:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388396347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388396347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388397098",
      "pull_request_review_id": 3280470597,
      "id": 2388397098,
      "node_id": "PRRC_kwDOAP4Jqs6OXAwq",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+    /* Test runner function (can be customized) */\n+    run_test_fn fn_run_test;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.\n+ * Parses command-line arguments and configures the framework context.\n+ * The caller must set 'registry_modules' and 'num_modules' before calling.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 121,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386927607,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as suggested.",
      "created_at": "2025-09-29T15:28:09Z",
      "updated_at": "2025-09-29T15:28:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388397098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388397098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388400115",
      "pull_request_review_id": 3280476149,
      "id": 2388400115,
      "node_id": "PRRC_kwDOAP4Jqs6OXBfz",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 28,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386938033,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as suggested",
      "created_at": "2025-09-29T15:28:58Z",
      "updated_at": "2025-09-29T15:28:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388400115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388400115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388401305",
      "pull_request_review_id": 3280478510,
      "id": 2388401305,
      "node_id": "PRRC_kwDOAP4Jqs6OXByZ",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 2,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386954250,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Gotcha. Removed.",
      "created_at": "2025-09-29T15:29:18Z",
      "updated_at": "2025-09-29T15:29:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388401305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388401305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388401922",
      "pull_request_review_id": 3280479595,
      "id": 2388401922,
      "node_id": "PRRC_kwDOAP4Jqs6OXB8C",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 87,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386968867,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as suggested.",
      "created_at": "2025-09-29T15:29:27Z",
      "updated_at": "2025-09-29T15:29:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388401922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388401922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388402966",
      "pull_request_review_id": 3280481654,
      "id": 2388402966,
      "node_id": "PRRC_kwDOAP4Jqs6OXCMW",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 100,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386985943,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks. Done as suggested.",
      "created_at": "2025-09-29T15:29:43Z",
      "updated_at": "2025-09-29T15:29:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388402966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388402966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388404157",
      "pull_request_review_id": 3280483627,
      "id": 2388404157,
      "node_id": "PRRC_kwDOAP4Jqs6OXCe9",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {\n+                tf->args.print_tests = 1;\n+                return 0;\n+            }\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        const TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set the registry and its size before calling tf_init */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.help = 0;\n+    tf->args.targets.size = 0;\n+    tf->args.print_tests = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env(tf) != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc - 1 > MAX_ARGS) { /* first arg is always the binary path */\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 378,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2387059358,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure. Done as suggested.",
      "created_at": "2025-09-29T15:30:03Z",
      "updated_at": "2025-09-29T15:30:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388404157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388404157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388436495",
      "pull_request_review_id": 3280537882,
      "id": 2388436495,
      "node_id": "PRRC_kwDOAP4Jqs6OXKYP",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key → handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, int* is_long) {\n+    if (!arg || arg[0] != '-') return NULL;\n+    /* Single-dash → could be short or long */\n+    if (arg[1] != '-') { *is_long = 0; return arg + 1; }\n+    /* No more than two dashes allowed */\n+    if (arg[2] == '-') return NULL;\n+    /* Double-dash → long option */\n+    *is_long = 1;\n+    return arg + 2;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*idx_module=*/0, /*idx_test=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    int is_long;\n+    char* eq;\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) { /* key is empty */\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        key = normalize_key(raw_arg, &is_long);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid key: '%s'\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        /* forbid --x (double-dash with single-char key) */\n+        if (is_long && key[1] == '\\0') {\n+            fprintf(stderr, \"Invalid key: short option '%s' cannot use double dash\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct TestEntry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct TestEntry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct TestFramework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        TestRef* index = &tf->args.targets.slots[it];\n+        tf->fn_run_test(&tf->registry_modules[index->group].data[index->idx]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if SUPPORTS_CONCURRENCY\n+/* Process tests in parallel */\n+static int run_concurrent(struct TestFramework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef* ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            TestRef tref;\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &tref, sizeof(tref)) == sizeof(tref)) {\n+                tf->fn_run_test(&tf->registry_modules[tref.group].data[tref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */\n+    worker_idx = 0;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        ref = &tf->args.targets.slots[it];\n+        if (write(pipes[worker_idx][1], ref, sizeof(*ref)) == -1) {\n+            perror(\"Error during workload distribution\");\n+            return EXIT_FAILURE;\n+        }\n+        if (++worker_idx >= tf->args.num_processes) worker_idx = 0;\n+    }\n+\n+    /* Close all pipes to signal workers to exit */\n+    for (it = 0; it < tf->args.num_processes; it++) close(pipes[it][1]);\n+    /* Wait for all workers */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        int ret = 0;\n+        if (waitpid(workers[it], &ret, 0) == -1 || ret != 0) {\n+            status = EXIT_FAILURE;\n+        }\n+    }\n+\n+    return status;\n+}\n+#endif\n+\n+static int tf_init(struct TestFramework* tf, int argc, char** argv)\n+{\n+    /* Caller must set the registry and its size before calling tf_init */\n+    if (tf->registry_modules == NULL || tf->num_modules <= 0) {\n+        fprintf(stderr, \"Error: tests registry not provided or empty\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Initialize command-line options */\n+    tf->args.num_processes = 0;\n+    tf->args.custom_seed = NULL;\n+    tf->args.targets.size = 0;\n+    tf->args.logging = 0;\n+\n+    /* Disable buffering for stdout to improve reliability of getting\n+     * diagnostic information. Happens right at the start of main because\n+     * setbuf must be used before any other operation on the stream. */\n+    setbuf(stdout, NULL);\n+    /* Also disable buffering for stderr because it's not guaranteed that it's\n+     * unbuffered on all systems. */\n+    setbuf(stderr, NULL);\n+\n+    /* Parse env args */\n+    if (read_env(tf) != 0) return EXIT_FAILURE;\n+\n+    /* Parse command-line args */\n+    if (argc > 1) {\n+        int named_arg_start = 1; /* index to begin processing named arguments */\n+        if (argc - 1 > MAX_ARGS) { /* first arg is always the binary path */\n+            fprintf(stderr, \"Too many command-line arguments (max: %d)\\n\", MAX_ARGS);\n+            return EXIT_FAILURE;\n+        }\n+\n+        /* Check if we need to print help */\n+        if (argv[1] && (strcmp(argv[1], \"-help\") == 0 || strcmp(argv[1], \"-h\") == 0)) {\n+            help();\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Check if we need to print the available tests */\n+        if (argv[1] && strcmp(argv[1], \"-print_tests\") == 0) {\n+            print_test_list(tf);\n+            exit(EXIT_SUCCESS);\n+        }\n+\n+        /* Compatibility Note: The first two args were the number of iterations and the seed. */\n+        /* If provided, parse them and adjust the starting index for named arguments accordingly. */\n+        if (argv[1] && argv[1][0] != '-') {\n+            int has_seed = argc > 2 && argv[2] && argv[2][0] != '-';\n+            if (parse_iterations(\"i\", argv[1], tf) != 0) return EXIT_FAILURE;\n+            if (has_seed) parse_seed(\"seed\", argv[2], tf);\n+            named_arg_start = has_seed ? 3 : 2;\n+        }\n+        if (read_args(argc, argv, named_arg_start, tf) != 0) {\n+            return EXIT_FAILURE;\n+        }\n+    }\n+\n+    tf->fn_run_test = tf->args.logging ? run_test_log : run_test;\n+    return EXIT_SUCCESS;\n+}\n+\n+static int tf_run(struct TestFramework* tf) {\n+    /* Process exit status */\n+    int status;\n+    /* Whether to run all tests */\n+    int run_all;\n+    /* Loop iterator */\n+    int it;\n+    /* Initial test time */\n+    int64_t start_time = gettime_i64(); /* maybe move this after the slots set */\n+    /* Verify 'tf_init' has been called */\n+    if (!tf->fn_run_test) {\n+        fprintf(stderr, \"Error: No test runner set. You must call 'tf_init' first to initialize the framework \"\n+                        \"or manually assign 'fn_run_test' before calling 'tf_run'.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Populate targets with all tests if none were explicitly specified */\n+    run_all = tf->args.targets.size == 0;\n+    if (run_all) {\n+        TestRef ref;\n+        for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+            const struct TestModule* group = &tf->registry_modules[ref.group];\n+            for (ref.idx = 0; ref.idx < group->size; ref.idx++) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Internal Error: Number of tests (%d) exceeds MAX_ARGS (%d). \"\n+                                    \"Increase MAX_ARGS to accommodate all tests.\\n\", tf->args.targets.size, MAX_ARGS);\n+                    return EXIT_FAILURE;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = ref;\n+            }\n+        }\n+    }\n+\n+    if (!tf->args.logging) printf(\"Tests running silently. Use '-log=1' to enable detailed logging\\n\");\n+\n+    /* Log configuration */\n+    print_args(&tf->args);\n+\n+    /* Run test RNG tests (must run before we really initialize the test RNG) */\n+    /* Note: currently, these tests are executed sequentially because there */\n+    /* is really only one test. */\n+    for (it = 0; tf->registry_no_rng && it < tf->registry_no_rng->size; it++) {\n+        if (run_all) { /* future: support filtering */\n+            tf->fn_run_test(&tf->registry_no_rng->data[it]);\n+        }\n+    }\n+\n+    /* Initialize test RNG and library contexts */\n+    testrand_init(tf->args.custom_seed);\n+    if (tf->fn_setup && tf->fn_setup() != 0) return EXIT_FAILURE;\n+\n+    /* Check whether to process tests sequentially or concurrently */\n+    if (tf->args.num_processes <= 1) {\n+        status = run_sequential(tf);\n+    } else {\n+#if SUPPORTS_CONCURRENCY\n+        status = run_concurrent(tf);\n+#else\n+        fputs(\"Parallel execution not supported on your system. Running sequentially..\\n\", stderr);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 448,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2380574895,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ups, solved now. Three-dots was the intention here.",
      "created_at": "2025-09-29T15:40:26Z",
      "updated_at": "2025-09-29T15:40:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388436495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388436495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388446239",
      "pull_request_review_id": 3280552224,
      "id": 2388446239,
      "node_id": "PRRC_kwDOAP4Jqs6OXMwf",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+    /* Test runner function (can be customized) */\n+    run_test_fn fn_run_test;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 119,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386926707,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems to be a side effect worth mentioning anyway, so I'd suggest adding this to the docs. ",
      "created_at": "2025-09-29T15:43:20Z",
      "updated_at": "2025-09-29T15:43:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388446239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388446239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388477466",
      "pull_request_review_id": 3280597920,
      "id": 2388477466,
      "node_id": "PRRC_kwDOAP4Jqs6OXUYa",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 174,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2387022920,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> You know, I actually avoided using runtime assertions because I didn’t find any throughout the library.\r\n\r\nWe don't have it in the library itself, but we obviously have `CHECK` in the test-only code, so you could use that one. Even on current master, it's used in `tests.c` in the setup code for purposes different from testing the library itself, e.g., this line:\r\nhttps://github.com/bitcoin-core/secp256k1/blob/baa265429fa8f1686138380e52a75c25b0344719/src/tests.c#L7699-L7700",
      "created_at": "2025-09-29T15:53:17Z",
      "updated_at": "2025-09-29T15:53:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388477466",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388477466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388512797",
      "pull_request_review_id": 3280648130,
      "id": 2388512797,
      "node_id": "PRRC_kwDOAP4Jqs6OXdAd",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386930749,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> My concern with that is that it’s easy for struct names to clash with variable names using that style.\r\n\r\nHehe, technically, the struct tags are in different namespaces than variables. :)  But I see the point, of course.\r\n\r\n>  In the rest of the codebase, this isn’t a problem because we prefix structs with `secp256k1`, but here that would mean more boilerplate without much gain?.\r\n\r\nPerhaps we could just prefix it just with `tf_` like the tf functions? I think this would actually add clarity to it. If you're concerned about boilerplate, you could also typedef the `struct` away. I think we do this for (almost?) all struct defs in the code base, but it's certainly not a requirement.\r\n\r\n>  I could add the prefix + change them to lowercase if you feel strongly about it. I'm just thinking out loud before entering a large rebase.\r\n\r\nI have to admit that I feel a bit strongly about the style convention, but I think it's totally reasonable to add a commit on top of the current PR instead of needing to go through all the commits and edit them. ",
      "created_at": "2025-09-29T16:06:58Z",
      "updated_at": "2025-09-29T16:06:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388512797",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388512797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388840592",
      "pull_request_review_id": 3281149620,
      "id": 2388840592,
      "node_id": "PRRC_kwDOAP4Jqs6OYtCQ",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 58,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2387052566,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as suggested",
      "created_at": "2025-09-29T18:20:54Z",
      "updated_at": "2025-09-29T18:20:54Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388840592",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388840592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388851826",
      "pull_request_review_id": 3281174147,
      "id": 2388851826,
      "node_id": "PRRC_kwDOAP4Jqs6OYvxy",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386930749,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as suggested. Ported all the structs to use the `tf_` prefix with lowercase and snake_case.\r\nI wasn’t really in favor of adding an extra commit on top, it felt a bit messy.",
      "created_at": "2025-09-29T18:24:24Z",
      "updated_at": "2025-09-29T18:24:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388851826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388851826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388884024",
      "pull_request_review_id": 3281235070,
      "id": 2388884024,
      "node_id": "PRRC_kwDOAP4Jqs6OY3o4",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 174,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2387022920,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Been thinking about this. If we use `CHECK`, we lose the arg key-value error logging. Which will make debugging slightly harder (we will know where it failed but not under which values). We probably could extend `CHECK` to also print a message crafted at runtime when provided.\r\n\r\nMaybe we can leave this for a follow-up? I'm unsure we should keep expanding this PR further.",
      "created_at": "2025-09-29T18:34:42Z",
      "updated_at": "2025-09-29T18:35:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388884024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388884024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388896307",
      "pull_request_review_id": 3281251260,
      "id": 2388896307,
      "node_id": "PRRC_kwDOAP4Jqs6OY6oz",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 11,
      "commit_id": "fce3e66c9a5fcfc01010366c5fe043a255a3fdca",
      "original_commit_id": "c39b3df84ed3083bcff37e4eeb9b18e76765aa8e",
      "in_reply_to_id": 2374737863,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~Based on the CI response, it seems Windows dislikes undefined values.~.\r\nFixed.",
      "created_at": "2025-09-29T18:37:41Z",
      "updated_at": "2025-09-29T18:59:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388896307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388896307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388897110",
      "pull_request_review_id": 3281252311,
      "id": 2388897110,
      "node_id": "PRRC_kwDOAP4Jqs6OY61W",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+#define CASE1(name) { #name, name }\n+\n+#define MAKE_TEST_MODULE(name) {\\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* Macro to wrap a test internal function with a COUNT loop (iterations number) */\n+#define REPEAT_TEST(fn) REPEAT_TEST_MULT(fn, 1)\n+#define REPEAT_TEST_MULT(fn, multiplier)            \\\n+    static void fn(void) {                          \\\n+        int i;                                      \\\n+        int repeat = COUNT * (multiplier);          \\\n+        for (i = 0; i < repeat; i++)                \\\n+            fn##_internal();                        \\\n+    }\n+\n+\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct TestEntry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct TestModule {\n+    const char* name;\n+    struct TestEntry* data;\n+    int size;\n+};\n+\n+typedef int (*setup_ctx_fn)(void);\n+typedef int (*teardown_fn)(void);\n+typedef void (*run_test_fn)(const struct TestEntry*);\n+\n+/* Reference to a test in the registry. Group index and test index */\n+typedef struct {\n+    int group;\n+    int idx;\n+} TestRef;\n+\n+struct Targets {\n+    /* Target tests indexes */\n+    TestRef slots[MAX_ARGS];\n+    /* Next available slot */\n+    int size;\n+};\n+\n+/* --- Command-line args --- */\n+struct Args {\n+    /* 0 => sequential; 1..MAX_SUBPROCESSES => parallel workers */\n+    int num_processes;\n+    /* Specific RNG seed */\n+    const char* custom_seed;\n+    /* Whether to print the help msg */\n+    int help;\n+    /* Whether to print the tests list msg */\n+    int print_tests;\n+    /* Target tests indexes */\n+    struct Targets targets;\n+    /* Enable test execution logging */\n+    int logging;\n+};\n+\n+struct TestFramework {\n+    /* Command-line args */\n+    struct Args args;\n+    /* Test modules registry */\n+    const struct TestModule* registry_modules;\n+    /* Num of modules */\n+    int num_modules;\n+    /* Registry for tests that require no RNG init */\n+    const struct TestModule* registry_no_rng;\n+    /* Specific context setup and teardown functions */\n+    setup_ctx_fn fn_setup;\n+    teardown_fn fn_teardown;\n+    /* Test runner function (can be customized) */\n+    run_test_fn fn_run_test;\n+};\n+\n+/* --------------------------------------------------------- */\n+/* Public API                                                */\n+/* --------------------------------------------------------- */\n+\n+/*\n+ * Initialize the test framework.\n+ *\n+ * Must be called before tf_run() and as early as possible in the program.",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 119,
      "commit_id": "e269c15d6b6de963a93cc81d2a65042b65bb79bf",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386926707,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-29T18:38:00Z",
      "updated_at": "2025-09-29T18:38:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388897110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388897110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388990126",
      "pull_request_review_id": 3281393600,
      "id": 2388990126,
      "node_id": "PRRC_kwDOAP4Jqs6OZRiu",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFile)\n+  check_include_file(sys/types.h HAVE_SYS_TYPES_H)\n+  check_include_file(sys/wait.h HAVE_SYS_WAIT_H)\n+  check_include_file(unistd.h HAVE_UNISTD_H)\n+\n+  set(TEST_DEFINITIONS)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 9,
      "commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "original_commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  set(TEST_DEFINITIONS \"\")\r\n```",
      "created_at": "2025-09-29T19:13:27Z",
      "updated_at": "2025-09-29T19:13:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2388990126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2388990126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2389006018",
      "pull_request_review_id": 3281417999,
      "id": 2389006018,
      "node_id": "PRRC_kwDOAP4Jqs6OZVbC",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFile)\n+  check_include_file(sys/types.h HAVE_SYS_TYPES_H)\n+  check_include_file(sys/wait.h HAVE_SYS_WAIT_H)\n+  check_include_file(unistd.h HAVE_UNISTD_H)\n+\n+  set(TEST_DEFINITIONS)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 9,
      "commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "original_commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "in_reply_to_id": 2388990126,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "And it would be prudent to `unset(TEST_DEFINITIONS)` after its last usage for the sake of code hygiene.",
      "created_at": "2025-09-29T19:17:46Z",
      "updated_at": "2025-09-29T19:17:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2389006018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2389006018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2389015256",
      "pull_request_review_id": 3281430909,
      "id": 2389015256,
      "node_id": "PRRC_kwDOAP4Jqs6OZXrY",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 174,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2387022920,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, it's okay to keep it. I was just trying to say that CHECK is an option in general for test code.",
      "created_at": "2025-09-29T19:22:06Z",
      "updated_at": "2025-09-29T19:22:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2389015256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2389015256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2389130162",
      "pull_request_review_id": 3281592563,
      "id": 2389130162,
      "node_id": "PRRC_kwDOAP4Jqs6OZzuy",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFile)\n+  check_include_file(sys/types.h HAVE_SYS_TYPES_H)\n+  check_include_file(sys/wait.h HAVE_SYS_WAIT_H)\n+  check_include_file(unistd.h HAVE_UNISTD_H)\n+\n+  set(TEST_DEFINITIONS)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 9,
      "commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "original_commit_id": "9a0214bda00bcabbc6b6a0d4d9c732eb7f47110e",
      "in_reply_to_id": 2388990126,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "awesome, thanks!",
      "created_at": "2025-09-29T20:01:10Z",
      "updated_at": "2025-09-29T20:01:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2389130162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2389130162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391156260",
      "pull_request_review_id": 3284355740,
      "id": 2391156260,
      "node_id": "PRRC_kwDOAP4Jqs6OhiYk",
      "diff_hunk": "@@ -443,6 +443,14 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  AS_IF([test \"x$ac_cv_header_sys_types_h\" = xyes && test \"x$ac_cv_header_sys_wait_h\" = xyes &&\n+         test \"x$ac_cv_header_unistd_h\" = xyes], [TEST_DEFINES=\"-DSUPPORTS_CONCURRENCY=1\"], TEST_DEFINES=\"\")",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "original_commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h], [TEST_DEFINES=\"-DSUPPORTS_CONCURRENCY=1\"], [TEST_DEFINES=\"\"])\r\n```",
      "created_at": "2025-09-30T12:10:43Z",
      "updated_at": "2025-09-30T12:10:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391156260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391156260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 448,
      "original_start_line": 448,
      "start_side": "RIGHT",
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391169486",
      "pull_request_review_id": 3284376183,
      "id": 2391169486,
      "node_id": "PRRC_kwDOAP4Jqs6OhlnO",
      "diff_hunk": "@@ -443,6 +443,16 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  SUPPORTS_CONCURRENCY=0\n+  if test \"x$HAVE_SYS_TYPES_H\" = xyes -a \"x$HAVE_SYS_WAIT_H\" = xyes -a \"x$HAVE_UNISTD_H\" = xyes; then",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "726e70b899f370e26990d74dfbdde1d6df5ddd11",
      "in_reply_to_id": 2349664292,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See https://github.com/bitcoin-core/secp256k1/pull/1734/files#r2391156260.",
      "created_at": "2025-09-30T12:15:05Z",
      "updated_at": "2025-09-30T12:15:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391169486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391169486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391191123",
      "pull_request_review_id": 3284400426,
      "id": 2391191123,
      "node_id": "PRRC_kwDOAP4Jqs6Ohq5T",
      "diff_hunk": "@@ -0,0 +1,404 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY) && SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct Args* out);\n+static int parse_iterations(const char* arg);\n+static int parse_target(const char* value, struct TestFramework* tf);\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   This function is responsible for parsing a single key/value pair\n+ *   (e.g., -jobs=4) and updating the provided Args struct accordingly.\n+ *\n+ *   Developers should extend this function whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in the 'Args' struct.\n+ */\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    /* Number of concurrent tasks */\n+    if (strcmp(key, \"j\") == 0 || strcmp(key, \"jobs\") == 0) {\n+        return parse_jobs_count(key, value, &tf->args);\n+    }\n+    /* Number of iterations */\n+    if (strcmp(key, \"iter\") == 0 || strcmp(key, \"iterations\") == 0) {\n+        return parse_iterations(value);\n+    }\n+    /* Custom seed */\n+    if (strcmp(key, \"seed\") == 0) {\n+        tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+        return 0;\n+    }\n+    /* Test target */\n+    if (strcmp(key, \"t\") == 0 || strcmp(key, \"target\") == 0) {\n+        return parse_target(value, tf);\n+    }\n+    /* Logging */\n+    if (strcmp(key, \"log\") == 0) {\n+        tf->args.logging = value && strcmp(value, \"1\") == 0;\n+        return 0;\n+    }\n+\n+    /* Unknown key: report just so typos don’t silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(void) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(env_iter);\n+    }\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    -help, -h                           Show this help message\\n\");",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 80,
      "commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "original_commit_id": "7b51e53607889d443b64d90f7a363a962d6a54ec",
      "in_reply_to_id": 2372140378,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Update the PR description accordingly?",
      "created_at": "2025-09-30T12:20:20Z",
      "updated_at": "2025-09-30T12:20:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391191123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391191123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391378997",
      "pull_request_review_id": 3284672090,
      "id": 2391378997,
      "node_id": "PRRC_kwDOAP4Jqs6OiYw1",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFiles)\n+  check_include_files(\"sys/types.h\" HAVE_SYS_TYPES_H)\n+  check_include_files(\"sys/wait.h\" HAVE_SYS_WAIT_H)\n+  check_include_files(\"unistd.h\" HAVE_UNISTD_H)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 7,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2381507361,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Adding Windows support is not hard, it is just a bit more code.\r\n\r\nMy apologies if I was misunderstood. I mentioned cross-compiling for Windows only as an example, not as the basis of my [comment](https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2381543998). I do believe the build system should check the actual functionality we intend to use, which is the functions, rather than just the headers.\r\n\r\nHere are a couple of examples for the `fork()` function from Bitcoin Core:\r\n- in [Autotools](https://github.com/bitcoin/bitcoin/blob/a0b5730f858cf3d36d35105af473f7d0c83820e5/configure.ac#L909):\r\n```autoconf\r\nAC_CHECK_DECLS([fork])\r\n```\r\n- in [CMake](https://github.com/bitcoin/bitcoin/blob/25212dfdb4cd7291392b6a94130f658c5bfa0a48/cmake/introspection.cmake#L10):\r\n```cmake\r\ncheck_cxx_symbol_exists(fork \"unistd.h\" HAVE_DECL_FORK)\r\n```\r\n\r\nI'm fine with leaving this improvement for a follow-up PR.",
      "created_at": "2025-09-30T13:05:52Z",
      "updated_at": "2025-09-30T13:05:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391378997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391378997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391540597",
      "pull_request_review_id": 3284918572,
      "id": 2391540597,
      "node_id": "PRRC_kwDOAP4Jqs6OjAN1",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+\n+#define MAKE_TEST_MODULE(name) { \\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct tf_test_entry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct tf_test_module {\n+    const char* name;\n+    struct tf_test_entry* data;",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 45,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "98350a7fad700e62d0dfde9a5514a8958747f189",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: introduce (mini) unit test framework\"\r\n\r\nThis could be `const`? (and then all the `static struct tf_test_entry ...[] = {` in tests.c can be `const` too).",
      "created_at": "2025-09-30T13:44:02Z",
      "updated_at": "2025-09-30T14:37:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391540597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391540597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391541268",
      "pull_request_review_id": 3284919763,
      "id": 2391541268,
      "node_id": "PRRC_kwDOAP4Jqs6OjAYU",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFiles)\n+  check_include_files(\"sys/types.h\" HAVE_SYS_TYPES_H)\n+  check_include_files(\"sys/wait.h\" HAVE_SYS_WAIT_H)\n+  check_include_files(\"unistd.h\" HAVE_UNISTD_H)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 7,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2381507361,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Following the overkill rationale; If we go with a more granular approach, we would have to check for every relevant symbol?. E.g. `pid_t`, `write`, `read`, and `close` too.\r\nThe reason I included `<sys/types.h>` (in addition to `<unistd.h>`) is that historically, `pid_t` has sometimes been declared in one header vs. the other, depending on platform and era.\r\n\r\nIn any case, I just unsolved this thread so we don't forget it.",
      "created_at": "2025-09-30T13:44:11Z",
      "updated_at": "2025-09-30T13:48:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391541268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391541268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391550876",
      "pull_request_review_id": 3284934799,
      "id": 2391550876,
      "node_id": "PRRC_kwDOAP4Jqs6OjCuc",
      "diff_hunk": "@@ -443,6 +443,14 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  AS_IF([test \"x$ac_cv_header_sys_types_h\" = xyes && test \"x$ac_cv_header_sys_wait_h\" = xyes &&\n+         test \"x$ac_cv_header_unistd_h\" = xyes], [TEST_DEFINES=\"-DSUPPORTS_CONCURRENCY=1\"], TEST_DEFINES=\"\")",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "original_commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "in_reply_to_id": 2391156260,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Neat. Applied. Thanks!",
      "created_at": "2025-09-30T13:45:58Z",
      "updated_at": "2025-09-30T13:45:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391550876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391550876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 448,
      "original_start_line": 448,
      "start_side": "RIGHT",
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391575835",
      "pull_request_review_id": 3284918572,
      "id": 2391575835,
      "node_id": "PRRC_kwDOAP4Jqs6OjI0b",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Special test cases that must run before RNG initialization --- */\n+static struct tf_test_entry tests_no_rng[] = {\n+    CASE(xoshiro256pp_tests),",
      "path": "src/tests.c",
      "position": 121,
      "original_position": 81,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Huh, I was not aware that trailing commas in array initializers were legal in C, but apparently they are - even in C89.",
      "created_at": "2025-09-30T13:50:46Z",
      "updated_at": "2025-09-30T14:37:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391575835",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391575835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 7688,
      "original_line": 7688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391630272",
      "pull_request_review_id": 3284918572,
      "id": 2391630272,
      "node_id": "PRRC_kwDOAP4Jqs6OjWHA",
      "diff_hunk": "@@ -0,0 +1,350 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct tf_framework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct tf_args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d. %s execution.\\n\", args->num_processes, args->num_processes > 1 ? \"Parallel\" : \"Sequential\");\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct tf_framework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct tf_framework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+\n+    /* double-dash checks now */\n+    if (arg[2] == '\\0') {\n+        *err_msg = \"missing option name after double dash\";\n+        return NULL;\n+    }\n+\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2;\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct tf_framework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test(const struct tf_test_entry* t) {\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"%s PASSED\\n\", t->name);\n+}\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct tf_framework* tf) {\n+    TestRef ref;\n+    const struct tf_test_module* mdl;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            run_test(&mdl->data[ref.idx]);\n+        }\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+/* Process tests in parallel */\n+static int run_concurrent(struct tf_framework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &ref, sizeof(ref)) == sizeof(ref)) {\n+                run_test(&tf->registry_modules[ref.group].data[ref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 237,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: introduce (mini) unit test framework\"\r\n\r\nAs long as there are no more than 256 tests (or some other metric to break them up by), you can use the `make` parallellism trick.\r\n\r\nHave a *single* pipe, which the master process writes to, and *all* child workers read from. The master just writers single-byte test identifiers to the pipe, and the workers read from it. Every byte will be read by exactly one worker process, which executes the test, and then reads another byte until done.\r\n\r\nThis gives you a super cheap and portable way of actually distributing the jobs equitably (round robin risks giving all long-running tests to the same process for example).",
      "created_at": "2025-09-30T14:01:22Z",
      "updated_at": "2025-09-30T14:37:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391630272",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391630272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391750362",
      "pull_request_review_id": 3284918572,
      "id": 2391750362,
      "node_id": "PRRC_kwDOAP4Jqs6Ojzba",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Special test cases that must run before RNG initialization --- */\n+static struct tf_test_entry tests_no_rng[] = {\n+    CASE(xoshiro256pp_tests),\n+};\n+static const struct tf_test_module registry_modules_no_rng = MAKE_TEST_MODULE(no_rng);\n+\n+/* --- Standard test cases start here --- */\n+static struct tf_test_entry tests_general[] = {\n+    CASE(selftest_tests),\n+    CASE(all_proper_context_tests),\n+    CASE(all_static_context_tests),\n+    CASE(deprecated_context_flags_test),\n+    CASE(scratch_tests),\n+};\n \n-    /*** Setup test environment ***/\n+static struct tf_test_entry tests_integer[] = {\n+#ifdef SECP256K1_WIDEMUL_INT128\n+    CASE(int128_tests),\n+#endif\n+    CASE(ctz_tests),\n+    CASE(modinv_tests),\n+    CASE(inverse_tests),\n+};\n \n-    /* Create a global context available to all tests */\n-    CTX = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n-    /* Randomize the context only with probability 15/16\n-       to make sure we test without context randomization from time to time.\n-       TODO Reconsider this when recalibrating the tests. */\n-    if (testrand_bits(4)) {\n-        unsigned char rand32[32];\n-        testrand256(rand32);\n-        CHECK(secp256k1_context_randomize(CTX, rand32));\n-    }\n-    /* Make a writable copy of secp256k1_context_static in order to test the effect of API functions\n-       that write to the context. The API does not support cloning the static context, so we use\n-       memcpy instead. The user is not supposed to copy a context but we should still ensure that\n-       the API functions handle copies of the static context gracefully. */\n-    STATIC_CTX = malloc(sizeof(*secp256k1_context_static));\n-    CHECK(STATIC_CTX != NULL);\n-    memcpy(STATIC_CTX, secp256k1_context_static, sizeof(secp256k1_context));\n-    CHECK(!secp256k1_context_is_proper(STATIC_CTX));\n+static struct tf_test_entry tests_hash[] = {\n+    CASE(sha256_known_output_tests),\n+    CASE(sha256_counter_tests),\n+    CASE(hmac_sha256_tests),\n+    CASE(rfc6979_hmac_sha256_tests),\n+    CASE(tagged_sha256_tests),\n+};\n \n-    /*** Run actual tests ***/\n+static struct tf_test_entry tests_scalar[] = {\n+    CASE(scalar_tests),\n+};\n \n-    /* selftest tests */\n-    run_selftest_tests();\n+static struct tf_test_entry tests_field[] = {\n+    CASE(field_half),\n+    CASE(field_misc),\n+    CASE(field_convert),\n+    CASE(field_be32_overflow),\n+    CASE(fe_mul),\n+    CASE(sqr),\n+    CASE(sqrt),\n+};\n \n-    /* context tests */\n-    run_proper_context_tests(0); run_proper_context_tests(1);\n-    run_static_context_tests(0); run_static_context_tests(1);\n-    run_deprecated_context_flags_test();\n+static struct tf_test_entry tests_group[] = {\n+    CASE(ge),\n+    CASE(gej),\n+    CASE(group_decompress),\n+};\n \n-    /* scratch tests */\n-    run_scratch_tests();\n+static struct tf_test_entry tests_ecmult[] = {\n+    CASE(ecmult_pre_g),\n+    CASE(wnaf),\n+    CASE(point_times_order),\n+    CASE(ecmult_near_split_bound),\n+    CASE(ecmult_chain),\n+    CASE(ecmult_constants),\n+    CASE(ecmult_gen_blind),\n+    CASE(ecmult_const_tests),\n+    CASE(ecmult_multi_tests),\n+    CASE(ec_combine),\n+};\n \n-    /* integer arithmetic tests */\n-#ifdef SECP256K1_WIDEMUL_INT128\n-    run_int128_tests();\n-#endif\n-    run_ctz_tests();\n-    run_modinv_tests();\n-    run_inverse_tests();\n-\n-    /* sorting tests */\n-    run_hsort_tests();\n-\n-    /* hash tests */\n-    run_sha256_known_output_tests();\n-    run_sha256_counter_tests();\n-    run_hmac_sha256_tests();\n-    run_rfc6979_hmac_sha256_tests();\n-    run_tagged_sha256_tests();\n-\n-    /* scalar tests */\n-    run_scalar_tests();\n-\n-    /* field tests */\n-    run_field_half();\n-    run_field_misc();\n-    run_field_convert();\n-    run_field_be32_overflow();\n-    run_fe_mul();\n-    run_sqr();\n-    run_sqrt();\n-\n-    /* group tests */\n-    run_ge();\n-    run_gej();\n-    run_group_decompress();\n-\n-    /* ecmult tests */\n-    run_ecmult_pre_g();\n-    run_wnaf();\n-    run_point_times_order();\n-    run_ecmult_near_split_bound();\n-    run_ecmult_chain();\n-    run_ecmult_constants();\n-    run_ecmult_gen_blind();\n-    run_ecmult_const_tests();\n-    run_ecmult_multi_tests();\n-    run_ec_combine();\n-\n-    /* endomorphism tests */\n-    run_endomorphism_tests();\n-\n-    /* EC point parser test */\n-    run_ec_pubkey_parse_test();\n-\n-    /* EC key edge cases */\n-    run_eckey_edge_case_test();\n-\n-    /* EC key arithmetic test */\n-    run_eckey_negate_test();\n+static struct tf_test_entry tests_ec[] = {\n+    CASE(endomorphism_tests),\n+    CASE(ec_pubkey_parse_test),\n+    CASE(eckey_edge_case_test),\n+    CASE(eckey_negate_test),\n+};\n \n #ifdef ENABLE_MODULE_ECDH\n-    /* ecdh tests */\n-    run_ecdh_tests();\n+static struct tf_test_entry tests_ecdh[] = {\n+    CASE(ecdh_tests),\n+};\n #endif\n \n-    /* ecdsa tests */\n-    run_ec_illegal_argument_tests();\n-    run_pubkey_comparison();\n-    run_pubkey_sort();\n-    run_random_pubkeys();\n-    run_ecdsa_der_parse();\n-    run_ecdsa_sign_verify();\n-    run_ecdsa_end_to_end();\n-    run_ecdsa_edge_cases();\n-    run_ecdsa_wycheproof();\n+static struct tf_test_entry tests_ecdsa[] = {\n+    CASE(ec_illegal_argument_tests),\n+    CASE(pubkey_comparison),\n+    CASE(pubkey_sort),\n+    CASE(random_pubkeys),\n+    CASE(ecdsa_der_parse),\n+    CASE(ecdsa_sign_verify),\n+    CASE(ecdsa_end_to_end),\n+    CASE(ecdsa_edge_cases),\n+    CASE(ecdsa_wycheproof),\n+};\n \n #ifdef ENABLE_MODULE_RECOVERY\n+static struct tf_test_entry tests_recovery[] = {\n     /* ECDSA pubkey recovery tests */\n-    run_recovery_tests();\n+    CASE(recovery_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_EXTRAKEYS\n-    run_extrakeys_tests();\n+static struct tf_test_entry tests_extrakeys[] = {\n+    CASE(extrakeys_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_SCHNORRSIG\n-    run_schnorrsig_tests();\n+static struct tf_test_entry tests_schnorrsig[] = {\n+    CASE(schnorrsig_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_MUSIG\n-    run_musig_tests();\n+static struct tf_test_entry tests_musig[] = {\n+    CASE(musig_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_ELLSWIFT\n-    run_ellswift_tests();\n+static struct tf_test_entry tests_ellswift[] = {\n+    CASE(ellswift_tests),\n+};\n #endif\n \n-    /* util tests */\n-    run_secp256k1_memczero_test();\n-    run_secp256k1_is_zero_array_test();\n-    run_secp256k1_byteorder_tests();\n+static struct tf_test_entry tests_utils[] = {\n+    CASE(hsort_tests),\n+    CASE(secp256k1_memczero_test),\n+    CASE(secp256k1_is_zero_array_test),\n+    CASE(secp256k1_byteorder_tests),\n+    CASE(cmov_tests),\n+};\n \n-    run_cmov_tests();\n+/* Register test modules */\n+static const struct tf_test_module registry_modules[] = {\n+    MAKE_TEST_MODULE(general),\n+    MAKE_TEST_MODULE(integer),\n+    MAKE_TEST_MODULE(hash),\n+    MAKE_TEST_MODULE(scalar),\n+    MAKE_TEST_MODULE(field),\n+    MAKE_TEST_MODULE(group),\n+    MAKE_TEST_MODULE(ecmult),\n+    MAKE_TEST_MODULE(ec),\n+#ifdef ENABLE_MODULE_ECDH\n+    MAKE_TEST_MODULE(ecdh),\n+#endif\n+    MAKE_TEST_MODULE(ecdsa),\n+#ifdef ENABLE_MODULE_RECOVERY\n+    MAKE_TEST_MODULE(recovery),\n+#endif\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+    MAKE_TEST_MODULE(extrakeys),\n+#endif\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+    MAKE_TEST_MODULE(schnorrsig),\n+#endif\n+#ifdef ENABLE_MODULE_MUSIG\n+    MAKE_TEST_MODULE(musig),\n+#endif\n+#ifdef ENABLE_MODULE_ELLSWIFT\n+    MAKE_TEST_MODULE(ellswift),\n+#endif\n+    MAKE_TEST_MODULE(utils),\n+};\n \n-    /*** Tear down test environment ***/\n+/* Setup test environment */\n+static int setup(void) {\n+    /* Create a global context available to all tests */\n+    CTX = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    /* Randomize the context only with probability 15/16\n+       to make sure we test without context randomization from time to time.\n+       TODO Reconsider this when recalibrating the tests. */\n+    if (testrand_bits(4)) {\n+        unsigned char rand32[32];\n+        testrand256(rand32);\n+        CHECK(secp256k1_context_randomize(CTX, rand32));\n+    }\n+    /* Make a writable copy of secp256k1_context_static in order to test the effect of API functions\n+       that write to the context. The API does not support cloning the static context, so we use\n+       memcpy instead. The user is not supposed to copy a context but we should still ensure that\n+       the API functions handle copies of the static context gracefully. */\n+    STATIC_CTX = malloc(sizeof(*secp256k1_context_static));\n+    CHECK(STATIC_CTX != NULL);\n+    memcpy(STATIC_CTX, secp256k1_context_static, sizeof(secp256k1_context));\n+    CHECK(!secp256k1_context_is_proper(STATIC_CTX));\n+    return 0;\n+}\n+\n+/* Shutdown test environment */\n+static int teardown(void) {\n     free(STATIC_CTX);\n     secp256k1_context_destroy(CTX);\n \n     testrand_finish();",
      "path": "src/tests.c",
      "position": 1,
      "original_position": 377,
      "commit_id": "eed1390205c5315af46be4b2326cb2d0e084a536",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: introduce (mini) unit test framework\"\r\n\r\nThe `testrand_finish()` call in here, when in parallel mode, isn't really useful, because the actually used randomness is in the child processes, without communication to the parent where this runs.\r\n\r\nThe point of this `\"random run =\"` output line is verifying if two test runs are actually identical (not just the seed was the same, but all output of the RNG was the same). I don't think it's all that important, so if it breaks with this, it might be worth just removing.",
      "created_at": "2025-09-30T14:25:14Z",
      "updated_at": "2025-09-30T14:37:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391750362",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391750362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7839,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391940354",
      "pull_request_review_id": 3285466267,
      "id": 2391940354,
      "node_id": "PRRC_kwDOAP4Jqs6Okh0C",
      "diff_hunk": "@@ -443,6 +443,14 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  AS_IF([test \"x$ac_cv_header_sys_types_h\" = xyes && test \"x$ac_cv_header_sys_wait_h\" = xyes &&\n+         test \"x$ac_cv_header_unistd_h\" = xyes], [TEST_DEFINES=\"-DSUPPORTS_CONCURRENCY=1\"], TEST_DEFINES=\"\")",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "original_commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "in_reply_to_id": 2391156260,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm terribly sorry. My suggestion was a blunder. The *action-if-found* is executed when _one of_ the header files is found.\r\n\r\nPlease revert it.\r\n\r\nMy apologies.",
      "created_at": "2025-09-30T15:01:21Z",
      "updated_at": "2025-09-30T15:01:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2391940354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2391940354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 448,
      "original_start_line": 448,
      "start_side": "RIGHT",
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392105143",
      "pull_request_review_id": 3285704743,
      "id": 2392105143,
      "node_id": "PRRC_kwDOAP4Jqs6OlKC3",
      "diff_hunk": "@@ -443,6 +443,14 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  AS_IF([test \"x$ac_cv_header_sys_types_h\" = xyes && test \"x$ac_cv_header_sys_wait_h\" = xyes &&\n+         test \"x$ac_cv_header_unistd_h\" = xyes], [TEST_DEFINES=\"-DSUPPORTS_CONCURRENCY=1\"], TEST_DEFINES=\"\")",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "original_commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "in_reply_to_id": 2391156260,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nothing to apologies, thanks for the support!",
      "created_at": "2025-09-30T15:53:32Z",
      "updated_at": "2025-09-30T15:53:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2392105143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392105143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 448,
      "original_start_line": 448,
      "start_side": "RIGHT",
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392701975",
      "pull_request_review_id": 3286533928,
      "id": 2392701975,
      "node_id": "PRRC_kwDOAP4Jqs6OnbwX",
      "diff_hunk": "@@ -443,6 +443,14 @@ if test x\"$enable_experimental\" = x\"no\"; then\n   fi\n fi\n \n+# Check for concurrency support (tests only)\n+if test \"x$enable_tests\" != x\"no\"; then\n+  AC_CHECK_HEADERS([sys/types.h sys/wait.h unistd.h])\n+  AS_IF([test \"x$ac_cv_header_sys_types_h\" = xyes && test \"x$ac_cv_header_sys_wait_h\" = xyes &&\n+         test \"x$ac_cv_header_unistd_h\" = xyes], [TEST_DEFINES=\"-DSUPPORTS_CONCURRENCY=1\"], TEST_DEFINES=\"\")",
      "path": "configure.ac",
      "position": 1,
      "original_position": 8,
      "commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "original_commit_id": "6aebdb4112951bbd1e1acdd33859a1814fd44113",
      "in_reply_to_id": 2391156260,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. Reverted.",
      "created_at": "2025-09-30T20:01:58Z",
      "updated_at": "2025-09-30T20:07:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2392701975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392701975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": 448,
      "original_start_line": 448,
      "start_side": "RIGHT",
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392702407",
      "pull_request_review_id": 3286533928,
      "id": 2392702407,
      "node_id": "PRRC_kwDOAP4Jqs6Onb3H",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_UNIT_TEST_H\n+#define SECP256K1_UNIT_TEST_H\n+\n+/* --------------------------------------------------------- */\n+/* Configurable constants                                    */\n+/* --------------------------------------------------------- */\n+\n+/* Maximum number of command-line arguments.\n+ * Must be at least as large as the total number of tests\n+ * to allow specifying all tests individually. */\n+#define MAX_ARGS 150\n+/* Maximum number of parallel jobs */\n+#define MAX_SUBPROCESSES 16\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework Registry Macros                            */\n+/* --------------------------------------------------------- */\n+\n+#define CASE(name) { #name, run_##name }\n+\n+#define MAKE_TEST_MODULE(name) { \\\n+    #name, \\\n+    tests_##name, \\\n+    sizeof(tests_##name) / sizeof(tests_##name[0]) \\\n+}\n+\n+/* --------------------------------------------------------- */\n+/* Test Framework API                                        */\n+/* --------------------------------------------------------- */\n+\n+typedef void (*test_fn)(void);\n+\n+struct tf_test_entry {\n+    const char* name;\n+    test_fn func;\n+};\n+\n+struct tf_test_module {\n+    const char* name;\n+    struct tf_test_entry* data;",
      "path": "src/unit_test.h",
      "position": 1,
      "original_position": 45,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "98350a7fad700e62d0dfde9a5514a8958747f189",
      "in_reply_to_id": 2391540597,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure. Done as suggested.",
      "created_at": "2025-09-30T20:02:14Z",
      "updated_at": "2025-09-30T20:07:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2392702407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392702407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392708967",
      "pull_request_review_id": 3286533928,
      "id": 2392708967,
      "node_id": "PRRC_kwDOAP4Jqs6Onddn",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Special test cases that must run before RNG initialization --- */\n+static struct tf_test_entry tests_no_rng[] = {\n+    CASE(xoshiro256pp_tests),",
      "path": "src/tests.c",
      "position": 121,
      "original_position": 81,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391575835,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "hey, don't take everything from me! these trailing commas are my emotional support right now.",
      "created_at": "2025-09-30T20:05:30Z",
      "updated_at": "2025-09-30T20:07:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2392708967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392708967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 7688,
      "original_line": 7688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392711876",
      "pull_request_review_id": 3286533928,
      "id": 2392711876,
      "node_id": "PRRC_kwDOAP4Jqs6OneLE",
      "diff_hunk": "@@ -0,0 +1,350 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct tf_framework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct tf_args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d. %s execution.\\n\", args->num_processes, args->num_processes > 1 ? \"Parallel\" : \"Sequential\");\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct tf_framework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct tf_framework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+\n+    /* double-dash checks now */\n+    if (arg[2] == '\\0') {\n+        *err_msg = \"missing option name after double dash\";\n+        return NULL;\n+    }\n+\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2;\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct tf_framework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test(const struct tf_test_entry* t) {\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"%s PASSED\\n\", t->name);\n+}\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct tf_framework* tf) {\n+    TestRef ref;\n+    const struct tf_test_module* mdl;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            run_test(&mdl->data[ref.idx]);\n+        }\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+/* Process tests in parallel */\n+static int run_concurrent(struct tf_framework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &ref, sizeof(ref)) == sizeof(ref)) {\n+                run_test(&tf->registry_modules[ref.group].data[ref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 237,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391630272,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Super neat! Thanks for the suggestion. It’s pretty amazing that the kernel can handle the pipe synchronization for us.",
      "created_at": "2025-09-30T20:06:56Z",
      "updated_at": "2025-09-30T20:07:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2392711876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2392711876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393643484",
      "pull_request_review_id": 3287827847,
      "id": 2393643484,
      "node_id": "PRRC_kwDOAP4Jqs6OrBnc",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Special test cases that must run before RNG initialization --- */\n+static struct tf_test_entry tests_no_rng[] = {\n+    CASE(xoshiro256pp_tests),",
      "path": "src/tests.c",
      "position": 121,
      "original_position": 81,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391575835,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Huh, I was not aware that trailing commas in array initializers were legal in C\r\n\r\nI beg to differ: https://github.com/bitcoin-core/secp256k1/pull/1169#discussion_r1053449933  :smile: ",
      "created_at": "2025-10-01T07:05:14Z",
      "updated_at": "2025-10-01T07:05:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2393643484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393643484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 7688,
      "original_line": 7688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393665617",
      "pull_request_review_id": 3287859733,
      "id": 2393665617,
      "node_id": "PRRC_kwDOAP4Jqs6OrHBR",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Special test cases that must run before RNG initialization --- */\n+static struct tf_test_entry tests_no_rng[] = {\n+    CASE(xoshiro256pp_tests),\n+};\n+static const struct tf_test_module registry_modules_no_rng = MAKE_TEST_MODULE(no_rng);\n+\n+/* --- Standard test cases start here --- */\n+static struct tf_test_entry tests_general[] = {\n+    CASE(selftest_tests),\n+    CASE(all_proper_context_tests),\n+    CASE(all_static_context_tests),\n+    CASE(deprecated_context_flags_test),\n+    CASE(scratch_tests),\n+};\n \n-    /*** Setup test environment ***/\n+static struct tf_test_entry tests_integer[] = {\n+#ifdef SECP256K1_WIDEMUL_INT128\n+    CASE(int128_tests),\n+#endif\n+    CASE(ctz_tests),\n+    CASE(modinv_tests),\n+    CASE(inverse_tests),\n+};\n \n-    /* Create a global context available to all tests */\n-    CTX = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n-    /* Randomize the context only with probability 15/16\n-       to make sure we test without context randomization from time to time.\n-       TODO Reconsider this when recalibrating the tests. */\n-    if (testrand_bits(4)) {\n-        unsigned char rand32[32];\n-        testrand256(rand32);\n-        CHECK(secp256k1_context_randomize(CTX, rand32));\n-    }\n-    /* Make a writable copy of secp256k1_context_static in order to test the effect of API functions\n-       that write to the context. The API does not support cloning the static context, so we use\n-       memcpy instead. The user is not supposed to copy a context but we should still ensure that\n-       the API functions handle copies of the static context gracefully. */\n-    STATIC_CTX = malloc(sizeof(*secp256k1_context_static));\n-    CHECK(STATIC_CTX != NULL);\n-    memcpy(STATIC_CTX, secp256k1_context_static, sizeof(secp256k1_context));\n-    CHECK(!secp256k1_context_is_proper(STATIC_CTX));\n+static struct tf_test_entry tests_hash[] = {\n+    CASE(sha256_known_output_tests),\n+    CASE(sha256_counter_tests),\n+    CASE(hmac_sha256_tests),\n+    CASE(rfc6979_hmac_sha256_tests),\n+    CASE(tagged_sha256_tests),\n+};\n \n-    /*** Run actual tests ***/\n+static struct tf_test_entry tests_scalar[] = {\n+    CASE(scalar_tests),\n+};\n \n-    /* selftest tests */\n-    run_selftest_tests();\n+static struct tf_test_entry tests_field[] = {\n+    CASE(field_half),\n+    CASE(field_misc),\n+    CASE(field_convert),\n+    CASE(field_be32_overflow),\n+    CASE(fe_mul),\n+    CASE(sqr),\n+    CASE(sqrt),\n+};\n \n-    /* context tests */\n-    run_proper_context_tests(0); run_proper_context_tests(1);\n-    run_static_context_tests(0); run_static_context_tests(1);\n-    run_deprecated_context_flags_test();\n+static struct tf_test_entry tests_group[] = {\n+    CASE(ge),\n+    CASE(gej),\n+    CASE(group_decompress),\n+};\n \n-    /* scratch tests */\n-    run_scratch_tests();\n+static struct tf_test_entry tests_ecmult[] = {\n+    CASE(ecmult_pre_g),\n+    CASE(wnaf),\n+    CASE(point_times_order),\n+    CASE(ecmult_near_split_bound),\n+    CASE(ecmult_chain),\n+    CASE(ecmult_constants),\n+    CASE(ecmult_gen_blind),\n+    CASE(ecmult_const_tests),\n+    CASE(ecmult_multi_tests),\n+    CASE(ec_combine),\n+};\n \n-    /* integer arithmetic tests */\n-#ifdef SECP256K1_WIDEMUL_INT128\n-    run_int128_tests();\n-#endif\n-    run_ctz_tests();\n-    run_modinv_tests();\n-    run_inverse_tests();\n-\n-    /* sorting tests */\n-    run_hsort_tests();\n-\n-    /* hash tests */\n-    run_sha256_known_output_tests();\n-    run_sha256_counter_tests();\n-    run_hmac_sha256_tests();\n-    run_rfc6979_hmac_sha256_tests();\n-    run_tagged_sha256_tests();\n-\n-    /* scalar tests */\n-    run_scalar_tests();\n-\n-    /* field tests */\n-    run_field_half();\n-    run_field_misc();\n-    run_field_convert();\n-    run_field_be32_overflow();\n-    run_fe_mul();\n-    run_sqr();\n-    run_sqrt();\n-\n-    /* group tests */\n-    run_ge();\n-    run_gej();\n-    run_group_decompress();\n-\n-    /* ecmult tests */\n-    run_ecmult_pre_g();\n-    run_wnaf();\n-    run_point_times_order();\n-    run_ecmult_near_split_bound();\n-    run_ecmult_chain();\n-    run_ecmult_constants();\n-    run_ecmult_gen_blind();\n-    run_ecmult_const_tests();\n-    run_ecmult_multi_tests();\n-    run_ec_combine();\n-\n-    /* endomorphism tests */\n-    run_endomorphism_tests();\n-\n-    /* EC point parser test */\n-    run_ec_pubkey_parse_test();\n-\n-    /* EC key edge cases */\n-    run_eckey_edge_case_test();\n-\n-    /* EC key arithmetic test */\n-    run_eckey_negate_test();\n+static struct tf_test_entry tests_ec[] = {\n+    CASE(endomorphism_tests),\n+    CASE(ec_pubkey_parse_test),\n+    CASE(eckey_edge_case_test),\n+    CASE(eckey_negate_test),\n+};\n \n #ifdef ENABLE_MODULE_ECDH\n-    /* ecdh tests */\n-    run_ecdh_tests();\n+static struct tf_test_entry tests_ecdh[] = {\n+    CASE(ecdh_tests),\n+};\n #endif\n \n-    /* ecdsa tests */\n-    run_ec_illegal_argument_tests();\n-    run_pubkey_comparison();\n-    run_pubkey_sort();\n-    run_random_pubkeys();\n-    run_ecdsa_der_parse();\n-    run_ecdsa_sign_verify();\n-    run_ecdsa_end_to_end();\n-    run_ecdsa_edge_cases();\n-    run_ecdsa_wycheproof();\n+static struct tf_test_entry tests_ecdsa[] = {\n+    CASE(ec_illegal_argument_tests),\n+    CASE(pubkey_comparison),\n+    CASE(pubkey_sort),\n+    CASE(random_pubkeys),\n+    CASE(ecdsa_der_parse),\n+    CASE(ecdsa_sign_verify),\n+    CASE(ecdsa_end_to_end),\n+    CASE(ecdsa_edge_cases),\n+    CASE(ecdsa_wycheproof),\n+};\n \n #ifdef ENABLE_MODULE_RECOVERY\n+static struct tf_test_entry tests_recovery[] = {\n     /* ECDSA pubkey recovery tests */\n-    run_recovery_tests();\n+    CASE(recovery_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_EXTRAKEYS\n-    run_extrakeys_tests();\n+static struct tf_test_entry tests_extrakeys[] = {\n+    CASE(extrakeys_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_SCHNORRSIG\n-    run_schnorrsig_tests();\n+static struct tf_test_entry tests_schnorrsig[] = {\n+    CASE(schnorrsig_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_MUSIG\n-    run_musig_tests();\n+static struct tf_test_entry tests_musig[] = {\n+    CASE(musig_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_ELLSWIFT\n-    run_ellswift_tests();\n+static struct tf_test_entry tests_ellswift[] = {\n+    CASE(ellswift_tests),\n+};\n #endif\n \n-    /* util tests */\n-    run_secp256k1_memczero_test();\n-    run_secp256k1_is_zero_array_test();\n-    run_secp256k1_byteorder_tests();\n+static struct tf_test_entry tests_utils[] = {\n+    CASE(hsort_tests),\n+    CASE(secp256k1_memczero_test),\n+    CASE(secp256k1_is_zero_array_test),\n+    CASE(secp256k1_byteorder_tests),\n+    CASE(cmov_tests),\n+};\n \n-    run_cmov_tests();\n+/* Register test modules */\n+static const struct tf_test_module registry_modules[] = {\n+    MAKE_TEST_MODULE(general),\n+    MAKE_TEST_MODULE(integer),\n+    MAKE_TEST_MODULE(hash),\n+    MAKE_TEST_MODULE(scalar),\n+    MAKE_TEST_MODULE(field),\n+    MAKE_TEST_MODULE(group),\n+    MAKE_TEST_MODULE(ecmult),\n+    MAKE_TEST_MODULE(ec),\n+#ifdef ENABLE_MODULE_ECDH\n+    MAKE_TEST_MODULE(ecdh),\n+#endif\n+    MAKE_TEST_MODULE(ecdsa),\n+#ifdef ENABLE_MODULE_RECOVERY\n+    MAKE_TEST_MODULE(recovery),\n+#endif\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+    MAKE_TEST_MODULE(extrakeys),\n+#endif\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+    MAKE_TEST_MODULE(schnorrsig),\n+#endif\n+#ifdef ENABLE_MODULE_MUSIG\n+    MAKE_TEST_MODULE(musig),\n+#endif\n+#ifdef ENABLE_MODULE_ELLSWIFT\n+    MAKE_TEST_MODULE(ellswift),\n+#endif\n+    MAKE_TEST_MODULE(utils),\n+};\n \n-    /*** Tear down test environment ***/\n+/* Setup test environment */\n+static int setup(void) {\n+    /* Create a global context available to all tests */\n+    CTX = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    /* Randomize the context only with probability 15/16\n+       to make sure we test without context randomization from time to time.\n+       TODO Reconsider this when recalibrating the tests. */\n+    if (testrand_bits(4)) {\n+        unsigned char rand32[32];\n+        testrand256(rand32);\n+        CHECK(secp256k1_context_randomize(CTX, rand32));\n+    }\n+    /* Make a writable copy of secp256k1_context_static in order to test the effect of API functions\n+       that write to the context. The API does not support cloning the static context, so we use\n+       memcpy instead. The user is not supposed to copy a context but we should still ensure that\n+       the API functions handle copies of the static context gracefully. */\n+    STATIC_CTX = malloc(sizeof(*secp256k1_context_static));\n+    CHECK(STATIC_CTX != NULL);\n+    memcpy(STATIC_CTX, secp256k1_context_static, sizeof(secp256k1_context));\n+    CHECK(!secp256k1_context_is_proper(STATIC_CTX));\n+    return 0;\n+}\n+\n+/* Shutdown test environment */\n+static int teardown(void) {\n     free(STATIC_CTX);\n     secp256k1_context_destroy(CTX);\n \n     testrand_finish();",
      "path": "src/tests.c",
      "position": 1,
      "original_position": 377,
      "commit_id": "eed1390205c5315af46be4b2326cb2d0e084a536",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391750362,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a great catch. Concept ACK on removing the line.\r\n\r\nBut this reminds me of the purpose of outputting the initial seed, namely reproducibility. With that in mind, the output should also contain the target parameter. I think seed, target, and jobs together should make it possible to reproduce the run exactly. Perhaps it's nicer to simply output an entire command line like `To reproduce, run ./tests --jobs ... --target ... --seed ... ` or something like that. ",
      "created_at": "2025-10-01T07:16:18Z",
      "updated_at": "2025-10-01T07:16:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2393665617",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393665617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7839,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393676397",
      "pull_request_review_id": 3287877856,
      "id": 2393676397,
      "node_id": "PRRC_kwDOAP4Jqs6OrJpt",
      "diff_hunk": "@@ -0,0 +1,350 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct tf_framework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct tf_args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d. %s execution.\\n\", args->num_processes, args->num_processes > 1 ? \"Parallel\" : \"Sequential\");\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct tf_framework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct tf_framework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+\n+    /* double-dash checks now */\n+    if (arg[2] == '\\0') {\n+        *err_msg = \"missing option name after double dash\";\n+        return NULL;\n+    }\n+\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2;\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct tf_framework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test(const struct tf_test_entry* t) {\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"%s PASSED\\n\", t->name);\n+}\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct tf_framework* tf) {\n+    TestRef ref;\n+    const struct tf_test_module* mdl;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            run_test(&mdl->data[ref.idx]);\n+        }\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+/* Process tests in parallel */\n+static int run_concurrent(struct tf_framework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &ref, sizeof(ref)) == sizeof(ref)) {\n+                run_test(&tf->registry_modules[ref.group].data[ref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 237,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391630272,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see you've implemented it already. It's indeed neat. We currently have 89 tests [1], so there's some room for the foreseeable future (unless we start splitting the cases up too granularly).\r\n\r\n[1] It is probably an attribution to the wonderful C89, which popped up here multiple times. :smile: ",
      "created_at": "2025-10-01T07:20:03Z",
      "updated_at": "2025-10-01T10:22:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2393676397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393676397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393680473",
      "pull_request_review_id": 3287883899,
      "id": 2393680473,
      "node_id": "PRRC_kwDOAP4Jqs6OrKpZ",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_target(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_logging(const char* key, const char* value, struct tf_framework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct tf_framework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct tf_args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d. %s execution.\\n\", args->num_processes, args->num_processes > 1 ? \"Parallel\" : \"Sequential\");\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct tf_framework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct tf_framework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    fprintf(stderr, \"Unknown argument '-%s=%s'\\n\", key, value);\n+    return -1;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --list_tests, -l                     Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - Iterations and seed can also be passed as positional arguments before any other argument for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct tf_framework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct tf_test_module* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+\n+    /* double-dash checks now */\n+    if (arg[2] == '\\0') {\n+        *err_msg = \"missing option name after double dash\";\n+        return NULL;\n+    }\n+\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2;\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct tf_framework* tf) {\n+    int group, idx;\n+    const struct tf_test_entry* entry;\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (group = 0; group < tf->num_modules; group++) {\n+        const struct tf_test_module* module = &tf->registry_modules[group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (idx = 0; idx < module->size; idx++) {\n+            entry = &module->data[idx];\n+            if (add_all || strcmp(value, entry->name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = entry;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -list_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct tf_framework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"l\") == 0 || strcmp(key, \"list_tests\") == 0) {\n+                tf->args.list_tests = 1;\n+                return 0;\n+            }\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct tf_test_entry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct tf_test_entry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct tf_framework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        tf->fn_run_test(tf->args.targets.slots[it]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+/* Process tests in parallel */\n+static int run_concurrent(struct tf_framework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipefd[2];\n+    int status = EXIT_SUCCESS;\n+    int it; /* loop iterator */\n+    unsigned char idx; /* test index */\n+\n+    if (pipe(pipefd) != 0) {\n+        perror(\"Error during pipe setup\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+        if (pid == 0) {\n+            /* Child worker: read jobs from the shared pipe */\n+            close(pipefd[1]); /* children never write */\n+            while (read(pipefd[0], &idx, sizeof(idx)) == sizeof(idx)) {\n+                tf->fn_run_test(tf->args.targets.slots[(int)idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Parent: write all tasks into the pipe */\n+    close(pipefd[0]); /* close read end */\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        idx = (unsigned char)it;",
      "path": "src/unit_test.c",
      "position": 328,
      "original_position": 318,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "eed1390205c5315af46be4b2326cb2d0e084a536",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It may be good to error out here if `it > 255`.",
      "created_at": "2025-10-01T07:21:56Z",
      "updated_at": "2025-10-01T07:21:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2393680473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2393680473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 328,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394101555",
      "pull_request_review_id": 3288456227,
      "id": 2394101555,
      "node_id": "PRRC_kwDOAP4Jqs6Osxcz",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 234,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386957311,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps you missed this one because it's hidden by github. If you ignored it intentionally, nevermind, it's totally not a blocker. ",
      "created_at": "2025-10-01T10:23:24Z",
      "updated_at": "2025-10-01T10:23:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2394101555",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394101555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394119612",
      "pull_request_review_id": 3288481511,
      "id": 2394119612,
      "node_id": "PRRC_kwDOAP4Jqs6Os128",
      "diff_hunk": "@@ -134,12 +134,23 @@ if(SECP256K1_BUILD_BENCHMARK)\n endif()\n \n if(SECP256K1_BUILD_TESTS)\n+  include(CheckIncludeFiles)\n+  check_include_files(\"sys/types.h\" HAVE_SYS_TYPES_H)\n+  check_include_files(\"sys/wait.h\" HAVE_SYS_WAIT_H)\n+  check_include_files(\"unistd.h\" HAVE_UNISTD_H)",
      "path": "src/CMakeLists.txt",
      "position": 1,
      "original_position": 7,
      "commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "original_commit_id": "0ddcd093def9ac371bff3d4665096c0a10a7d94d",
      "in_reply_to_id": 2381507361,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Following the overkill rationale; If we go with a more granular approach, we would have to check for every relevant symbol?. E.g. `pid_t`, `write`, `read`, and `close` too. \r\n\r\nI think a pragmatic middle ground is to check for symbols where we know that some common platforms don't have them, e.g., `fork` on Windows. Something like `pid_t` never needs to be checked because it's in the signature of `fork`.",
      "created_at": "2025-10-01T10:31:49Z",
      "updated_at": "2025-10-02T07:41:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2394119612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394119612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394726043",
      "pull_request_review_id": 3289358872,
      "id": 2394726043,
      "node_id": "PRRC_kwDOAP4Jqs6OvJ6b",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 234,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386957311,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Perhaps you missed this one because it's hidden by github. If you ignored it intentionally, nevermind, it's totally not a blocker.\r\n\r\nYeah, I was going to reply you and never did. Thanks for the reminder.\r\n\r\n> It would be nice to support the GNU style `print-tests` here as well now that we support `--`. (Not sure if it must be documented but I guess it won't hurt.)\r\n\r\nThe change is not really big but have thought about this for a while, and I’d rather keep `-` reserved only for introducing new command-line options. Mainly because allowing dashes inside names blurs that boundary and makes syntax less clear. Using underscores keeps it simple and consistent: \"dashes always mean new option, underscores always separate words\". If you feel strongly about adding it, we could but it feels a bit messy to me.",
      "created_at": "2025-10-01T14:06:29Z",
      "updated_at": "2025-10-01T14:06:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2394726043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394726043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394794881",
      "pull_request_review_id": 3289468935,
      "id": 2394794881,
      "node_id": "PRRC_kwDOAP4Jqs6OvauB",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_target(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_logging(const char* key, const char* value, struct tf_framework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct tf_framework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct tf_args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d. %s execution.\\n\", args->num_processes, args->num_processes > 1 ? \"Parallel\" : \"Sequential\");\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct tf_framework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct tf_framework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    fprintf(stderr, \"Unknown argument '-%s=%s'\\n\", key, value);\n+    return -1;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --list_tests, -l                     Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - Iterations and seed can also be passed as positional arguments before any other argument for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct tf_framework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct tf_test_module* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+\n+    /* double-dash checks now */\n+    if (arg[2] == '\\0') {\n+        *err_msg = \"missing option name after double dash\";\n+        return NULL;\n+    }\n+\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2;\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct tf_framework* tf) {\n+    int group, idx;\n+    const struct tf_test_entry* entry;\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (group = 0; group < tf->num_modules; group++) {\n+        const struct tf_test_module* module = &tf->registry_modules[group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (idx = 0; idx < module->size; idx++) {\n+            entry = &module->data[idx];\n+            if (add_all || strcmp(value, entry->name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = entry;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -list_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct tf_framework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"l\") == 0 || strcmp(key, \"list_tests\") == 0) {\n+                tf->args.list_tests = 1;\n+                return 0;\n+            }\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test_log(const struct tf_test_entry* t) {\n+    int64_t start_time = gettime_i64();\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"Test %s PASSED (%.3f sec)\\n\", t->name, (double)(gettime_i64() - start_time) / 1000000);\n+}\n+\n+static void run_test(const struct tf_test_entry* t) { t->func(); }\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct tf_framework* tf) {\n+    int it;\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        tf->fn_run_test(tf->args.targets.slots[it]);\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+/* Process tests in parallel */\n+static int run_concurrent(struct tf_framework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipefd[2];\n+    int status = EXIT_SUCCESS;\n+    int it; /* loop iterator */\n+    unsigned char idx; /* test index */\n+\n+    if (pipe(pipefd) != 0) {\n+        perror(\"Error during pipe setup\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+        if (pid == 0) {\n+            /* Child worker: read jobs from the shared pipe */\n+            close(pipefd[1]); /* children never write */\n+            while (read(pipefd[0], &idx, sizeof(idx)) == sizeof(idx)) {\n+                tf->fn_run_test(tf->args.targets.slots[(int)idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Parent: write all tasks into the pipe */\n+    close(pipefd[0]); /* close read end */\n+    for (it = 0; it < tf->args.targets.size; it++) {\n+        idx = (unsigned char)it;",
      "path": "src/unit_test.c",
      "position": 328,
      "original_position": 318,
      "commit_id": "2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761",
      "original_commit_id": "eed1390205c5315af46be4b2326cb2d0e084a536",
      "in_reply_to_id": 2393680473,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It may be good to error out here if `it > 255`.\r\n\r\nThis is already capped during the targets load but doesn't hurt to add a more descriptive error message to it.",
      "created_at": "2025-10-01T14:19:49Z",
      "updated_at": "2025-10-01T14:19:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2394794881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2394794881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 328,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2397513098",
      "pull_request_review_id": 3293022881,
      "id": 2397513098,
      "node_id": "PRRC_kwDOAP4Jqs6O5yWK",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 234,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386957311,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n> The change is not really big but have thought about this for a while, and I’d rather keep `-` reserved only for introducing new command-line options. Mainly because allowing dashes inside names blurs that boundary and makes syntax less clear.\r\n\r\nAgreed, let's avoid everything that makes parsing more complicated. ",
      "created_at": "2025-10-02T07:40:17Z",
      "updated_at": "2025-10-02T07:40:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2397513098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2397513098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2399222871",
      "pull_request_review_id": 3295195866,
      "id": 2399222871,
      "node_id": "PRRC_kwDOAP4Jqs6PATxX",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 234,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386957311,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "feel-free-to-ignore yocto-nit: wouldn't this currently only be a one-character change?\r\n```diff\r\ndiff --git a/src/unit_test.c b/src/unit_test.c\r\nindex a1858a1..715fb60 100644\r\n--- a/src/unit_test.c\r\n+++ b/src/unit_test.c\r\n@@ -239,7 +239,7 @@ static int read_args(int argc, char** argv, int start, struct tf_framework* tf)\r\n                 tf->args.help = 1;\r\n                 return 0;\r\n             }\r\n-            if (strcmp(key, \"l\") == 0 || strcmp(key, \"list_tests\") == 0) {\r\n+            if (strcmp(key, \"l\") == 0 || strcmp(key, \"list-tests\") == 0) {\r\n                 tf->args.list_tests = 1;\r\n                 return 0;\r\n             }\r\n```\r\nseems to work just fine. Would in doubt slightly prefer to adhere to widely accepted standards (in Bitcoin Core we also use dashes in parameter names, fwiw). I guess it's not worth it block the PR at all, but if maintainers and other reviewers feel strongly about dash-vs-underscores, could also sidestep the topic by simply renaming to \"--list\" :stuck_out_tongue: ",
      "created_at": "2025-10-02T15:27:56Z",
      "updated_at": "2025-10-02T15:27:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2399222871",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2399222871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2399276290",
      "pull_request_review_id": 3295269793,
      "id": 2399276290,
      "node_id": "PRRC_kwDOAP4Jqs6PAg0C",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+/***********************************************************************\n+ * Copyright (c) 2025  Matias Furszyfer (furszy)                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if SUPPORTS_CONCURRENCY\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf);\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct TestFramework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"t\", parse_target }, { \"target\", parse_target },\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { \"log\", parse_logging },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct Args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d\\n\", args->num_processes);\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct TestFramework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct TestFramework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static void help(void) {\n+    printf(\"Usage: ./tests [options]\\n\\n\");\n+    printf(\"Run the test suite for the project with optional configuration.\\n\\n\");\n+    printf(\"Options:\\n\");\n+    printf(\"    --help, -h                           Show this help message\\n\");\n+    printf(\"    --print_tests                        Display list of all available tests and modules\\n\");\n+    printf(\"    --jobs=<num>, -j=<num>               Number of parallel worker processes (default: 0 = sequential)\\n\");\n+    printf(\"    --iterations=<num>, -i=<num>         Number of iterations for each test (default: 16)\\n\");\n+    printf(\"    --seed=<hex>                         Set a specific RNG seed (default: random)\\n\");\n+    printf(\"    --target=<test name>, -t=<name>      Run a specific test (can be provided multiple times)\\n\");\n+    printf(\"    --target=<module name>, -t=<module>  Run all tests within a specific module (can be provided multiple times)\\n\");\n+    printf(\"    --log=<0|1>                          Enable or disable test execution logging (default: 0 = disabled)\\n\");\n+    printf(\"\\n\");\n+    printf(\"Notes:\\n\");\n+    printf(\"    - All arguments must be provided in the form '--key=value', '-key=value' or '-k=value'.\\n\");\n+    printf(\"    - Single or double dashes are allowed for multi character options.\\n\");\n+    printf(\"    - Unknown arguments are reported but ignored.\\n\");\n+    printf(\"    - Sequential execution occurs if -jobs=0 or unspecified.\\n\");\n+    printf(\"    - The first two positional arguments (iterations and seed) are also supported for backward compatibility.\\n\");\n+}\n+\n+/* Print all tests in registry */\n+static void print_test_list(struct TestFramework* tf) {\n+    int m, t, total = 0;\n+    printf(\"\\nAvailable tests (%d modules):\\n\", tf->num_modules);\n+    printf(\"========================================\\n\");\n+    for (m = 0; m < tf->num_modules; m++) {\n+        const struct TestModule* mod = &tf->registry_modules[m];\n+        printf(\"Module: %s (%d tests)\\n\", mod->name, mod->size);\n+        for (t = 0; t < mod->size; t++) {\n+            printf(\"\\t[%3d] %s\\n\", total + 1, mod->data[t].name);\n+            total++;\n+        }\n+        printf(\"----------------------------------------\\n\");\n+    }\n+    printf(\"\\nRun specific module: ./tests -t=<module_name>\\n\");\n+    printf(\"Run specific test: ./tests -t=<test_name>\\n\\n\");\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct TestFramework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+static int parse_logging(const char* key, const char* value, struct TestFramework* tf) {\n+    UNUSED(key);\n+    tf->args.logging = value && strcmp(value, \"1\") == 0;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2; /* double-dash long option */\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+static int parse_target(const char* key, const char* value, struct TestFramework* tf) {\n+    TestRef i = {/*group=*/0, /*idx=*/0};\n+    UNUSED(key);\n+    /* Find test index in the registry */\n+    for (i.group = 0; i.group < tf->num_modules; i.group++) {\n+        const struct TestModule* module = &tf->registry_modules[i.group];\n+        int add_all = strcmp(value, module->name) == 0; /* select all from module */\n+        for (i.idx = 0; i.idx < module->size; i.idx++) {\n+            if (add_all || strcmp(value, module->data[i.idx].name) == 0) {\n+                if (tf->args.targets.size >= MAX_ARGS) {\n+                    fprintf(stderr, \"Too many -target args (max: %d)\\n\", MAX_ARGS);\n+                    return -1;\n+                }\n+                tf->args.targets.slots[tf->args.targets.size++] = i;\n+                /* Matched a single test, we're done */\n+                if (!add_all) return 0;\n+            }\n+        }\n+        /* If add_all was true, we added all tests in the module, so return */\n+        if (add_all) return 0;\n+    }\n+    fprintf(stderr, \"Error: target '%s' not found (missing or module disabled).\\n\"\n+                    \"Run program with -print_tests option to display available tests and modules.\\n\", value);\n+    return -1;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct TestFramework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            /* Allowed options without value */\n+            if (strcmp(key, \"h\") == 0 || strcmp(key, \"help\") == 0) {\n+                tf->args.help = 1;\n+                return 0;\n+            }\n+            if (strcmp(key, \"print_tests\") == 0) {",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 234,
      "commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "original_commit_id": "10eee5d1f797e8beb79ae0b69db6bbd78126007f",
      "in_reply_to_id": 2386957311,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, it’s not about the size of the change (could just add another `strcmp` to support both too). My point is more general: it feels cleaner to standardize on \"dashes start options, underscores separate words\", and not mix the two.",
      "created_at": "2025-10-02T15:48:05Z",
      "updated_at": "2025-10-02T15:49:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2399276290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2399276290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2399445591",
      "pull_request_review_id": 3295506707,
      "id": 2399445591,
      "node_id": "PRRC_kwDOAP4Jqs6PBKJX",
      "diff_hunk": "@@ -0,0 +1,350 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct tf_framework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct tf_args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d. %s execution.\\n\", args->num_processes, args->num_processes > 1 ? \"Parallel\" : \"Sequential\");\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct tf_framework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct tf_framework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+\n+    /* double-dash checks now */\n+    if (arg[2] == '\\0') {\n+        *err_msg = \"missing option name after double dash\";\n+        return NULL;\n+    }\n+\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2;\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct tf_framework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test(const struct tf_test_entry* t) {\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"%s PASSED\\n\", t->name);\n+}\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct tf_framework* tf) {\n+    TestRef ref;\n+    const struct tf_test_module* mdl;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            run_test(&mdl->data[ref.idx]);\n+        }\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+/* Process tests in parallel */\n+static int run_concurrent(struct tf_framework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &ref, sizeof(ref)) == sizeof(ref)) {\n+                run_test(&tf->registry_modules[ref.group].data[ref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 237,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391630272,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> We currently have 89 tests [1] ...\r\n\r\nAt the high risk of totally ruining the C joke, I'm only seeing 88 tests on the latest push (2f4546ce5610f4f7841fc2dc2eef68dbfcdcc761):\r\n```\r\n$ ./build/bin/tests -l | head -n 5\r\n\r\nAvailable tests (16 modules):\r\n========================================\r\nModule: general (5 tests)\r\n        [  1] selftest_tests\r\n$ ./build/bin/tests -l | tail -n 7\r\n        [ 87] secp256k1_byteorder_tests\r\n        [ 88] cmov_tests\r\n----------------------------------------\r\n\r\nRun specific module: ./tests -t=<module_name>\r\nRun specific test: ./tests -t=<test_name>\r\n```\r\n\r\n\r\nDid you indeed have 89 earlier (or, my best guess, had the same output, but assumed the test list starts counting at zero?). Just checking that all tests are covered, though I'm pretty certain they are, based on manual verification from an earlier review round.",
      "created_at": "2025-10-02T16:53:03Z",
      "updated_at": "2025-10-02T16:53:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2399445591",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2399445591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2401004581",
      "pull_request_review_id": 3297708673,
      "id": 2401004581,
      "node_id": "PRRC_kwDOAP4Jqs6PHGwl",
      "diff_hunk": "@@ -0,0 +1,350 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include \"unit_test.h\"\n+#include \"testrand.h\"\n+#include \"tests_common.h\"\n+\n+#define UNUSED(x) (void)(x)\n+\n+/* Number of times certain tests will run */\n+int COUNT = 16;\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf);\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf);\n+\n+/* Mapping table: key -> handler */\n+typedef int (*ArgHandler)(const char* key, const char* value, struct tf_framework* tf);\n+struct ArgMap {\n+    const char* key;\n+    ArgHandler handler;\n+};\n+\n+/*\n+ *   Main entry point for handling command-line arguments.\n+ *\n+ *   Developers should extend this map whenever new command-line\n+ *   options are introduced. Each new argument should be validated,\n+ *   converted to the appropriate type, and stored in 'tf->args' struct.\n+ */\n+static struct ArgMap arg_map[] = {\n+    { \"j\", parse_jobs_count }, { \"jobs\", parse_jobs_count },\n+    { \"i\", parse_iterations }, { \"iterations\", parse_iterations },\n+    { \"seed\", parse_seed },\n+    { NULL, NULL } /* sentinel */\n+};\n+\n+/* Display options that are not printed elsewhere */\n+static void print_args(const struct tf_args* args) {\n+    printf(\"iterations = %d\\n\", COUNT);\n+    printf(\"jobs = %d. %s execution.\\n\", args->num_processes, args->num_processes > 1 ? \"Parallel\" : \"Sequential\");\n+}\n+\n+/* Main entry point for reading environment variables */\n+static int read_env(struct tf_framework* tf) {\n+    const char* env_iter = getenv(\"SECP256K1_TEST_ITERS\");\n+    if (env_iter && strlen(env_iter) > 0) {\n+        return parse_iterations(\"i\", env_iter, tf);\n+    }\n+    return 0;\n+}\n+\n+static int parse_arg(const char* key, const char* value, struct tf_framework* tf) {\n+    int i;\n+    for (i = 0; arg_map[i].key != NULL; i++) {\n+        if (strcmp(key, arg_map[i].key) == 0) {\n+            return arg_map[i].handler(key, value, tf);\n+        }\n+    }\n+    /* Unknown key: report just so typos don't silently pass. */\n+    printf(\"Unknown argument '-%s=%s'\\n\", key, value);\n+    return 0;\n+}\n+\n+static int parse_jobs_count(const char* key, const char* value, struct tf_framework* tf) {\n+    char* ptr_val;\n+    long val = strtol(value, &ptr_val, 10); /* base 10 */\n+    if (*ptr_val != '\\0') {\n+        fprintf(stderr, \"Invalid number for -%s=%s\\n\", key, value);\n+        return -1;\n+    }\n+    if (val < 0 || val > MAX_SUBPROCESSES) {\n+        fprintf(stderr, \"Arg '-%s' out of range: '%ld'. Range: 0..%d\\n\", key, val, MAX_SUBPROCESSES);\n+        return -1;\n+    }\n+    tf->args.num_processes = (int) val;\n+    return 0;\n+}\n+\n+static int parse_iterations(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key); UNUSED(tf);\n+    if (!value) return 0;\n+    COUNT = (int) strtol(value, NULL, 0);\n+    if (COUNT <= 0) {\n+        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+static int parse_seed(const char* key, const char* value, struct tf_framework* tf) {\n+    UNUSED(key);\n+    tf->args.custom_seed = (!value || strcmp(value, \"NULL\") == 0) ? NULL : value;\n+    return 0;\n+}\n+\n+/* Strip up to two leading dashes */\n+static const char* normalize_key(const char* arg, const char** err_msg) {\n+    const char* key;\n+    if (!arg || arg[0] != '-') {\n+        *err_msg = \"missing initial dash\";\n+        return NULL;\n+    }\n+    /* single-dash short option */\n+    if (arg[1] != '-') return arg + 1;\n+\n+    /* double-dash checks now */\n+    if (arg[2] == '\\0') {\n+        *err_msg = \"missing option name after double dash\";\n+        return NULL;\n+    }\n+\n+    if (arg[2] == '-') {\n+        *err_msg = \"too many leading dashes\";\n+        return NULL;\n+    }\n+\n+    key = arg + 2;\n+    if (key[1] == '\\0') {\n+        *err_msg = \"short option cannot use double dash\";\n+        return NULL;\n+    }\n+    return key;\n+}\n+\n+/* Read args: all must be in the form -key=value, --key=value or -key=value */\n+static int read_args(int argc, char** argv, int start, struct tf_framework* tf) {\n+    int i;\n+    const char* key;\n+    const char* value;\n+    char* eq;\n+    const char* err_msg = \"unknown error\";\n+    for (i = start; i < argc; i++) {\n+        char* raw_arg = argv[i];\n+        if (!raw_arg || raw_arg[0] != '-') {\n+            fprintf(stderr, \"Invalid arg '%s': must start with '-'\\n\", raw_arg ? raw_arg : \"(null)\");\n+            return -1;\n+        }\n+\n+        key = normalize_key(raw_arg, &err_msg);\n+        if (!key || *key == '\\0') {\n+            fprintf(stderr, \"Invalid arg '%s': %s. Must be -k=value or --key=value\\n\", raw_arg, err_msg);\n+            return -1;\n+        }\n+\n+        eq = strchr(raw_arg, '=');\n+        if (!eq || eq == raw_arg + 1) {\n+            fprintf(stderr, \"Invalid arg '%s': must be -k=value or --key=value\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        *eq = '\\0'; /* split key and value */\n+        value = eq + 1;\n+        if (!value || *value == '\\0') { /* value is empty */\n+            fprintf(stderr, \"Invalid arg '%s': value cannot be empty\\n\", raw_arg);\n+            return -1;\n+        }\n+\n+        if (parse_arg(key, value, tf) != 0) return -1;\n+    }\n+    return 0;\n+}\n+\n+static void run_test(const struct tf_test_entry* t) {\n+    printf(\"Running %s..\\n\", t->name);\n+    t->func();\n+    printf(\"%s PASSED\\n\", t->name);\n+}\n+\n+/* Process tests in sequential order */\n+static int run_sequential(struct tf_framework* tf) {\n+    TestRef ref;\n+    const struct tf_test_module* mdl;\n+    for (ref.group = 0; ref.group < tf->num_modules; ref.group++) {\n+        mdl = &tf->registry_modules[ref.group];\n+        for (ref.idx = 0; ref.idx < mdl->size; ref.idx++) {\n+            run_test(&mdl->data[ref.idx]);\n+        }\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+#if defined(SUPPORTS_CONCURRENCY)\n+/* Process tests in parallel */\n+static int run_concurrent(struct tf_framework* tf) {\n+    /* Sub-processes info */\n+    pid_t workers[MAX_SUBPROCESSES];\n+    int pipes[MAX_SUBPROCESSES][2];\n+    /* Next worker to send work */\n+    int worker_idx;\n+    /* Parent process exit status */\n+    int status = EXIT_SUCCESS;\n+    /* Loop iterator */\n+    int it;\n+    /* Loop ref */\n+    TestRef ref;\n+    /* Launch worker processes */\n+    for (it = 0; it < tf->args.num_processes; it++) {\n+        pid_t pid;\n+        if (pipe(pipes[it]) != 0) {\n+            perror(\"Error during pipe setup\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        pid = fork();\n+        if (pid < 0) {\n+            perror(\"Error during process fork\");\n+            return EXIT_FAILURE;\n+        }\n+\n+        if (pid == 0) {\n+            /* Child worker: run tests assigned via pipe */\n+            close(pipes[it][1]); /* Close write end */\n+            while (read(pipes[it][0], &ref, sizeof(ref)) == sizeof(ref)) {\n+                run_test(&tf->registry_modules[ref.group].data[ref.idx]);\n+            }\n+            _exit(EXIT_SUCCESS); /* finish child process */\n+        } else {\n+            /* Parent: save worker pid */\n+            close(pipes[it][0]); /* Close read end */\n+            workers[it] = pid;\n+        }\n+    }\n+\n+    /* Now that we have all sub-processes, distribute workload in round-robin */",
      "path": "src/unit_test.c",
      "position": 1,
      "original_position": 237,
      "commit_id": "b209c65782c4b4fbfa337ecf4dfac2ee142db84b",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391630272,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I probably just miscounted. I had counted manually using `grep [-c] CASE(` and `grep [-c] CASE1(`, trying to ignore false positives. ",
      "created_at": "2025-10-03T07:09:03Z",
      "updated_at": "2025-10-03T07:09:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2401004581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2401004581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2420393351",
      "pull_request_review_id": 3323763774,
      "id": 2420393351,
      "node_id": "PRRC_kwDOAP4Jqs6QREWH",
      "diff_hunk": "@@ -7666,179 +7679,215 @@ static void run_cmov_tests(void) {\n     ge_storage_cmov_test();\n }\n \n-int main(int argc, char **argv) {\n-    /* Disable buffering for stdout to improve reliability of getting\n-     * diagnostic information. Happens right at the start of main because\n-     * setbuf must be used before any other operation on the stream. */\n-    setbuf(stdout, NULL);\n-    /* Also disable buffering for stderr because it's not guaranteed that it's\n-     * unbuffered on all systems. */\n-    setbuf(stderr, NULL);\n-\n-    /* find iteration count */\n-    if (argc > 1) {\n-        COUNT = strtol(argv[1], NULL, 0);\n-    } else {\n-        const char* env = getenv(\"SECP256K1_TEST_ITERS\");\n-        if (env && strlen(env) > 0) {\n-            COUNT = strtol(env, NULL, 0);\n-        }\n-    }\n-    if (COUNT <= 0) {\n-        fputs(\"An iteration count of 0 or less is not allowed.\\n\", stderr);\n-        return EXIT_FAILURE;\n-    }\n-    printf(\"test count = %i\\n\", COUNT);\n-\n-    /* run test RNG tests (must run before we really initialize the test RNG) */\n-    run_xoshiro256pp_tests();\n+/* --------------------------------------------------------- */\n+/* Test Registry                                             */\n+/* --------------------------------------------------------- */\n \n-    /* find random seed */\n-    testrand_init(argc > 2 ? argv[2] : NULL);\n+/* --- Special test cases that must run before RNG initialization --- */\n+static struct tf_test_entry tests_no_rng[] = {\n+    CASE(xoshiro256pp_tests),\n+};\n+static const struct tf_test_module registry_modules_no_rng = MAKE_TEST_MODULE(no_rng);\n+\n+/* --- Standard test cases start here --- */\n+static struct tf_test_entry tests_general[] = {\n+    CASE(selftest_tests),\n+    CASE(all_proper_context_tests),\n+    CASE(all_static_context_tests),\n+    CASE(deprecated_context_flags_test),\n+    CASE(scratch_tests),\n+};\n \n-    /*** Setup test environment ***/\n+static struct tf_test_entry tests_integer[] = {\n+#ifdef SECP256K1_WIDEMUL_INT128\n+    CASE(int128_tests),\n+#endif\n+    CASE(ctz_tests),\n+    CASE(modinv_tests),\n+    CASE(inverse_tests),\n+};\n \n-    /* Create a global context available to all tests */\n-    CTX = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n-    /* Randomize the context only with probability 15/16\n-       to make sure we test without context randomization from time to time.\n-       TODO Reconsider this when recalibrating the tests. */\n-    if (testrand_bits(4)) {\n-        unsigned char rand32[32];\n-        testrand256(rand32);\n-        CHECK(secp256k1_context_randomize(CTX, rand32));\n-    }\n-    /* Make a writable copy of secp256k1_context_static in order to test the effect of API functions\n-       that write to the context. The API does not support cloning the static context, so we use\n-       memcpy instead. The user is not supposed to copy a context but we should still ensure that\n-       the API functions handle copies of the static context gracefully. */\n-    STATIC_CTX = malloc(sizeof(*secp256k1_context_static));\n-    CHECK(STATIC_CTX != NULL);\n-    memcpy(STATIC_CTX, secp256k1_context_static, sizeof(secp256k1_context));\n-    CHECK(!secp256k1_context_is_proper(STATIC_CTX));\n+static struct tf_test_entry tests_hash[] = {\n+    CASE(sha256_known_output_tests),\n+    CASE(sha256_counter_tests),\n+    CASE(hmac_sha256_tests),\n+    CASE(rfc6979_hmac_sha256_tests),\n+    CASE(tagged_sha256_tests),\n+};\n \n-    /*** Run actual tests ***/\n+static struct tf_test_entry tests_scalar[] = {\n+    CASE(scalar_tests),\n+};\n \n-    /* selftest tests */\n-    run_selftest_tests();\n+static struct tf_test_entry tests_field[] = {\n+    CASE(field_half),\n+    CASE(field_misc),\n+    CASE(field_convert),\n+    CASE(field_be32_overflow),\n+    CASE(fe_mul),\n+    CASE(sqr),\n+    CASE(sqrt),\n+};\n \n-    /* context tests */\n-    run_proper_context_tests(0); run_proper_context_tests(1);\n-    run_static_context_tests(0); run_static_context_tests(1);\n-    run_deprecated_context_flags_test();\n+static struct tf_test_entry tests_group[] = {\n+    CASE(ge),\n+    CASE(gej),\n+    CASE(group_decompress),\n+};\n \n-    /* scratch tests */\n-    run_scratch_tests();\n+static struct tf_test_entry tests_ecmult[] = {\n+    CASE(ecmult_pre_g),\n+    CASE(wnaf),\n+    CASE(point_times_order),\n+    CASE(ecmult_near_split_bound),\n+    CASE(ecmult_chain),\n+    CASE(ecmult_constants),\n+    CASE(ecmult_gen_blind),\n+    CASE(ecmult_const_tests),\n+    CASE(ecmult_multi_tests),\n+    CASE(ec_combine),\n+};\n \n-    /* integer arithmetic tests */\n-#ifdef SECP256K1_WIDEMUL_INT128\n-    run_int128_tests();\n-#endif\n-    run_ctz_tests();\n-    run_modinv_tests();\n-    run_inverse_tests();\n-\n-    /* sorting tests */\n-    run_hsort_tests();\n-\n-    /* hash tests */\n-    run_sha256_known_output_tests();\n-    run_sha256_counter_tests();\n-    run_hmac_sha256_tests();\n-    run_rfc6979_hmac_sha256_tests();\n-    run_tagged_sha256_tests();\n-\n-    /* scalar tests */\n-    run_scalar_tests();\n-\n-    /* field tests */\n-    run_field_half();\n-    run_field_misc();\n-    run_field_convert();\n-    run_field_be32_overflow();\n-    run_fe_mul();\n-    run_sqr();\n-    run_sqrt();\n-\n-    /* group tests */\n-    run_ge();\n-    run_gej();\n-    run_group_decompress();\n-\n-    /* ecmult tests */\n-    run_ecmult_pre_g();\n-    run_wnaf();\n-    run_point_times_order();\n-    run_ecmult_near_split_bound();\n-    run_ecmult_chain();\n-    run_ecmult_constants();\n-    run_ecmult_gen_blind();\n-    run_ecmult_const_tests();\n-    run_ecmult_multi_tests();\n-    run_ec_combine();\n-\n-    /* endomorphism tests */\n-    run_endomorphism_tests();\n-\n-    /* EC point parser test */\n-    run_ec_pubkey_parse_test();\n-\n-    /* EC key edge cases */\n-    run_eckey_edge_case_test();\n-\n-    /* EC key arithmetic test */\n-    run_eckey_negate_test();\n+static struct tf_test_entry tests_ec[] = {\n+    CASE(endomorphism_tests),\n+    CASE(ec_pubkey_parse_test),\n+    CASE(eckey_edge_case_test),\n+    CASE(eckey_negate_test),\n+};\n \n #ifdef ENABLE_MODULE_ECDH\n-    /* ecdh tests */\n-    run_ecdh_tests();\n+static struct tf_test_entry tests_ecdh[] = {\n+    CASE(ecdh_tests),\n+};\n #endif\n \n-    /* ecdsa tests */\n-    run_ec_illegal_argument_tests();\n-    run_pubkey_comparison();\n-    run_pubkey_sort();\n-    run_random_pubkeys();\n-    run_ecdsa_der_parse();\n-    run_ecdsa_sign_verify();\n-    run_ecdsa_end_to_end();\n-    run_ecdsa_edge_cases();\n-    run_ecdsa_wycheproof();\n+static struct tf_test_entry tests_ecdsa[] = {\n+    CASE(ec_illegal_argument_tests),\n+    CASE(pubkey_comparison),\n+    CASE(pubkey_sort),\n+    CASE(random_pubkeys),\n+    CASE(ecdsa_der_parse),\n+    CASE(ecdsa_sign_verify),\n+    CASE(ecdsa_end_to_end),\n+    CASE(ecdsa_edge_cases),\n+    CASE(ecdsa_wycheproof),\n+};\n \n #ifdef ENABLE_MODULE_RECOVERY\n+static struct tf_test_entry tests_recovery[] = {\n     /* ECDSA pubkey recovery tests */\n-    run_recovery_tests();\n+    CASE(recovery_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_EXTRAKEYS\n-    run_extrakeys_tests();\n+static struct tf_test_entry tests_extrakeys[] = {\n+    CASE(extrakeys_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_SCHNORRSIG\n-    run_schnorrsig_tests();\n+static struct tf_test_entry tests_schnorrsig[] = {\n+    CASE(schnorrsig_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_MUSIG\n-    run_musig_tests();\n+static struct tf_test_entry tests_musig[] = {\n+    CASE(musig_tests),\n+};\n #endif\n \n #ifdef ENABLE_MODULE_ELLSWIFT\n-    run_ellswift_tests();\n+static struct tf_test_entry tests_ellswift[] = {\n+    CASE(ellswift_tests),\n+};\n #endif\n \n-    /* util tests */\n-    run_secp256k1_memczero_test();\n-    run_secp256k1_is_zero_array_test();\n-    run_secp256k1_byteorder_tests();\n+static struct tf_test_entry tests_utils[] = {\n+    CASE(hsort_tests),\n+    CASE(secp256k1_memczero_test),\n+    CASE(secp256k1_is_zero_array_test),\n+    CASE(secp256k1_byteorder_tests),\n+    CASE(cmov_tests),\n+};\n \n-    run_cmov_tests();\n+/* Register test modules */\n+static const struct tf_test_module registry_modules[] = {\n+    MAKE_TEST_MODULE(general),\n+    MAKE_TEST_MODULE(integer),\n+    MAKE_TEST_MODULE(hash),\n+    MAKE_TEST_MODULE(scalar),\n+    MAKE_TEST_MODULE(field),\n+    MAKE_TEST_MODULE(group),\n+    MAKE_TEST_MODULE(ecmult),\n+    MAKE_TEST_MODULE(ec),\n+#ifdef ENABLE_MODULE_ECDH\n+    MAKE_TEST_MODULE(ecdh),\n+#endif\n+    MAKE_TEST_MODULE(ecdsa),\n+#ifdef ENABLE_MODULE_RECOVERY\n+    MAKE_TEST_MODULE(recovery),\n+#endif\n+#ifdef ENABLE_MODULE_EXTRAKEYS\n+    MAKE_TEST_MODULE(extrakeys),\n+#endif\n+#ifdef ENABLE_MODULE_SCHNORRSIG\n+    MAKE_TEST_MODULE(schnorrsig),\n+#endif\n+#ifdef ENABLE_MODULE_MUSIG\n+    MAKE_TEST_MODULE(musig),\n+#endif\n+#ifdef ENABLE_MODULE_ELLSWIFT\n+    MAKE_TEST_MODULE(ellswift),\n+#endif\n+    MAKE_TEST_MODULE(utils),\n+};\n \n-    /*** Tear down test environment ***/\n+/* Setup test environment */\n+static int setup(void) {\n+    /* Create a global context available to all tests */\n+    CTX = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    /* Randomize the context only with probability 15/16\n+       to make sure we test without context randomization from time to time.\n+       TODO Reconsider this when recalibrating the tests. */\n+    if (testrand_bits(4)) {\n+        unsigned char rand32[32];\n+        testrand256(rand32);\n+        CHECK(secp256k1_context_randomize(CTX, rand32));\n+    }\n+    /* Make a writable copy of secp256k1_context_static in order to test the effect of API functions\n+       that write to the context. The API does not support cloning the static context, so we use\n+       memcpy instead. The user is not supposed to copy a context but we should still ensure that\n+       the API functions handle copies of the static context gracefully. */\n+    STATIC_CTX = malloc(sizeof(*secp256k1_context_static));\n+    CHECK(STATIC_CTX != NULL);\n+    memcpy(STATIC_CTX, secp256k1_context_static, sizeof(secp256k1_context));\n+    CHECK(!secp256k1_context_is_proper(STATIC_CTX));\n+    return 0;\n+}\n+\n+/* Shutdown test environment */\n+static int teardown(void) {\n     free(STATIC_CTX);\n     secp256k1_context_destroy(CTX);\n \n     testrand_finish();",
      "path": "src/tests.c",
      "position": 1,
      "original_position": 377,
      "commit_id": "eed1390205c5315af46be4b2326cb2d0e084a536",
      "original_commit_id": "b2e4749d8bf223205ed958bc797a48a9223dd26f",
      "in_reply_to_id": 2391750362,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> But this reminds me of the purpose of outputting the initial seed, namely reproducibility. With that in mind, the output should also contain the target parameter. I think seed, target, and jobs together should make it possible to reproduce the run exactly. Perhaps it's nicer to simply output an entire command line like To reproduce, run ./tests --jobs ... --target ... --seed ...  or something like that.\r\n\r\nYeah sure. Will do if have to re-touch or in a tiny follow-up to not invalidate the current reviews.",
      "created_at": "2025-10-10T14:01:44Z",
      "updated_at": "2025-10-10T14:01:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1734#discussion_r2420393351",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2420393351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1734"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7839,
      "side": "RIGHT"
    }
  ]
}