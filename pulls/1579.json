{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579",
    "id": 2006813494,
    "node_id": "PR_kwDOAP4Jqs53nYs2",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1579.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1579.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/765ef53335a3e0fafdafe1e757f6fe0789f2797f",
    "number": 1579,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Clear sensitive memory without getting optimized out (revival of #636)",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR picks up #636 (which in turn picked up #448, so this is take number three) and is essentially a rebase on master.\r\n\r\nSome changes to the original PR:\r\n* the clearing function now has the `secp256k1_` prefix again, since the related helper `_memczero` got it as well (see PR #835 / commit e89278f211a526062745c391d48a7baf782b4b2b)\r\n* the original commit b17a7df8145a6a86d49c354c7e7b59a432ea5346 (\"Make _set_fe_int( . , 0 ) set magnitude to 0\") is not needed anymore, since it was already applied in PR #943 (commit d49011f54c2b31807158bdf06364f331558cccc7)\r\n* clearing of stack memory with `secp256k1_memclear` is now also done on modules that have been newly introduced since then, i.e. schnorr and ellswift (of course, there is still no guarantee that all places where clearing is necessary are covered)\r\n\r\nSo far I haven't looked at any disassembly and possible performance implications yet (there were some concerns expressed in https://github.com/bitcoin-core/secp256k1/pull/636#issuecomment-620118629), happy to go deeper there if this gets Concept ACKed.\r\n\r\nThe proposed method of using a memory barrier to prevent optimizating away the memset is still used in BoringSSL (where it was originally picked up from) and in the Linux Kernel, see e.g. https://github.com/google/boringssl/blob/5af122c3dfc163b5d1859f1f450756e8e320a142/crypto/mem.c#L335 and https://github.com/torvalds/linux/blob/d4560686726f7a357922f300fc81f5964be8df04/include/linux/string.h#L348 / https://github.com/torvalds/linux/blob/d4560686726f7a357922f300fc81f5964be8df04/include/linux/compiler.h#L102 \r\n\r\nFixes #185.",
    "labels": [
      {
        "id": 4975380966,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI5J5g",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/side-channel",
        "name": "side-channel",
        "description": "",
        "color": "F9D0C4",
        "default": false
      },
      {
        "id": 5492210333,
        "node_id": "LA_kwDOAP4Jqs8AAAABR1x6nQ",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/needs-changelog",
        "name": "needs-changelog",
        "description": "",
        "color": "DBD8F4",
        "default": false
      }
    ],
    "created_at": "2024-08-06T21:10:30Z",
    "updated_at": "2024-11-04T15:53:31Z",
    "closed_at": "2024-11-04T15:35:02Z",
    "mergeable_state": "unknown",
    "merged_at": "2024-11-04T15:35:02Z",
    "merge_commit_sha": "b161bffb8bfb2120495434bbc40eda0d9fbb8afb",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "theStack:revival_of_pr636_cleanse",
      "ref": "revival_of_pr636_cleanse",
      "sha": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 452762907,
        "node_id": "R_kgDOGvydGw",
        "name": "secp256k1",
        "full_name": "theStack/secp256k1",
        "owner": {
          "login": "theStack",
          "id": 91535,
          "node_id": "MDQ6VXNlcjkxNTM1",
          "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/theStack",
          "html_url": "https://github.com/theStack",
          "followers_url": "https://api.github.com/users/theStack/followers",
          "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
          "organizations_url": "https://api.github.com/users/theStack/orgs",
          "repos_url": "https://api.github.com/users/theStack/repos",
          "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/theStack/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/theStack/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/theStack/secp256k1",
        "archive_url": "https://api.github.com/repos/theStack/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/theStack/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/theStack/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/theStack/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/theStack/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/theStack/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/theStack/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/theStack/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/theStack/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/theStack/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/theStack/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/theStack/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/theStack/secp256k1/events",
        "forks_url": "https://api.github.com/repos/theStack/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/theStack/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/theStack/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/theStack/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/theStack/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/theStack/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/theStack/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/theStack/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/theStack/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/theStack/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/theStack/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/theStack/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/theStack/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/theStack/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/theStack/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/theStack/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:theStack/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/theStack/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/theStack/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/theStack/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/theStack/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/theStack/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/theStack/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/theStack/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/theStack/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/theStack/secp256k1/hooks",
        "svn_url": "https://github.com/theStack/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 12236,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-04T15:53:31Z",
        "created_at": "2022-01-27T16:42:12Z",
        "updated_at": "2024-10-14T15:35:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "1464f15c812b00de0f3d397b3cfb67d1f91f6967",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 1007,
        "stargazers_count": 2080,
        "watchers_count": 2080,
        "size": 12084,
        "default_branch": "master",
        "open_issues_count": 141,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-04T15:35:01Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2024-11-04T15:35:06Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 108,
    "deletions": 109,
    "changed_files": 22,
    "commits": 9,
    "review_comments": 20,
    "comments": 15
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 13784083843,
      "node_id": "HRFPE_lADOAP4Jqs6SIfqhzwAAAAM1mG2D",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/13784083843",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T21:19:13Z"
    },
    {
      "event": "labeled",
      "id": 13919913680,
      "node_id": "LE_lADOAP4Jqs6SIfqhzwAAAAM9sQbQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/13919913680",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-17T14:07:11Z",
      "label": {
        "name": "side-channel",
        "color": "F9D0C4"
      }
    },
    {
      "event": "reviewed",
      "id": 2244105228,
      "node_id": "PRR_kwDOAP4Jqs6FwlQM",
      "url": null,
      "actor": null,
      "commit_id": "abb3be2d470ebf08f4eb89efcf5ffc1746e2a05b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK (obviously)\r\n\r\nThanks for reviving this, I never had the time/motivation to come back to this PR, but it's important.\r\n\r\nWe should call `SECP256K1_CHECKMEM_UNDEFINE` (https://github.com/bitcoin-core/secp256k1/blob/b307614401790850b48fb3ba878247290857a975/src/checkmem.h#L27) in `secp256k1_memclear` after clearing the memory. Reading cleared memory would clearly be a bug.  ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#pullrequestreview-2244105228",
      "submitted_at": "2024-08-17T14:09:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13942686237,
      "node_id": "HRFPE_lADOAP4Jqs6SIfqhzwAAAAM_DIId",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/13942686237",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T10:13:52Z"
    },
    {
      "event": "commented",
      "id": 2298512356,
      "node_id": "IC_kwDOAP4Jqs6JAIPk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2298512356",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T10:23:52Z",
      "updated_at": "2024-08-20T10:23:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> We should call `SECP256K1_CHECKMEM_UNDEFINE` (\r\n> \r\n> https://github.com/bitcoin-core/secp256k1/blob/b307614401790850b48fb3ba878247290857a975/src/checkmem.h#L27\r\n> \r\n> ) in `secp256k1_memclear` after clearing the memory. Reading cleared memory would clearly be a bug.\r\n\r\nThanks, added that, and rebased on master.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2298512356",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "commented",
      "id": 2399671558,
      "node_id": "IC_kwDOAP4Jqs6PCBUG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2399671558",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T12:10:54Z",
      "updated_at": "2024-10-08T12:10:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "@theStack Can you rebase this on top of musig which has introduced a few more code locations that need clearing?\r\n\r\nPersonally, I'd love to have this in the next release.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2399671558",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "mentioned",
      "id": 14555706219,
      "node_id": "MEE_lADOAP4Jqs6SIfqhzwAAAANjlnNr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14555706219",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T12:10:56Z"
    },
    {
      "event": "subscribed",
      "id": 14555706239,
      "node_id": "SE_lADOAP4Jqs6SIfqhzwAAAANjlnN_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14555706239",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T12:10:56Z"
    },
    {
      "event": "unsubscribed",
      "id": 14557920575,
      "node_id": "UE_lADOAP4Jqs6SIfqhzwAAAANjuD0_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14557920575",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T14:25:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14563689338,
      "node_id": "HRFPE_lADOAP4Jqs6SIfqhzwAAAANkEEN6",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14563689338",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T22:51:01Z"
    },
    {
      "event": "commented",
      "id": 2400952438,
      "node_id": "IC_kwDOAP4Jqs6PG6B2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2400952438",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T22:51:17Z",
      "updated_at": "2024-10-08T22:51:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @theStack Can you rebase this on top of musig which has introduced a few more code locations that need clearing?\r\n\r\nSure, done. With only five lines changed in the musig module, this needed less effort than expected, hope I didn't miss any instances (many of them are handled indirectly via the `..._{fe,scalar}_clear` functions though).\r\n\r\n<details>\r\n<summary>Relevant excerpt of the range-diff (uncolored here)</summary>\r\n\r\n```diff\r\n$ git range-diff ac0e41...0b01d2\r\n5:  6fcbae9 ! 15:  02ee811 Use secp256k1_memclear() to clear stack memory instead of memset()\r\n    @@ src/modules/ellswift/main_impl.h: int secp256k1_ellswift_xdh(const secp256k1_con\r\n          secp256k1_scalar_clear(&s);\r\n      \r\n     \r\n    + ## src/modules/musig/session_impl.h ##\r\n    +@@ src/modules/musig/session_impl.h: static void secp256k1_nonce_function_musig(secp256k1_scalar *k, const unsigned c\r\n    +         secp256k1_scalar_set_b32(&k[i], buf, NULL);\r\n    + \r\n    +         /* Attempt to erase secret data */\r\n    +-        memset(buf, 0, sizeof(buf));\r\n    +-        memset(&sha_tmp, 0, sizeof(sha_tmp));\r\n    ++        secp256k1_memclear(buf, sizeof(buf));\r\n    ++        secp256k1_memclear(&sha_tmp, sizeof(sha_tmp));\r\n    +     }\r\n    +-    memset(rand, 0, sizeof(rand));\r\n    +-    memset(&sha, 0, sizeof(sha));\r\n    ++    secp256k1_memclear(rand, sizeof(rand));\r\n    ++    secp256k1_memclear(&sha, sizeof(sha));\r\n    + }\r\n    + \r\n    + int secp256k1_musig_nonce_gen_internal(const secp256k1_context* ctx, secp256k1_musig_secnonce *secnonce, secp256k1_musig_pubnonce *pubnonce, const unsigned char *input_nonce, const unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *msg32, const secp256k1_musig_keyagg_cache *keyagg_cache, const unsigned char *extra_input32) {\r\n    +@@ src/modules/musig/session_impl.h: int secp256k1_musig_nonce_gen_counter(const secp256k1_context* ctx, secp256k1_mu\r\n    +     if (!secp256k1_musig_nonce_gen_internal(ctx, secnonce, pubnonce, buf, seckey, &pubkey, msg32, keyagg_cache, extra_input32)) {\r\n    +         return 0;\r\n    +     }\r\n    +-    memset(seckey, 0, sizeof(seckey));\r\n    ++    secp256k1_memclear(seckey, sizeof(seckey));\r\n    +     return 1;\r\n    + }\r\n    + \r\n    +\r\n```\r\n</details>",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2400952438",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "mentioned",
      "id": 14563691078,
      "node_id": "MEE_lADOAP4Jqs6SIfqhzwAAAANkEEpG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14563691078",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T22:51:18Z"
    },
    {
      "event": "subscribed",
      "id": 14563691085,
      "node_id": "SE_lADOAP4Jqs6SIfqhzwAAAANkEEpN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14563691085",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T22:51:18Z"
    },
    {
      "event": "commented",
      "id": 2400960359,
      "node_id": "IC_kwDOAP4Jqs6PG79n",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2400960359",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T22:59:45Z",
      "updated_at": "2024-10-08T22:59:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "This one comes to my mind, too: https://github.com/bitcoin-core/secp256k1/blob/a88aa9350633c2d2472bace5c290aa291c7f12c9/src/util.h#L253-L254",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2400960359",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14563833473,
      "node_id": "HRFPE_lADOAP4Jqs6SIfqhzwAAAANkEnaB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14563833473",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T23:14:41Z"
    },
    {
      "event": "commented",
      "id": 2400975542,
      "node_id": "IC_kwDOAP4Jqs6PG_q2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2400975542",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T23:16:40Z",
      "updated_at": "2024-10-08T23:16:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This one comes to my mind, too:\r\n> \r\n> https://github.com/bitcoin-core/secp256k1/blob/a88aa9350633c2d2472bace5c290aa291c7f12c9/src/util.h#L253-L254\r\n\r\nAh good catch, missed that (only `grep`ped for `memset` calls). Tackled now as well.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2400975542",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "reviewed",
      "id": 2360104379,
      "node_id": "PRR_kwDOAP4Jqs6MrFW7",
      "url": null,
      "actor": null,
      "commit_id": "05a46b59205df81a006d7b0d190f3123cd1b9a26",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "If you want motivated, you could look at `git grep secp256k1_ge_set_gej.*(`. @sipa's recent comment in the MuSig PR really caught my attention. When I worked on the previous PR, I really didn't consider the possibility that a `gej` could leak secret data.\r\n\r\n----\r\n\r\nI wonder if it makes sense to have the `_finalize` functions in the hash module clear the state automatically. And then have \"unsafe\" funtions like `_finalize_keep` if the callers knows that data is public or if the caller wants to reuse the midstate. It sounds like a neat idea, but I'm not really convinced because it special-cases the hash module somewhat: we'll need to manually clear everything else including scalars, etc... So we have to be careful with this anyway when writing and reviewing code, and perhaps having yet another safety mechanism that works only for the hash module. (This could perhaps be a nice follow-up if we add the same mechanism to more modules, e.g., `ge_set_gej` could clear the gejs, unless you use a `_keep` variant.)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#pullrequestreview-2360104379",
      "submitted_at": "2024-10-10T12:29:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
    },
    {
      "event": "labeled",
      "id": 14590585036,
      "node_id": "LE_lADOAP4Jqs6SIfqhzwAAAANlqqjM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14590585036",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T12:36:18Z",
      "label": {
        "name": "needs-changelog",
        "color": "DBD8F4"
      }
    },
    {
      "event": "commented",
      "id": 2405693607,
      "node_id": "IC_kwDOAP4Jqs6PY_in",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2405693607",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T17:38:47Z",
      "updated_at": "2024-10-10T17:38:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "> If you want motivated, you could look at `git grep secp256k1_ge_set_gej.*(`. @sipa's recent comment in the MuSig PR really caught my attention. When I worked on the previous PR, I really didn't consider the possibility that a `gej` could leak secret data.\r\n\r\nI found the following functions containing _gej instances resulting from point multiplication (`secp256k1_ecmult_{gen,const}`) with secret scalars:\r\n- ECDH module: [`secp256k1_ecdh`](https://github.com/bitcoin-core/secp256k1/blob/a88aa9350633c2d2472bace5c290aa291c7f12c9/src/modules/ecdh/main_impl.h#L54) (`res`, resulting from the ECDH point multiplication; I think this should be cleared not only to avoid leaking the scalar, but even more so as it's a representation of the resulting shared secret)\r\n- MuSig2 module: [`secp256k1_musig_nonce_gen_internal`](https://github.com/bitcoin-core/secp256k1/blob/a88aa9350633c2d2472bace5c290aa291c7f12c9/src/modules/musig/session_impl.h#L450) (public nonce `nonce_ptj` in the for loop)\r\n- Schnorr module: [`secp256k1_schnorrsig_sign_internal`](https://github.com/bitcoin-core/secp256k1/blob/a88aa9350633c2d2472bace5c290aa291c7f12c9/src/modules/schnorrsig/main_impl.h#L170) (nonce commitment `rj`)\r\n- main library: [`secp256k1_ec_pubkey_create_helper`](https://github.com/bitcoin-core/secp256k1/blob/a88aa9350633c2d2472bace5c290aa291c7f12c9/src/secp256k1.c#L597) (public point `pj`)\r\n\r\nTaking care of those could be probably go into an own PR, as its trivial to fix and review and hence has a significantly higher chance to land in the next release than this one? (and having a version where the compiler still might optimize it out seems still much better than not doing it at all)\r\n\r\nInterestingly, the ECDSA signing function [does clear out the nonce commitment](https://github.com/bitcoin-core/secp256k1/blob/a88aa9350633c2d2472bace5c290aa291c7f12c9/src/ecdsa_impl.h#L291) for both the jacobi and affine points (though the latter wouldn't be needed according to https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1790079414).\r\n> \r\n> I wonder if it makes sense to have the `_finalize` functions in the hash module clear the state automatically. And then have \"unsafe\" funtions like `_finalize_keep` if the callers knows that data is public or if the caller wants to reuse the midstate. It sounds like a neat idea, but I'm not really convinced because it special-cases the hash module somewhat: we'll need to manually clear everything else including scalars, etc... So we have to be careful with this anyway when writing and reviewing code, and perhaps having yet another safety mechanism that works only for the hash module. (This could perhaps be a nice follow-up if we add the same mechanism to more modules, e.g., `ge_set_gej` could clear the gejs, unless you use a `_keep` variant.)\r\n\r\nSounds like a good idea to me for a follow-up.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2405693607",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "mentioned",
      "id": 14595113441,
      "node_id": "MEE_lADOAP4Jqs6SIfqhzwAAAANl78Hh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14595113441",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T17:38:49Z"
    },
    {
      "event": "subscribed",
      "id": 14595113457,
      "node_id": "SE_lADOAP4Jqs6SIfqhzwAAAANl78Hx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14595113457",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T17:38:49Z"
    },
    {
      "event": "commented",
      "id": 2406021851,
      "node_id": "IC_kwDOAP4Jqs6PaPrb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2406021851",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T20:55:15Z",
      "updated_at": "2024-10-10T20:56:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Taking care of those could be probably go into an own PR, as its trivial to fix and review and hence has a significantly higher chance to land in the next release than this one? (and having a version where the compiler still might optimize it out seems still much better than not doing it at all)\r\n\r\n\r\nMy guess is that what we do currently is useless on any modern compiler. I admit that I haven't looked at the compiler output, but I'd rather spend the time on resolving the problem.\r\n\r\nI don't think that fixing these additional cases here will make it much more difficult to review the PR. And to be honest, while this is a great for defense in depth, we haven't deeply cared about this so far. It's not the end of the world if we need to wait a few more months. So I think it's good to add these cases to this PR here. \r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2406021851",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14611573190,
      "node_id": "HRFPE_lADOAP4Jqs6SIfqhzwAAAANm6unG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14611573190",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-11T16:15:39Z"
    },
    {
      "event": "commented",
      "id": 2407754497,
      "node_id": "IC_kwDOAP4Jqs6Pg2sB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2407754497",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-11T16:29:59Z",
      "updated_at": "2024-10-11T16:29:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "> My guess is that what we do currently is useless on any modern compiler. I admit that I haven't looked at the compiler output, but I'd rather spend the time on resolving the problem.\r\n> \r\n> I don't think that fixing these additional cases here will make it much more difficult to review the PR. And to be honest, while this is a great for defense in depth, we haven't deeply cared about this so far. It's not the end of the world if we need to wait a few more months. So I think it's good to add these cases to this PR here.\r\n\r\nThanks for the feedback! Makes sense, added an extra commit at the end for the gej clearing after point multiplications, it's only four lines of code anyway. Also went over the necessary hash clearing places and made a few small changes (see https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1797185815).",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2407754497",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "commented",
      "id": 2427358346,
      "node_id": "IC_kwDOAP4Jqs6QroyK",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2427358346",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T17:50:46Z",
      "updated_at": "2024-10-21T17:50:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK c9210784f7300ad8209094b98e865e96e9efe2e6. I have not reviewed this for exhaustiveness (as in, are there more places where clearing is useful/necessary), but the code changes look good.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2427358346",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "reviewed",
      "id": 2383545467,
      "node_id": "PRR_kwDOAP4Jqs6OEgR7",
      "url": null,
      "actor": null,
      "commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#pullrequestreview-2383545467",
      "submitted_at": "2024-10-22T00:56:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
    },
    {
      "event": "commented",
      "id": 2429562469,
      "node_id": "IC_kwDOAP4Jqs6Q0C5l",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2429562469",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T15:13:34Z",
      "updated_at": "2024-10-22T15:13:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "For a first check on whether this PR fulfills its promise, I looked at the generated assembler code of `secp256k1_ec_seckey_verify`, as this function is particularly short and should clear out the secret scalar at the end. The following commands were used to generate the disassembled output:\r\n\r\n```\r\n$ cmake --build build && objdump --no-addresses --no-show-raw-insn --disassemble=secp256k1_ec_seckey_verify ./build/lib/libsecp256k1.so > seckey_verify_disasm.txt\r\n```\r\n\r\n<details>\r\n<summary>compiler output diff of `secp256k1_ec_seckey_verify` (master vs. PR branch)\r\n\r\nrunning on Debian 12 stable (Bookworm) and gcc 12.2.0 on a x86-64 machine</summary>\r\n\r\n```diff\r\n--- master.txt  2024-10-22 16:09:38.985554751 +0200\r\n+++ pr1579.txt  2024-10-22 16:12:37.324112394 +0200\r\n@@ -11,31 +11,38 @@\r\n Disassembly of section .text:\r\n \r\n <secp256k1_ec_seckey_verify>:\r\n-       sub    $0x38,%rsp\r\n+       push   %rbx\r\n+       sub    $0x30,%rsp\r\n        test   %rsi,%rsi\r\n-       je     <secp256k1_ec_seckey_verify+0x48>\r\n+       je     <secp256k1_ec_seckey_verify+0x58>\r\n+       lea    0x10(%rsp),%rbx\r\n        lea    0xc(%rsp),%rdx\r\n-       lea    0x10(%rsp),%rdi\r\n+       pxor   %xmm0,%xmm0\r\n+       mov    %rbx,%rdi\r\n        call   <secp256k1_scalar_set_b32>\r\n        mov    0xc(%rsp),%ecx\r\n        mov    0x10(%rsp),%rax\r\n        or     0x18(%rsp),%rax\r\n        or     0x20(%rsp),%rax\r\n+       movaps %xmm0,0x10(%rsp)\r\n        or     0x28(%rsp),%rax\r\n+       movaps %xmm0,0x20(%rsp)\r\n        setne  %dl\r\n        xor    %eax,%eax\r\n        test   %ecx,%ecx\r\n        sete   %al\r\n-       add    $0x38,%rsp\r\n        and    %edx,%eax\r\n+       add    $0x30,%rsp\r\n+       pop    %rbx\r\n        ret\r\n        nopl   0x0(%rax)\r\n        mov    %rdi,%rax\r\n        mov    0xb0(%rdi),%rsi\r\n-       lea    0x63b9(%rip),%rdi        # <_fini+0x1196>\r\n+       lea    0x6199(%rip),%rdi        # <_fini+0xf46>\r\n        call   *0xa8(%rax)\r\n+       add    $0x30,%rsp\r\n        xor    %eax,%eax\r\n-       add    $0x38,%rsp\r\n+       pop    %rbx\r\n        ret\r\n```\r\n</details>\r\nThere is a little noise in the diff due to different register allocations and jump offsets, but in the middle one can see quite clearly that the memory clearing happens using the 16-byte SSE register xmm0: it is earlier zeroed with a `pxor` instruction and then written with `movaps` instruction twice to memory locations `0x10(%rsp)` and `0x20(%rsp)`, which correspond to the 32-byte `secp256k1_scalar` instance (interestingly, the clearing is interleaved with the `mov`/`or` instructions of the `_scalar_is_zero` check). So this seems to work as expected. Might be interesting to also try it with a variety of other compiler versions (especially newer ones) and different architectures, like arm64.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2429562469",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "reviewed",
      "id": 2385482858,
      "node_id": "PRR_kwDOAP4Jqs6OL5Rq",
      "url": null,
      "actor": null,
      "commit_id": "c9210784f7300ad8209094b98e865e96e9efe2e6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK mod my review comments",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#pullrequestreview-2385482858",
      "submitted_at": "2024-10-22T15:51:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGU3ZDM4NDQ4OGU4NTY1MGNkMmEyOTQ5M2JjNTVmYTVlNjhiZjU5YzM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e7d384488e85650cd2a29493bc55fa5e68bf59c3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e7d384488e85650cd2a29493bc55fa5e68bf59c3",
      "tree": {
        "sha": "93c0591c947e5d3452e35cc91a7066d8853402da",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/93c0591c947e5d3452e35cc91a7066d8853402da"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f0868a9b3d809565d5a6784cd16fc22c76bba63c",
          "sha": "f0868a9b3d809565d5a6784cd16fc22c76bba63c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f0868a9b3d809565d5a6784cd16fc22c76bba63c"
        }
      ],
      "message": "Don't clear secrets in pippenger implementation\n\nThis code is not supposed to handle secret data.",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-22T16:24:57Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-06-06T14:51:33Z"
      },
      "sha": "e7d384488e85650cd2a29493bc55fa5e68bf59c3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14789102684,
      "node_id": "HRFPE_lADOAP4Jqs6SIfqhzwAAAANxf8xc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14789102684",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T16:43:54Z"
    },
    {
      "event": "commented",
      "id": 2429774451,
      "node_id": "IC_kwDOAP4Jqs6Q02pz",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2429774451",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T16:46:17Z",
      "updated_at": "2024-10-22T16:46:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810896825 and rebased on master for easier comparison of branches (since #1553, the output location of the .so file changed from ./build/src to ./build/lib; not being aware of that, I was unintentionally comparing the library file generated from master with itself for quite some time, wondering why the PR doesn't change anything 🤦‍♂️ ).",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2429774451",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "commented",
      "id": 2438190688,
      "node_id": "IC_kwDOAP4Jqs6RU9Zg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2438190688",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T15:55:07Z",
      "updated_at": "2024-10-25T15:57:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding the [open question](https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810882446) of whether or not to include the _CHECKMEM_UNDEFINE macro in secp256k1_memclear in non-verify binaries or not, I compared the valgrind-builds on the pr branch with the macro commented out vs. with the macro included. This is what the assembler diff looks like (created for the same function and using the same methodology as in https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2429562469):\r\n\r\n<details>\r\n<summary>disassemble of secp256k1_ec_seckey_verify, without and with the SECP256K1_CHECKMEM_UNDEFINE in a valgrind build</summary>\r\n\r\n```diff\r\n--- pr1579_without_checkmem_undefine.txt\t2024-10-25 17:34:50.639344958 +0200\r\n+++ pr1579_with_checkmem_undefine.txt\t2024-10-25 17:33:35.632626088 +0200\r\n@@ -11,38 +11,59 @@\r\n Disassembly of section .text:\r\n \r\n <secp256k1_ec_seckey_verify>:\r\n+\tpush   %rbp\r\n \tpush   %rbx\r\n-\tsub    $0x30,%rsp\r\n+\tsub    $0x68,%rsp\r\n \ttest   %rsi,%rsi\r\n-\tje     <secp256k1_ec_seckey_verify+0x58>\r\n+\tje     <secp256k1_ec_seckey_verify+0xb8>\r\n+\tlea    0x30(%rsp),%rbp\r\n \tlea    0x10(%rsp),%rbx\r\n-\tlea    0xc(%rsp),%rdx\r\n \tpxor   %xmm0,%xmm0\r\n+\tmov    %rbp,%rdx\r\n \tmov    %rbx,%rdi\r\n \tcall   <secp256k1_scalar_set_b32>\r\n-\tmov    0xc(%rsp),%ecx\r\n-\tmov    0x10(%rsp),%rax\r\n-\tor     0x18(%rsp),%rax\r\n-\tor     0x20(%rsp),%rax\r\n+\tmov    0x10(%rsp),%rdx\r\n+\tor     0x18(%rsp),%rdx\r\n \tmovaps %xmm0,0x10(%rsp)\r\n-\tor     0x28(%rsp),%rax\r\n+\tor     0x20(%rsp),%rdx\r\n+\tor     0x28(%rsp),%rdx\r\n \tmovaps %xmm0,0x20(%rsp)\r\n-\tsetne  %dl\r\n-\txor    %eax,%eax\r\n-\ttest   %ecx,%ecx\r\n-\tsete   %al\r\n-\tand    %edx,%eax\r\n-\tadd    $0x30,%rsp\r\n+\tmov    0x30(%rsp),%edx\r\n+\tsetne  %al\r\n+\txor    %ecx,%ecx\r\n+\ttest   %edx,%edx\r\n+\tsete   %cl\r\n+\tand    %eax,%ecx\r\n+\tmovq   $0x4d430001,0x30(%rsp)\r\n+\txor    %edx,%edx\r\n+\tmov    %rbp,%rax\r\n+\tmov    %rbx,0x38(%rsp)\r\n+\tmovq   $0x20,0x40(%rsp)\r\n+\tmovq   $0x0,0x48(%rsp)\r\n+\tmovq   $0x0,0x50(%rsp)\r\n+\tmovq   $0x0,0x58(%rsp)\r\n+\trol    $0x3,%rdi\r\n+\trol    $0xd,%rdi\r\n+\trol    $0x3d,%rdi\r\n+\trol    $0x33,%rdi\r\n+\txchg   %rbx,%rbx\r\n+\tmov    %rdx,0x8(%rsp)\r\n+\tmov    0x8(%rsp),%rax\r\n+\tadd    $0x68,%rsp\r\n+\tmov    %ecx,%eax\r\n \tpop    %rbx\r\n+\tpop    %rbp\r\n \tret\r\n-\tnopl   0x0(%rax)\r\n+\tnopl   0x0(%rax,%rax,1)\r\n \tmov    %rdi,%rax\r\n \tmov    0xb0(%rdi),%rsi\r\n-\tlea    0x5d09(%rip),%rdi        # <_fini+0x766>\r\n+\tlea    0x7b99(%rip),%rdi        # <_fini+0x14e6>\r\n \tcall   *0xa8(%rax)\r\n-\tadd    $0x30,%rsp\r\n-\txor    %eax,%eax\r\n+\tadd    $0x68,%rsp\r\n+\txor    %ecx,%ecx\r\n+\tmov    %ecx,%eax\r\n \tpop    %rbx\r\n+\tpop    %rbp\r\n \tret\r\n \r\n Disassembly of section .fini:\r\n```\r\n</details>\r\n\r\nSeems like at least in this function, it causes at least 15 extra (no-op like) instructions to be emitted. Considering that previously, these valgrind placeholders were not reachable (unless explicitly specified in the context object) and these extra instructions are added at multiple places spread all over the code, it might be better to not include them in the release binaries? OTOH, \"ctime-tests should run with the same binary as in the release\" then doesn't hold anymore. So really not sure what's better 🤔 ",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2438190688",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "commented",
      "id": 2438267092,
      "node_id": "IC_kwDOAP4Jqs6RVQDU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2438267092",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T16:28:21Z",
      "updated_at": "2024-10-25T16:28:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> OTOH, \"ctime-tests should run with the same binary as in the release\" then doesn't hold anymore.\r\n\r\nI don't think so. If we wrap the new  _CHECKMEM_UNDEFINE **within _memclear** in #ifdef VERIFY, I don't see how this affects the ctimetests at all.  We'd still include the _CHECKMEM_UNDEFINE in declassify in the release builds. And the ctimetests executable will still link against the (release) binary of the library. (Note that the ctimetests test executable uses the public API, it's really just an application that consumes the library by linking against it, as opposed to the other test binaries, which essentially #include all the library code.)    \r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2438267092",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDFjMDgxMjYyMjI3N2I4NTEyM2M3NTFiNzZmNjhmMTBmMGY5M2IzYzA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1c0812622277b85123c751b76f68f10f0f93b3c0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1c0812622277b85123c751b76f68f10f0f93b3c0",
      "tree": {
        "sha": "5919d34bd952acfc7473981062ec62c2ab88bb48",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/5919d34bd952acfc7473981062ec62c2ab88bb48"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e7d384488e85650cd2a29493bc55fa5e68bf59c3",
          "sha": "e7d384488e85650cd2a29493bc55fa5e68bf59c3",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e7d384488e85650cd2a29493bc55fa5e68bf59c3"
        }
      ],
      "message": "Add secp256k1_memclear() for clearing secret data\n\nWe rely on memset() and an __asm__ memory barrier where it's available or\non SecureZeroMemory() on Windows. The fallback implementation uses a\nvolatile function pointer to memset which the compiler is not clever\nenough to optimize.",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:36Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-06-06T19:22:28Z"
      },
      "sha": "1c0812622277b85123c751b76f68f10f0f93b3c0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGQ3OWE2Y2NkNDNhZTE2ODEyODBlNWUyN2Q5Y2QxODEyODViZjg1NDA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d79a6ccd43ae1681280e5e27d9cd181285bf8540",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d79a6ccd43ae1681280e5e27d9cd181285bf8540",
      "tree": {
        "sha": "eafdfcd8814c574083ca5283ee0b85eb4b608977",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/eafdfcd8814c574083ca5283ee0b85eb4b608977"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1c0812622277b85123c751b76f68f10f0f93b3c0",
          "sha": "1c0812622277b85123c751b76f68f10f0f93b3c0",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1c0812622277b85123c751b76f68f10f0f93b3c0"
        }
      ],
      "message": "Separate secp256k1_fe_set_int( . , 0 ) from secp256k1_fe_clear()\n\nThere are two uses of the secp256k1_fe_clear() function that are now separated\ninto these two functions in order to reflect the intent:\n\n1) initializing the memory prior to being used -> converted to fe_set_int( . , 0 )\n2) zeroing the memory after being used such that no sensitive data remains. ->\n    remains as fe_clear()\n\nIn the latter case, 'magnitude' and 'normalized' need to be overwritten when\nVERIFY is enabled.\n\nCo-Authored-By: isle2983 <isle2983@yahoo.com>",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:48Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-06-12T14:05:06Z"
      },
      "sha": "d79a6ccd43ae1681280e5e27d9cd181285bf8540"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGUzNDk3YmJmMDAxZjhlMDZkY2MyMWQyN2ZlZDE3M2JlNzdlZjcxMzY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e3497bbf001f8e06dcc21d27fed173be77ef7136",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e3497bbf001f8e06dcc21d27fed173be77ef7136",
      "tree": {
        "sha": "ec78b3d572cf92b304183dc17d4485887879671f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ec78b3d572cf92b304183dc17d4485887879671f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d79a6ccd43ae1681280e5e27d9cd181285bf8540",
          "sha": "d79a6ccd43ae1681280e5e27d9cd181285bf8540",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d79a6ccd43ae1681280e5e27d9cd181285bf8540"
        }
      ],
      "message": "Separate between clearing memory and setting to zero in tests\n\nCo-Authored-By: isle2983 <isle2983@yahoo.com>\nCo-Authored-By: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:48Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-06-08T09:56:15Z"
      },
      "sha": "e3497bbf001f8e06dcc21d27fed173be77ef7136"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDliYjM2OGQxNDY2ODNhYTliNDQ2NDVmMWI3NWEwZWQyMzBkZjk3ZTk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9bb368d146683aa9b44645f1b75a0ed230df97e9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9bb368d146683aa9b44645f1b75a0ed230df97e9",
      "tree": {
        "sha": "4a3dd501b8b846358afb34b93c609c72bc3c3c2c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4a3dd501b8b846358afb34b93c609c72bc3c3c2c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e3497bbf001f8e06dcc21d27fed173be77ef7136",
          "sha": "e3497bbf001f8e06dcc21d27fed173be77ef7136",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e3497bbf001f8e06dcc21d27fed173be77ef7136"
        }
      ],
      "message": "Use secp256k1_memclear() to clear stack memory instead of memset()\n\nAll of the invocations of secp256k1_memclear() operate on stack\nmemory and happen after the function is done with the memory object.\nThis commit replaces existing memset() invocations and also adds\nsecp256k1_memclear() to code locations where clearing was missing;\nthere is no guarantee that this commit covers all code locations\nwhere clearing is necessary.\n\nCo-Authored-By: isle2983 <isle2983@yahoo.com>",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:48Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-06-08T11:54:14Z"
      },
      "sha": "9bb368d146683aa9b44645f1b75a0ed230df97e9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDk3YzU3ZjQyYmE4YWNhNTE0NzlkMjM4NzRiNzYwOGI5NTAwYTViYzk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/97c57f42ba8aca51479d23874b7608b9500a5bc9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/97c57f42ba8aca51479d23874b7608b9500a5bc9",
      "tree": {
        "sha": "2c330605543ee46dedf29cbba1dead54ffe41a68",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/2c330605543ee46dedf29cbba1dead54ffe41a68"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9bb368d146683aa9b44645f1b75a0ed230df97e9",
          "sha": "9bb368d146683aa9b44645f1b75a0ed230df97e9",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9bb368d146683aa9b44645f1b75a0ed230df97e9"
        }
      ],
      "message": "Implement various _clear() functions with secp256k1_memclear()",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:48Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-06-08T09:29:49Z"
      },
      "sha": "97c57f42ba8aca51479d23874b7608b9500a5bc9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDk5Y2M5ZmQ2ZDAxZGIxMTY1ZDA4Yjg4ZDQ1YzBkZTg1YTU5YjcwY2Y",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/99cc9fd6d01db1165d08b88d45c0de85a59b70cf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/99cc9fd6d01db1165d08b88d45c0de85a59b70cf",
      "tree": {
        "sha": "dcb0563fdf7003e29d23c75f1ca1dcdfe7631764",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/dcb0563fdf7003e29d23c75f1ca1dcdfe7631764"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/97c57f42ba8aca51479d23874b7608b9500a5bc9",
          "sha": "97c57f42ba8aca51479d23874b7608b9500a5bc9",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/97c57f42ba8aca51479d23874b7608b9500a5bc9"
        }
      ],
      "message": "Don't rely on memset to set signed integers to 0",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:48Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-06-08T11:21:52Z"
      },
      "sha": "99cc9fd6d01db1165d08b88d45c0de85a59b70cf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDM0OWU2YWI5MTZiM2RkMTA2ZmVhOWI1NmRhY2VjMDY1ZGY1ZmE0NTc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/349e6ab916b3dd106fea9b56dacec065df5fa457",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/349e6ab916b3dd106fea9b56dacec065df5fa457",
      "tree": {
        "sha": "3f91c39ff35450cb649a408e49c6c3b5172d414d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3f91c39ff35450cb649a408e49c6c3b5172d414d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/99cc9fd6d01db1165d08b88d45c0de85a59b70cf",
          "sha": "99cc9fd6d01db1165d08b88d45c0de85a59b70cf",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/99cc9fd6d01db1165d08b88d45c0de85a59b70cf"
        }
      ],
      "message": "Introduce separate _clear functions for hash module\n\nThis gives the caller more control about whether the state should\nbe cleaned (= should be considered secret). Moreover, it gives the\ncaller the possibility to clean a hash struct without finalizing it.",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:48Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2020-04-27T16:55:36Z"
      },
      "sha": "349e6ab916b3dd106fea9b56dacec065df5fa457"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDc2NWVmNTMzMzVhM2UwZmFmZGFmZTFlNzU3ZjZmZTA3ODlmMjc5N2Y",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "tree": {
        "sha": "85b9167f19763ca15aa37508f8b5209215ca8b2c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/85b9167f19763ca15aa37508f8b5209215ca8b2c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/349e6ab916b3dd106fea9b56dacec065df5fa457",
          "sha": "349e6ab916b3dd106fea9b56dacec065df5fa457",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/349e6ab916b3dd106fea9b56dacec065df5fa457"
        }
      ],
      "message": "Clear _gej instances after point multiplication to avoid potential leaks\n\nQuoting sipa (see https://github.com/bitcoin-core/secp256k1/pull/1479#discussion_r1790079414):\n\"When performing an EC multiplication A = aG for secret a, the resulting\n _affine_ coordinates of A are presumed to not leak information about a (ECDLP),\n  but the same is not necessarily true for the Jacobian coordinates that come\n  out of our multiplication algorithm.\"\n\nFor the ECDH point multiplication result, the result in Jacobi coordinates should be\ncleared not only to avoid leaking the scalar, but even more so as it's a representation\nof the resulting shared secret.",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-25T16:44:48Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-10-11T16:00:59Z"
      },
      "sha": "765ef53335a3e0fafdafe1e757f6fe0789f2797f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14880022451,
      "node_id": "HRFPE_lADOAP4Jqs6SIfqhzwAAAAN26x-z",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14880022451",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T16:45:41Z"
    },
    {
      "event": "commented",
      "id": 2438339067,
      "node_id": "IC_kwDOAP4Jqs6RVhn7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2438339067",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T16:57:23Z",
      "updated_at": "2024-10-25T16:57:23Z",
      "author_association": "CONTRIBUTOR",
      "body": ">> OTOH, \"ctime-tests should run with the same binary as in the release\" then doesn't hold anymore.\r\n>\r\n> I don't think so. If we wrap the new _CHECKMEM_UNDEFINE within _memclear in #ifdef VERIFY, I don't see how this affects the ctimetests at all. We'd still include the _CHECKMEM_UNDEFINE in declassify in the release builds. And the ctimetests executable will still link against the (release) binary of the library. (Note that the ctimetests test executable uses the public API, it's really just an application that consumes the library by linking against it, as opposed to the other test binaries, which essentially #include all the library code.)\r\n\r\nOh right, for some reason I assumed that the ctimetests binary is also compiled with VERIFY defined, which is of course nonsensical. Added the \"#ifdef VERIFY\" block around _CHECKMEM_UNDEFINE now, as it looks we have consensus on doing that (https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1817025668).",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2438339067",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "reviewed",
      "id": 2410453122,
      "node_id": "PRR_kwDOAP4Jqs6PrJiC",
      "url": null,
      "actor": null,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#pullrequestreview-2410453122",
      "submitted_at": "2024-11-01T16:38:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
    },
    {
      "event": "commented",
      "id": 2454984246,
      "node_id": "IC_kwDOAP4Jqs6SVBY2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2454984246",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T15:15:59Z",
      "updated_at": "2024-11-04T15:15:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#issuecomment-2454984246",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1579"
    },
    {
      "event": "merged",
      "id": 15106040446,
      "node_id": "ME_lADOAP4Jqs6SIfqhzwAAAAOEY-J-",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/15106040446",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b161bffb8bfb2120495434bbc40eda0d9fbb8afb",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/b161bffb8bfb2120495434bbc40eda0d9fbb8afb",
      "created_at": "2024-11-04T15:35:02Z"
    },
    {
      "event": "closed",
      "id": 15106040506,
      "node_id": "CE_lADOAP4Jqs6SIfqhzwAAAAOEY-K6",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/15106040506",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T15:35:02Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 15106335202,
      "node_id": "HRDE_lADOAP4Jqs6SIfqhzwAAAAOEaGHi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/15106335202",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T15:53:31Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1795297363",
      "pull_request_review_id": 2360104379,
      "id": 1795297363,
      "node_id": "PRRC_kwDOAP4Jqs5rAhBT",
      "diff_hunk": "@@ -8,11 +8,17 @@\n #define SECP256K1_UTIL_H\n \n #include \"../include/secp256k1.h\"\n+#include \"checkmem.h\"\n \n+#include <string.h>\n #include <stdlib.h>\n #include <stdint.h>\n #include <stdio.h>\n #include <limits.h>\n+#if defined(_MSC_VER)\n+// For SecureZeroMemory",
      "path": "src/util.h",
      "position": null,
      "original_position": 12,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "4c9542040e9aee6892345fd25d8342c53053ab67",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `//`-style comments not allowed in C89. Just for consistency, it appears that MSVC doesn't care...",
      "created_at": "2024-10-10T12:05:41Z",
      "updated_at": "2024-10-10T12:29:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1795297363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1795297363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1795322471",
      "pull_request_review_id": 2360104379,
      "id": 1795322471,
      "node_id": "PRRC_kwDOAP4Jqs5rAnJn",
      "diff_hunk": "@@ -494,11 +494,13 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n        buffer_append(keydata, &offset, algo16, 16);\n    }\n    secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, offset);\n-   secp256k1_memclear(keydata, sizeof(keydata));\n    for (i = 0; i <= counter; i++) {\n        secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n    }\n    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+\n+   secp256k1_memclear(keydata, sizeof(keydata));\n+   secp256k1_rfc6979_hmac_sha256_clear(&rng);",
      "path": "src/secp256k1.c",
      "position": 11,
      "original_position": 11,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "05a46b59205df81a006d7b0d190f3123cd1b9a26",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should add similar calls in other code locations where we derive secrets via hash functions, e.g., in the schnorrsig and musig modules (and ellswift? now sure). The previous PR predates even the schnorrsig module, see the commit message.",
      "created_at": "2024-10-10T12:23:14Z",
      "updated_at": "2024-10-10T12:29:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1795322471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1795322471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1797175344",
      "pull_request_review_id": 2363165301,
      "id": 1797175344,
      "node_id": "PRRC_kwDOAP4Jqs5rHrgw",
      "diff_hunk": "@@ -8,11 +8,17 @@\n #define SECP256K1_UTIL_H\n \n #include \"../include/secp256k1.h\"\n+#include \"checkmem.h\"\n \n+#include <string.h>\n #include <stdlib.h>\n #include <stdint.h>\n #include <stdio.h>\n #include <limits.h>\n+#if defined(_MSC_VER)\n+// For SecureZeroMemory",
      "path": "src/util.h",
      "position": null,
      "original_position": 12,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "4c9542040e9aee6892345fd25d8342c53053ab67",
      "in_reply_to_id": 1795297363,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-10-11T16:15:57Z",
      "updated_at": "2024-10-11T16:15:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1797175344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1797175344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1797185815",
      "pull_request_review_id": 2363181694,
      "id": 1797185815,
      "node_id": "PRRC_kwDOAP4Jqs5rHuEX",
      "diff_hunk": "@@ -494,11 +494,13 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n        buffer_append(keydata, &offset, algo16, 16);\n    }\n    secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, offset);\n-   secp256k1_memclear(keydata, sizeof(keydata));\n    for (i = 0; i <= counter; i++) {\n        secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n    }\n    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+\n+   secp256k1_memclear(keydata, sizeof(keydata));\n+   secp256k1_rfc6979_hmac_sha256_clear(&rng);",
      "path": "src/secp256k1.c",
      "position": 11,
      "original_position": 11,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "05a46b59205df81a006d7b0d190f3123cd1b9a26",
      "in_reply_to_id": 1795322471,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> We should add similar calls in other code locations where we derive secrets via hash functions, e.g., in the schnorrsig and musig modules (and ellswift? now sure).\r\n\r\nAs far as I could see by `grep`ing for `_finalize`, all places where we derive secrets via hashing had corresponding hash object clearing calls already (probably I did that already in the first version of this PR, though I honestly don't remember). What I found though was that it was unnecessarily called in the schnorrsig challenge function, so I removed it again, as there are no secrets involved. For the musig module, the _memclear calls were replaced by _sha256_clear calls.\r\n\r\nOne place where I added a hash clearing call was in the public API function `secp256k1_tagged_sha256`. We don't use that internally, but it seems to make sense to clear the hash object, considering that we don't know if the user passes in secret data or not.\r\n\r\n> The previous PR predates even the schnorrsig module, see the commit message.\r\n\r\nRight, removed that part of the commit message.",
      "created_at": "2024-10-11T16:25:47Z",
      "updated_at": "2024-10-11T16:25:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1797185815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1797185815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1809704060",
      "pull_request_review_id": 2383545467,
      "id": 1809704060,
      "node_id": "PRRC_kwDOAP4Jqs5r3eR8",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, it seems that in production code, we usually don't call any of the `_CHECKMEM_{DEFINE,UNDEFINE}` macros. There is one reachable code-path in `secp256k1_declassify`, but it would only hit if the context was created with the `SECP256K1_CONTEXT_DECLASSIFY` flag, where the API documentation explicitly says \"Do not use\". Should that _CHECKMEM_UNDEFINE call here be conditional by a preprocessor #if(def) or something alike, so it only applies to tests and can't slow down (and bloat) release builds?\r\n\r\nI noticed that while looking at the disassembly of the .so file and wondering why there was so much extra code after the memory clearing, until I realized this must be valgrind's `VALGRIND_MAKE_MEM_UNDEFINED`. I'm building now explicitly with `-DSECP256K1_VALGRIND=OFF -DSECP256K1_BUILD_CTIME_TESTS=OFF` to avoid that.",
      "created_at": "2024-10-22T00:56:59Z",
      "updated_at": "2024-10-22T00:56:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1809704060",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1809704060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810513873",
      "pull_request_review_id": 2384851841,
      "id": 1810513873,
      "node_id": "PRRC_kwDOAP4Jqs5r6j_R",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, great point! The reason why `secp256k1_declassify` uses a run-time flag (instead of compile-time flag) is that we want to run the constant-time tests on the real binary.\r\n\r\nI don't know what the performance impact of these additional instructions is, but I doubt that having a compile-time flag is a concern in this case. That means that we could just wrap the `SECP256K1_CHECKMEM_UNDEFINE` in an `#ifdef VERIFY`. @sipa What do you think?",
      "created_at": "2024-10-22T11:06:04Z",
      "updated_at": "2024-10-22T11:06:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810513873",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810513873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810790995",
      "pull_request_review_id": 2385309610,
      "id": 1810790995,
      "node_id": "PRRC_kwDOAP4Jqs5r7npT",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the reasoning is that we want the release binaries to be as close as possible to what we actually test in the ctime test, but disable the effect at runtime using `SECP256K1_CONTEXT_DECLASSIFY` to avoid a performance impact.\r\n\r\nIt wouldn't surprise me that that is overkill; the conditional to determine whether or not to declassify operations at runtime may have a higher cost than actually executing the nop instructions that declassification actually correspond to when not running instrumented by valgrind.",
      "created_at": "2024-10-22T14:00:58Z",
      "updated_at": "2024-10-22T14:00:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810790995",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810790995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810882446",
      "pull_request_review_id": 2385458033,
      "id": 1810882446,
      "node_id": "PRRC_kwDOAP4Jqs5r79-O",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, sorry, I think we're talking past each other. My suggestion, for which I'd like to have your opinion on, is to wrap `SECP256K1_CHECKMEM_UNDEFINE` in an `#ifdef VERIFY` block **here in this particular case of clearing memory**, i.e., inside `secp256k1_memclear` (and not in `secp256k1_declassify`.  Do you think that's a reasonable thing to do?\r\n\r\n---\r\nBut regarding what you said:\r\n\r\n> I think the reasoning is that we want the release binaries to be as close as possible to what we actually test in the ctime test, but disable the effect at runtime using `SECP256K1_CONTEXT_DECLASSIFY` to avoid a performance impact.\r\n\r\nYes, I agree. Perhaps an additional reason is to avoid any shenanigans that the valgrind syscalls may have. They should be noops, but it's certainly a bit safer not to run them at all. \r\n\r\n> It wouldn't surprise me that that is overkill; the conditional to determine whether or not to declassify operations at runtime may have a higher cost than actually executing the nop instructions that declassification actually correspond to when not running instrumented by valgrind.\r\n\r\nI can imagine that the overhead of the noops is negligible, but at least checking the conditional should be negligible as well because we use `EXCEPT` to help the compiler predict the branch:\r\nhttps://github.com/bitcoin-core/secp256k1/blob/68b55209f1ba3e6c0417789598f5f75649e9c14c/src/secp256k1.c#L236-L238\r\n\r\n\r\n",
      "created_at": "2024-10-22T14:49:35Z",
      "updated_at": "2024-10-22T14:49:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810882446",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810882446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810896825",
      "pull_request_review_id": 2385482858,
      "id": 1810896825,
      "node_id": "PRRC_kwDOAP4Jqs5r8Be5",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is",
      "path": "src/util.h",
      "position": null,
      "original_position": 34,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/used/is used/\r\n\r\nApparently that had been fixed in Core:\r\nhttps://github.com/bitcoin/bitcoin/blob/28ce159bc327e6dfec34077ff2e379b23a95db65/src/support/cleanse.cpp#L24",
      "created_at": "2024-10-22T14:57:13Z",
      "updated_at": "2024-10-22T15:51:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810896825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810896825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810962521",
      "pull_request_review_id": 2385482858,
      "id": 1810962521,
      "node_id": "PRRC_kwDOAP4Jqs5r8RhZ",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);",
      "path": "src/util.h",
      "position": 26,
      "original_position": 26,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I looked at the same code in Core again, and found this PR, and commented there: https://github.com/bitcoin/bitcoin/pull/26950#issuecomment-2429613882",
      "created_at": "2024-10-22T15:34:44Z",
      "updated_at": "2024-10-22T15:51:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810962521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810962521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": 232,
      "original_start_line": 232,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810990006",
      "pull_request_review_id": 2385482858,
      "id": 1810990006,
      "node_id": "PRRC_kwDOAP4Jqs5r8YO2",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);",
      "path": "src/util.h",
      "position": 43,
      "original_position": 43,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "c9210784f7300ad8209094b98e865e96e9efe2e6",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've tested this locally, but it would be nice to see a full CI run where this branch is forced (e.g., via `#if 0` / `#elif 0`) ",
      "created_at": "2024-10-22T15:50:50Z",
      "updated_at": "2024-10-22T15:51:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1810990006",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1810990006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": 249,
      "original_start_line": 249,
      "start_side": "RIGHT",
      "line": 251,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811026255",
      "pull_request_review_id": 2385699276,
      "id": 1811026255,
      "node_id": "PRRC_kwDOAP4Jqs5r8hFP",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What bothered me in general (independent on how lightweight the code generated by the valgrind macros might be) is that when users build with the default CMake settings, they could currently end up with different release binaries, depending on whether valgrind is installed or not. Unrelated to this PR, but maybe the SECP256K1_VALGRIND build setting should only be auto-detected in the \"dev-mode\" preset, and OFF by default? (I only looked at the CMake build, don't know if the valgrind setting is also auto-detected on autotools).",
      "created_at": "2024-10-22T16:15:08Z",
      "updated_at": "2024-10-22T16:15:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1811026255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811026255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811066967",
      "pull_request_review_id": 2385769023,
      "id": 1811066967,
      "node_id": "PRRC_kwDOAP4Jqs5r8rBX",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is",
      "path": "src/util.h",
      "position": null,
      "original_position": 34,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1810896825,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed.",
      "created_at": "2024-10-22T16:44:10Z",
      "updated_at": "2024-10-22T16:44:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1811066967",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811066967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811068695",
      "pull_request_review_id": 2385771832,
      "id": 1811068695,
      "node_id": "PRRC_kwDOAP4Jqs5r8rcX",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);",
      "path": "src/util.h",
      "position": 43,
      "original_position": 43,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "c9210784f7300ad8209094b98e865e96e9efe2e6",
      "in_reply_to_id": 1810990006,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Opened #1622 for that.",
      "created_at": "2024-10-22T16:45:34Z",
      "updated_at": "2024-10-22T16:45:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1811068695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811068695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": 249,
      "original_start_line": 249,
      "start_side": "RIGHT",
      "line": 251,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811070521",
      "pull_request_review_id": 2385774958,
      "id": 1811070521,
      "node_id": "PRRC_kwDOAP4Jqs5r8r45",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);",
      "path": "src/util.h",
      "position": 26,
      "original_position": 26,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1810962521,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting. I left it as-is for now, happy to adapt once there is clarity that the variant in Bitcoin Core is preferred or needed.",
      "created_at": "2024-10-22T16:46:58Z",
      "updated_at": "2024-10-22T16:46:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1811070521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811070521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": 232,
      "original_start_line": 232,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811334286",
      "pull_request_review_id": 2386216715,
      "id": 1811334286,
      "node_id": "PRRC_kwDOAP4Jqs5r9sSO",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see. That's a valid point, which has been brought up before, see https://github.com/bitcoin-core/secp256k1/pull/813#issuecomment-691696004. (This thread is also very helpful to understand why we have run-time flag etc.) The conclusion was that the benefits outweigh the drawback that the build outputs depends on the availability of valgrind, but yeah, there's no perfect solution here. And yes, it's also auto-detected in autotools.",
      "created_at": "2024-10-22T20:21:14Z",
      "updated_at": "2024-10-22T20:21:14Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1811334286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1811334286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1816758185",
      "pull_request_review_id": 2395416531,
      "id": 1816758185,
      "node_id": "PRRC_kwDOAP4Jqs5sSYep",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);",
      "path": "src/util.h",
      "position": 26,
      "original_position": 26,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1810962521,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Everything else being equal, keeping the code in sync with Core is nice, but as I said there, I have a slight preference to stick to the current `#if defined(_MSC_VER)` because we have no OS-specific macros anywhere else in the library (ignoring the examples). See also https://github.com/bitcoin-core/secp256k1/pull/1625.",
      "created_at": "2024-10-25T14:08:24Z",
      "updated_at": "2024-10-25T14:08:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1816758185",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1816758185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": 232,
      "original_start_line": 232,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1817011113",
      "pull_request_review_id": 2395814928,
      "id": 1817011113,
      "node_id": "PRRC_kwDOAP4Jqs5sTWOp",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see, so the idea is to have\r\n\r\n```c\r\n...\r\n#ifndef VERIFY\r\n     SECP256K1_CHECKMEM_UNDEFINE(ptr, len);\r\n#endif\r\n}\r\n```\r\n\r\nin `secp256k1_memclear()`?\r\n\r\nThat would mean `tests_noverify` wouldn't detect violations of use-after-clear, nor would applications linking against the production library when running in valgrind. The upside would be that the production library definitely does not have its behavior affected by being compiled with valgrind present.\r\n\r\n\r\n",
      "created_at": "2024-10-25T16:30:12Z",
      "updated_at": "2024-10-25T16:30:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1817011113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1817011113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1817017486",
      "pull_request_review_id": 2395828362,
      "id": 1817017486,
      "node_id": "PRRC_kwDOAP4Jqs5sTXyO",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed. \r\n\r\n> That would mean `tests_noverify` wouldn't detect violations of use-after-clear\r\n\r\nFwiw, I had this downside in mind, and I don't think it's a big deal because we still have the normal tests.\r\n\r\n> nor would applications linking against the production library when running in valgrind.\r\n\r\nOkay, I had not considered this one... I still think that's acceptable, but yeah, it's a good point... \r\n",
      "created_at": "2024-10-25T16:35:10Z",
      "updated_at": "2024-10-25T16:35:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1817017486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1817017486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1817025668",
      "pull_request_review_id": 2395843177,
      "id": 1817025668,
      "node_id": "PRRC_kwDOAP4Jqs5sTZyE",
      "diff_hunk": "@@ -221,6 +227,32 @@ static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {\n     }\n }\n \n+/* Cleanses memory to prevent leaking sensitive info. Won't be optimized out. */\n+static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {\n+#if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n+    SecureZeroMemory(ptr, len);\n+#elif defined(__GNUC__)\n+    /* We use a memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method used in memzero_explicit() the Linux kernel, too. Its advantage is that it is\n+     * pretty efficient, because the compiler can still implement the memset() efficently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n+    memset(ptr, 0, len);\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#else\n+    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;\n+    volatile_memset(ptr, 0, len);\n+#endif\n+    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);",
      "path": "src/util.h",
      "position": 46,
      "original_position": 45,
      "commit_id": "765ef53335a3e0fafdafe1e757f6fe0789f2797f",
      "original_commit_id": "767ac092970d8e8aea56c5a962ea4c719cb8c8a2",
      "in_reply_to_id": 1809704060,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ACK. I guess it makes sense that if the primary goal is making sure no runtime impact for production code, this should be guarded by a compile-time check, as the runtime check isn't available here (being just for ctime testing).",
      "created_at": "2024-10-25T16:40:04Z",
      "updated_at": "2024-10-25T16:40:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1579#discussion_r1817025668",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1817025668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    }
  ]
}