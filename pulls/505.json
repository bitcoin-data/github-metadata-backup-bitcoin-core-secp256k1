{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505",
    "id": 165797453,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTY1Nzk3NDUz",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/505.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/505.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/505",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/505/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/c5a4486d7fed13a8ada5009b242cd93be52c85be",
    "number": 505,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "WIP: Add aggsig example code",
    "user": {
      "login": "jonasnick",
      "id": 2582071,
      "node_id": "MDQ6VXNlcjI1ODIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasnick",
      "html_url": "https://github.com/jonasnick",
      "followers_url": "https://api.github.com/users/jonasnick/followers",
      "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasnick/orgs",
      "repos_url": "https://api.github.com/users/jonasnick/repos",
      "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonasnick/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Based on https://github.com/bitcoin-core/secp256k1/pull/461 + some things I suggested for that PR.\r\n\r\nI think it'd be a good idea to have some example code to show how to use the aggsig module. For example, the seed of the nonce RNG could be misused and it's not all that intuitive how a scratch space is used. This PR addresses this by adding an `aggsig.c` file  into an `examples/` directory and building it as `example_aggsig` (it's also run as part of `make check`).\r\n\r\nSince https://github.com/bitcoin-core/secp256k1/pull/461 does not allow for multi party signing at the moment, `aggsig.c` demonstrates single user signing and verification for now.",
    "labels": [],
    "created_at": "2018-01-29T19:37:05Z",
    "updated_at": "2019-07-30T15:13:57Z",
    "closed_at": "2019-07-30T15:13:57Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "3f9f18ff973b70d97fcdb7380ae3d7e0dab779ab",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "jonasnick:aggsig-module-example",
      "ref": "aggsig-module-example",
      "sha": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 57937974,
        "node_id": "MDEwOlJlcG9zaXRvcnk1NzkzNzk3NA==",
        "name": "secp256k1",
        "full_name": "jonasnick/secp256k1",
        "owner": {
          "login": "jonasnick",
          "id": 2582071,
          "node_id": "MDQ6VXNlcjI1ODIwNzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jonasnick",
          "html_url": "https://github.com/jonasnick",
          "followers_url": "https://api.github.com/users/jonasnick/followers",
          "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
          "organizations_url": "https://api.github.com/users/jonasnick/orgs",
          "repos_url": "https://api.github.com/users/jonasnick/repos",
          "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jonasnick/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jonasnick/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/jonasnick/secp256k1",
        "archive_url": "https://api.github.com/repos/jonasnick/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jonasnick/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jonasnick/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jonasnick/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jonasnick/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jonasnick/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jonasnick/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jonasnick/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jonasnick/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/jonasnick/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/jonasnick/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/jonasnick/secp256k1/events",
        "forks_url": "https://api.github.com/repos/jonasnick/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/jonasnick/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jonasnick/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jonasnick/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jonasnick/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jonasnick/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jonasnick/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jonasnick/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/jonasnick/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/jonasnick/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jonasnick/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jonasnick/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jonasnick/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:jonasnick/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/jonasnick/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/jonasnick/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jonasnick/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/jonasnick/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/jonasnick/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/jonasnick/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/jonasnick/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jonasnick/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/jonasnick/secp256k1/hooks",
        "svn_url": "https://github.com/jonasnick/secp256k1",
        "language": "C",
        "forks_count": 4,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 11430,
        "default_branch": "master",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-24T13:49:16Z",
        "created_at": "2016-05-03T03:14:21Z",
        "updated_at": "2023-03-16T11:44:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "cd329dbc3eaf096ae007e807b86b6f5947621ee3",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 948,
        "stargazers_count": 1768,
        "watchers_count": 1768,
        "size": 10062,
        "default_branch": "master",
        "open_issues_count": 142,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-12T16:38:48Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-06-12T17:38:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1001,
    "deletions": 14,
    "changed_files": 14,
    "commits": 7,
    "review_comments": 7,
    "comments": 1
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NWZhNzU4OWY3NWFmYWNmY2Q4NWY5YzY0N2E2OWJiZDZiY2ZlMGYxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
      "tree": {
        "sha": "3c1d7ee48824c8e9f1141323e34cf49e4334e5a0",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3c1d7ee48824c8e9f1141323e34cf49e4334e5a0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c77fc08597960d662eb0df9e4c670c31bdeb227e",
          "sha": "c77fc08597960d662eb0df9e4c670c31bdeb227e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c77fc08597960d662eb0df9e4c670c31bdeb227e"
        }
      ],
      "message": "aggregate signatures: add module, implement single-user signing",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2017-12-10T21:11:31Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2017-08-09T23:48:07Z"
      },
      "sha": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1447090448,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQ0NzA5MDQ0OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1447090448",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T19:40:12Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OGQyNjQzZjE1YWI1ZDA5ZmE1ZGFjYzc0OTA4YjRmZjJmMGZjYzliNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8d2643f15ab5d09fa5dacc74908b4ff2f0fcc9b4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8d2643f15ab5d09fa5dacc74908b4ff2f0fcc9b4",
      "tree": {
        "sha": "2a64bcc994ebf70e31fa418044d9cfab879b3129",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/2a64bcc994ebf70e31fa418044d9cfab879b3129"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
          "sha": "5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5fa7589f75afacfcd85f9c647a69bbd6bcfe0f16"
        }
      ],
      "message": "Add aggsig state machine tests",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-29T19:40:29Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-22T21:58:11Z"
      },
      "sha": "8d2643f15ab5d09fa5dacc74908b4ff2f0fcc9b4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YzVlZGQzNzdjYzdhZDdjYmVjODZjYjgwYzMyNzc5MDk1ZWJlZDhiMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c5edd377cc7ad7cbec86cb80c32779095ebed8b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c5edd377cc7ad7cbec86cb80c32779095ebed8b1",
      "tree": {
        "sha": "41fbe5450d817e74493bc4d92e79ce55c9c816ee",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/41fbe5450d817e74493bc4d92e79ce55c9c816ee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8d2643f15ab5d09fa5dacc74908b4ff2f0fcc9b4",
          "sha": "8d2643f15ab5d09fa5dacc74908b4ff2f0fcc9b4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8d2643f15ab5d09fa5dacc74908b4ff2f0fcc9b4"
        }
      ],
      "message": "Remove n_sigs argument from aggsig API",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-29T19:40:29Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-22T22:02:25Z"
      },
      "sha": "c5edd377cc7ad7cbec86cb80c32779095ebed8b1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZDQ4Y2Y1MTQ0ZTM5NzA3MjI2YWFmZmE2YWNiZDIwZjExZjI1MzY5Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d48cf5144e39707226aaffa6acbd20f11f253693",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d48cf5144e39707226aaffa6acbd20f11f253693",
      "tree": {
        "sha": "0ac54dda25f14e138903c92cd5a812987887ec3b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0ac54dda25f14e138903c92cd5a812987887ec3b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c5edd377cc7ad7cbec86cb80c32779095ebed8b1",
          "sha": "c5edd377cc7ad7cbec86cb80c32779095ebed8b1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c5edd377cc7ad7cbec86cb80c32779095ebed8b1"
        }
      ],
      "message": "Allow choosing number of signatures in bench_aggsig",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-29T19:40:29Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-24T22:46:50Z"
      },
      "sha": "d48cf5144e39707226aaffa6acbd20f11f253693"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OTg1OTM1N2QxNTJlMDk0NTg4NmRkM2I0OGNhMWIzZDkxOTI3MjVkYg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9859357d152e0945886dd3b48ca1b3d9192725db",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9859357d152e0945886dd3b48ca1b3d9192725db",
      "tree": {
        "sha": "83f5aad588b72d751c5c0888199e2e42d61fa831",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/83f5aad588b72d751c5c0888199e2e42d61fa831"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d48cf5144e39707226aaffa6acbd20f11f253693",
          "sha": "d48cf5144e39707226aaffa6acbd20f11f253693",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d48cf5144e39707226aaffa6acbd20f11f253693"
        }
      ],
      "message": "Stress that seed in aggsig_context_create must be secret",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-29T19:40:29Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-26T16:53:17Z"
      },
      "sha": "9859357d152e0945886dd3b48ca1b3d9192725db"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NWZhYjA3M2RlNDAzYWRmNGRkM2VkYjU4YzQzZDQ2ZjVmZmJiMjQ5ZA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5fab073de403adf4dd3edb58c43d46f5ffbb249d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5fab073de403adf4dd3edb58c43d46f5ffbb249d",
      "tree": {
        "sha": "33c183247b64ddd485803a2882c8cb7790b59d6c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/33c183247b64ddd485803a2882c8cb7790b59d6c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9859357d152e0945886dd3b48ca1b3d9192725db",
          "sha": "9859357d152e0945886dd3b48ca1b3d9192725db",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9859357d152e0945886dd3b48ca1b3d9192725db"
        }
      ],
      "message": "Add function to compute optimal scratch space for aggsig_verify",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-29T19:40:29Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-29T16:06:09Z"
      },
      "sha": "5fab073de403adf4dd3edb58c43d46f5ffbb249d"
    },
    {
      "event": "reviewed",
      "id": 102032742,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMDMyNzQy",
      "url": null,
      "actor": null,
      "commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#pullrequestreview-102032742",
      "submitted_at": "2018-03-07T18:04:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1517493385,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUxNzQ5MzM4NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1517493385",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-12T23:41:05Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YzVhNDQ4NmQ3ZmVkMTNhOGFkYTUwMDliMjQyY2Q5M2JlNTJjODViZQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "tree": {
        "sha": "0201f0d005dd9657526f578f0f1ce588a1027e88",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0201f0d005dd9657526f578f0f1ce588a1027e88"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5fab073de403adf4dd3edb58c43d46f5ffbb249d",
          "sha": "5fab073de403adf4dd3edb58c43d46f5ffbb249d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5fab073de403adf4dd3edb58c43d46f5ffbb249d"
        }
      ],
      "message": "Add aggsig example code",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-03-12T23:41:37Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-01-29T16:54:11Z"
      },
      "sha": "c5a4486d7fed13a8ada5009b242cd93be52c85be"
    },
    {
      "event": "commented",
      "id": 516464093,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjQ2NDA5Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/516464093",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T15:13:55Z",
      "updated_at": "2019-07-30T15:13:55Z",
      "author_association": "MEMBER",
      "body": "Closing as this will be probably superseded by MuSig",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#issuecomment-516464093",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/505"
    },
    {
      "event": "closed",
      "id": 2520189838,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjUyMDE4OTgzOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2520189838",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T15:13:57Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172929794",
      "pull_request_review_id": 102032742,
      "id": 172929794,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjkyOTc5NA==",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Jonas Nick                                      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/**\n+ * This file demonstrates how to use the aggsig module to sign a message\n+ * with multiple keys and aggregate the result into a single signature.\n+ * Additionally, see the documentation in include/secp256k1_aggsig.h.\n+ *\n+ * Note that you need to pass the --enable-module-aggsig to configure\n+ * in order to build this example.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_aggsig.h>\n+\n+/* Number of public keys involved in creating the aggregate signature */\n+#define N_PUBKEYS 3\n+\n+/* Create a key pair and store it in seckey and pubkey */\n+int create_key(const secp256k1_context* ctx, unsigned char* seckey, secp256k1_pubkey* pubkey) {\n+    int ret;\n+    FILE *frand = fopen(\"/dev/urandom\", \"r\");\n+    do {\n+        if(frand == NULL || !fread(seckey, 32, 1, frand)) {\n+            return 0;\n+        }\n+    /* The probability that this not a valid secret key is approximately 2^-128 */\n+    } while (!secp256k1_ec_seckey_verify(ctx, seckey));\n+\n+    ret = secp256k1_ec_pubkey_create(ctx, pubkey, seckey);\n+    assert(ret);\n+    fclose(frand);\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and and store the result in sig */",
      "path": "examples/aggsig.c",
      "position": null,
      "original_position": 42,
      "commit_id": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "original_commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`and and`",
      "created_at": "2018-03-07T17:57:01Z",
      "updated_at": "2018-03-12T23:41:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#discussion_r172929794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172929794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172930851",
      "pull_request_review_id": 102032742,
      "id": 172930851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjkzMDg1MQ==",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Jonas Nick                                      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/**\n+ * This file demonstrates how to use the aggsig module to sign a message\n+ * with multiple keys and aggregate the result into a single signature.\n+ * Additionally, see the documentation in include/secp256k1_aggsig.h.\n+ *\n+ * Note that you need to pass the --enable-module-aggsig to configure\n+ * in order to build this example.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_aggsig.h>\n+\n+/* Number of public keys involved in creating the aggregate signature */\n+#define N_PUBKEYS 3\n+\n+/* Create a key pair and store it in seckey and pubkey */\n+int create_key(const secp256k1_context* ctx, unsigned char* seckey, secp256k1_pubkey* pubkey) {\n+    int ret;\n+    FILE *frand = fopen(\"/dev/urandom\", \"r\");\n+    do {\n+        if(frand == NULL || !fread(seckey, 32, 1, frand)) {\n+            return 0;\n+        }\n+    /* The probability that this not a valid secret key is approximately 2^-128 */\n+    } while (!secp256k1_ec_seckey_verify(ctx, seckey));\n+\n+    ret = secp256k1_ec_pubkey_create(ctx, pubkey, seckey);\n+    assert(ret);\n+    fclose(frand);\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and and store the result in sig */\n+int sign(const secp256k1_context* ctx, unsigned char seckeys[][32], const secp256k1_pubkey* pubkeys, const unsigned char* msghash, unsigned char* sig) {\n+    FILE *frand;\n+    unsigned char secseed[32];\n+    secp256k1_aggsig_context* aggctx;\n+    int i;\n+    secp256k1_aggsig_partial_signature partial_signatures[N_PUBKEYS];\n+\n+    /* Creating an aggsig context requires FRESH RANDOMNESS for the RNG seed.\n+     * The seed must be kept SECRET. */\n+    frand = fopen(\"/dev/urandom\", \"r\");\n+    if (frand == NULL || !fread(secseed, 32, 1, frand)) {\n+        return 0;\n+    }\n+    fclose(frand);\n+\n+    /* Create an aggsig context to initialize the nonce RNG and manage the aggsig state machine */\n+    aggctx = secp256k1_aggsig_context_create(ctx, pubkeys, N_PUBKEYS, secseed);\n+\n+    /* Generate a nonce for each public key involved */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_generate_nonce(ctx, aggctx, i)) {\n+            return 0;\n+        }\n+    }\n+    /* Sign with each key */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_partial_sign(ctx, aggctx, &partial_signatures[i], msghash, seckeys[i], i)) {\n+            return 0;\n+        }\n+    }\n+    /* Combine partial signatures into sig */\n+    if (!secp256k1_aggsig_combine_signatures(ctx, aggctx, sig, partial_signatures)) {\n+        return 0;\n+    }\n+\n+    secp256k1_aggsig_context_destroy(aggctx);\n+    return 1;\n+}\n+\n+/* Verify an aggregated signature of n_pubkeys pubkeys over msghash */\n+int verify(const secp256k1_context* ctx, const unsigned char *sig, const unsigned char *msghash, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {",
      "path": "examples/aggsig.c",
      "position": null,
      "original_position": 83,
      "commit_id": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "original_commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You use `N_PUBKEYS` in other functions but here you add a `size_t n_pubkeys`. Particular reason or just ended up that way? (You only call this with `N_PUBKEYS` as argument I think.)",
      "created_at": "2018-03-07T18:00:26Z",
      "updated_at": "2018-03-12T23:41:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#discussion_r172930851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172930851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172931259",
      "pull_request_review_id": 102032742,
      "id": 172931259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjkzMTI1OQ==",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Jonas Nick                                      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/**\n+ * This file demonstrates how to use the aggsig module to sign a message\n+ * with multiple keys and aggregate the result into a single signature.\n+ * Additionally, see the documentation in include/secp256k1_aggsig.h.\n+ *\n+ * Note that you need to pass the --enable-module-aggsig to configure\n+ * in order to build this example.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_aggsig.h>\n+\n+/* Number of public keys involved in creating the aggregate signature */\n+#define N_PUBKEYS 3\n+\n+/* Create a key pair and store it in seckey and pubkey */\n+int create_key(const secp256k1_context* ctx, unsigned char* seckey, secp256k1_pubkey* pubkey) {\n+    int ret;\n+    FILE *frand = fopen(\"/dev/urandom\", \"r\");\n+    do {\n+        if(frand == NULL || !fread(seckey, 32, 1, frand)) {\n+            return 0;\n+        }\n+    /* The probability that this not a valid secret key is approximately 2^-128 */\n+    } while (!secp256k1_ec_seckey_verify(ctx, seckey));\n+\n+    ret = secp256k1_ec_pubkey_create(ctx, pubkey, seckey);\n+    assert(ret);\n+    fclose(frand);\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and and store the result in sig */\n+int sign(const secp256k1_context* ctx, unsigned char seckeys[][32], const secp256k1_pubkey* pubkeys, const unsigned char* msghash, unsigned char* sig) {\n+    FILE *frand;\n+    unsigned char secseed[32];\n+    secp256k1_aggsig_context* aggctx;\n+    int i;\n+    secp256k1_aggsig_partial_signature partial_signatures[N_PUBKEYS];\n+\n+    /* Creating an aggsig context requires FRESH RANDOMNESS for the RNG seed.\n+     * The seed must be kept SECRET. */\n+    frand = fopen(\"/dev/urandom\", \"r\");\n+    if (frand == NULL || !fread(secseed, 32, 1, frand)) {\n+        return 0;\n+    }\n+    fclose(frand);\n+\n+    /* Create an aggsig context to initialize the nonce RNG and manage the aggsig state machine */\n+    aggctx = secp256k1_aggsig_context_create(ctx, pubkeys, N_PUBKEYS, secseed);\n+\n+    /* Generate a nonce for each public key involved */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_generate_nonce(ctx, aggctx, i)) {\n+            return 0;\n+        }\n+    }\n+    /* Sign with each key */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_partial_sign(ctx, aggctx, &partial_signatures[i], msghash, seckeys[i], i)) {\n+            return 0;\n+        }\n+    }\n+    /* Combine partial signatures into sig */\n+    if (!secp256k1_aggsig_combine_signatures(ctx, aggctx, sig, partial_signatures)) {\n+        return 0;\n+    }\n+\n+    secp256k1_aggsig_context_destroy(aggctx);\n+    return 1;\n+}\n+\n+/* Verify an aggregated signature of n_pubkeys pubkeys over msghash */\n+int verify(const secp256k1_context* ctx, const unsigned char *sig, const unsigned char *msghash, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    /* Create \"scratch space\" to allocate memory for the aggsig verification\n+     * algorithm. But first, compute the optimal size of the space. */\n+    size_t scratch_size = secp256k1_aggsig_verify_scratch_size(n_pubkeys);\n+    secp256k1_scratch_space* scratch;\n+    /* The scratch space can be limited or set to a fixed size. If it's smaller\n+     * than the optimum, then the verification algorithm will run slower. But\n+     * the scratch space must fit at least one public key. */\n+    if (scratch_size > 9000) {\n+        scratch_size = 9000;\n+    }\n+    scratch = secp256k1_scratch_space_create(ctx, 0, scratch_size);\n+    if(scratch == NULL) {",
      "path": "examples/aggsig.c",
      "position": null,
      "original_position": 95,
      "commit_id": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "original_commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: You're mixing `if()` and `if ()` style, and the same for `for()` and `for ()`. Personally prefer the latter, but probably shouldn't mix.",
      "created_at": "2018-03-07T18:01:46Z",
      "updated_at": "2018-03-12T23:41:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#discussion_r172931259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172931259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172931706",
      "pull_request_review_id": 102032742,
      "id": 172931706,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjkzMTcwNg==",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Jonas Nick                                      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/**\n+ * This file demonstrates how to use the aggsig module to sign a message\n+ * with multiple keys and aggregate the result into a single signature.\n+ * Additionally, see the documentation in include/secp256k1_aggsig.h.\n+ *\n+ * Note that you need to pass the --enable-module-aggsig to configure\n+ * in order to build this example.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_aggsig.h>\n+\n+/* Number of public keys involved in creating the aggregate signature */\n+#define N_PUBKEYS 3\n+\n+/* Create a key pair and store it in seckey and pubkey */\n+int create_key(const secp256k1_context* ctx, unsigned char* seckey, secp256k1_pubkey* pubkey) {\n+    int ret;\n+    FILE *frand = fopen(\"/dev/urandom\", \"r\");\n+    do {\n+        if(frand == NULL || !fread(seckey, 32, 1, frand)) {\n+            return 0;\n+        }\n+    /* The probability that this not a valid secret key is approximately 2^-128 */\n+    } while (!secp256k1_ec_seckey_verify(ctx, seckey));\n+\n+    ret = secp256k1_ec_pubkey_create(ctx, pubkey, seckey);\n+    assert(ret);\n+    fclose(frand);\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and and store the result in sig */\n+int sign(const secp256k1_context* ctx, unsigned char seckeys[][32], const secp256k1_pubkey* pubkeys, const unsigned char* msghash, unsigned char* sig) {\n+    FILE *frand;\n+    unsigned char secseed[32];\n+    secp256k1_aggsig_context* aggctx;\n+    int i;\n+    secp256k1_aggsig_partial_signature partial_signatures[N_PUBKEYS];\n+\n+    /* Creating an aggsig context requires FRESH RANDOMNESS for the RNG seed.\n+     * The seed must be kept SECRET. */\n+    frand = fopen(\"/dev/urandom\", \"r\");\n+    if (frand == NULL || !fread(secseed, 32, 1, frand)) {\n+        return 0;\n+    }\n+    fclose(frand);\n+\n+    /* Create an aggsig context to initialize the nonce RNG and manage the aggsig state machine */\n+    aggctx = secp256k1_aggsig_context_create(ctx, pubkeys, N_PUBKEYS, secseed);\n+\n+    /* Generate a nonce for each public key involved */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_generate_nonce(ctx, aggctx, i)) {\n+            return 0;\n+        }\n+    }\n+    /* Sign with each key */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_partial_sign(ctx, aggctx, &partial_signatures[i], msghash, seckeys[i], i)) {\n+            return 0;\n+        }\n+    }\n+    /* Combine partial signatures into sig */\n+    if (!secp256k1_aggsig_combine_signatures(ctx, aggctx, sig, partial_signatures)) {\n+        return 0;\n+    }\n+\n+    secp256k1_aggsig_context_destroy(aggctx);\n+    return 1;\n+}\n+\n+/* Verify an aggregated signature of n_pubkeys pubkeys over msghash */\n+int verify(const secp256k1_context* ctx, const unsigned char *sig, const unsigned char *msghash, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    /* Create \"scratch space\" to allocate memory for the aggsig verification\n+     * algorithm. But first, compute the optimal size of the space. */\n+    size_t scratch_size = secp256k1_aggsig_verify_scratch_size(n_pubkeys);\n+    secp256k1_scratch_space* scratch;\n+    /* The scratch space can be limited or set to a fixed size. If it's smaller\n+     * than the optimum, then the verification algorithm will run slower. But\n+     * the scratch space must fit at least one public key. */\n+    if (scratch_size > 9000) {\n+        scratch_size = 9000;\n+    }\n+    scratch = secp256k1_scratch_space_create(ctx, 0, scratch_size);\n+    if(scratch == NULL) {\n+        return 0;\n+    }\n+\n+    if (!secp256k1_aggsig_verify(ctx, scratch, sig, msghash, pubkeys, n_pubkeys)) {\n+        return 0;\n+    }\n+    secp256k1_scratch_space_destroy(scratch);\n+    return 1;\n+}\n+\n+int main(void) {\n+    secp256k1_context* ctx;\n+    int i;\n+    unsigned char seckeys[N_PUBKEYS][32];\n+    secp256k1_pubkey pubkeys[N_PUBKEYS];\n+    unsigned char msghash[32] = \"this_should_actually_be_msg_hash\";",
      "path": "examples/aggsig.c",
      "position": 111,
      "original_position": 111,
      "commit_id": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "original_commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This will actually overbuffer, writing a `\\0` into the 33rd byte of `msghash`. Surprised compilers don't warn about that.",
      "created_at": "2018-03-07T18:03:10Z",
      "updated_at": "2018-03-12T23:41:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#discussion_r172931706",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/172931706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/173980005",
      "pull_request_review_id": 103257730,
      "id": 173980005,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzk4MDAwNQ==",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Jonas Nick                                      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/**\n+ * This file demonstrates how to use the aggsig module to sign a message\n+ * with multiple keys and aggregate the result into a single signature.\n+ * Additionally, see the documentation in include/secp256k1_aggsig.h.\n+ *\n+ * Note that you need to pass the --enable-module-aggsig to configure\n+ * in order to build this example.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_aggsig.h>\n+\n+/* Number of public keys involved in creating the aggregate signature */\n+#define N_PUBKEYS 3\n+\n+/* Create a key pair and store it in seckey and pubkey */\n+int create_key(const secp256k1_context* ctx, unsigned char* seckey, secp256k1_pubkey* pubkey) {\n+    int ret;\n+    FILE *frand = fopen(\"/dev/urandom\", \"r\");\n+    do {\n+        if(frand == NULL || !fread(seckey, 32, 1, frand)) {\n+            return 0;\n+        }\n+    /* The probability that this not a valid secret key is approximately 2^-128 */\n+    } while (!secp256k1_ec_seckey_verify(ctx, seckey));\n+\n+    ret = secp256k1_ec_pubkey_create(ctx, pubkey, seckey);\n+    assert(ret);\n+    fclose(frand);\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and and store the result in sig */\n+int sign(const secp256k1_context* ctx, unsigned char seckeys[][32], const secp256k1_pubkey* pubkeys, const unsigned char* msghash, unsigned char* sig) {\n+    FILE *frand;\n+    unsigned char secseed[32];\n+    secp256k1_aggsig_context* aggctx;\n+    int i;\n+    secp256k1_aggsig_partial_signature partial_signatures[N_PUBKEYS];\n+\n+    /* Creating an aggsig context requires FRESH RANDOMNESS for the RNG seed.\n+     * The seed must be kept SECRET. */\n+    frand = fopen(\"/dev/urandom\", \"r\");\n+    if (frand == NULL || !fread(secseed, 32, 1, frand)) {\n+        return 0;\n+    }\n+    fclose(frand);\n+\n+    /* Create an aggsig context to initialize the nonce RNG and manage the aggsig state machine */\n+    aggctx = secp256k1_aggsig_context_create(ctx, pubkeys, N_PUBKEYS, secseed);\n+\n+    /* Generate a nonce for each public key involved */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_generate_nonce(ctx, aggctx, i)) {\n+            return 0;\n+        }\n+    }\n+    /* Sign with each key */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_partial_sign(ctx, aggctx, &partial_signatures[i], msghash, seckeys[i], i)) {\n+            return 0;\n+        }\n+    }\n+    /* Combine partial signatures into sig */\n+    if (!secp256k1_aggsig_combine_signatures(ctx, aggctx, sig, partial_signatures)) {\n+        return 0;\n+    }\n+\n+    secp256k1_aggsig_context_destroy(aggctx);\n+    return 1;\n+}\n+\n+/* Verify an aggregated signature of n_pubkeys pubkeys over msghash */\n+int verify(const secp256k1_context* ctx, const unsigned char *sig, const unsigned char *msghash, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    /* Create \"scratch space\" to allocate memory for the aggsig verification\n+     * algorithm. But first, compute the optimal size of the space. */\n+    size_t scratch_size = secp256k1_aggsig_verify_scratch_size(n_pubkeys);\n+    secp256k1_scratch_space* scratch;\n+    /* The scratch space can be limited or set to a fixed size. If it's smaller\n+     * than the optimum, then the verification algorithm will run slower. But\n+     * the scratch space must fit at least one public key. */\n+    if (scratch_size > 9000) {\n+        scratch_size = 9000;\n+    }\n+    scratch = secp256k1_scratch_space_create(ctx, 0, scratch_size);\n+    if(scratch == NULL) {",
      "path": "examples/aggsig.c",
      "position": null,
      "original_position": 95,
      "commit_id": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "original_commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "in_reply_to_id": 172931259,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good catch, thanks!",
      "created_at": "2018-03-12T23:42:06Z",
      "updated_at": "2018-03-12T23:42:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#discussion_r173980005",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/173980005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/173980013",
      "pull_request_review_id": 103257738,
      "id": 173980013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzk4MDAxMw==",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Jonas Nick                                      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/**\n+ * This file demonstrates how to use the aggsig module to sign a message\n+ * with multiple keys and aggregate the result into a single signature.\n+ * Additionally, see the documentation in include/secp256k1_aggsig.h.\n+ *\n+ * Note that you need to pass the --enable-module-aggsig to configure\n+ * in order to build this example.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_aggsig.h>\n+\n+/* Number of public keys involved in creating the aggregate signature */\n+#define N_PUBKEYS 3\n+\n+/* Create a key pair and store it in seckey and pubkey */\n+int create_key(const secp256k1_context* ctx, unsigned char* seckey, secp256k1_pubkey* pubkey) {\n+    int ret;\n+    FILE *frand = fopen(\"/dev/urandom\", \"r\");\n+    do {\n+        if(frand == NULL || !fread(seckey, 32, 1, frand)) {\n+            return 0;\n+        }\n+    /* The probability that this not a valid secret key is approximately 2^-128 */\n+    } while (!secp256k1_ec_seckey_verify(ctx, seckey));\n+\n+    ret = secp256k1_ec_pubkey_create(ctx, pubkey, seckey);\n+    assert(ret);\n+    fclose(frand);\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and and store the result in sig */\n+int sign(const secp256k1_context* ctx, unsigned char seckeys[][32], const secp256k1_pubkey* pubkeys, const unsigned char* msghash, unsigned char* sig) {\n+    FILE *frand;\n+    unsigned char secseed[32];\n+    secp256k1_aggsig_context* aggctx;\n+    int i;\n+    secp256k1_aggsig_partial_signature partial_signatures[N_PUBKEYS];\n+\n+    /* Creating an aggsig context requires FRESH RANDOMNESS for the RNG seed.\n+     * The seed must be kept SECRET. */\n+    frand = fopen(\"/dev/urandom\", \"r\");\n+    if (frand == NULL || !fread(secseed, 32, 1, frand)) {\n+        return 0;\n+    }\n+    fclose(frand);\n+\n+    /* Create an aggsig context to initialize the nonce RNG and manage the aggsig state machine */\n+    aggctx = secp256k1_aggsig_context_create(ctx, pubkeys, N_PUBKEYS, secseed);\n+\n+    /* Generate a nonce for each public key involved */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_generate_nonce(ctx, aggctx, i)) {\n+            return 0;\n+        }\n+    }\n+    /* Sign with each key */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_partial_sign(ctx, aggctx, &partial_signatures[i], msghash, seckeys[i], i)) {\n+            return 0;\n+        }\n+    }\n+    /* Combine partial signatures into sig */\n+    if (!secp256k1_aggsig_combine_signatures(ctx, aggctx, sig, partial_signatures)) {\n+        return 0;\n+    }\n+\n+    secp256k1_aggsig_context_destroy(aggctx);\n+    return 1;\n+}\n+\n+/* Verify an aggregated signature of n_pubkeys pubkeys over msghash */\n+int verify(const secp256k1_context* ctx, const unsigned char *sig, const unsigned char *msghash, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    /* Create \"scratch space\" to allocate memory for the aggsig verification\n+     * algorithm. But first, compute the optimal size of the space. */\n+    size_t scratch_size = secp256k1_aggsig_verify_scratch_size(n_pubkeys);\n+    secp256k1_scratch_space* scratch;\n+    /* The scratch space can be limited or set to a fixed size. If it's smaller\n+     * than the optimum, then the verification algorithm will run slower. But\n+     * the scratch space must fit at least one public key. */\n+    if (scratch_size > 9000) {\n+        scratch_size = 9000;\n+    }\n+    scratch = secp256k1_scratch_space_create(ctx, 0, scratch_size);\n+    if(scratch == NULL) {\n+        return 0;\n+    }\n+\n+    if (!secp256k1_aggsig_verify(ctx, scratch, sig, msghash, pubkeys, n_pubkeys)) {\n+        return 0;\n+    }\n+    secp256k1_scratch_space_destroy(scratch);\n+    return 1;\n+}\n+\n+int main(void) {\n+    secp256k1_context* ctx;\n+    int i;\n+    unsigned char seckeys[N_PUBKEYS][32];\n+    secp256k1_pubkey pubkeys[N_PUBKEYS];\n+    unsigned char msghash[32] = \"this_should_actually_be_msg_hash\";",
      "path": "examples/aggsig.c",
      "position": 111,
      "original_position": 111,
      "commit_id": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "original_commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "in_reply_to_id": 172931706,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, http://port70.net/~nsz/c/c89/c89-draft.html#3.5.6 says terminating null characters are only added \"if there is room\".",
      "created_at": "2018-03-12T23:42:09Z",
      "updated_at": "2018-03-12T23:42:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#discussion_r173980013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/173980013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/173989232",
      "pull_request_review_id": 103267573,
      "id": 173989232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzk4OTIzMg==",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Jonas Nick                                      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/**\n+ * This file demonstrates how to use the aggsig module to sign a message\n+ * with multiple keys and aggregate the result into a single signature.\n+ * Additionally, see the documentation in include/secp256k1_aggsig.h.\n+ *\n+ * Note that you need to pass the --enable-module-aggsig to configure\n+ * in order to build this example.\n+ */\n+\n+#include <stdio.h>\n+#include <assert.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_aggsig.h>\n+\n+/* Number of public keys involved in creating the aggregate signature */\n+#define N_PUBKEYS 3\n+\n+/* Create a key pair and store it in seckey and pubkey */\n+int create_key(const secp256k1_context* ctx, unsigned char* seckey, secp256k1_pubkey* pubkey) {\n+    int ret;\n+    FILE *frand = fopen(\"/dev/urandom\", \"r\");\n+    do {\n+        if(frand == NULL || !fread(seckey, 32, 1, frand)) {\n+            return 0;\n+        }\n+    /* The probability that this not a valid secret key is approximately 2^-128 */\n+    } while (!secp256k1_ec_seckey_verify(ctx, seckey));\n+\n+    ret = secp256k1_ec_pubkey_create(ctx, pubkey, seckey);\n+    assert(ret);\n+    fclose(frand);\n+    return 1;\n+}\n+\n+/* Sign a message hash with the given key pairs and and store the result in sig */\n+int sign(const secp256k1_context* ctx, unsigned char seckeys[][32], const secp256k1_pubkey* pubkeys, const unsigned char* msghash, unsigned char* sig) {\n+    FILE *frand;\n+    unsigned char secseed[32];\n+    secp256k1_aggsig_context* aggctx;\n+    int i;\n+    secp256k1_aggsig_partial_signature partial_signatures[N_PUBKEYS];\n+\n+    /* Creating an aggsig context requires FRESH RANDOMNESS for the RNG seed.\n+     * The seed must be kept SECRET. */\n+    frand = fopen(\"/dev/urandom\", \"r\");\n+    if (frand == NULL || !fread(secseed, 32, 1, frand)) {\n+        return 0;\n+    }\n+    fclose(frand);\n+\n+    /* Create an aggsig context to initialize the nonce RNG and manage the aggsig state machine */\n+    aggctx = secp256k1_aggsig_context_create(ctx, pubkeys, N_PUBKEYS, secseed);\n+\n+    /* Generate a nonce for each public key involved */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_generate_nonce(ctx, aggctx, i)) {\n+            return 0;\n+        }\n+    }\n+    /* Sign with each key */\n+    for (i = 0; i < N_PUBKEYS; i++) {\n+        if (!secp256k1_aggsig_partial_sign(ctx, aggctx, &partial_signatures[i], msghash, seckeys[i], i)) {\n+            return 0;\n+        }\n+    }\n+    /* Combine partial signatures into sig */\n+    if (!secp256k1_aggsig_combine_signatures(ctx, aggctx, sig, partial_signatures)) {\n+        return 0;\n+    }\n+\n+    secp256k1_aggsig_context_destroy(aggctx);\n+    return 1;\n+}\n+\n+/* Verify an aggregated signature of n_pubkeys pubkeys over msghash */\n+int verify(const secp256k1_context* ctx, const unsigned char *sig, const unsigned char *msghash, const secp256k1_pubkey *pubkeys, size_t n_pubkeys) {\n+    /* Create \"scratch space\" to allocate memory for the aggsig verification\n+     * algorithm. But first, compute the optimal size of the space. */\n+    size_t scratch_size = secp256k1_aggsig_verify_scratch_size(n_pubkeys);\n+    secp256k1_scratch_space* scratch;\n+    /* The scratch space can be limited or set to a fixed size. If it's smaller\n+     * than the optimum, then the verification algorithm will run slower. But\n+     * the scratch space must fit at least one public key. */\n+    if (scratch_size > 9000) {\n+        scratch_size = 9000;\n+    }\n+    scratch = secp256k1_scratch_space_create(ctx, 0, scratch_size);\n+    if(scratch == NULL) {\n+        return 0;\n+    }\n+\n+    if (!secp256k1_aggsig_verify(ctx, scratch, sig, msghash, pubkeys, n_pubkeys)) {\n+        return 0;\n+    }\n+    secp256k1_scratch_space_destroy(scratch);\n+    return 1;\n+}\n+\n+int main(void) {\n+    secp256k1_context* ctx;\n+    int i;\n+    unsigned char seckeys[N_PUBKEYS][32];\n+    secp256k1_pubkey pubkeys[N_PUBKEYS];\n+    unsigned char msghash[32] = \"this_should_actually_be_msg_hash\";",
      "path": "examples/aggsig.c",
      "position": 111,
      "original_position": 111,
      "commit_id": "c5a4486d7fed13a8ada5009b242cd93be52c85be",
      "original_commit_id": "fa7dba63113d8e20c486e0e59efb7c73f756054c",
      "in_reply_to_id": 172931706,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That would explain the lack of compiler warnings! First thing I ever heard of such an arbitrary rule. C can be freaky.",
      "created_at": "2018-03-13T00:46:20Z",
      "updated_at": "2018-03-13T00:46:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/505#discussion_r173989232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/173989232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    }
  ]
}