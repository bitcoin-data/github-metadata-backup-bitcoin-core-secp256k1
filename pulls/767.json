{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767",
    "id": 449318421,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ5MzE4NDIx",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/767.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/767.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/c9b77178270ddae9457069bb419f911ea1b9b63b",
    "number": 767,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "WIP: \"safegcd\" field and scalar inversion",
    "user": {
      "login": "peterdettman",
      "id": 3423981,
      "node_id": "MDQ6VXNlcjM0MjM5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peterdettman",
      "html_url": "https://github.com/peterdettman",
      "followers_url": "https://api.github.com/users/peterdettman/followers",
      "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
      "organizations_url": "https://api.github.com/users/peterdettman/orgs",
      "repos_url": "https://api.github.com/users/peterdettman/repos",
      "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/peterdettman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "- see \"Fast constant-time gcd computation and modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang https://gcd.cr.yp.to\r\n\r\nImplements constant-time field and scalar inversion using a Euclidean-style algorithm operating on the least-significant bits. It follows the curve25519 case study as outlined in section 12 of the above paper, with some small tweaks. ~~I do not have the actual curve25519 code to compare to, but this PR appears to be already 15-20% faster than their reported 10050 haswell cycles for field inversion.~~ Actually, this initial measurement was in error, but we did reach 5-10% faster in the end, without any asm.\r\n\r\nPerformance comparison (gcc 10.1.0, -O3, haswell, endo=yes, asm=no, field=64bit scalar=64bit):\r\n\r\nmaster:\r\nscalar_inverse: min 12.4us\r\nfield_inverse: min 5.04us\r\necdh: min 59.7us\r\necdsa_sign: min 47.9us\r\n\r\nsafegcd_inv:\r\nscalar_inverse: min 3.45us\r\nfield_inverse: min 3.23us\r\necdh: min 56.2us \r\necdsa_sign: min 37.7us\r\n\r\nI've not done a 32bit version yet, although it is mostly analogous and should have an even greater relative advantage over Fermat. The field and scalar implementations have substantial common code that is duplicated here for simplicity.",
    "labels": [],
    "created_at": "2020-07-15T08:08:12Z",
    "updated_at": "2021-01-30T13:29:00Z",
    "closed_at": "2021-01-30T08:05:02Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "be566c38276fe4cec3d71aec48ec2b51dd25f76b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "peterdettman:safegcd_inv",
      "ref": "safegcd_inv",
      "sha": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 19929656,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTkyOTY1Ng==",
        "name": "secp256k1",
        "full_name": "peterdettman/secp256k1",
        "owner": {
          "login": "peterdettman",
          "id": 3423981,
          "node_id": "MDQ6VXNlcjM0MjM5ODE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/peterdettman",
          "html_url": "https://github.com/peterdettman",
          "followers_url": "https://api.github.com/users/peterdettman/followers",
          "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
          "organizations_url": "https://api.github.com/users/peterdettman/orgs",
          "repos_url": "https://api.github.com/users/peterdettman/repos",
          "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/peterdettman/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/peterdettman/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/peterdettman/secp256k1",
        "archive_url": "https://api.github.com/repos/peterdettman/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/peterdettman/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/peterdettman/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/peterdettman/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/peterdettman/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/peterdettman/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/peterdettman/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/peterdettman/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/peterdettman/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/peterdettman/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/peterdettman/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/peterdettman/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/peterdettman/secp256k1/events",
        "forks_url": "https://api.github.com/repos/peterdettman/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/peterdettman/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/peterdettman/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/peterdettman/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/peterdettman/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/peterdettman/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/peterdettman/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/peterdettman/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/peterdettman/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/peterdettman/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/peterdettman/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/peterdettman/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/peterdettman/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/peterdettman/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/peterdettman/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/peterdettman/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:peterdettman/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/peterdettman/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/peterdettman/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/peterdettman/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/peterdettman/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/peterdettman/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/peterdettman/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/peterdettman/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/peterdettman/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/peterdettman/secp256k1/hooks",
        "svn_url": "https://github.com/peterdettman/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 9530,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2022-04-20T06:00:57Z",
        "created_at": "2014-05-19T04:58:16Z",
        "updated_at": "2022-01-01T06:09:08Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "3f4a5a10e43bfc8dae5b978cb39aa2dfbaf4d713",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1971,
    "deletions": 0,
    "changed_files": 8,
    "commits": 34,
    "review_comments": 47,
    "comments": 159
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OWZiZTQ4NTRmZTliOTM3ZjE1MWZjMWRhYzY1NmE1NGJhOGE2NDIyMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9fbe4854fe9b937f151fc1dac656a54ba8a64222",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9fbe4854fe9b937f151fc1dac656a54ba8a64222",
      "tree": {
        "sha": "a5de8087776f80d85bcfd34bb090208068c5b753",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a5de8087776f80d85bcfd34bb090208068c5b753"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3f4a5a10e43bfc8dae5b978cb39aa2dfbaf4d713",
          "sha": "3f4a5a10e43bfc8dae5b978cb39aa2dfbaf4d713",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3f4a5a10e43bfc8dae5b978cb39aa2dfbaf4d713"
        }
      ],
      "message": "\"safegcd\" field and scalar inversion\n\n- see \"Fast constant-time gcd computation and modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang https://gcd.cr.yp.to()",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-15T07:34:11Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-15T07:34:11Z"
      },
      "sha": "9fbe4854fe9b937f151fc1dac656a54ba8a64222"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NGZhYjA4MmM5YTljN2NlYTJjZTJiNzcwZjFiYTliNzRhOWJmZmRkYQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4fab082c9a9c7cea2ce2b770f1ba9b74a9bffdda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4fab082c9a9c7cea2ce2b770f1ba9b74a9bffdda",
      "tree": {
        "sha": "1a82ca83f505badc61428832f4bc7048add7c1de",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1a82ca83f505badc61428832f4bc7048add7c1de"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9fbe4854fe9b937f151fc1dac656a54ba8a64222",
          "sha": "9fbe4854fe9b937f151fc1dac656a54ba8a64222",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9fbe4854fe9b937f151fc1dac656a54ba8a64222"
        }
      ],
      "message": "Fix secp256k1_scalar_is_even/scalar_low issue",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-15T08:34:53Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-15T08:34:53Z"
      },
      "sha": "4fab082c9a9c7cea2ce2b770f1ba9b74a9bffdda"
    },
    {
      "event": "commented",
      "id": 658675154,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODY3NTE1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/658675154",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T10:01:31Z",
      "updated_at": "2020-07-15T10:01:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "I don't have time to look at this right now but this is very neat!\r\n\r\nrelated to https://github.com/bitcoin-core/secp256k1/pull/730",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-658675154",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 658683197,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODY4MzE5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/658683197",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T10:17:44Z",
      "updated_at": "2020-07-15T10:17:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "I should add that for variable time inversion we can just make a simple rewrite of  _divsteps_62 and it's already faster than existing one:\r\n\r\nfield_inverse: min 2.10us    <-- (actually a variable-time implementation)\r\nfield_inverse_var: min 2.22us    <-- (unmodified secp256k1_fe_inv_var)\r\n\r\n_divsteps_62 is also an ideal target for asm with a bunch of conditional swaps and negates (although I'm not sure how smart gcc is already being about them).\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-658683197",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 658759497,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc1OTQ5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/658759497",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T13:13:25Z",
      "updated_at": "2020-07-15T13:13:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "I see a few TODOs in the code but nothing substantial. Can you comment on how much this is is \"WIP\" (except the fact that 32 bit is missing?\r\n\r\n\r\n\r\n> _divsteps_62 is also an ideal target for asm with a bunch of conditional swaps and negates (although I'm not sure how smart gcc is already being about them).\r\n\r\nAn interesting data point is https://github.com/bitcoin-core/secp256k1/issues/726#issuecomment-635579969  which shows that current versions of gcc -O3 outperform our ASM (but we switched to a default of -O2 a few months ago). So ASM is in general getting less and less interesting for us.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-658759497",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 658779949,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc3OTk0OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/658779949",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T13:50:40Z",
      "updated_at": "2020-07-15T13:50:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "It's conceptually complete at the top level. So besides general review, the main TODO is a thorough bounds analysis (they are quite tight for performance) and in a couple of places I expect that could require an extra carry step or two. The code also uses arithmetic right shift as things stand (although it's not used in the main inner loop), which I guess will provoke discussion.\r\n\r\nOf course there's the 32bit version, and some organisational work to share common code in a sensible way.\r\n\r\nApart from the code itself, we would probably want to get some outside opinions from mathematicians on the paper's proofs (meaning no offence to the authors), as it is less obvious than Fermat inversion. Indeed, in Appendix F.2 of the paper the authors show that an earlier analysis of a similar algorithm (\"A binary recursive gcd algorithm\", Stehlé andZimmermann) was incorrect.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-658779949",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 658828026,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODgyODAyNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/658828026",
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T15:14:31Z",
      "updated_at": "2020-07-15T15:14:31Z",
      "author_association": "NONE",
      "body": "I wonder if you measured against Niels Moller constant-time inversion in Nettle/Botan/GMP?\r\n\r\nThe Yang-Bernstein GCD seems to require significantly more operations compared to algorithm 5 of [Fast Software Polynomial Multiplicationon ARM Processors Using the NEON Engine](https://link.springer.com/content/pdf/10.1007%2F978-3-642-40588-4_10.pdf) \r\n\r\n![image](https://user-images.githubusercontent.com/22738317/87562152-ed440d00-c6bd-11ea-81d4-93588144a6c1.png)\r\n\r\nI've outline my performance concerns in Botan issue https://github.com/randombit/botan/issues/1479#issuecomment-601646479\r\n",
      "user": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-658828026",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 658867355,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODg2NzM1NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/658867355",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T16:32:04Z",
      "updated_at": "2020-07-15T16:32:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "@mratsim I have not, but frankly I don't think it could improve on these results because it is performing full-length operations on the operands in each loop iteration. This has been the fundamental performance barrier for all of the binary GCD style algorithms that several contributors have attempted here and elsewhere over the years. So I am focused now on the 2-adic division, \"bottom bits\" algorithms.\r\n\r\nThis PR performs 62 iterations at a time on the \"bottom bits\" only (see the ..._divsteps_62 method(s)), and only updates the full sized operands 12 times. It's true safegcd has more total iterations (744 vs 512), but they are much much cheaper. safegcd also defers the full u/v calculation to the post-processing phase (about 25% of total time in this PR), where the matrices can be combined very efficiently.\r\n\r\nAt 256 bits, I suppose it's possible that the NEON vector instructions dramatically change the accounting, and perhaps something similar is possible with x86_64 SIMD extensions; I would be very interested to see the results of either. Of course there are opportunities for SIMD to improve this PR also.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-658867355",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3549307620,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU0OTMwNzYyMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3549307620",
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T16:32:04Z"
    },
    {
      "event": "subscribed",
      "id": 3549307622,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1NDkzMDc2MjI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3549307622",
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-15T16:32:04Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MGI5MGE1N2Y3ZTdlNmE0ZTUwMzVhZThmODZiMDYzOWVmNTM2MjEwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0b90a57f7e7e6a4e5035ae8f86b0639ef5362109",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0b90a57f7e7e6a4e5035ae8f86b0639ef5362109",
      "tree": {
        "sha": "fb82014533664dd20c45fecf45d4eaaf45b3a162",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/fb82014533664dd20c45fecf45d4eaaf45b3a162"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4fab082c9a9c7cea2ce2b770f1ba9b74a9bffdda",
          "sha": "4fab082c9a9c7cea2ce2b770f1ba9b74a9bffdda",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4fab082c9a9c7cea2ce2b770f1ba9b74a9bffdda"
        }
      ],
      "message": "TODOs and comments",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-16T05:53:23Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-16T05:53:23Z"
      },
      "sha": "0b90a57f7e7e6a4e5035ae8f86b0639ef5362109"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MGMzODY5YTQ2ZDNlY2NmMDMyNGY0YzQwYzA3NjIxNTA5M2RlMGFiNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "tree": {
        "sha": "3e51af1b4c63d70d9594e6eda99642cf1ea8dc38",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3e51af1b4c63d70d9594e6eda99642cf1ea8dc38"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0b90a57f7e7e6a4e5035ae8f86b0639ef5362109",
          "sha": "0b90a57f7e7e6a4e5035ae8f86b0639ef5362109",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0b90a57f7e7e6a4e5035ae8f86b0639ef5362109"
        }
      ],
      "message": "VERIFY_CHECK _divsteps_62 loop invariant",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-18T04:39:17Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-18T04:39:17Z"
      },
      "sha": "0c3869a46d3eccf0324f4c40c076215093de0ab5"
    },
    {
      "event": "commented",
      "id": 660919162,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDkxOTE2Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/660919162",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-20T09:36:57Z",
      "updated_at": "2020-07-20T09:43:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "VERY COOL. One comment on correctness is that inversions are easy and fairly cheap to test at runtime, so at least flaws can be turned into clean crashes instead of incorrect results-- for whatever consolation that is. :)",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-660919162",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 660924815,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDkyNDgxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/660924815",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-20T09:47:47Z",
      "updated_at": "2020-07-20T09:50:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "One could even implement code that multiplies to check the inverse, and if its wrong redoes the operation using the ladder.\r\n\r\nThis would be a fringe timing channel if it were triggerable (but it's easy to test to be confident that its rare and randomize it if there are untrusted inputs to a constant time version), so I think that wouldn't be a problem.\r\n\r\nThis would essentially guarantee algorithmic correctness at little cost, assuming the software just didn't have an ordinary programming flaw.\r\n\r\nSo  think fear of correctness and a shortage of computational number theorists need not stand in the way of this work.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-660924815",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MTFiNTI1YzcxYzU5OWMzZGNjZDQ4YjdlMzQ1YTg4ZWEwNTIzOTFlYg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/11b525c71c599c3dccd48b7e345a88ea052391eb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/11b525c71c599c3dccd48b7e345a88ea052391eb",
      "tree": {
        "sha": "4769dffd6875dd73caf2ce1b99c71ddb681860cd",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4769dffd6875dd73caf2ce1b99c71ddb681860cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0c3869a46d3eccf0324f4c40c076215093de0ab5",
          "sha": "0c3869a46d3eccf0324f4c40c076215093de0ab5",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0c3869a46d3eccf0324f4c40c076215093de0ab5"
        }
      ],
      "message": "More checks and comments",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-21T10:00:04Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-21T10:00:04Z"
      },
      "sha": "11b525c71c599c3dccd48b7e345a88ea052391eb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6M2FlNzE3OWFkNzgzOThjMjNmMjdiNDFkZDk0YmFhN2MwNjYyYzk2NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3ae7179ad78398c23f27b41dd94baa7c0662c964",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3ae7179ad78398c23f27b41dd94baa7c0662c964",
      "tree": {
        "sha": "b3e40ec5504b36773917a20963ff5d1e33624e1a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b3e40ec5504b36773917a20963ff5d1e33624e1a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/11b525c71c599c3dccd48b7e345a88ea052391eb",
          "sha": "11b525c71c599c3dccd48b7e345a88ea052391eb",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/11b525c71c599c3dccd48b7e345a88ea052391eb"
        }
      ],
      "message": "Update f,g at full length until proper analysis",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-21T13:44:13Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-21T13:44:13Z"
      },
      "sha": "3ae7179ad78398c23f27b41dd94baa7c0662c964"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MmY2NDNhZDMxZDJhMGM5ZWM1OGY2YmUzMDJhMzAyZWUzZjJhOThmNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2f643ad31d2a0c9ec58f6be302a302ee3f2a98f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2f643ad31d2a0c9ec58f6be302a302ee3f2a98f4",
      "tree": {
        "sha": "bcae5b24fe5a018b5246ecc15073f8c75cdd1b19",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/bcae5b24fe5a018b5246ecc15073f8c75cdd1b19"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3ae7179ad78398c23f27b41dd94baa7c0662c964",
          "sha": "3ae7179ad78398c23f27b41dd94baa7c0662c964",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3ae7179ad78398c23f27b41dd94baa7c0662c964"
        }
      ],
      "message": "Initial 32bit safegcd\n\n- definitely needs bounds analysis",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-21T17:13:20Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-21T17:13:20Z"
      },
      "sha": "2f643ad31d2a0c9ec58f6be302a302ee3f2a98f4"
    },
    {
      "event": "commented",
      "id": 661997660,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTk5NzY2MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/661997660",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-21T17:25:40Z",
      "updated_at": "2020-07-21T17:25:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "There's now 32-bit versions for field and scalar inversion. It needs bounds analysis, carry chains checked, etc., but these are the current timing comparisons with 32bit scalar and field configured (bearing in mind the test machine is x86_64):\r\n\r\nmaster:\r\nscalar_inverse: min 38.9us\r\nfield_inverse: min 7.36us\r\n\r\nsafegcd_inv:\r\nscalar_inverse: min 4.35us\r\nfield_inverse: min 3.70us\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-661997660",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "reviewed",
      "id": 451559864,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNTU5ODY0",
      "url": null,
      "actor": null,
      "commit_id": "0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#pullrequestreview-451559864",
      "submitted_at": "2020-07-21T22:18:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
    },
    {
      "event": "commented",
      "id": 662177183,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjE3NzE4Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/662177183",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T00:40:53Z",
      "updated_at": "2020-07-22T00:46:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "iMX.6 (arm7)\r\n\r\nBefore:\r\nscalar_inverse: min 338us / avg 338us / max 342us\r\nscalar_inverse_var: min 13.7us / avg 13.8us / max 13.9us\r\nfield_inverse: min 209us / avg 210us / max 210us\r\nfield_inverse_var: min 13.6us / avg 13.6us / max 13.7us\r\n\r\nAfter:\r\nscalar_inverse: min 33.7us / avg 33.8us / max 34.3us\r\nscalar_inverse_var: min 13.6us / avg 13.6us / max 13.7us\r\nfield_inverse: min 31.5us / avg 31.5us / max 31.6us\r\nfield_inverse_var: min 13.5us / avg 13.5us / max 13.6us\r\n\r\nI suppose I shouldn't let the fact that it only matched GMP for the variable time here distract me from the fact that it's 10x faster for the constant time scalar inverse.  This will be a big speedup for GMP-less ECDSA validation and general signing on arm.\r\n\r\nEdit: ah, I guess its not actually using a variable time version of this algo for the variable time ones?  Even using the constant time would would still be a big speedup for the non-gmp builds.  It would sure be nice to get rid of optional linking against gmp.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-662177183",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 662237767,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjIzNzc2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/662237767",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T04:44:05Z",
      "updated_at": "2020-07-22T04:44:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Gmp-less comparison.\r\n\r\niMX.6 (arm7) no-asm\r\nBefore: ecdsa_verify: min 2810us / avg 2815us / max 2832us\r\nAfter: ecdsa_verify: min 2504us / avg 2506us / max 2510us\r\n\r\niMX.6 (arm7) with-asm\r\nBefore: ecdsa_verify: min 1383us / avg 1387us / max 1396us\r\nAfter: ecdsa_verify: min 1074us / avg 1075us / max 1076us\r\n\r\nObviously this speedup would be greater w/ a variable time version of the new code in use.\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-662237767",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 662351350,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjM1MTM1MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/662351350",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T09:35:29Z",
      "updated_at": "2020-07-22T09:35:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell Agreed that random blinding can be useful in the ways you describe. Still it starts to lean towards your point elsewhere that one could just use the variable-time alg. with blinding anyway.\r\n\r\nYes, there's no variable-time in the PR yet. I gave an example timing above from minor changes to _divsteps_62. I did experiment a bit further with the 64bit version and got var-time field inverse down to around ~1.75us, vs. ~3.25us for const-time and ~2.2us for the gmp one. That's already enough to dispense with gmp for 64bit, but I'm sure it can be improved further.\r\n\r\nFor the arm7 numbers (thanks - I should really try and get a hardware setup for this), I am actually a bit surprised at how slow the \"Before\" field_inverse is (especially relative to gmp for inv_var). I guess this has to be down to fe_mul, fe_sqr being slow (slow mul instruction?), which partially affects the timings for this PR. As things stand, beating 32bit gmp on inv_var would appear to require about 2.5x speedup over this PR.\r\n\r\nCould you please satisfy my curiosity and give the full output of bench_internal on that arm7? I also have some possible variations of _fe_mul that I could PR which it would be very helpful to get measured on real devices.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-662351350",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3574931218,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU3NDkzMTIxOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3574931218",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T09:35:29Z"
    },
    {
      "event": "subscribed",
      "id": 3574931221,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1NzQ5MzEyMjE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3574931221",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T09:35:29Z"
    },
    {
      "event": "commented",
      "id": 662491363,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjQ5MTM2Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/662491363",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T14:37:38Z",
      "updated_at": "2020-07-22T14:37:38Z",
      "author_association": "NONE",
      "body": "Hello,\r\nVanitySearch uses a very similar implementation of modular inversion (called DRS62, delayed right shift 62 bits). It operates on the 62 least-significant bits of the integer and maintain a 2x2 matrix in the inner XCD loop. It is a variable time implementation.\r\n\r\nhttps://github.com/JeanLucPons/VanitySearch/blob/3ba22e9072db540a445d37471e7969bff92fa504/IntMod.cpp#L380\r\nIt is between 2 and 3 times faster than Fermat/Euler method on Secp256K1 prime.\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-662491363",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 662575683,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjU3NTY4Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/662575683",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T17:10:23Z",
      "updated_at": "2020-07-22T17:10:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "\r\niMX.6 with ASM:\r\nscalar_add: min 0.157us / avg 0.158us / max 0.160us\r\nscalar_negate: min 0.0697us / avg 0.0699us / max 0.0705us\r\nscalar_sqr: min 1.10us / avg 1.13us / max 1.31us\r\nscalar_mul: min 1.07us / avg 1.10us / max 1.30us\r\nscalar_inverse: min 33.9us / avg 34.1us / max 34.3us\r\nscalar_inverse_var: min 33.9us / avg 33.9us / max 34.0us\r\nfield_normalize: min 0.0764us / avg 0.0771us / max 0.0777us\r\nfield_normalize_weak: min 0.0327us / avg 0.0329us / max 0.0332us\r\nfield_sqr: min 0.291us / avg 0.291us / max 0.292us\r\nfield_mul: min 0.361us / avg 0.366us / max 0.368us\r\nfield_inverse: min 27.6us / avg 27.7us / max 27.9us\r\nfield_inverse_var: min 27.6us / avg 27.8us / max 28.4us\r\nfield_sqrt: min 78.9us / avg 79.2us / max 80.2us\r\ngroup_double_var: min 2.44us / avg 2.45us / max 2.49us\r\ngroup_add_var: min 5.70us / avg 5.73us / max 5.82us\r\ngroup_add_affine: min 4.90us / avg 4.91us / max 4.93us\r\ngroup_add_affine_var: min 4.08us / avg 4.08us / max 4.10us\r\ngroup_jacobi_var: min 79.3us / avg 79.9us / max 83.8us\r\nwnaf_const: min 2.44us / avg 2.45us / max 2.48us\r\necmult_wnaf: min 2.60us / avg 2.62us / max 2.63us\r\nhash_sha256: min 1.56us / avg 1.56us / max 1.57us\r\nhash_hmac_sha256: min 6.35us / avg 6.36us / max 6.40us\r\nhash_rfc6979_hmac_sha256: min 34.9us / avg 35.2us / max 35.5us\r\ncontext_verify: min 54297us / avg 54598us / max 55353us\r\ncontext_sign: min 501us / avg 503us / max 510us\r\n\r\niMX.6 with no-asm:\r\nscalar_add: min 0.157us / avg 0.157us / max 0.158us\r\nscalar_negate: min 0.0697us / avg 0.0703us / max 0.0720us\r\nscalar_sqr: min 1.10us / avg 1.10us / max 1.10us\r\nscalar_mul: min 1.05us / avg 1.05us / max 1.05us\r\nscalar_inverse: min 33.7us / avg 33.7us / max 33.7us\r\nscalar_inverse_var: min 33.7us / avg 34.1us / max 34.4us\r\nfield_normalize: min 0.0771us / avg 0.0774us / max 0.0778us\r\nfield_normalize_weak: min 0.0326us / avg 0.0327us / max 0.0329us\r\nfield_sqr: min 0.817us / avg 0.818us / max 0.819us\r\nfield_mul: min 0.939us / avg 0.942us / max 0.962us\r\nfield_inverse: min 31.5us / avg 31.6us / max 32.2us\r\nfield_inverse_var: min 31.5us / avg 31.7us / max 32.5us\r\nfield_sqrt: min 207us / avg 208us / max 211us\r\ngroup_double_var: min 5.97us / avg 5.98us / max 6.02us\r\ngroup_add_var: min 14.5us / avg 14.5us / max 14.6us\r\ngroup_add_affine: min 11.1us / avg 11.2us / max 11.4us\r\ngroup_add_affine_var: min 10.0us / avg 10.0us / max 10.1us\r\ngroup_jacobi_var: min 208us / avg 209us / max 210us\r\nwnaf_const: min 2.44us / avg 2.44us / max 2.44us\r\necmult_wnaf: min 2.60us / avg 2.61us / max 2.65us\r\nhash_sha256: min 1.56us / avg 1.59us / max 1.60us\r\nhash_hmac_sha256: min 6.38us / avg 6.40us / max 6.44us\r\nhash_rfc6979_hmac_sha256: min 35.0us / avg 35.4us / max 37.2us\r\ncontext_verify: min 124901us / avg 125307us / max 125731us\r\ncontext_sign: min 904us / avg 914us / max 958us\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-662575683",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 662602528,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjYwMjUyOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/662602528",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T18:04:43Z",
      "updated_at": "2020-07-22T18:04:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Hello,\r\n> VanitySearch uses a very similar implementation of modular inversion (called DRS62, delayed right shift 62 bits). It operates on the 62 least-significant bits of the integer and maintain a 2x2 matrix in the inner XCD loop. It is a variable time implementation.\r\n> \r\n> https://github.com/JeanLucPons/VanitySearch/blob/3ba22e9072db540a445d37471e7969bff92fa504/IntMod.cpp#L380\r\n> It is between 2 and 3 times faster than Fermat/Euler method on Secp256K1 prime.\r\n\r\nYes it's quite similar, but the \"divstep\" used here should ultimately be faster than the approach there. Section 8 of the safegcd paper discusses some other variants and why they're slower (at least for constant-time case, but probably in general). I'd suggest you check particularly 8.4 which shows that you have to be very careful about the \"divstep\" you use, since merely clearing 0s and combining to get more 0s is not sufficient to guarantee termination.\r\n\r\nThe comments suggest this is Binary xGCD but I would usually take that to include a size comparison b/w u,v on each iteration, which that code isn't doing. So I guess it's actually a variant of Stehlé and Zimmermann's \"Binary Recursive Gcd\"?",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-662602528",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 662857552,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mjg1NzU1Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/662857552",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-23T07:23:25Z",
      "updated_at": "2020-07-23T10:36:25Z",
      "author_association": "NONE",
      "body": "The \"divstep62\" used in VanitySearch is a slightly optimized signed bxcd loop to get zeros a bit faster.\r\nThe transition matrix starts with identity and simply records the steps done on native 64 bits signed integers.\r\nIt ends (in average) in 62x9.84= 610 steps (against 62x12=744 steps for the constant time implementation described in the paper). A standard bxcd \"divstep62\" gives (in average) 62x10.08=624.96 steps.\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-662857552",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 663565735,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzU2NTczNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/663565735",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T14:26:52Z",
      "updated_at": "2020-07-24T14:26:52Z",
      "author_association": "NONE",
      "body": "\r\n> Yes, there's no variable-time in the PR yet. I gave an example timing above from minor changes to _divsteps_62. I did experiment a bit further with the 64bit version and got var-time field inverse down to around ~1.75us, vs. ~3.25us for const-time and ~2.2us for the gmp one. That's already enough to dispense with gmp for 64bit, but I'm sure it can be improved further.\r\n\r\nHello,\r\nCould you tell me on which hardware you get these perf ?\r\nOn my i5-8500, my implementation for field inverse gives 2.73us (in average, for 256 bit numbers uniformly distributed). I think I can win few cycles by optimizing the vector/matrix product (something similar to what you did in secp256k1_fe_update_fg) but I'm not sure to win a lot.\r\nThanks ;)\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-663565735",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 663659103,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzY1OTEwMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/663659103",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T17:53:55Z",
      "updated_at": "2020-07-24T18:24:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "@JeanLucPons  aside, you can benchmark this code easily by applying the patch and running bench_internal.  :) This doesn't totally answer your question since he hasn't posted those variable time optimizations but you could scale his figures based on comparing the constant time numbers.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-663659103",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3584921394,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU4NDkyMTM5NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3584921394",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T17:53:55Z"
    },
    {
      "event": "subscribed",
      "id": 3584921398,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1ODQ5MjEzOTg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3584921398",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T17:53:55Z"
    },
    {
      "event": "commented",
      "id": 663705148,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzcwNTE0OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/663705148",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T19:49:39Z",
      "updated_at": "2020-07-24T19:49:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@JeanLucPons It's an i7 (Haswell) @2.6GHz. The constant-time algorithm does 744 iterations because that's (more than) enough to guarantee completion, but the average number of iterations to send g to 0 is actually ~532.\r\n\r\nIn your code I would first try making the inner loop branchless. If you are able to use __builtin_ctzll or equivalent, then the while(even) loop can be rewritten very simply.\r\n\r\nHowever I would suggest you turn your attention first to whether the algorithm is correct i.e. is it guaranteed to terminate for all inputs? A typical Euclidean algorithm always reduces the larger of two variables, and so will terminate. This is the case e.g. for [Binary GCD](https://en.wikipedia.org/wiki/Binary_GCD_algorithm) also. A weirder way of saying that is that each iteration produces 0s in the high bits of whichever variable currently has fewer.\r\n\r\n The 2-adic (\"bottom bits\") algorithms - including this PR, \"binary recursive GCD\", Algorithm PM (\"Plus-or-Minus\") - instead produce 0s in the low bits of whichever variable currently has fewer. This is what the \"eta\" variable is tracking in this PR (in the paper it's \"delta\"; eta is just -delta). Even with this property, one has to be careful as section 8.4 of the safegcd paper explains.\r\n\r\nAFAICT your algorithm does't have a property like this, it alternates between u,v without regard for which of  the two variables has made more progress. Are you aware of a proof that it does always terminate? The same question applies to the \"BXCD\" algorithm there.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-663705148",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3585262063,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU4NTI2MjA2Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3585262063",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T19:49:39Z"
    },
    {
      "event": "subscribed",
      "id": 3585262066,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1ODUyNjIwNjY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3585262066",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T19:49:39Z"
    },
    {
      "event": "commented",
      "id": 663803690,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzgwMzY5MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/663803690",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-25T03:52:59Z",
      "updated_at": "2020-07-25T04:30:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "This is really nice!\r\n\r\nI've skimmed the paper and the code, and this is my understanding (which may help other reviewers):\r\n\r\n* We have a \"micro iteration\" function divstep(eta,f,g) that returns updated eta,f,g. When calling with arguments (1,f=oddinteger,g=integer), it will after a bounded number of iterations converge to (something,+-gcd(f,g),0).\r\n* Every iteration of divstep actually corresponds with a matrix multiplication with the input, and that matrix has small magnitude coefficients, and only depends on eta, and the bottom bit of f and g.\r\n* N iterations of divstep(eta,f,g) is thus a matrix multiplication consisting of the product of all those individual matrices, whose coefficients' bitlengths scale with N. It turns out that the combined matrix only depends on eta and the lower N bits of f and g.\r\n* This gives rise to macroiterations consisting of a fast way of applying N microiterations. Each first computes the combined matrix for N microiterations (as many as result in matrix coefficients that fit in a 64-bit or 32-bit integer; N=62 or 31), and then applying that matrix to the entire f/g values.\r\n* The overall algorithm is encoding the input in correctly-sized limbs (62 bits or 31 bits), applying 12 or 24 macroiterations on those limbs, remembering the 2x2 64/32-bit matrices from each, and then combining those matrices in order to extract the inverse from it, after a scalar multiplication to correct for the 744 powers of 2 the result was divided by.\r\n\r\nSome overall comments:\r\n* Would it be possible to introduce simple 2x2 matrix types (with 32/64/128/256 bit coefficients, i assume?) and operations on it? The many coefficients are a bit hard to follow. Or is this hard because they start off being 2x2 32/64-bit matrices and are then reused to serve as coefficients for 128/256 bit matrices, and it would be excessive to use separate memory for those?\r\n* Alternatively, can you explain the combine_Ns, and decode_matrix functions more?\r\n* Would it make sense to merge the inner core (the macroiterations applying on the limbs) as they seem to be shared by fe/scalar code?\r\n\r\nFollow-up questions for understanding:\r\n\r\n* The algorithm could be made variable time fairly easily by checking if g=0 after every macro iteration? I suspect it will also make the correction term to undo the power of 2 multiplications dependent on the number of iterations (but there are at most 12/24, so precomputing them all would not be a problem).\r\n* Could jacobi be implemented effectively using the same code, except using a different extraction from the matrix coefficients?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-663803690",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 663814209,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzgxNDIwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/663814209",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-25T05:51:15Z",
      "updated_at": "2020-07-25T05:51:15Z",
      "author_association": "NONE",
      "body": "@peterdettman\r\nYes my divstep62 always end. It is true that the way this bxcd is written might be a bit confusing.\r\nRoughly speaking if u does not make progress u and v may be swapped 2 times.\r\nMy divstep62 ends in 62loops + 31 extra swaps in worst case.\r\nI tried a constant time implementation but it is ~20% slower.\r\n\r\nAnyway, in 99.9999999...% of case my implementation ends in less than 11 divstep62 and I know it exists a small class of number where this limit is overpassed and also exceed 12. I don't know if it is the same in your implementation, I must admit that the theorem 11.2 is unclear for me.\r\nI do no have time this weekend to compile the stuff and test your program. I will do this next Monday ;)\r\nKeep up the good work ;)\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-663814209",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3586008371,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU4NjAwODM3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3586008371",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-25T05:51:15Z"
    },
    {
      "event": "subscribed",
      "id": 3586008372,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1ODYwMDgzNzI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3586008372",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-25T05:51:15Z"
    },
    {
      "event": "commented",
      "id": 663983115,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk4MzExNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/663983115",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-26T12:41:56Z",
      "updated_at": "2020-07-26T12:41:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The code also uses arithmetic right shift as things stand (although it's not used in the main inner loop), which I guess will provoke discussion.\r\n\r\nTechnically that's implemented-defined but I can't find a reference to a platform where a right shift of a negative value is not implemented as an arithmetic shift. We already rely on it in here since a recent PR:\r\nhttps://github.com/bitcoin-core/secp256k1/blob/d567b779fe446fd18820a9d2968ecb703c8dea19/src/ecmult_const_impl.h#L19\r\n(Okay, there it could easily be avoided by casting to unsigned first.)\r\n\r\n\r\nSo I don't think that's a big issue. If this can be avoided for free, yes, we should do it. But otherwise I'd simply accept this. My understanding of the algorithm is not good enough but I suspect it cannot be avoided at zero cost?\r\n\r\n\r\nWe have multiple other undocumented assumptions in the code base, e.g., about sizes of some types. I guess we should just document those using a CHECK somewhere that asserts this, e.g., like Bitcoin Core does:\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/compat/assumptions.h",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-663983115",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664151594,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDE1MTU5NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664151594",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T06:43:09Z",
      "updated_at": "2020-07-27T06:43:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> So I don't think that's a big issue. If this can be avoided for free, yes, we should do it. But otherwise I'd simply accept this. My understanding of the algorithm is not good enough but I suspect it cannot be avoided at zero cost?\r\n\r\ne.g. the matrix outputs of divstep_62 are signed and they are used to update the full length f and g, which are signed values. Also the individual matrices are later multiplied together producing more multi-limb signed values. Thus signed multiplications are the natural choice, meaning signed accumulators which are arithmetic right shifted as the output limbs are produced. I don't see a zero-cost way to avoid it, but I'm all ears of course.\r\n\r\n+1 for CHECKing arithmetic right shift and other assumptions.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664151594",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664155419,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDE1NTQxOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664155419",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T06:52:12Z",
      "updated_at": "2020-07-27T06:52:12Z",
      "author_association": "NONE",
      "body": "Hello,\r\nI did a comparison on my Xeon(R) CPU           X5647  @ 2.93GHz\r\n\r\n```\r\nBuild Options:\r\n  with endomorphism       = no\r\n  with ecmult precomp     = yes\r\n  with external callbacks = no\r\n  with benchmarks         = yes\r\n  with coverage           = no\r\n  module ecdh             = no\r\n  module recovery         = no\r\n\r\n  asm                     = x86_64\r\n  bignum                  = no\r\n  field                   = 64bit\r\n  scalar                  = 64bit\r\n  ecmult window size      = 15\r\n  ecmult gen prec. bits   = 4\r\n\r\n  valgrind                = no\r\n  CC                      = gcc\r\n  CFLAGS                  = -O2 -fvisibility=hidden -std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wno-unused-function -Wno-long-long -Wno-overlength-strings -W -g\r\n```\r\nmaster: field_inverse: min 9.33us\r\nsafe_gcdinv: field_inverse: min 5.73us\r\n\r\nMy implementation (also with -O2) : 5.10us. By considering peterdettman experiments on variable time , I can expect that this implementation should be ~65% faster than mine :)\r\n\r\nHowever i know my code is not well optimized for linux as I use only very few assembly instructions for missing intrinsic functions. On windows, only intrinsic functions are allowed and I know that with gcc intrinsics are capricious ;)\r\n\r\nI'm not very familiar with libsecp256k1 coding style, I will try to make more test, stats with this safegcd.\r\n\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664155419",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664166487,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDE2NjQ4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664166487",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T07:17:54Z",
      "updated_at": "2020-07-27T07:17:54Z",
      "author_association": "NONE",
      "body": "master: field_inverse: min 9.33us / avg 9.33us / max 9.34us\r\nsafegcd_inv: field_inverse: min 5.73us / avg 5.78us / max 6.16us\r\nA question, safegcd_inv is supposed to be constant time, why I observe such a difference between min and max ?\r\nOther timings for constant time functions do not show such a large difference...\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664166487",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664170278,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDE3MDI3OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664170278",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T07:27:04Z",
      "updated_at": "2020-07-27T07:42:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Anyway, in 99.9999999...% of case my implementation ends in less than 11 divstep62 and I know it exists a small class of number where this limit is overpassed and also exceed 12. I don't know if it is the same in your implementation, I must admit that the theorem 11.2 is unclear for me.\r\n\r\nI have results for a curve25519 32-bit implementation of safegcd, 1000000 random inputs: the number of divstep_31 calls needed to send g to 0 was (16, 17, 18, 19) a total of (9, 430015, 569880, 96) times respectively. To be clear, this is the const-time code, it always does the full 24 iterations, but g is sent to 0 much earlier.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664170278",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YjI5ZTUxZTFlZWYyODFjNjBiNmQ1NDQ5ZDI0OWFlNWFhNjg4ZTIzYg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b29e51e1eef281c60b6d5449d249ae5aa688e23b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b29e51e1eef281c60b6d5449d249ae5aa688e23b",
      "tree": {
        "sha": "448e8d06bcdcac2a4a7cb79f56eb8b98e6139161",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/448e8d06bcdcac2a4a7cb79f56eb8b98e6139161"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2f643ad31d2a0c9ec58f6be302a302ee3f2a98f4",
          "sha": "2f643ad31d2a0c9ec58f6be302a302ee3f2a98f4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2f643ad31d2a0c9ec58f6be302a302ee3f2a98f4"
        }
      ],
      "message": "Minor cleanup",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-27T07:57:40Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-27T07:57:40Z"
      },
      "sha": "b29e51e1eef281c60b6d5449d249ae5aa688e23b"
    },
    {
      "event": "commented",
      "id": 664189727,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDE4OTcyNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664189727",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T08:09:11Z",
      "updated_at": "2020-07-27T08:09:11Z",
      "author_association": "NONE",
      "body": "In my case the trap was tricky, not link to the divstep62 itself or to the inputs of a single divstep62 but to the overall loop and to the 256 bit number.\r\nI got a fault (more than 12 divstep62 to complete) while running my Kangaroo program on a Render Farm (GPU code).\r\nThis fault didn't change much the time needed to solve the 114 bit private key challenge (so it is rare) and the cases when it happens are rather unexpected. (~2^52.36 inversion done during the chalenge).\r\nAs i said I don't know if your implementation have the same issue. I will test it ASAP.\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664189727",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664282070,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDI4MjA3MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664282070",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:27:51Z",
      "updated_at": "2020-07-27T10:50:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "> , why I observe such a difference between min and max\r\n\r\nMeasurement noise is normal: Even when a function is constant time nothing else your computer is doing is constant time.  This code passes our constant time tester (valgrind_ctime_test binary), so it's likely to have no secret-input dependant branches or memory accesses. The purpose of the min/max in the benchmark is mostly to tell you if something is going wrong with the measurement (E.g. if they've very different you probably want to measure again)\r\n\r\nIf you have any questions please feel free to ask. It's always good to have more eyes looking at this stuff.\r\n\r\n>  (~2^52.36 inversion done during the chalenge).\r\n\r\nIf you do implement a variant of this algorithm and run it on an absurd number of inputs it would be extremely useful if you saved any inputs that took an unusually large number of steps to invert-- so that we can add them as test cases!  If you do not, I will do this kind of search myself eventually, but since this isn't GPU code and I only have a dozen gpus (and only about 1000 x86_64 cores) I am unlikely to test >2^52 inversions myself. :)  If we got some good test cases as a side effect of some other computation that would be nice.  It might even be the case that inputs which take many steps with your algorithm also take many steps for this one.\r\n\r\n\r\n(For other contributors here:  JeanLucPons has written a GPU discrete log solver for secp256k1 which uses all-affine arithmetic and enormous batched inversions, recently it was used to solve a 114-bit ECDLP challenge-- which is I believe the record for prime field ECDLP)\r\n\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664282070",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664307306,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDMwNzMwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664307306",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:45:28Z",
      "updated_at": "2020-07-27T11:29:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa An accurate summary; I envy your skimming powers!\r\n\r\nThis PR deviates from the paper in some minor ways. As noted previously, eta == -delta, which just simplifies the sign test. Also, the transition matrices are negated from what's in the paper, allowing a divstep_31 instead of 30 (u can reach -1 << 31). update_fg is adjusted for this negation. The even number of transition matrices cancels out the -1^12. The paper mentions a 32bit implementation of curve25519 using divsteps_30, but this requires 25 top-level iterations and only 24 will combine cleanly into 3 2x2ofFE matrices. Still, it's possible trying divsteps_31 is overly optimistic.\r\n\r\n> (matrix types) Or is this hard because...\r\n\r\nYes, probably hard or overly-complicated, but I wouldn't object if it helps readers. We're combining 12 2x2of64bit matrices pairwise, then the 6 products pairwise again to get 3 2x2of256bit values, _in place_ (actually I used some temp space). Those are then converted to 3 2x2ofFE matrices for the final combination, using optimised field ops. Note that there are still some small calculations in the matrix combination that are ultimately not used, but accessing this small performance gain would cost some extra code size.\r\n\r\n> Would it make sense to merge the inner core (the macroiterations applying on the limbs)\r\n\r\nYes, that's what I have in mind. Note though that it's currently possible to configure 32bit scalar and 64bit field, so you can't just choose 32bit or 64bit \"inverse\" module.\r\n\r\nMore sharing is possible at some performance cost (I assume, but not actually measured). e.g look at @JeanLucPons [code](https://github.com/JeanLucPons/VanitySearch/blob/3ba22e9072db540a445d37471e7969bff92fa504/IntMod.cpp#L460) for an approach that:\r\n- applies the transition matrices to (r, s) immediately\r\n- clears the bottom 62bits of (r, s) by adding a multiple of P (like Montgomery reduction step) and divides by 2^62\r\n- this naturally prevents (r, s) from growing past 256 bits, and also automatically scales the output according to the actual number of macro-iterations performed (instead of a fixed 2^744), a good fit for the var-time case.\r\n\r\nConceivably this could reach an implementation taking the prime as an argument. I guess it should probably be tested so we can actually quantify the performance difference.\r\n\r\n> The algorithm could be made variable time fairly easily by checking if g=0 after every macro iteration?\r\n\r\nYes, early termination is the primary macro-optimization. A table of finalisers is a reasonable approach, but also see the section just above. There are also some micro-optimisations possible in divsteps_62:\r\n- multiple zeros can be dealt with in one iteration (either __builtin_ctzll or similar, or else a tiny lookup table that fits in a platform integer.\r\n- no swapping of f and g happens while eta is positive, so we can know in some cases that there will be several swapless iterations, and those can be compressed into one with a little mathemagic.\r\n\r\n> Could jacobi be implemented effectively using the same code\r\n\r\nI've been trying to understand that myself. Unfortunately, allowing (f, g) to go negative (as in this PR) means that the jacobi symbol is not defined for some reduction steps. It can work with a different divstep that keeps both (f, g) non-negative (but take care per safegcd paper 8.4 - although gcd/jacobi can actually terminate when f == g).\r\n\r\nI recommend reading [An O(M(n) log n) algorithm for the Jacobi symbol](https://arxiv.org/abs/1004.2091) (there are [slides](https://maths-people.anu.edu.au/~brent/pd/Brent_ACCMCC_10.pdf) too). \r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664307306",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3589262174,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU4OTI2MjE3NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3589262174",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:45:29Z"
    },
    {
      "event": "subscribed",
      "id": 3589262178,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1ODkyNjIxNzg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3589262178",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:45:29Z"
    },
    {
      "event": "mentioned",
      "id": 3589262185,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU4OTI2MjE4NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3589262185",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:45:29Z"
    },
    {
      "event": "subscribed",
      "id": 3589262188,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1ODkyNjIxODg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3589262188",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:45:29Z"
    },
    {
      "event": "commented",
      "id": 664321524,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDMyMTUyNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664321524",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:55:44Z",
      "updated_at": "2020-07-27T10:55:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "> In my case the trap was tricky, not link to the divstep62 itself or to the inputs of a single divstep62 but to the overall loop and to the 256 bit number.\r\n> I got a fault (more than 12 divstep62 to complete) while running my Kangaroo program on a Render Farm (GPU code).\r\n> This fault didn't change much the time needed to solve the 114 bit private key challenge (so it is rare) and the cases when it happens are rather unexpected. (~2^52.36 inversion done during the chalenge).\r\n> As i said I don't know if your implementation have the same issue. I will test it ASAP.\r\n\r\nI don't want to be a broken record, but this tends to confirm my suspicion that maybe the overall algorithm doesn't terminate for all inputs (although you say here only that it didn't terminate before 744 iterations). As @gmaxwell said, it would be very valuable to somehow record those \"fault\" inputs, but they may well be specific to the precise divstep in use (not to mention the prime).",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664321524",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3589300168,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU4OTMwMDE2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3589300168",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:55:44Z"
    },
    {
      "event": "subscribed",
      "id": 3589300172,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1ODkzMDAxNzI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3589300172",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T10:55:44Z"
    },
    {
      "event": "commented",
      "id": 664451353,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDQ1MTM1Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664451353",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T15:03:57Z",
      "updated_at": "2020-07-27T15:03:57Z",
      "author_association": "NONE",
      "body": "OK i did few check with records I have but with your implementation it seems to not exceed 10 divstep62(). I tweaked a bit the code to record when g goes to 0 and it didn't exceed 10 iterations. However I'm far from familiar with this lib and I not 100% sure of what I'm testing, I didn't manage to access the number (I used SECP256K1_FE_CONST() by hand for testing few cases). I need to learn the libsecpk1 style before ;)\r\nI never observed an infinite loop with my implementation and in some rare cases it exceeds 12. When i try to draw random numbers in the \"window\" which fails, it goes up to 24 steps and produce the result in ]-3P,3P[, probably link to the divstep I use.\r\n\r\n\r\n\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664451353",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MzUxOWRjY2ZlNGFlZGFjNDZkNzNkMTE3MzYxNTFlZTNmNzk2NmRlYg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3519dccfe4aedac46d73d11736151ee3f7966deb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3519dccfe4aedac46d73d11736151ee3f7966deb",
      "tree": {
        "sha": "4e5aabb6d8cef63f2400408c3d1af9a56a009ca4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4e5aabb6d8cef63f2400408c3d1af9a56a009ca4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b29e51e1eef281c60b6d5449d249ae5aa688e23b",
          "sha": "b29e51e1eef281c60b6d5449d249ae5aa688e23b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b29e51e1eef281c60b6d5449d249ae5aa688e23b"
        }
      ],
      "message": "Initial _inv_var implementations",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-27T18:22:58Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-27T18:22:58Z"
      },
      "sha": "3519dccfe4aedac46d73d11736151ee3f7966deb"
    },
    {
      "event": "commented",
      "id": 664574721,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU3NDcyMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664574721",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T18:50:06Z",
      "updated_at": "2020-07-27T18:50:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added var-time inverses. Currently only changes the divsteps method (uses __builtin_ctz intrinsic). There's still a fixed number of macro-iterations, although once g is 0, the divsteps calls are almost free.\r\n\r\n(All measurements on x86_64)\r\n\r\nmaster (32bit):\r\nscalar_inverse: min 39.0us / avg 39.5us / max 40.5us\r\nscalar_inverse_var: min 2.30us / avg 2.37us / max 2.50us\r\nfield_inverse: min 7.34us / avg 7.45us / max 7.59us\r\nfield_inverse_var: min 2.25us / avg 2.30us / max 2.44us\r\n\r\nmaster (64bit):\r\nscalar_inverse: min 12.3us / avg 12.5us / max 13.1us\r\nscalar_inverse_var: min 2.23us / avg 2.31us / max 2.49us\r\nfield_inverse: min 5.04us / avg 5.13us / max 5.31us\r\nfield_inverse_var: min 2.24us / avg 2.28us / max 2.33us\r\n\r\nsafegcd_inv (32bit):\r\nscalar_inverse: min 4.38us / avg 4.52us / max 4.98us\r\nscalar_inverse_var: min 2.91us / avg 3.06us / max 3.52us\r\nfield_inverse: min 3.69us / avg 3.75us / max 3.82us\r\nfield_inverse_var: min 2.25us / avg 2.29us / max 2.36us\r\n\r\nsafegcd_inv (64bit):\r\nscalar_inverse: min 3.56us / avg 3.78us / max 4.05us\r\nscalar_inverse_var: min 1.96us / avg 2.01us / max 2.22us\r\nfield_inverse: min 3.26us / avg 3.33us / max 3.45us\r\nfield_inverse_var: min 1.73us / avg 1.77us / max 1.85us\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664574721",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664594925,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU5NDkyNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664594925",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T19:33:02Z",
      "updated_at": "2020-07-27T19:33:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "arm7\r\n\r\nmaster (asm):\r\nscalar_inverse: min 342us / avg 347us / max 356us\r\nscalar_inverse_var: min 13.6us / avg 14.5us / max 17.6us\r\nfield_inverse: min 80.9us / avg 82.0us / max 83.8us\r\nfield_inverse_var: min 13.0us / avg 13.2us / max 13.4us\r\n\r\nmaster (noasm):\r\nscalar_inverse: min 349us / avg 359us / max 371us\r\nscalar_inverse_var: min 14.1us / avg 14.3us / max 14.6us\r\nfield_inverse: min 215us / avg 220us / max 226us\r\nfield_inverse_var: min 13.8us / avg 13.9us / max 14.0us\r\n\r\nsafegcd_inv (asm):\r\nscalar_inverse: min 34.7us / avg 34.7us / max 34.8us\r\nscalar_inverse_var: min 25.5us / avg 25.5us / max 25.5us\r\nfield_inverse: min 28.1us / avg 28.1us / max 28.1us\r\nfield_inverse_var: min 18.9us / avg 18.9us / max 18.9us\r\n\r\nsafegcd_inv (noasm):\r\nscalar_inverse: min 34.7us / avg 34.8us / max 34.9us\r\nscalar_inverse_var: min 25.3us / avg 25.4us / max 25.5us\r\nfield_inverse: min 32.2us / avg 32.2us / max 32.3us\r\nfield_inverse_var: min 23.0us / avg 23.0us / max 23.1us\r\n\r\nWay better than no GMP, but it's still being edged out by GMP somewhat on arm.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664594925",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664662855,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY2Mjg1NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664662855",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T22:07:30Z",
      "updated_at": "2020-07-27T22:10:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman Another possibility I think, is making the update_fg code take in a width parameter, which would ~~always be 5/9 in the novar version, but~~ depend on the iteration count ~~in the var version~~ (presumably the bounds can be computed, and shrink in function of the iteration count).\r\n\r\nEDIT: actually, this can even be done in the novar version.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664662855",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3591823710,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU5MTgyMzcxMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3591823710",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T22:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 3591823711,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1OTE4MjM3MTE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3591823711",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T22:07:30Z"
    },
    {
      "event": "commented",
      "id": 664777044,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDc3NzA0NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664777044",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T04:59:03Z",
      "updated_at": "2020-07-28T06:32:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Another possibility I think, is making the update_fg code take in a width parameter\r\n\r\nNot as straightforward as it looks. Actually this PR originally did attempt to do it, but I removed it in https://github.com/bitcoin-core/secp256k1/pull/767/commits/3ae7179ad78398c23f27b41dd94baa7c0662c964. Considering the const-time case:\r\n- I got it wrong; see if you can spot why.\r\n- The possible width reduction isn't linear but only towards the end; it isn't based on whether (f, g) are actually getting smaller, rather it's based on knowing we only need the result mod 2^(62 * 4), mod 2^(62 * 3), etc. (in theory we only need a sign bit from the final update_fg). See also the central image of Figure 12.2 in the safegcd paper. Note that \"At most X iterations/bit are needed\" cannot be inverted to \"Y iterations left, therefore current bits <= Y/X\".\r\n- e.g. in the 64bit case the fixed-width updates are loop-unrolled and so faster throughout, at least partially offsetting any gains.\r\n\r\nIn the var-time case it could work better because in practice (f, g) do shrink linearly for typical inputs. I think the paper shows that f, g can't increase in (signed) bitlength from a divstep, so it should be safe to dynamically detect when shortening the width will preserve the (signed) value of f and g.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664777044",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664905307,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDkwNTMwNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664905307",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T09:12:08Z",
      "updated_at": "2020-07-28T09:12:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Added var-time inverses. Currently only changes the divsteps method (uses __builtin_ctz intrinsic). \r\n\r\nFor future reference, here are a few crazy alternative implementations if the intristic is not available https://github.com/hcs0/Hackers-Delight/blob/master/ntz.c.txt (notably including a branch-free variant which is not interesting for us)\r\n\r\nSorry, I'd like to be more helpful but I'm currently too busy with other things to understand the algorithm and do a proper review.... \r\n\r\n> Way better than no GMP, but it's still being edged out by GMP somewhat on arm.\r\n\r\nThis suggests the question how much slowdown we'd accept (if any) for the advantage of being able to get rid of GMP entirely.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664905307",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 664914492,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDkxNDQ5Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/664914492",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T09:23:34Z",
      "updated_at": "2020-07-28T09:23:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This suggests the question how much slowdown we'd accept (if any) for the advantage of being able to get rid of GMP entirely.\r\n\r\nOh I think it's there already. Bitcoin doesn't use GMP due to a strong preference against dependencies (esp in consensus code). The work to refine and validate this implementation for constant time use, which it provides an enormous speedup (42% for signing) with no alternative is 95% of the work needed for using it variable time (or even 100% if the constant time version is used).\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664914492",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 665383119,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTM4MzExOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/665383119",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T01:48:19Z",
      "updated_at": "2020-07-29T01:48:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "It seems GMP has an (experimental) constant-time modular inverse function too now, `mpn_sec_invert_itch`. It may be interesting to benchmark that as well.\r\n\r\nThis text in the [documentation](https://gmplib.org/manual/Low_002dlevel-Functions#Low_002dlevel-Functions):\r\n\r\n> It is required that M is odd, and that nbcnt >= ceil(\\log(A+1)) + ceil(\\log(M+1)).\r\n\r\nmakes me think it may be using a similar style algorithm.\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-665383119",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 665434829,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTQzNDgyOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/665434829",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T05:11:48Z",
      "updated_at": "2020-07-29T05:11:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It seems GMP has an (experimental) constant-time modular inverse function too now, `mpn_sec_invert_itch`. It may be interesting to benchmark that as well.\r\n\r\nA noted by @mratsim  above, this is Niels Möller's algorithm (and implementation) from 2013, also see the GMP ChangeLog (was called `mpn_sec_minvert` earlier).",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-665434829",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3597290311,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU5NzI5MDMxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3597290311",
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T05:11:48Z"
    },
    {
      "event": "subscribed",
      "id": 3597290314,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1OTcyOTAzMTQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3597290314",
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T05:11:48Z"
    },
    {
      "event": "commented",
      "id": 665653209,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTY1MzIwOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/665653209",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T13:08:40Z",
      "updated_at": "2020-07-29T13:08:40Z",
      "author_association": "NONE",
      "body": "Hello,\r\nI implemented the var time version in my program (not using a global matrix), still do the matrix/vector product at each step.\r\nI gain ~50% compare to my former implementation. Nice ! Hope the gain will be the same on the GPU side.\r\nMany thanks to @peterdettman for this works :)\r\nhttps://github.com/JeanLucPons/Kangaroo/blob/0042e1a3672bb12461c09d969daa6fc37b918724/SECPK1/IntMod.cpp#L366\r\n\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-665653209",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3598963487,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU5ODk2MzQ4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3598963487",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T13:08:40Z"
    },
    {
      "event": "subscribed",
      "id": 3598963490,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1OTg5NjM0OTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3598963490",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T13:08:40Z"
    },
    {
      "event": "commented",
      "id": 665657930,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTY1NzkzMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/665657930",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T13:16:55Z",
      "updated_at": "2020-07-29T13:21:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "@JeanLucPons Awesome! I actually cloned VanitySearch and was benchmarking basically the same change already, but very happy to see you work it through yourself. I may be borrowing your r/s updating code in return.\r\n\r\nOh, and the same basic code appears to work on the GPU with `__ffsll(x) - 1` replacing `__builtin_ctzll` (`BitScanForward64`), but it wasn't clear to me how to benchmark it. I look forward to your results.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-665657930",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3598999195,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU5ODk5OTE5NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3598999195",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T13:16:56Z"
    },
    {
      "event": "subscribed",
      "id": 3598999200,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1OTg5OTkyMDA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3598999200",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T13:16:56Z"
    },
    {
      "event": "commented",
      "id": 665682731,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTY4MjczMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/665682731",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T14:01:33Z",
      "updated_at": "2020-07-29T14:01:33Z",
      "author_association": "NONE",
      "body": "Thanks for the tips ;)\r\nOn the GPU side for vanitySearch it will not bring significant speedup as modular inversion can be batched in large group but for Kangaroo, it is an actual advantage as the smaller group you have the better it is (due to the DP overhead).\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-665682731",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 667027608,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzAyNzYwOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/667027608",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T09:25:57Z",
      "updated_at": "2020-07-31T09:27:39Z",
      "author_association": "NONE",
      "body": " @peterdettman\r\n\r\nHello,\r\n\r\nI tried the var time implementation on the GPU (using __ffsll()) and it has similar performance than my former implementation (even a bit slower). Likely due to the fact that branching is costly on GPU. Note than on GPU, i do optimization for the Secp256K1 prime, not on the CPU side.\r\nSo I'm trying to port the constant time implementation and I didn't manage to make it work, the porting of the var time was rather straightforward but I pain to port the constant time version of divstep62.\r\nThe fist number I'm inverting in my program is:\r\nC9BD1905155383999C46C2C295F2B761BCB223FEDC24A059D838091D0868192A\r\nwhich is equal to 2^-256 (mod p). The var time give the good result (1000003D1).\r\nWith the constant time, only one of 2 variable (f,g) make progress. I likely doing something wrong.\r\nCould you print me out the matrices that should be produced for that number ?\r\n\r\nMany thanks again and fell free to borrow anything you want in my code and especially to optimize anything you want  ;)\r\n\r\n\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-667027608",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3607675993,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYwNzY3NTk5Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3607675993",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T09:25:57Z"
    },
    {
      "event": "subscribed",
      "id": 3607675996,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MDc2NzU5OTY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3607675996",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T09:25:57Z"
    },
    {
      "event": "commented",
      "id": 667142282,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzE0MjI4Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/667142282",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T14:16:28Z",
      "updated_at": "2020-07-31T14:16:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "@JeanLucPons I think we'd better move that conversation over to the Kangaroo project. Could you open a PR there with the initial attempt and then mention me to take a look. It will probably be something relatively simple, but if not I will get the transition matrices for you.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-667142282",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3608723812,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYwODcyMzgxMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3608723812",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T14:16:29Z"
    },
    {
      "event": "subscribed",
      "id": 3608723817,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MDg3MjM4MTc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3608723817",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T14:16:29Z"
    },
    {
      "event": "commented",
      "id": 667143601,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzE0MzYwMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/667143601",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T14:19:20Z",
      "updated_at": "2020-07-31T14:19:20Z",
      "author_association": "NONE",
      "body": "Thanks, i found the issue, I had to do that with Visual studio.\r\n\r\n```\r\n    for(i = 0; i < 62; ++i) {\r\n\r\n      c1 = -(g & ((((uint64_t)eta) & 0xFFFFULL) >> 15));\r\n```",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-667143601",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YmQxODQ3MTFjODg5N2UzNmNhN2EyNGVlNWY1MDJkY2M4YzZjY2FiYg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bd184711c8897e36ca7a24ee5f502dcc8c6ccabb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bd184711c8897e36ca7a24ee5f502dcc8c6ccabb",
      "tree": {
        "sha": "a377dfacb9a820f3bf91e9042ebb85ce2e3d4b96",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a377dfacb9a820f3bf91e9042ebb85ce2e3d4b96"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3519dccfe4aedac46d73d11736151ee3f7966deb",
          "sha": "3519dccfe4aedac46d73d11736151ee3f7966deb",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3519dccfe4aedac46d73d11736151ee3f7966deb"
        }
      ],
      "message": "Simplify type of 'eta'",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-31T15:04:11Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-07-31T15:04:11Z"
      },
      "sha": "bd184711c8897e36ca7a24ee5f502dcc8c6ccabb"
    },
    {
      "event": "commented",
      "id": 667416034,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzQxNjAzNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/667416034",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T22:45:21Z",
      "updated_at": "2020-07-31T22:46:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "I doubt this is useful, but if you get to observe the sign of f during the steps of the algorithm, you can compute the jacobi symbol:\r\n\r\n```python\r\ndef divstep(delta, f, g):\r\n    assert(f & 1)\r\n    if delta > 0 and (g & 1):\r\n        return (1-delta, g, (g-f)//2)\r\n    elif g & 1:\r\n        return (1+delta, f, (g+f)//2)\r\n    else:\r\n        return (1+delta, f, g//2)\r\n\r\ndef jacobi(a, m):\r\n    ret = 1\r\n    delta = 1\r\n    f = m\r\n    g = a\r\n    while g != 0:\r\n        old_f = f\r\n        delta, f, g = divstep(delta, f, g)\r\n        r = (abs(f) & 6) + (abs(old_f) & 2) + 2 * ((f < 0) != (old_f < 0))\r\n        if r == 4 or r == 6:\r\n            ret *= -1\r\n    if abs(f) == 1:\r\n        return ret\r\n    return 0\r\n```\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-667416034",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 669115908,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTExNTkwOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/669115908",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T10:30:17Z",
      "updated_at": "2020-08-05T10:30:30Z",
      "author_association": "NONE",
      "body": ">Still, it's possible trying divsteps_31 is overly optimistic.\r\n\r\nHello,\r\nCould you tell us more about this divstep31 ? Are you running a 'computer proof' for the overflow checking ?\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-669115908",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 669687012,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTY4NzAxMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/669687012",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T04:45:03Z",
      "updated_at": "2020-08-06T04:45:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Could you tell us more about this divstep31 ? Are you running a 'computer proof' for the overflow checking ?\r\n\r\nI'm not applying any automated proof tools, no. The code analysis I don't think is so difficult, it's more about understanding the limits for the transition matrices from each divsteps_31 call (u, v, q, r).\r\n\r\ndivsteps_31 is just 31 iterations of the safegcd divstep, operating on the least-significant 31 bits of (f, g). In the 64-bit case, using groups of `64 -2 = 62` iterations (i.e. 2 bits of \"headroom\") makes the bounds/overflow analysis fairly simple, and `12 * 62 == 744` is sufficient iterations for the constant-time algorithm. For the 32-bit case you could choose `32 - 2 == 30` iterations and things are similarly simple, but then you would have `25 * 30 == 750` iterations. It would be neater to have `24 * 31 == 744`, because 25 don't combine neatly into 3 field element matrices (thus extra fixup code), and also just to save the extra matrix multiplications on the full-length values.\r\n\r\nI still mean to test your (@JeanLucPons) approach for combining the transition matrices on-the-fly using the Montgomery-reduction steps (I mentioned this in https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664307306) also. If that is fast enough, maybe we'd just settle for divsteps_30.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-669687012",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3627354504,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYyNzM1NDUwNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3627354504",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T04:45:03Z"
    },
    {
      "event": "subscribed",
      "id": 3627354505,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MjczNTQ1MDU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3627354505",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T04:45:03Z"
    },
    {
      "event": "commented",
      "id": 669778606,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTc3ODYwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/669778606",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T08:05:19Z",
      "updated_at": "2020-08-06T08:11:12Z",
      "author_association": "NONE",
      "body": "Thanks for the clarification.\r\n\r\nIf I'm not mistaken, concerning the update of R/S:\r\n\r\nWith the method in the paper you have (I count 64bitx64bit multiplier noted M for divstep62):\r\n\r\n48 M => 6 x 128bit matrices\r\n96 M => 3 x 256bit matrices\r\n6 modmul (6x21 = 126M) => bezout coef. You exploit the fact that the initial (r,s) vector is (1,0)\r\n=> 270M\r\n\r\nBy updating r,s at each step (considering an optimized multiplication by the secpk1 prime):\r\n\r\n12 * (20 + 2 + 2) => 288M\r\n\r\nA bit faster with matrix/matrix products but few mul can also be win in the second method by also exploiting the first (r,s) and with the advantage to stop when you want.\r\nEdit: I forget the initial modmul for the normalisation (2^-744), so speed should be very similar with both methods.",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-669778606",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YjhjNzM5MGJjM2E2OGNmZGExNmU3OGEwOTE0ZjQ3ZWIxYTBiZmU0Zg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b8c7390bc3a68cfda16e78a0914f47eb1a0bfe4f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b8c7390bc3a68cfda16e78a0914f47eb1a0bfe4f",
      "tree": {
        "sha": "02ebc4b74316c17cbfdf1dc1ab8662852e5ab00e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/02ebc4b74316c17cbfdf1dc1ab8662852e5ab00e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bd184711c8897e36ca7a24ee5f502dcc8c6ccabb",
          "sha": "bd184711c8897e36ca7a24ee5f502dcc8c6ccabb",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bd184711c8897e36ca7a24ee5f502dcc8c6ccabb"
        }
      ],
      "message": "field_5x52: update Bézout coefficients on-the-fly",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T09:58:43Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T09:58:43Z"
      },
      "sha": "b8c7390bc3a68cfda16e78a0914f47eb1a0bfe4f"
    },
    {
      "event": "commented",
      "id": 670854430,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDg1NDQzMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670854430",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T10:09:27Z",
      "updated_at": "2020-08-08T10:10:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "64-bit field now rewritten to update the Bézout coefficients on-the-fly. Simpler, faster: pick any 2.\r\n\r\nfield_inverse: min 2.94us / avg 2.97us / max 3.04us\r\nfield_inverse_var: min 1.44us / avg 1.47us / max 1.57us\r\n\r\nFor reference, my earlier results:\r\n\r\nmaster (64bit):\r\nfield_inverse: min 5.04us / avg 5.13us / max 5.31us\r\nfield_inverse_var: min 2.24us / avg 2.28us / max 2.33us\r\n\r\nsafegcd_inv (64bit):\r\nfield_inverse: min 3.26us / avg 3.33us / max 3.45us\r\nfield_inverse_var: min 1.73us / avg 1.77us / max 1.85us\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670854430",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NjRhNDkxMmM0MzZiYzQ0NDMyNDQzOTM4YWY4YzZkYmZhZjAyZjkxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/64a4912c436bc44432443938af8c6dbfaf02f911",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/64a4912c436bc44432443938af8c6dbfaf02f911",
      "tree": {
        "sha": "9066253b1eeeb3af24b94fc050044808d5cc3228",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9066253b1eeeb3af24b94fc050044808d5cc3228"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b8c7390bc3a68cfda16e78a0914f47eb1a0bfe4f",
          "sha": "b8c7390bc3a68cfda16e78a0914f47eb1a0bfe4f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b8c7390bc3a68cfda16e78a0914f47eb1a0bfe4f"
        }
      ],
      "message": "field_10x26: update Bézout coefficients on-the-fly",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T12:38:06Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T12:38:06Z"
      },
      "sha": "64a4912c436bc44432443938af8c6dbfaf02f911"
    },
    {
      "event": "commented",
      "id": 670924799,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDkyNDc5OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670924799",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T12:42:45Z",
      "updated_at": "2020-08-08T12:42:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "32-bit field updated. New results:\r\n\r\nfield_inverse: min 3.32us / avg 3.38us / max 3.47us\r\nfield_inverse_var: min 1.74us / avg 1.75us / max 1.81us\r\n\r\nEarlier results:\r\n\r\nmaster (32bit):\r\nfield_inverse: min 7.34us / avg 7.45us / max 7.59us\r\nfield_inverse_var: min 2.25us / avg 2.30us / max 2.44us\r\n\r\nsafegcd_inv (32bit):\r\nfield_inverse: min 3.69us / avg 3.75us / max 3.82us\r\nfield_inverse_var: min 2.25us / avg 2.29us / max 2.36us\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670924799",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZTVmMmQyOWNiYjdhOThmZTI5NWY5NTcyNDAxMzgzNzg1NThkYWUzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e5f2d29cbb7a98fe295f957240138378558dae32",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e5f2d29cbb7a98fe295f957240138378558dae32",
      "tree": {
        "sha": "db55f53b54923197436dedee49e525ada4aa3f21",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/db55f53b54923197436dedee49e525ada4aa3f21"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/64a4912c436bc44432443938af8c6dbfaf02f911",
          "sha": "64a4912c436bc44432443938af8c6dbfaf02f911",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/64a4912c436bc44432443938af8c6dbfaf02f911"
        }
      ],
      "message": "scalar_4x64: update Bézout coefficients on-the-fly",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T15:08:18Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T15:08:18Z"
      },
      "sha": "e5f2d29cbb7a98fe295f957240138378558dae32"
    },
    {
      "event": "commented",
      "id": 670941159,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk0MTE1OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670941159",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T15:23:37Z",
      "updated_at": "2020-08-08T15:23:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "64-bit scalar updated. New results:\r\n\r\nscalar_inverse: min 3.00us / avg 3.07us / max 3.14us\r\nscalar_inverse_var: min 1.50us / avg 1.53us / max 1.57us\r\n\r\nEarlier results:\r\n\r\nmaster (64bit):\r\nscalar_inverse: min 12.3us / avg 12.5us / max 13.1us\r\nscalar_inverse_var: min 2.23us / avg 2.31us / max 2.49us\r\n\r\nsafegcd_inv (64bit):\r\nscalar_inverse: min 3.56us / avg 3.78us / max 4.05us\r\nscalar_inverse_var: min 1.96us / avg 2.01us / max 2.22us\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670941159",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670944772,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk0NDc3Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670944772",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T15:59:43Z",
      "updated_at": "2020-08-08T16:04:28Z",
      "author_association": "NONE",
      "body": "Nice :)\r\n\r\nHere is a CPU profiling of the var time divtep62 by @peterdettman (Visual studio) ~1.57us on my i5.\r\nThe mul by P is not optimized for the secp256k1 prime on this profile and ~1% is used for the \"weak normalization\" not displayed here.\r\n\r\n![modinv_perf](https://user-images.githubusercontent.com/23553641/89714444-08452c80-d99f-11ea-8af7-c4527615ede8.jpg)\r\n\r\nOn the GPU side, for counting the trailing zero, log2(x&-x) is faster than __ffsll() (at least on a 1050 Ti), I will do more tests on other GPUs...\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670944772",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3635803277,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNTgwMzI3Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3635803277",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T15:59:43Z"
    },
    {
      "event": "subscribed",
      "id": 3635803280,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzU4MDMyODA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3635803280",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T15:59:43Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MzRiZWM0MDBiZmZjMWMxMmE4Y2Q4Y2M5MTYzYmMzYjFhOTk0N2Y2NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/34bec400bffc1c12a8cd8cc9163bc3b1a9947f64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/34bec400bffc1c12a8cd8cc9163bc3b1a9947f64",
      "tree": {
        "sha": "9a6174e5fe2341cb3b042b11dc12ecbb2bd66332",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9a6174e5fe2341cb3b042b11dc12ecbb2bd66332"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/e5f2d29cbb7a98fe295f957240138378558dae32",
          "sha": "e5f2d29cbb7a98fe295f957240138378558dae32",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/e5f2d29cbb7a98fe295f957240138378558dae32"
        }
      ],
      "message": "scalar_8x32: update Bézout coefficients on-the-fly",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T16:40:40Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-08T16:40:40Z"
      },
      "sha": "34bec400bffc1c12a8cd8cc9163bc3b1a9947f64"
    },
    {
      "event": "commented",
      "id": 670949635,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk0OTYzNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670949635",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T16:47:52Z",
      "updated_at": "2020-08-08T16:47:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "32-bit scalar updated. All results for new approach:\r\n\r\nmaster (32bit):\r\nscalar_inverse: min 39.0us / avg 39.5us / max 40.5us\r\nscalar_inverse_var: min 2.30us / avg 2.37us / max 2.50us\r\nfield_inverse: min 7.34us / avg 7.45us / max 7.59us\r\nfield_inverse_var: min 2.25us / avg 2.30us / max 2.44us\r\n\r\nmaster (64bit):\r\nscalar_inverse: min 12.3us / avg 12.5us / max 13.1us\r\nscalar_inverse_var: min 2.23us / avg 2.31us / max 2.49us\r\nfield_inverse: min 5.04us / avg 5.13us / max 5.31us\r\nfield_inverse_var: min 2.24us / avg 2.28us / max 2.33us\r\n\r\nsafegcd_inv (32bit):\r\nscalar_inverse: min 3.37us / avg 3.41us / max 3.48us\r\nscalar_inverse_var: min 1.84us / avg 1.85us / max 1.93us\r\nfield_inverse: min 3.32us / avg 3.38us / max 3.47us\r\nfield_inverse_var: min 1.74us / avg 1.75us / max 1.81us\r\n\r\nsafegcd_inv (64bit):\r\nscalar_inverse: min 3.00us / avg 3.07us / max 3.14us\r\nscalar_inverse_var: min 1.50us / avg 1.53us / max 1.57us\r\nfield_inverse: min 2.94us / avg 2.97us / max 3.04us\r\nfield_inverse_var: min 1.44us / avg 1.47us / max 1.57us\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670949635",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670950607,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk1MDYwNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670950607",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T16:57:34Z",
      "updated_at": "2020-08-08T16:57:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> On the GPU side, for counting the trailing zero, log2(x&-x) is faster than __ffsll() (at least on a 1050 Ti)\r\n\r\nYou can try also `__clzll(__brevll(x))` i.e. count leading zeros of bit-reversed value, although the `__ffsll` intrinsic may already be implemented that way in the absence of hardware support.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670950607",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670954392,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk1NDM5Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670954392",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T17:36:16Z",
      "updated_at": "2020-08-08T18:00:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice, it seems to easily beat GMP now (at least on the systems you tested). This is a much nicer approach than deconstructing the full coefficients through matrix multiplications.\r\n\r\nA few comments again before I start reviewing in more detail.\r\n\r\n* I'm not sure that int128 -> int64 truncation (or int64 -> int32) is well-defined. It's not UB, but I believe it is implementation defined what it means. I doubt any reasonable platform does anything but reinterpreting the bottom 64/32 bits in two's complement, but it would be nice to not rely on this. I believe a `int64_t makesigned(uint64_t x) { return (x >> 63) ? -(int64_t)(~x)-1 : (int64_t)x; }` works and is optimized out on all reasonable platforms I can test on godbolt (gcc, clang, msvc, icc, on arm/ppc/x86 at least). I hate such stupid workarounds, and would love an argument why this isn't needed if anyone has one.\r\n\r\n* Only encode, decode, and the inner core's P/I62 depend on the modulus, I think? Would you mind trying what performance impact there is from merging the scalar/fe operations (but pass in a pointer to an object with precomputed P/I62?). Otherwise I'm happy to do that.\r\n\r\n* __builtin_ctzl[l] isn't always available, so a workaround will be needed. Is it better to just not have this level of granulary (i.e. just do one bit at a time per iteration, and perhaps break when g=0 is reached), or to manually count the zero bits but keep the existing algorithm?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670954392",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670955034,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk1NTAzNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670955034",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T17:43:31Z",
      "updated_at": "2020-08-08T17:43:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Eh, and left shifting a negative number is UB apparently; right shifting is implementation defined. I think you can work around these by doing most operations on unsigned, and then using the makesigned() function above to get signed versions when needed, but ugh...",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670955034",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670956485,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk1NjQ4NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670956485",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T17:58:55Z",
      "updated_at": "2020-08-08T17:58:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Here are updated ARM benchmarks.  I can't benchmark right now on the iMX.7 that I used for arm7 numbers before, due to a snafu here (flash card corruption :( ), so this time I'm testing on a much slower arm7 (though with a much newer compiler).\r\n\r\nAll of the below are GCC 9.3.0.\r\n\r\narmv8 (S905 A53) 64-bit master:\r\nscalar_inverse: min 61.1us / avg 61.3us / max 62.3us\r\nscalar_inverse_var: min 5.67us / avg 5.68us / max 5.71us\r\nfield_inverse: min 31.6us / avg 31.6us / max 31.7us\r\nfield_inverse_var: min 5.59us / avg 5.61us / max 5.71us\r\n\r\narmv8 (S905 A53) 64-bit old-safegcd:\r\nscalar_inverse: min 14.4us / avg 14.5us / max 15.6us\r\nscalar_inverse_var: min 7.80us / avg 7.80us / max 7.81us\r\nfield_inverse: min 13.7us / avg 13.7us / max 13.8us\r\nfield_inverse_var: min 7.09us / avg 7.10us / max 7.20us\r\n\r\narmv8 (S905 A53) 64-bit safegcd:\r\nscalar_inverse: min 12.8us / avg 12.8us / max 12.9us\r\nscalar_inverse_var: min 6.26us / avg 6.27us / max 6.27us\r\nfield_inverse: min 12.2us / avg 12.2us / max 12.3us\r\nfield_inverse_var: min 5.75us / avg 5.76us / max 5.86us\r\n\r\narmv7 i.MX53 32-bit (asm) master:\r\nscalar_inverse: min 452us / avg 452us / max 453us\r\nscalar_inverse_var: min 20.4us / avg 20.4us / max 20.7us\r\nfield_inverse: min 165us / avg 165us / max 165us\r\nfield_inverse_var: min 20.0us / avg 20.0us / max 20.1us\r\n\r\narmv7 i.MX53 32-bit (asm) old-safegcd:\r\nscalar_inverse: min 50.7us / avg 50.8us / max 51.0us\r\nscalar_inverse_var: min 38.4us / avg 38.5us / max 38.6us\r\nfield_inverse: min 43.7us / avg 43.7us / max 43.7us\r\nfield_inverse_var: min 31.3us / avg 31.3us / max 31.4us\r\n\r\narmv7 i.MX53 32-bit (asm) safegcd:\r\nscalar_inverse: min 43.3us / avg 43.4us / max 43.5us\r\nscalar_inverse_var: min 25.6us / avg 25.6us / max 25.7us\r\nfield_inverse: min 38.6us / avg 38.6us / max 38.6us\r\nfield_inverse_var: min 22.1us / avg 22.1us / max 22.6us\r\n\r\nIt's still getting edged out by GMP, though it's pretty neck and neck now.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670956485",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670958143,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk1ODE0Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670958143",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T18:15:43Z",
      "updated_at": "2020-08-08T18:15:43Z",
      "author_association": "CONTRIBUTOR",
      "body": ">     * I'm not sure that int128 -> int64 truncation (or int64 -> int32) is well-defined. It's not UB, but I believe it is implementation defined what it means. I doubt any reasonable platform does anything but reinterpreting the bottom 64/32 bits in two's complement, but it would be nice to not rely on this. I believe a `int64_t makesigned(uint64_t x) { return (x >> 63) ? -(int64_t)(~x)-1LL : (int64_t)x; }` works and is optimized out on all reasonable platforms I can test on godbolt (gcc, clang, msvc, icc, on arm/ppc/x86 at least). I hate such stupid workarounds, and would love an argument why this isn't needed if anyone has one.\r\n\r\nI don't see why `int64_t makesigned(uint64_t x) { return (x >> 63) ? -(int64_t)(~x)-1LL : (int64_t)x; }` should be much better. That's also implementation-defined. Yeah, you could argue it relies only on twos complement. But it could be compiled to a branch. \r\n\r\nFor ctzl, see https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-664905307\r\n\r\n> Eh, and left shifting a negative number is UB apparently;\r\n\r\nUrghs, okay, we should definitively avoid UB. The easiest way is to cast to unsigned, shift, and cast back to signed. That's still implementation-defined because the cast back to signed but at least not UB.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670958143",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670959005,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk1OTAwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670959005",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T18:24:16Z",
      "updated_at": "2020-08-08T18:24:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, freaking C99 copied that garbage from C++, it was implementation defined previously.  I believe there is discussion of making it implementation defined-- because it at least theoretically makes it unsafe to use shifts on signed numbers period.  Casting and casting back gets you the intended behaviour and just requires a twos-complement implementation (I believe *everything* with a C89 compiler is twos-complement, PDP1 was ones-complement but there is no C89 compiler for it).\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670959005",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670961769,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk2MTc2OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670961769",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T18:53:43Z",
      "updated_at": "2020-08-08T18:55:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "@real-or-random  `int64_t makesigned(uint64_t x) { return (x >> 63) ? -(int64_t)(~x)-1LL : (int64_t)x; }` only performs a `~` on unsigned input, which is well-defined (and unary/binary minus on signed numbers, within range, which is also well-defined) as far as I know.\r\n\r\nI edited my comment; an earlier version was using `~` on signed numbers too.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670961769",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3635908106,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNTkwODEwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3635908106",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T18:53:43Z"
    },
    {
      "event": "subscribed",
      "id": 3635908107,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzU5MDgxMDc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3635908107",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T18:53:43Z"
    },
    {
      "event": "commented",
      "id": 670962306,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk2MjMwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670962306",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T18:59:13Z",
      "updated_at": "2020-08-08T18:59:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think it's reasonable to require a two's complement implementation (we could verify it in a configure script, and in unit tests), and just do a cast-to-unsigned, shift, cast-to-sign for signed left shifts.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670962306",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 670979922,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk3OTkyMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670979922",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:21:45Z",
      "updated_at": "2020-08-08T22:21:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @real-or-random `int64_t makesigned(uint64_t x) { return (x >> 63) ? -(int64_t)(~x)-1LL : (int64_t)x; }` only performs a `~` on unsigned input, which is well-defined (and unary/binary minus on signed numbers, within range, which is also well-defined) as far as I know.\r\n> \r\n> I edited my comment; an earlier version was using `~` on signed numbers too.\r\n\r\nOh yes, indeed.\r\n\r\nBut if we require anyway for the left shifts that unsigned to signed conversions of the same width are a two's-complement noop (and we should of course!), then `(int64_t)(uint64_t)x` should be a much simpler way to truncate `x` of type `int128_t`. (And depending on how pedantic you are, you may just as well write `(int64_t)x`. Who would be crazy enough to come up with an implementation where this makes a difference difference?)\r\n\r\n\r\n> I think it's reasonable to require a two's complement implementation (we could verify it in a configure script, and in unit tests)\r\n\r\nIf you really have some exotic system, then you might not run ./configure or the tests either. I think the safest way is to use some C static assert hack e.g., https://stackoverflow.com/a/56742411. These looks very ugly but they work and the ugliness is hidden behind a macro. We should also check other simple assumptions such as `sizeof(int) == 4` etc. Alternatively, we could perform some self-tests at context creation time, and call the error callback if they fail. The simple ones will be optimized away by the compiler, and we should have some kind of self-test anyway if we want to implement a SHA256 override (see the discussion in #702). ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670979922",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636017916,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjAxNzkxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636017916",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:21:45Z"
    },
    {
      "event": "subscribed",
      "id": 3636017917,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzYwMTc5MTc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636017917",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:21:45Z"
    },
    {
      "event": "commented",
      "id": 670981067,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk4MTA2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670981067",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:37:16Z",
      "updated_at": "2020-08-08T22:38:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Those \"static assert\" hacks tend to not work well outside of GCC/Clang in my experience-- usually they use some language extension that doesn't exist everywhere.  So you add some code to detect some config no user will ever have like ones complement, but then break compiles on ordinary stuff. Self-tests are better generally.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670981067",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:46:34Z",
      "updated_at": "2020-08-08T22:46:34Z",
      "source": {
        "issue": {
          "id": 675599858,
          "node_id": "MDU6SXNzdWU2NzU1OTk4NTg=",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/792",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/792/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/792/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/792/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/792",
          "number": 792,
          "state": "open",
          "state_reason": null,
          "title": "Document / assert non-portable assumptions",
          "body": "> I think it's reasonable to require a two's complement implementation (we could verify it in a configure script, and in unit tests)\r\n\r\nIf you really have some exotic system, then you might not run ./configure or the tests either. I think the safest way is to use some C static assert hack e.g., https://stackoverflow.com/a/56742411. These looks very ugly but they work and the ugliness is hidden behind a macro. We should also check other simple assumptions such as `sizeof(int) == 4` etc. Alternatively, we could perform some self-tests at context creation time, and call the error callback if they fail. The simple ones will be optimized away by the compiler, and we should have some kind of self-test anyway if we want to implement a SHA256 override (see the discussion in #702).\r\n\r\n_Originally posted by @real-or-random in https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670979922_\r\n\r\n@gmaxwell notes there that the static assert hack may not be the best idea. ",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "created_at": "2020-08-08T22:46:33Z",
          "updated_at": "2021-02-01T17:43:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 670982361,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk4MjM2MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670982361",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:55:04Z",
      "updated_at": "2020-08-08T22:55:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "@real-or-random If we assume two's complement nothing is needed for truncation, as (int64_t)int128 == (int64_t)(uint64_t)int128. Under that assumption I think all the code in this PR is fine, except the left shift of signed values (which needs a conversion to unsigned and back).\r\n\r\nMy suggestion to use `makesigned` is for the case where we don't want to assume two's complement. Doing that would require a lot of changes in this PR (basically making all signed values unsigned, and using makesigned whenever a \"signed\" interpretation is needed).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670982361",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636032426,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjAzMjQyNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636032426",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:55:05Z"
    },
    {
      "event": "subscribed",
      "id": 3636032428,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzYwMzI0Mjg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636032428",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T22:55:05Z"
    },
    {
      "event": "commented",
      "id": 670983243,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk4MzI0Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/670983243",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T23:06:53Z",
      "updated_at": "2020-08-08T23:07:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @real-or-random If we assume two's complement nothing is needed for truncation, as (int64_t)int128 == (int64_t)(uint64_t)int128. Under that assumption I think all the code in this PR is fine, except the left shift of signed values (which needs a conversion to unsigned and back).\r\n\r\nTwo's complement doesn't say anything about truncation. I was making a difference between conversion from unsigned to signed and truncation of signed, which are both implementation-defined but different issues. So I believe there's nothing in the standard that guarantees that for your implementation  `(int64_t)int128 == (int64_t)(uint64_t)int128` is guaranteed to hold. \r\n\r\nBut anyway, I think this is a somewhat useless discussion. We should just assume and assert that both are the same value (That's why I had added that sentence in parentheses.) and that we have two's complement, and the problem is solved. ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-670983243",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636037877,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjAzNzg3Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636037877",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T23:06:53Z"
    },
    {
      "event": "subscribed",
      "id": 3636037878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzYwMzc4Nzg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636037878",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-08T23:06:53Z"
    },
    {
      "event": "commented",
      "id": 671025924,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAyNTkyNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671025924",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T08:52:24Z",
      "updated_at": "2020-08-09T08:52:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Are there current or planned uses of modular inversion where we know the input size in bits is (always or usually) shorter than the full 256 bits?",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671025924",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671028655,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAyODY1NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671028655",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T09:21:00Z",
      "updated_at": "2020-08-09T09:21:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "@apoelstra  Anything in bulletproofs?\r\n\r\nI recall making a prior proposal for an accountable multiparty signature with size O(missing_parties) where in a naive implementation the verifier needed to invert small values (the coefficients of a vandermonde matrix)-- but I was able to reorder it to get the inversions into the signer and setup.  It's doesn't seem impossible that there would be some cause for it, esp in the scalar field.\r\n\r\nOne case where we commonly deal with non-full-size numbers is the reduced scalars that show up as a result of the endomorphism decomposition, but nothing is coming to mind as a reason to invert one of them.\r\n\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671028655",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636315797,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjMxNTc5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636315797",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T09:21:00Z"
    },
    {
      "event": "subscribed",
      "id": 3636315799,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzYzMTU3OTk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636315799",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T09:21:00Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YmZkN2EwZmJkNmVmMmQ2MGQxMmNlNjNlMmNlMjkyMWFhODQyNGMxYg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bfd7a0fbd6ef2d60d12ce63e2ce2921aa8424c1b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bfd7a0fbd6ef2d60d12ce63e2ce2921aa8424c1b",
      "tree": {
        "sha": "a27ceeaac9f5a73e98d3d668b0340c831f89c5d0",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a27ceeaac9f5a73e98d3d668b0340c831f89c5d0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/34bec400bffc1c12a8cd8cc9163bc3b1a9947f64",
          "sha": "34bec400bffc1c12a8cd8cc9163bc3b1a9947f64",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/34bec400bffc1c12a8cd8cc9163bc3b1a9947f64"
        }
      ],
      "message": "Alternate var-time divsteps code",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T09:44:33Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T09:44:33Z"
      },
      "sha": "bfd7a0fbd6ef2d60d12ce63e2ce2921aa8424c1b"
    },
    {
      "event": "commented",
      "id": 671032686,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAzMjY4Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671032686",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:05:00Z",
      "updated_at": "2020-08-09T10:05:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell I pushed some alternate code under preprocessor tags for divsteps_62_var and divsteps_30_var (so 4 places total) that I'd like you to try on the ARM systems please. All the blocks look like this:\r\n\r\n```\r\n#if 1\r\n        /* Handle up to 3 divsteps at once, subject to eta and i. */\r\n        /* ... */\r\n#else\r\n        g += f;\r\n        q += u;\r\n        r += v;\r\n#endif\r\n```\r\n\r\nThe \"3 divsteps\" is faster everywhere on my machine, but not by a huge margin, so maybe that's a deoptimization for the ARM systems?",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671032686",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636342251,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjM0MjI1MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636342251",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:05:00Z"
    },
    {
      "event": "subscribed",
      "id": 3636342252,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzYzNDIyNTI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636342252",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:05:01Z"
    },
    {
      "event": "commented",
      "id": 671033350,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAzMzM1MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671033350",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:12:49Z",
      "updated_at": "2020-08-09T10:12:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @apoelstra Anything in bulletproofs?\r\n\r\nNot natively but I could imagine that one could optimize some of the inversions there. The inner product proofs need scalar inversions of (Fiat-Shamir) challenges a few times, and at least in the case of Schnorr sigs, a challenge 128 bits are sufficient there to guarantee soundness and extractability. (This is just a random idea. This needs some careful investigation, and I haven't looked at the details.)\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671033350",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671033351,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAzMzM1MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671033351",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:12:49Z",
      "updated_at": "2020-08-09T10:12:49Z",
      "author_association": "NONE",
      "body": "On GPU, this code is a bit faster.\r\n\r\n```\r\n   /*\r\n    int64_t m,w;\r\n    // Handle up to 3 divsteps at once, subject to eta and bitCount\r\n    int limit = (*eta + 1) > bitCount ? bitCount : (*eta + 1);\r\n    m = (UINT64_MAX >> (64 - limit)) & 7U;\r\n    // Note that f * f == 1 mod 8, for any f\r\n    w = (-u0 * v0) & m;\r\n    v0 += u0 * w;\r\n    *vu += *uu * w;\r\n    *vv += *uv * w;\r\n    */\r\n\r\n    v0 += u0;\r\n    *vu += *uu;\r\n    *vv += *uv;\r\n```",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671033351",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636346911,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjM0NjkxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636346911",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:12:49Z"
    },
    {
      "event": "subscribed",
      "id": 3636346912,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzYzNDY5MTI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636346912",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:12:49Z"
    },
    {
      "event": "commented",
      "id": 671035554,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAzNTU1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671035554",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:37:54Z",
      "updated_at": "2020-08-09T10:40:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman  Pieter had me try exactly that 15 hours ago. :P It was faster on the 32-bit arm, but not by a huge margin and slower on the 64-bit arm, and slower on x86_64 (obviously or you wouldn't have had the optimization in the first place).\r\n\r\n(see above for the pre-deoptimization numbers)\r\n\r\narmv7 i.MX53 32-bit (asm) sipa-safegcd:\r\nscalar_inverse: min 43.3us / avg 43.4us / max 43.5us\r\nscalar_inverse_var: min 24.2us / avg 24.2us / max 24.2us\r\nfield_inverse: min 38.6us / avg 38.6us / max 38.6us\r\nfield_inverse_var: min 20.6us / avg 20.6us / max 21.1us\r\n\r\narmv8 (S905 A53) 64-bit sipa-safegcd:\r\nscalar_inverse: min 12.8us / avg 12.8us / max 12.8us\r\nscalar_inverse_var: min 6.33us / avg 6.34us / max 6.34us\r\nfield_inverse: min 12.2us / avg 12.2us / max 12.2us\r\nfield_inverse_var: min 5.83us / avg 5.83us / max 5.83us\r\n\r\nepyc 64-bit safegcd:\r\nscalar_inverse: min 3.20us / avg 3.20us / max 3.21us\r\nscalar_inverse_var: min 1.61us / avg 1.61us / max 1.62us\r\nfield_inverse: min 3.16us / avg 3.16us / max 3.16us\r\nfield_inverse_var: min 1.59us / avg 1.59us / max 1.59us\r\n\r\nepyc 64-bit sipa-safegcd:\r\nscalar_inverse: min 3.20us / avg 3.21us / max 3.22us\r\nscalar_inverse_var: min 1.69us / avg 1.70us / max 1.70us\r\nfield_inverse: min 3.16us / avg 3.16us / max 3.16us\r\nfield_inverse_var: min 1.65us / avg 1.66us / max 1.66us\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671035554",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636361332,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjM2MTMzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636361332",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:37:55Z"
    },
    {
      "event": "subscribed",
      "id": 3636361333,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzYzNjEzMzM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636361333",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:37:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6Zjg3M2MzYjUwM2JmOGU3YzM2MGJmOGI0NDA0ODhlMDdhZWIzZWMyYQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f873c3b503bf8e7c360bf8b440488e07aeb3ec2a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f873c3b503bf8e7c360bf8b440488e07aeb3ec2a",
      "tree": {
        "sha": "45acd250950889128b24cba45b621d2ba2ebd095",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/45acd250950889128b24cba45b621d2ba2ebd095"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bfd7a0fbd6ef2d60d12ce63e2ce2921aa8424c1b",
          "sha": "bfd7a0fbd6ef2d60d12ce63e2ce2921aa8424c1b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bfd7a0fbd6ef2d60d12ce63e2ce2921aa8424c1b"
        }
      ],
      "message": "Add comments regarding small inputs",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T10:40:44Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T10:40:44Z"
      },
      "sha": "f873c3b503bf8e7c360bf8b440488e07aeb3ec2a"
    },
    {
      "event": "commented",
      "id": 671037395,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAzNzM5NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671037395",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T10:58:47Z",
      "updated_at": "2020-08-09T10:58:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "For small inputs, I've added a comment explaining an optimization when len(g) is bounded (const-time) or short (var-time). It's based on the simple observation that you could imagine `g1 = g << clz(g)` as the input instead, in which case the first clz(g) divsteps would simply be shifting g1 down and decrementing eta, taking us back to the originally input g - yet safegcd(g1) would still complete within 741 divsteps total.\r\n\r\nProbably with some math you could show that the worst-case iterations are reduced close to double that.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671037395",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MTc5ODJkODIwZWU3ODBjNWNhNDg4ZjYyNjYxYjgzMzc2ZGQ1YWZiNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/17982d820ee780c5ca488f62661b83376dd5afb7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/17982d820ee780c5ca488f62661b83376dd5afb7",
      "tree": {
        "sha": "1e0058868b366b435eb32ef9fab359cfa1eb558d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1e0058868b366b435eb32ef9fab359cfa1eb558d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f873c3b503bf8e7c360bf8b440488e07aeb3ec2a",
          "sha": "f873c3b503bf8e7c360bf8b440488e07aeb3ec2a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f873c3b503bf8e7c360bf8b440488e07aeb3ec2a"
        }
      ],
      "message": "Avoid left shift of signed values",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T11:37:17Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T11:37:17Z"
      },
      "sha": "17982d820ee780c5ca488f62661b83376dd5afb7"
    },
    {
      "event": "commented",
      "id": 671043620,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA0MzYyMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671043620",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T12:03:07Z",
      "updated_at": "2020-08-09T12:03:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman you can always conditionally negate a number if it shaves off bits and negate the inverse if you did. Doing so reduces the maximum (and average) by 1 bit. Does that pay for itself?",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671043620",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3636410755,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYzNjQxMDc1NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636410755",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T12:03:07Z"
    },
    {
      "event": "subscribed",
      "id": 3636410756,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MzY0MTA3NTY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3636410756",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T12:03:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MDZkNTY4YTdlNjU5NmFhZTlhNjgzN2JiMmVlZTMxMDgzNDdjYmMzYQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/06d568a7e6596aae9a6837bb2eee3108347cbc3a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/06d568a7e6596aae9a6837bb2eee3108347cbc3a",
      "tree": {
        "sha": "e48cc86944b22a753984f46bd9d718ab06a995d5",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e48cc86944b22a753984f46bd9d718ab06a995d5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/17982d820ee780c5ca488f62661b83376dd5afb7",
          "sha": "17982d820ee780c5ca488f62661b83376dd5afb7",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/17982d820ee780c5ca488f62661b83376dd5afb7"
        }
      ],
      "message": "Add alternative to __builtin_ctz intrinsics\n\n- lookup tables based on  de Bruijn sequences",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T13:40:46Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T13:40:46Z"
      },
      "sha": "06d568a7e6596aae9a6837bb2eee3108347cbc3a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MTY1MDljYTA2ODQxMGNiOWMzYmQ0NWU3YTE3YjVkZTk5NmJhZWExYQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/16509ca068410cb9c3bd45e7a17b5de996baea1a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/16509ca068410cb9c3bd45e7a17b5de996baea1a",
      "tree": {
        "sha": "6e3698929c7bb87f3d21e13f5d3e236f1f87265a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6e3698929c7bb87f3d21e13f5d3e236f1f87265a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/06d568a7e6596aae9a6837bb2eee3108347cbc3a",
          "sha": "06d568a7e6596aae9a6837bb2eee3108347cbc3a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/06d568a7e6596aae9a6837bb2eee3108347cbc3a"
        }
      ],
      "message": "Write primes in signed-digit form",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T14:54:40Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T14:54:40Z"
      },
      "sha": "16509ca068410cb9c3bd45e7a17b5de996baea1a"
    },
    {
      "event": "commented",
      "id": 671062536,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA2MjUzNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671062536",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T15:01:30Z",
      "updated_at": "2020-08-09T15:01:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "armv7 i.MX53 32-bit (asm) safegcd-altdivstep-no-ctz:\r\nscalar_inverse: min 43.7us / avg 43.8us / max 43.9us\r\nscalar_inverse_var: min 28.0us / avg 28.0us / max 28.1us\r\nfield_inverse: min 37.7us / avg 37.7us / max 37.7us\r\nfield_inverse_var: min 23.5us / avg 23.6us / max 24.1us\r\n\r\nSo not faster even on the arm7 which doesn't have a ctz (it uses bitrev and clz)... but it's good to have a fallback handy for where the builtin doesn't exist.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671062536",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NDBjODE1ZWJlMTZjZGQwMmQwYTBmNzkxMjJhOTRhYjEwOTY5NzAyYw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/40c815ebe16cdd02d0a0f79122a94ab10969702c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/40c815ebe16cdd02d0a0f79122a94ab10969702c",
      "tree": {
        "sha": "6d370374df1bb57b78ab7f63e1ffd65e635f4179",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6d370374df1bb57b78ab7f63e1ffd65e635f4179"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/16509ca068410cb9c3bd45e7a17b5de996baea1a",
          "sha": "16509ca068410cb9c3bd45e7a17b5de996baea1a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/16509ca068410cb9c3bd45e7a17b5de996baea1a"
        }
      ],
      "message": "Unify _update_de_ methods",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T15:28:17Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-09T15:28:17Z"
      },
      "sha": "40c815ebe16cdd02d0a0f79122a94ab10969702c"
    },
    {
      "event": "commented",
      "id": 671068731,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA2ODczMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671068731",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T15:56:06Z",
      "updated_at": "2020-08-09T15:56:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Unify _update_de appears to be a 17% performance loss on arm7 field var inverse?  Scalar doesn't appear to have been hurt.\r\n\r\nI didn't see why at a glance, so I retested several times. 17% is a bit large for compiler noise. :P\r\n\r\nBefore: (with clz on and merged divstep off)\r\nscalar_inverse: min 43.5us / avg 43.5us / max 43.6us\r\nscalar_inverse_var: min 24.0us / avg 24.1us / max 24.1us\r\nfield_inverse: min 38.1us / avg 38.1us / max 38.2us\r\nfield_inverse_var: min 19.7us / avg 19.7us / max 19.7us\r\n\r\nAfter:\r\nscalar_inverse: min 43.7us / avg 43.7us / max 43.8us\r\nscalar_inverse_var: min 24.2us / avg 24.2us / max 24.3us\r\nfield_inverse: min 43.3us / avg 43.3us / max 43.4us\r\nfield_inverse_var: min 23.8us / avg 23.8us / max 23.8us\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671068731",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671069312,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA2OTMxMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671069312",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T16:01:03Z",
      "updated_at": "2020-08-09T16:35:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "> * I'm not sure that int128 -> int64 truncation (or int64 -> int32) is well-defined. It's not UB, but I believe it is implementation defined what it means. I doubt any reasonable platform does anything but reinterpreting the bottom 64/32 bits in two's complement, but it would be nice to not rely on this. I believe a `int64_t makesigned(uint64_t x) { return (x >> 63) ? -(int64_t)(~x)-1 : (int64_t)x; }` works and is optimized out on all reasonable platforms I can test on godbolt (gcc, clang, msvc, icc, on arm/ppc/x86 at least). I hate such stupid workarounds, and would love an argument why this isn't needed if anyone has one.\r\n\r\nHappy to change things, but it sounds from later comments like the plan might be to self-test for reasonable behaviour.\r\n\r\n> * Only encode, decode, and the inner core's P/I62 depend on the modulus, I think? Would you mind trying what performance impact there is from merging the scalar/fe operations (but pass in a pointer to an object with precomputed P/I62?). Otherwise I'm happy to do that.\r\n\r\nYep, `encode`, `decode` and now the field/scalar versions of `_update_de_(30/62)` are the same except for P and I(30/62). gcc is unrolling the loop in `_update_de_` methods so by writing the primes with signed digits we retain optimal performance.\r\n\r\nAccording to my testing, P and I(30/62) could now be made into arguments without performance loss iff the `_update_de_` methods are inlined. If the intention was to share the actual inv/inv_var methods then you start to need deep inlining.\r\n\r\nEDIT: Okay, maybe not, looks like this was a \"works for me at -O3\" thing.\r\n\r\n> * __builtin_ctzl[l] isn't always available, so a workaround will be needed. Is it better to just not have this level of granulary (i.e. just do one bit at a time per iteration, and perhaps break when g=0 is reached), or to manually count the zero bits but keep the existing algorithm?\r\n\r\nChanged code to default to portable alternative. If anyone wants to work on providing `CTZ32(uint32_t)` and `CTZ64(uint64_t)` wrappers that would be helpful.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671069312",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671069634,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA2OTYzNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671069634",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T16:03:58Z",
      "updated_at": "2020-08-09T16:04:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Unify _update_de appears to be a 17% performance loss on arm7 field var inverse?\r\n\r\nCan you check if it's unrolling the loop in `_update_de_`? Also please mention the compiler version and options so I can take a look in godbolt.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671069634",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671071205,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA3MTIwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671071205",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T16:17:02Z",
      "updated_at": "2020-08-09T16:32:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "gcc version 9.3.0 (GCC) \r\n\r\n./configure --with-asm=arm --enable-experimental && make clean && make bench_internal && ./bench_internal scalar && ./bench_internal field\r\n\r\n```diff\r\ndiff --git a/src/field_10x26_impl.h b/src/field_10x26_impl.h\r\nindex 48551a8..43d3d9e 100644\r\n--- a/src/field_10x26_impl.h\r\n+++ b/src/field_10x26_impl.h\r\n@@ -1301,7 +1301,7 @@ static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t\r\n         /* Use a sentinel bit to count zeros only up to i. */\r\n         x = g | (UINT32_MAX << i);\r\n \r\n-#if 0\r\n+#if 1\r\n         zeros = __builtin_ctzl(x);\r\n #else\r\n         zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\r\n@@ -1329,7 +1329,7 @@ static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t\r\n             z = v; v = r; r = -z;\r\n         }\r\n \r\n-#if 1\r\n+#if 0\r\n         /* Handle up to 3 divsteps at once, subject to eta and i. */\r\n         limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\r\n         m = (UINT32_MAX >> (32 - limit)) & 7U;\r\ndiff --git a/src/scalar_8x32_impl.h b/src/scalar_8x32_impl.h\r\nindex 6912e51..c5c80e5 100644\r\n--- a/src/scalar_8x32_impl.h\r\n+++ b/src/scalar_8x32_impl.h\r\n@@ -866,7 +866,7 @@ static uint32_t secp256k1_scalar_divsteps_30_var(uint32_t eta, uint32_t f0, uint\r\n         /* Use a sentinel bit to count zeros only up to i. */\r\n         x = g | (UINT32_MAX << i);\r\n \r\n-#if 0\r\n+#if 1\r\n         zeros = __builtin_ctzl(x);\r\n #else\r\n         zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\r\n@@ -894,7 +894,7 @@ static uint32_t secp256k1_scalar_divsteps_30_var(uint32_t eta, uint32_t f0, uint\r\n             z = v; v = r; r = -z;\r\n         }\r\n \r\n-#if 1\r\n+#if 0\r\n         /* Handle up to 3 divsteps at once, subject to eta and i. */\r\n         limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\r\n         m = (UINT32_MAX >> (32 - limit)) & 7U;\r\n```\r\n\r\nI'll look at the disassembly in a moment.\r\n\r\nhttps://0bin.net/paste/-dl8vA0ken4U05vv#qEgv2IAZnsgqVO2ObALYjSxXuybDR4O5EfvLEug8lPp  is after\r\nhttps://0bin.net/paste/2eYUwTpkaGfL-981#W9bTuyRifxZTcAAHWAAqXCrD0srfLxFAe9KEJEl6TlF is before\r\n\r\nBoth don't look unrolled to me (other than the one copy that was unrolled in before, of course)",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671071205",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671072205,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA3MjIwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671072205",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T16:26:08Z",
      "updated_at": "2020-08-09T16:26:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Can you check if it's unrolling the loop in `_update_de_`? \r\n\r\nGCC 9.3 SHOULD not unroll loops on `-O2` (but yeah, I wouldn't bet on it)..",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671072205",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671072869,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA3Mjg2OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671072869",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T16:32:19Z",
      "updated_at": "2020-08-09T16:32:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "OK, so mystery solved I guess. I've been testing at -O3 and gcc (10.2.0, x86_64) is unrolling the loop and constant-folding the array elements intelligently AFAICT. This may mean that we need to maintain the update_de method separately for performance.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671072869",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671074784,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA3NDc4NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671074784",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T16:47:49Z",
      "updated_at": "2020-08-09T16:47:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Just for amusement, O3 on the compiler, platform, and config:\r\n\r\nscalar_inverse: min 44.3us / avg 44.4us / max 44.5us\r\nscalar_inverse_var: min 27.4us / avg 27.4us / max 27.5us\r\nfield_inverse: min 44.1us / avg 44.2us / max 44.2us\r\nfield_inverse_var: min 27.1us / avg 27.2us / max 27.6us\r\n\r\nProbably blows out its poor caches. :P \r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671074784",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671077484,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA3NzQ4NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671077484",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T17:13:22Z",
      "updated_at": "2020-08-09T17:13:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "So, ignoring this hiccup, do we know why this PR struggles to match GMP on the ARM chips, when it is comparing so well on x86_64? If it's just down to some asm magic, then maybe we'd also need that to beat it here.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671077484",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671079066,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA3OTA2Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671079066",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T17:26:57Z",
      "updated_at": "2020-08-09T17:32:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "GMP does have piles of asm for arm7 and arm8. ... but interesting question as to what it could be doing more efficiently that helps.  For MSB oriented extgcd the obvious answer was multi-limb arithmetic.  That isn't as much of a factor here.\r\n\r\nFWIW, you're almost tied with it... that's pretty good but it's funny that the same algorithm is faster on x86_64. It might also just be as relative operation speed issue.  I think the lsb half GCD takes a lot more steps, but works with smaller numbers and that GMP uses a MSB oriented half-gcd that takes fewer steps but is really inefficient unless implemented with fancy techniques for the numbers.  Maybe on arm more operations with slower multiplies makes it worse off?\r\n\r\nThe performance is good enough -- though it's a little hard to shake the feeling that there is some amazing optimization being missed. :)",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671079066",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-09T18:32:08Z",
      "updated_at": "2020-08-09T18:32:08Z",
      "source": {
        "issue": {
          "id": 675743887,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDY1MTgyNzkz",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/793",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/793/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/793/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/793/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/793",
          "number": 793,
          "state": "closed",
          "state_reason": null,
          "title": "Make scalar/field choice depend on C-detected __int128 availability",
          "body": "This PR does two things:\r\n* It removes the ability to select the 5x52 field with a 8x32 scalar, or the 10x26 field with a 4x64 scalar. It's both 128-bit wide versions, or neither.\r\n* The choice is made automatically by the C code, unless overridden by a USE_FORCE_WIDEMUL_INT{64,128} define (which is available through `configure` with a hidden option --with-test-override-wide-multiplication={auto,int64,int128}).\r\n\r\nThis reduces the reliance on autoconf for this performance-critical configuration option, and also reduces the number of different combinations to test.\r\n\r\nThis removes one theoretically useful combination: if you had x86_64 asm but no __int128 support in your compiler, it was possible to use the 64-bit field before but the 32-bit scalar. I think this doesn't matter as all compilers/systems that support (our)  x86_64 asm also support __int128. Furthermore, #767 will break this.\r\n\r\nAs an unexpected side effect, this also means the `gen_context` static precomputation tool will now use __int128 based implementations when available (which required an addition to the 5x52 field; see first commit).\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/793",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/793",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/793.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/793.patch"
          },
          "closed_at": "2020-08-12T13:30:44Z",
          "created_at": "2020-08-09T18:00:58Z",
          "updated_at": "2020-08-12T13:30:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 671170661,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTE3MDY2MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671170661",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T05:39:35Z",
      "updated_at": "2020-08-10T05:39:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "For the var-time case I think there's a little more blood to squeeze from the stone. The transition matrices from each _divsteps_62_var contain 63-bit signed values (-2^62 <= u,v,q,r < 2^62) in the worst case, but on random inputs the minimum number of sign bits over all matrix entries averages more than 28 leading zeros (measured on function exit), which should allow another 26 iterations safely (without per-iteration checks on the matrix element sizes).\r\n\r\nSo if we pass in also f1, g1 (i.e. the second 62-bit limb of each), then after the first 62 iterations we can check the actual size of the matrix elements. For some minimum of available bits we would then get new f, g from f0, f1, g0, g1 and the matrix, and restart a second loop to continue updating the matrix.\r\n\r\nThis should result in the outer loop typically finishing in 7 (often 6) iterations instead of 9, saving 2 full updates of d, e, f, g. Saving those full updates is probably even more important for 32bit, although it can probably save proportionally fewer.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671170661",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 671181429,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTE4MTQyOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671181429",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T06:17:13Z",
      "updated_at": "2020-08-10T06:30:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "OK, the flaw with that idea is that the full updates assume 62 divsteps were done. Drat.\r\n\r\nEDIT: I mean, it can still work, but you'd need new full update methods that would shift down the 1 fixed 62bit limb + also an extra shift down of some extra number of bits, _guaranteed 0 <= bits < 62_. So not too bad, but extra code.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671181429",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZGM1OGY0ZjA5NDEyMGFhMDQ0NDUzZjQ0NTdhYTA0MzllNmI1NzE3Yw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dc58f4f094120aa044453f4457aa0439e6b5717c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dc58f4f094120aa044453f4457aa0439e6b5717c",
      "tree": {
        "sha": "60825ba18ba8baab4d0b2d830ce3a7e27be10f72",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/60825ba18ba8baab4d0b2d830ce3a7e27be10f72"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/40c815ebe16cdd02d0a0f79122a94ab10969702c",
          "sha": "40c815ebe16cdd02d0a0f79122a94ab10969702c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/40c815ebe16cdd02d0a0f79122a94ab10969702c"
        }
      ],
      "message": "Redo update_de methods",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-10T19:31:00Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-10T19:31:00Z"
      },
      "sha": "dc58f4f094120aa044453f4457aa0439e6b5717c"
    },
    {
      "event": "commented",
      "id": 671576399,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTU3NjM5OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/671576399",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T20:35:20Z",
      "updated_at": "2020-08-10T20:35:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh good, that performs well (on 64-bit) without any O3 required.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-671576399",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MTMyYzc2ZGMzYTdjMmY2NTUzYzg5ZTY4NDk3N2I2ZTcwNmEyODQ2YQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/132c76dc3a7c2f6553c89e684977b6e706a2846a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/132c76dc3a7c2f6553c89e684977b6e706a2846a",
      "tree": {
        "sha": "0467542bf97bde60dd9d8db12fb8f59083ce551f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0467542bf97bde60dd9d8db12fb8f59083ce551f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dc58f4f094120aa044453f4457aa0439e6b5717c",
          "sha": "dc58f4f094120aa044453f4457aa0439e6b5717c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dc58f4f094120aa044453f4457aa0439e6b5717c"
        }
      ],
      "message": "Faster 64bit _inv_var, why not?",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-11T19:27:26Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-11T19:27:26Z"
      },
      "sha": "132c76dc3a7c2f6553c89e684977b6e706a2846a"
    },
    {
      "event": "commented",
      "id": 672228980,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjIyODk4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/672228980",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T19:41:33Z",
      "updated_at": "2020-08-11T19:41:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "64-bit var-time inverses updated. New results:\r\n\r\nsafegcd_inv (64bit):\r\nscalar_inverse_var: min 1.293us / avg 1.309us / max 1.347us\r\nfield_inverse_var: min 1.249us / avg 1.266us / max 1.321us\r\n\r\nEarlier results:\r\n\r\nmaster (64bit):\r\nscalar_inverse_var: min 2.23us / avg 2.31us / max 2.49us\r\nfield_inverse_var: min 2.24us / avg 2.28us / max 2.33us\r\n\r\nsafegcd_inv (64bit) previous:\r\nscalar_inverse_var: min 1.50us / avg 1.53us / max 1.57us\r\nfield_inverse_var: min 1.44us / avg 1.47us / max 1.57us\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-672228980",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 672273665,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjI3MzY2NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/672273665",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T20:53:39Z",
      "updated_at": "2020-08-11T20:53:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman That's amazing. It's a similar speedup for me (but that's not surprising on x86_64; would be interesting to see ARM numbers too as it adds multiplications which may not be worth it). Any reason why this couldn't be done for 32-bit?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-672273665",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3644988571,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY0NDk4ODU3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3644988571",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T20:53:39Z"
    },
    {
      "event": "subscribed",
      "id": 3644988574,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NDQ5ODg1NzQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3644988574",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T20:53:39Z"
    },
    {
      "event": "commented",
      "id": 672287139,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjI4NzEzOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/672287139",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T21:24:06Z",
      "updated_at": "2020-08-11T21:35:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "arm8 (\"Redo update_de methods\")\r\nscalar_inverse: min 12.3us / avg 12.3us / max 12.3us\r\nscalar_inverse_var: min 6.88us / avg 6.88us / max 6.88us\r\nfield_inverse: min 12.0us / avg 12.0us / max 12.0us\r\nfield_inverse_var: min 6.60us / avg 6.61us / max 6.61us\r\n\r\narm8 (\"why not\")\r\nscalar_inverse: min 12.3us / avg 12.3us / max 12.4us\r\nscalar_inverse_var: min 6.76us / avg 6.76us / max 6.76us\r\nfield_inverse: min 12.0us / avg 12.0us / max 12.1us\r\nfield_inverse_var: min 6.48us / avg 6.50us / max 6.60us\r\n\r\narm8 (master)\r\nscalar_inverse: min 61.1us / avg 61.1us / max 61.1us\r\nscalar_inverse_var: min 5.61us / avg 5.62us / max 5.67us\r\nfield_inverse: min 31.5us / avg 31.5us / max 31.5us\r\nfield_inverse_var: min 5.62us / avg 5.62us / max 5.62us\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-672287139",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 672737362,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjczNzM2Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/672737362",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-12T08:40:27Z",
      "updated_at": "2020-08-12T08:40:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Any reason why this couldn't be done for 32-bit?\r\n\r\nOh it should work, and I will get to it, but it's largely guesswork without the actual hardware; I will try to push a selectable set of options to make it simple to test some variants.\r\n\r\nKeep in mind that when the multiplications \"work\" the number of loop iterations is reduced, so it's not initially a linear increase in cost when adding more. It's about fishing for potential saved loop iterations as cheaply as possible.\r\n\r\nNote that the multiplications used to determine w are only 8 bit (even less) non-widening multiplications. \"f * g\" and \"f * f\" can be in parallel. Then there are 3 non-widening multiplications by w. Not to mention the 3 parallel swap/negates. So there is real potential for vector instructions to speed this up. u, v, q, r can easily live in SIMD registers and according to godbolt, x86-64 clang (trunk) is already doing that (I looked at _fe_divsteps_62).\r\n\r\nI'm particularly keen to see someone apply NEON magic for the 32 bit version (because I'm a sore loser and want to beat gmp _everywhere_).\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-672737362",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 672781824,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3Mjc4MTgyNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/672781824",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-12T10:08:47Z",
      "updated_at": "2020-08-12T10:08:47Z",
      "author_association": "CONTRIBUTOR",
      "body": ">So there is real potential for vector instructions to speed this up. u, v, q, r can easily live in SIMD registers and according to godbolt, x86-64 clang (trunk) is already doing that (I looked at _fe_divsteps_62).\r\n\r\nNeat! You may want to try `-ftree-vectorize` (included in `-O3`) in GCC.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-672781824",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MmY2ZGZhMjE0NjRiNjNmOTA5N2FiMDcxOTlhZWUzZGVhNjc0ZDIxNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2f6dfa21464b63f9097ab07199aee3dea674d214",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2f6dfa21464b63f9097ab07199aee3dea674d214",
      "tree": {
        "sha": "38c96e6cc156ed366e00a04886f8b95270e20c44",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/38c96e6cc156ed366e00a04886f8b95270e20c44"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/132c76dc3a7c2f6553c89e684977b6e706a2846a",
          "sha": "132c76dc3a7c2f6553c89e684977b6e706a2846a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/132c76dc3a7c2f6553c89e684977b6e706a2846a"
        }
      ],
      "message": "Get better control over the range of d, e",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-12T10:32:22Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-12T10:32:22Z"
      },
      "sha": "2f6dfa21464b63f9097ab07199aee3dea674d214"
    },
    {
      "event": "referenced",
      "id": 3647725066,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NDc3MjUwNjY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3647725066",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "887bd1f8b61857c091398358609d4fc180237a46",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/887bd1f8b61857c091398358609d4fc180237a46",
      "created_at": "2020-08-12T13:30:43Z"
    },
    {
      "event": "commented",
      "id": 673186952,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzE4Njk1Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/673186952",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-13T01:02:27Z",
      "updated_at": "2020-08-13T01:02:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman To formalize assumptions about conversions to signed, and right shifts of signed numbers: https://github.com/bitcoin-core/secp256k1/pull/798",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-673186952",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3649973470,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY0OTk3MzQ3MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3649973470",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-13T01:02:27Z"
    },
    {
      "event": "subscribed",
      "id": 3649973474,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NDk5NzM0NzQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3649973474",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-13T01:02:27Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OTA3NDNkMjlhYjkzYzBkNzRkNjBmMmM5NDdiNDU2ODYyODRkYTJiOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/90743d29ab93c0d74d60f2c947b45686284da2b8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/90743d29ab93c0d74d60f2c947b45686284da2b8",
      "tree": {
        "sha": "7c213a5a3ef5f27ef3ff65fbe5b0d3408e132be3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7c213a5a3ef5f27ef3ff65fbe5b0d3408e132be3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2f6dfa21464b63f9097ab07199aee3dea674d214",
          "sha": "2f6dfa21464b63f9097ab07199aee3dea674d214",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2f6dfa21464b63f9097ab07199aee3dea674d214"
        }
      ],
      "message": "Verify the expected zeros are produced",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-13T10:16:23Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-13T10:16:23Z"
      },
      "sha": "90743d29ab93c0d74d60f2c947b45686284da2b8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NWRlMmM4MzM5MDdmNGRkYjk0ZDlkMTNkYzM3MjE0NzM0ZWViZmRhNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5de2c833907f4ddb94d9d13dc37214734eebfda4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5de2c833907f4ddb94d9d13dc37214734eebfda4",
      "tree": {
        "sha": "d2c181ea9badf68b0522edcc392a5aa3f570c62a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d2c181ea9badf68b0522edcc392a5aa3f570c62a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/90743d29ab93c0d74d60f2c947b45686284da2b8",
          "sha": "90743d29ab93c0d74d60f2c947b45686284da2b8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/90743d29ab93c0d74d60f2c947b45686284da2b8"
        }
      ],
      "message": "_inv_var conditional negations\n\n- tighten result magnitude for _fe_decode methods",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-13T13:08:16Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-13T13:08:16Z"
      },
      "sha": "5de2c833907f4ddb94d9d13dc37214734eebfda4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MzA4ZmQzMmUwMDQ5OTE5OTFhNTJkOTFhOWM4NDdkZGNhOThiNjllZg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/308fd32e004991991a52d91a9c847ddca98b69ef",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/308fd32e004991991a52d91a9c847ddca98b69ef",
      "tree": {
        "sha": "47380c25f6b7b2f033bed59b641a23077b84fc07",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/47380c25f6b7b2f033bed59b641a23077b84fc07"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5de2c833907f4ddb94d9d13dc37214734eebfda4",
          "sha": "5de2c833907f4ddb94d9d13dc37214734eebfda4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5de2c833907f4ddb94d9d13dc37214734eebfda4"
        }
      ],
      "message": "Experiment with f,g shortening in inv_var",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-15T07:07:05Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-15T07:07:05Z"
      },
      "sha": "308fd32e004991991a52d91a9c847ddca98b69ef"
    },
    {
      "event": "commented",
      "id": 674360932,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDM2MDkzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674360932",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T07:14:13Z",
      "updated_at": "2020-08-15T07:14:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell Your help would be appreciated measuring (for 32bit only) whether the \"Experiment with f,g shortening in inv_var\" commit is an improvement (you can toggle IS_THIS_FASTER flag in the code).\r\n\r\nOn my x86-64 machine, this change _slows down_ the 32bit version, but the equivalent 64bit code is slightly faster, so I am still hopeful that it should be an improvement on real 32bit hardware.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674360932",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3658292729,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY1ODI5MjcyOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3658292729",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T07:14:14Z"
    },
    {
      "event": "subscribed",
      "id": 3658292730,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NTgyOTI3MzA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3658292730",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T07:14:14Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZmYwY2YxMTI0YzYzMGJlNGY0Y2Q5ODBjZTMzM2JmNDYzYWQyYzI4OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ff0cf1124c630be4f4cd980ce333bf463ad2c289",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ff0cf1124c630be4f4cd980ce333bf463ad2c289",
      "tree": {
        "sha": "cd63b5a5ef03dd5ac952b286ed76338bb9f7e02f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/cd63b5a5ef03dd5ac952b286ed76338bb9f7e02f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/308fd32e004991991a52d91a9c847ddca98b69ef",
          "sha": "308fd32e004991991a52d91a9c847ddca98b69ef",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/308fd32e004991991a52d91a9c847ddca98b69ef"
        }
      ],
      "message": "f,g shortening for 64bit field",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-15T07:28:42Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-15T07:28:42Z"
      },
      "sha": "ff0cf1124c630be4f4cd980ce333bf463ad2c289"
    },
    {
      "event": "commented",
      "id": 674362482,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDM2MjQ4Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674362482",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T07:31:27Z",
      "updated_at": "2020-08-15T07:31:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Might as well test the 64bit one too.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674362482",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 674434634,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDQzNDYzNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674434634",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T18:46:41Z",
      "updated_at": "2020-08-15T18:46:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman  hurrah for optimizations\r\n\r\narm7 IS_THIS_FASTER 1\r\nfield_inverse: min 38.6us / avg 38.6us / max 38.6us\r\nfield_inverse_var: min 22.7us / avg 22.8us / max 23.2us\r\n\r\narm7 IS_THIS_FASTER 0\r\nfield_inverse: min 38.6us / avg 38.6us / max 38.6us\r\nfield_inverse_var: min 24.0us / avg 24.1us / max 24.4us\r\n\r\narm8 IS_THIS_FASTER 1\r\nfield_inverse: min 12.0us / avg 12.1us / max 12.1us\r\nfield_inverse_var: min 6.19us / avg 6.19us / max 6.19us\r\n\r\narm8 IS_THIS_FASTER 0\r\nfield_inverse: min 12.0us / avg 12.1us / max 12.1us\r\nfield_inverse_var: min 6.50us / avg 6.50us / max 6.51us\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674434634",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3658756617,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY1ODc1NjYxNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3658756617",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T18:46:41Z"
    },
    {
      "event": "subscribed",
      "id": 3658756619,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NTg3NTY2MTk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3658756619",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-15T18:46:41Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YjUxYTFiNTVkOWY5MGY3OTI3NjZjZDFkMmM3NmQ0ZTQ0NDJhNDlhZQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b51a1b55d9f90f792766cd1d2c76d4e4442a49ae",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b51a1b55d9f90f792766cd1d2c76d4e4442a49ae",
      "tree": {
        "sha": "d8d7f872a1a65e6671c8e0493993ac80393ee50d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d8d7f872a1a65e6671c8e0493993ac80393ee50d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ff0cf1124c630be4f4cd980ce333bf463ad2c289",
          "sha": "ff0cf1124c630be4f4cd980ce333bf463ad2c289",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ff0cf1124c630be4f4cd980ce333bf463ad2c289"
        }
      ],
      "message": "THIS_IS_FASTER",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-16T05:53:59Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-16T05:53:59Z"
      },
      "sha": "b51a1b55d9f90f792766cd1d2c76d4e4442a49ae"
    },
    {
      "event": "commented",
      "id": 674484181,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDQ4NDE4MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674484181",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-16T06:02:36Z",
      "updated_at": "2020-08-16T06:02:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "![4bm9ot](https://user-images.githubusercontent.com/548488/90327702-651a8700-df4b-11ea-8a34-3c2909617fb9.jpg)\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674484181",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MWJhZmYyY2FlYzMxZmY3MDliOTQwNGVkZDhhN2I3ZWEzODBkMjlkNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1baff2caec31ff709b9404edd8a7b7ea380d29d4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1baff2caec31ff709b9404edd8a7b7ea380d29d4",
      "tree": {
        "sha": "8b5c8861f333396c6d9bd70eed864433ed8ca89b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/8b5c8861f333396c6d9bd70eed864433ed8ca89b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b51a1b55d9f90f792766cd1d2c76d4e4442a49ae",
          "sha": "b51a1b55d9f90f792766cd1d2c76d4e4442a49ae",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b51a1b55d9f90f792766cd1d2c76d4e4442a49ae"
        }
      ],
      "message": "Accentuate the positive\n\n(Eliminate the negative)",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-16T12:07:25Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-16T12:07:25Z"
      },
      "sha": "1baff2caec31ff709b9404edd8a7b7ea380d29d4"
    },
    {
      "event": "commented",
      "id": 674570317,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDU3MDMxNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674570317",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-16T19:55:41Z",
      "updated_at": "2020-08-16T21:02:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman I wonder, is there any literature on (variable-time variants of) this or other LSB-based GCD algorithms, that outperform HGCD-based ones for modular inversions?\n\nAs in: how novel is the fact that this beats libgmp?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674570317",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3659579451,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY1OTU3OTQ1MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3659579451",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-16T19:55:41Z"
    },
    {
      "event": "subscribed",
      "id": 3659579452,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NTk1Nzk0NTI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3659579452",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-16T19:55:41Z"
    },
    {
      "event": "commented",
      "id": 674737990,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDczNzk5MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674737990",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T08:24:53Z",
      "updated_at": "2020-08-17T08:24:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @peterdettman I wonder, is there any literature on (variable-time variants of) this or other LSB-based GCD algorithms, that outperform HGCD-based ones for modular inversions?\r\n\r\nWell, I don't have too many papers about it. A search for \"2-adic gcd modular inversion\" returns this safegcd paper as top result. The (to me) most relevant references are to Brent–Kung and Stehlé–Zimmermann. Indeed my first attempt at this several years ago was based on \"A Binary Recursive GCD Algorithm\", except minus the recursive structure (and no constant-time version). The main difference here is a better divstep, and much clearer code (I hope).\r\n\r\n> As in: how novel is the fact that this beats libgmp?\r\n\r\nBe a little careful. We're beating libgmp at 256 bits, and I think even a generalized version of this PR (for arbitrary primes) will still be significantly faster than libgmp at this size (that's how my Java version is written and it is about the same speed as libgmp even though the Java version uses divsteps30 and 32bit muls). However this PR generalized would be quadratic; any subquadratic algorithm will eventually win out as the size increases.\r\n\r\nOf course the full safegcd algorithm is also subquadratic (read 1.4 and compare figure 12.2 image on the right) and one might expect it to typically perform better than the other subquadratic algorithms for a wide range of input sizes for the reasons discussed in 1.4 (at least in the integer case). I'm uncertain about the asymptotic performance comparison though.\r\n\r\nOne could reasonably expect safegcd to eventually be adopted by libgmp for var-time modular inversion. Probably it's even more compelling for the constant-time case.\r\n\r\nMy cunning plan:\r\n1. Convince GMP to implement safegcd.\r\n2. Copy their hand-optimized, vectorized asm version of divsteps30\r\n3. Finally our 32bit version is faster than GMP!... umm, wait... \r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674737990",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3660755636,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY2MDc1NTYzNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3660755636",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T08:24:53Z"
    },
    {
      "event": "subscribed",
      "id": 3660755641,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NjA3NTU2NDE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3660755641",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T08:24:53Z"
    },
    {
      "event": "commented",
      "id": 674905162,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDkwNTE2Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674905162",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T14:11:09Z",
      "updated_at": "2020-08-17T14:11:09Z",
      "author_association": "NONE",
      "body": "I managed to win few percent on my I5 by pre-computing an array of inverse (mod 64) rather than computing them on the fly.\r\n\r\n```\r\nint64_t INV64[] = { \r\n  -0LL,-1LL,-0LL,-43LL,-0LL,-13LL,-0LL,-55LL,-0LL,-57LL,-0LL,-35LL,-0LL,-5LL,-0LL,-47LL,\r\n  -0LL,-49LL,-0LL,-27LL,-0LL,-61LL,-0LL,-39LL,-0LL,-41LL,-0LL,-19LL,-0LL,-53LL,-0LL,-31LL,\r\n  -0LL,-33LL,-0LL,-11LL,-0LL,-45LL,-0LL,-23LL,-0LL,-25LL,-0LL,-3LL,-0LL,-37LL,-0LL,-15LL,\r\n  -0LL,-17LL,-0LL,-59LL,-0LL,-29LL,-0LL,-7LL,-0LL,-9LL,-0LL,-51LL,-0LL,-21LL,-0LL,-63LL };\r\n\r\n...\r\n\r\n      // Handle up to 6 divsteps at once, subject to eta and bitCount.\r\n      limit = (*eta + 1) > bitCount ? bitCount : (*eta + 1);\r\n      m = (UINT64_MAX >> (64 - limit)) & 63U;\r\n      //w = (u0 * v0 * (u0 * u0 - 2)) & m; // w = v0 * -u0^-1 mod 2^6  (1 Newton step => 6bit)\r\n      w = (v0 * INV64[u0 & 63U]) & m;\r\n\r\n    } else {\r\n\r\n      // Handle up to 4 divsteps at once, subject to eta and bitCount.\r\n      limit = (*eta + 1) > bitCount ? bitCount : (*eta + 1);\r\n      m = (UINT64_MAX >> (64 - limit)) & 15U;\r\n      //w = u0 + (((u0 + 1) & 4) << 1); \r\n      //w = (-w * v0) & m;   // w = v0 * -u0^1 mod 2^4\r\n      w = (v0 * INV64[u0 & 15U]) & m;\r\n```",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674905162",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 674984379,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDk4NDM3OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/674984379",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T16:35:16Z",
      "updated_at": "2020-08-17T16:35:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, I was intending to try something like this, especially for 32bit. Note that u0 should always be odd, so the table could be half-size if you shift u0 down 1 bit. Also, if you have a table for 6 divsteps anyway, you might as well use it in both branches (or rather move it out of the if/else).",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-674984379",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NjU1NTBjMWY2ZDQ0ZGEyYmQ5ZDcyZDZmZDIyNTZhNmNiYTBmZDgyOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/65550c1f6d44da2bd9d72d6fd2256a6cba0fd828",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/65550c1f6d44da2bd9d72d6fd2256a6cba0fd828",
      "tree": {
        "sha": "d803b57ee39be82c1834bf3efe34e368cfb05b03",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d803b57ee39be82c1834bf3efe34e368cfb05b03"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1baff2caec31ff709b9404edd8a7b7ea380d29d4",
          "sha": "1baff2caec31ff709b9404edd8a7b7ea380d29d4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1baff2caec31ff709b9404edd8a7b7ea380d29d4"
        }
      ],
      "message": "Try 128 byte table of inverses",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-17T17:50:29Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-17T17:50:29Z"
      },
      "sha": "65550c1f6d44da2bd9d72d6fd2256a6cba0fd828"
    },
    {
      "event": "commented",
      "id": 675036565,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTAzNjU2NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/675036565",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T18:20:22Z",
      "updated_at": "2020-08-17T18:20:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Per @JeanLucPons  suggestion, I've updated the 32bit version to use a table for calculating w.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-675036565",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3663061746,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY2MzA2MTc0Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3663061746",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T18:20:22Z"
    },
    {
      "event": "subscribed",
      "id": 3663061748,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NjMwNjE3NDg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3663061748",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T18:20:22Z"
    },
    {
      "event": "commented",
      "id": 675122178,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTEyMjE3OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/675122178",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T21:21:42Z",
      "updated_at": "2020-08-17T21:21:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "I regret to inform you that perhaps 8 was too audacious (or not audacious enough):\r\n\r\nOn ARM7, \r\n\r\nTable:\r\nscalar_inverse: min 43.3us / avg 43.4us / max 43.5us\r\nscalar_inverse_var: min 26.0us / avg 26.0us / max 26.2us\r\nfield_inverse: min 38.3us / avg 38.3us / max 38.6us\r\nfield_inverse_var: min 22.2us / avg 22.2us / max 22.2us\r\n\r\nCommit under the table:\r\nscalar_inverse: min 43.3us / avg 43.4us / max 43.6us\r\nscalar_inverse_var: min 25.9us / avg 25.9us / max 26.0us\r\nfield_inverse: min 38.3us / avg 38.3us / max 38.4us\r\nfield_inverse_var: min 22.1us / avg 22.1us / max 22.3us\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-675122178",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 675501235,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTUwMTIzNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/675501235",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T14:09:46Z",
      "updated_at": "2020-08-18T14:09:46Z",
      "author_association": "NONE",
      "body": "On my i5 the best gain was obtained with 6 bits (outside the eta test), without the >>1 (I store the 0s in the table to avoid the right shift) and using a int64_t array but the gain is only ~3%.\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-675501235",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 675769329,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTc2OTMyOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/675769329",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T23:31:43Z",
      "updated_at": "2020-08-18T23:31:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Just saw this: https://twitter.com/BearSSLnews/status/1295717508012539911\r\n\r\nIf I understand it correctly, an MSB constant-time extgcd based modular inversion, which using BMI2 intrinsics on x86_64 sets a speed record.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-675769329",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 675801987,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTgwMTk4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/675801987",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T01:38:58Z",
      "updated_at": "2020-08-19T01:47:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looked into it a bit more. Code can be found on https://github.com/pornin/bingcd/blob/main/src/gf25519.c, and a paper on https://eprint.iacr.org/2020/972.\r\n\r\nWhere safegcd uses just the lower bits to make step decisions, the algorithm there uses both the top and lower bits (but ignores the middle ones!), and then similarly aggregates them and applies them in bulk to the entire number. Dropping the middle bits means that subtractions may result in the wrong sign when applied to the full number, but this is apparently correctable.\r\n\r\nFor constant-timeness it critically relies on a way to count leading zero bits and to shift in constant time. That's not something that can be guaranteed on every platform, annoyingly. Perhaps this approach is useful as a specialized implementation, but safegcd seems more useful generally as it is constant time and has decent performance on generic hardware.\r\n\r\nFor performance it relies on quick computation of leading zeroes, and a quick way to compute (a*b+c*d) mod p (with p the modulus for the inverse). His numbers for ed25519 on BMI2 hardware (where leading zeroes can be computed very quickly with `lzcnt`, and multiplications mod p are easy (p being close to a power of 2) definitely beat the (non-assembly-optimized) constant-time code here, by almost a factor 1.5. But as said, it doesn't seem generally usable for that purpose.\r\n\r\nAs a competitor for a variable-time algorithm, the code in this PR is already ~20% faster. Of course, a variable-time variant of the algorithm there may be better (and much more applicable as a fast variable-time leading-zero-bit counter isn't hard), but would need work to see what variable-time optimizations apply.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-675801987",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 675916402,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTkxNjQwMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/675916402",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T07:57:37Z",
      "updated_at": "2020-08-19T07:57:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa Thanks for linking this paper (henceforth \"optbingcd\"), but how are you reading an (almost) 1.5 factor advantage? The only thing I can think is that you have compared 744 divsteps to 508 iterations.\r\n\r\n> His numbers for ed25519 on BMI2 hardware (where leading zeroes can be computed very quickly with `lzcnt`, and multiplications mod p are easy (p being close to a power of 2) definitely beat the (non-assembly-optimized) constant-time code here, by almost a factor 1.5.\r\n\r\nThe optbingcd paper claims 7490 vs 8520 cycles for safegcd on Coffee Lake (Kaby Lake). safegcd reported \"10050 cycles, 8778 cycles, and 8543 cycles\" for \"Haswell, Skylake, and Kaby Lake respectively\".\r\n\r\nNow, I really need to get a proper cycles benchmark for this PR (help certainly appreciated here), but based only on my latest 2.6GHz Haswell _timings_ (field_inverse in 2.87us, -O3 to match their CFLAGS), scaled to Coffee Lake based on the safegcd results, one could make a very rough guess of ~6343 cycles on Coffee Lake - 18% faster than optbingcd. Winning!\r\n\r\nAs a sanity check (against possible turbo or H/T), field_inverse_var (gmp) takes ~2.20us for essentially the same benchmark, variable-time.\r\n\r\nAs you note, this PR is still pure C, whereas optbingcd relies on inline assembly and intrinsics for its speed (from the paper: \"This highlights the importance of optimizing that inner loop as much as possible\"). Bo-Yin Yang was also kind enough to send me the safegcd source code for comparison, and it should not surprise anyone that its inner loop is written entirely in qhasm. The optbingcd paper reports 4572 of its 7490 cycles are spent in the inner loop (61%) on Coffee Lake. _fe_divsteps_62 is more like 80-90% of the total time for _fe_inv. Any/every cycle saved per divstep (inner loop iteration) is 744 fewer cycles total, although there are maybe only 8-9 cycles there in the first place.\r\n\r\nCan we get an x86-64 asm wizard to help us knock this one out of the park? (ARM/NEON too, obviously). #SaveACycle.\r\n\r\nI will note though that optbingcd could probably be made faster by adopting the (r,s)-updating approach from this PR (thanks again to @JeanLucPons), instead of the up-to-double-length (u,v) plus final multiplication that appears to be used for the same purpose.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-675916402",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3669545695,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY2OTU0NTY5NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3669545695",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T07:57:37Z"
    },
    {
      "event": "subscribed",
      "id": 3669545700,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2Njk1NDU3MDA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3669545700",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T07:57:37Z"
    },
    {
      "event": "mentioned",
      "id": 3669545708,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY2OTU0NTcwOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3669545708",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T07:57:37Z"
    },
    {
      "event": "subscribed",
      "id": 3669545710,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2Njk1NDU3MTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3669545710",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T07:57:37Z"
    },
    {
      "event": "commented",
      "id": 675916612,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTkxNjYxMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/675916612",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T07:58:04Z",
      "updated_at": "2020-08-19T07:58:04Z",
      "author_association": "NONE",
      "body": "```\r\n(compared with the classic binary\r\n\t * GCD, the use of the approximations may make the code \"miss one\r\n\t * bit\", but the conditional subtraction regains it)\r\n```\r\nThis recalls me my former implementation where I do not use eta or even the MSB bits to take the swap decision. I do an extra swap and subtract if u0 remains odd. It results in losing one bit on two in worst case and can end in 2 times more iterations. Here as they have a 32bit approximation of the MSB, the probability to loose one bit is really weak.\r\n\r\nOn this code, they seems to do as in this PR for the update of the bezout coefs but by performing a weak normalization at each step (they do not perform a Montgomery reduction) and they normalize at the end (modmul by GF_INVT508).\r\nI'm not convince that this method is faster than the method used in this PR and I'm not sure that a var time optimization of this code will beat this PR.\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-675916612",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 676075997,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjA3NTk5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/676075997",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T10:07:07Z",
      "updated_at": "2020-08-19T10:07:07Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  _fe_divsteps_62 is more like 80-90% of the total time for _fe_inv. Any/every cycle saved per divstep (inner loop iteration) is 744 fewer cycles total, although there are maybe only 8-9 cycles there in the first place.\r\n\r\nIt will be interesting to benchmark the difference between clang and gcc because clang uses SIMD as you noted above.\r\n\r\nhttps://godbolt.org/z/sd18M9",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-676075997",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 676296442,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjI5NjQ0Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/676296442",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T12:47:10Z",
      "updated_at": "2020-08-19T12:47:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Add e.g. -march=haswell in compiler explorer to see clang go \"full vector\". However I have tested clang 10.0.1 for 64bit case, and the performance is not very different. Actually the constant-time code benchmarks slightly faster by targeting x86-64 instead of haswell, and the opposite is true for the var-time version.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-676296442",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 678554032,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODU1NDAzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678554032",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:21:14Z",
      "updated_at": "2020-08-21T23:32:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman\r\n\r\n> @sipa Thanks for linking this paper (henceforth \"optbingcd\"), but how are you reading an (almost) 1.5 factor advantage? The only thing I can think is that you have compared 744 divsteps to 508 iterations.\r\n\r\nI just benchmarked this PR's constant time version (on an i7-7820HQ Kaby Lake, with CPU frequency locked at 2.6GHz) against the optbingcd's reported numbers. That wasn't very fair, as I don't have a Coffee Lake CPU, and was using the default `-O2`, and without `-march`.\r\n\r\nI redid the numbers now, by running the optbingcd code myself, and using `-O3 -march=native` for both this PR and optbingcd. I couldn't get all of optbingcd to work (the asm multiplication test fails, so I had to revert to using the `__int128` version - but this was only a ~1-2% performance penalty). Still:\r\n\r\n> field_inverse: min 4.10us / avg 4.10us / max 4.10us\r\n\r\n> inversion (binary GCD):   9437.84 (9424.17 .. 9449.19)\r\n\r\nAt 2.6GHz, 4.10us = 10660 cycles, so optbingcd is around 13% faster still.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678554032",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3681421478,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MTQyMTQ3OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681421478",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:21:14Z"
    },
    {
      "event": "subscribed",
      "id": 3681421479,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODE0MjE0Nzk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681421479",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:21:14Z"
    },
    {
      "event": "mentioned",
      "id": 3681421481,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MTQyMTQ4MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681421481",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:21:15Z"
    },
    {
      "event": "subscribed",
      "id": 3681421483,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODE0MjE0ODM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681421483",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:21:15Z"
    },
    {
      "event": "commented",
      "id": 678555121,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODU1NTEyMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678555121",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:26:40Z",
      "updated_at": "2020-08-21T23:26:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ping @pornin. In case you're interested, we're discussing fast modular inversion algorithms (constant and variable time), in particular safegcd-based code, but also your binary gcd algorithm.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678555121",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3681429428,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MTQyOTQyOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681429428",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:26:40Z"
    },
    {
      "event": "subscribed",
      "id": 3681429431,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODE0Mjk0MzE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681429431",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T23:26:40Z"
    },
    {
      "event": "commented",
      "id": 678610630,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODYxMDYzMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678610630",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T07:57:20Z",
      "updated_at": "2020-08-22T07:57:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa For completeness, could you please report a gmp (i.e. master branch) benchmark under the same conditions.\r\n\r\nThe optbingcd paper says \"[..] Coffee Lake and Kaby Lake use the same internal scheduler and execution units, and differ only in external pieces that should not matter much for a compact, L1-cache only computational piece of code.\". I'm thus still a bit confused as to how you can get ~9400 cycles when the paper itself reports ~7500 cycles.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678610630",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3681804723,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MTgwNDcyMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681804723",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T07:57:20Z"
    },
    {
      "event": "subscribed",
      "id": 3681804724,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODE4MDQ3MjQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3681804724",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T07:57:20Z"
    },
    {
      "event": "commented",
      "id": 678628995,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODYyODk5NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678628995",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T11:27:08Z",
      "updated_at": "2020-08-22T11:27:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Although I'm having trouble figuring out how to disable turbo boost on macos catalina, I was at least able to use Intel Power Gadget to observe the actual CPU frequency. Then running one bench_internal per core I'm able to get the CPU to settle at 2.8GHz and I get timings around 3.87us in this way, indicating ~10,850 cycles. Very rough, but broadly confirms your result.\r\n\r\nThat's somewhat disappointing, but I guess it makes sense, all things considered. On the bright side, the divstep inner loop being more like 12-13 cycles makes it more reasonable to expect a 2-3 cycle saving from an asm version.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678628995",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 678654223,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODY1NDIyMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678654223",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T15:28:32Z",
      "updated_at": "2020-08-22T15:28:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> On the bright side, the divstep inner loop being more like 12-13 cycles makes it more reasonable to expect a 2-3 cycle saving from an asm version.\r\n\r\nMoving the `eta` assignment to the end of the loop makes it already ~3% faster percent on my machine (Kabylake, gcc, -O2).  \r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678654223",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 678707156,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODcwNzE1Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678707156",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T23:13:48Z",
      "updated_at": "2020-08-22T23:23:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman \r\n\r\nAll benchmarks on i7-7820HQ pinned at 2.6 GHz, compiled with GCC 9.3.0.\r\n\r\nOn master (670cdd3f8be25f81472b2d16dcd228b0d24a5c45), -O3 -march=native\r\n* field_inverse: min 6.78us / avg 6.79us / max 6.82us\r\n* field_inverse_var: min 2.80us / avg 2.81us / max 2.85us\r\n\r\nOn master (670cdd3f8be25f81472b2d16dcd228b0d24a5c45), -O2\r\n* field_inverse: min 6.77us / avg 6.78us / max 6.79us\r\n* field_inverse_var: min 2.81us / avg 2.82us / max 2.83us\r\n\r\nOn safegcd (65550c1f6d44da2bd9d72d6fd2256a6cba0fd828), -O3 -march=native\r\n* field_inverse: min 4.10us / avg 4.11us / max 4.13us\r\n* field_inverse_var: min 2.12us / avg 2.13us / max 2.13us\r\n\r\nOn safegcd (65550c1f6d44da2bd9d72d6fd2256a6cba0fd828), -O2\r\n* field_inverse: min 4.23us / avg 4.23us / max 4.24us\r\n* field_inverse_var: min 2.35us / avg 2.35us / max 2.36us\r\n\r\noptbingcd, -O3 -march=native\r\n* inversion (binary GCD):   9442.39 (9424.53 .. 9526.05)\r\n\r\noptbingcd, -O2\r\n* inversion (binary GCD):   9860.63 (9853.78 .. 9949.89)",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678707156",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3682391648,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MjM5MTY0OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3682391648",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T23:13:48Z"
    },
    {
      "event": "subscribed",
      "id": 3682391649,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODIzOTE2NDk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3682391649",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T23:13:48Z"
    },
    {
      "event": "commented",
      "id": 678810703,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODgxMDcwMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678810703",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-23T18:53:39Z",
      "updated_at": "2020-08-23T18:53:39Z",
      "author_association": "NONE",
      "body": "Hello! I have been summoned...\r\n\r\nIt turned out that there were some edge cases that my algorithm mishandled (and the proof was wrong in one point). However, the fixed version of the algorithm is even faster. On my Coffee Lake core, cost is down to 6253 cycles.\r\n\r\nThe problem was in doing 32 iterations: as values shrink in the algorithm, the approximation loses accuracy. After 31 iterations, the loss can be severe enough that it may induce the algorithm to take a very wrong decision which makes one of the values substantially grow. This is quite improbable in practice, but in cryptography we cannot rely on luck because adversaries may try to exercise such cases on purpose.\r\n\r\nThe repaired algorithm does only 31 iterations in the inner loop; this means that \"updates\" (application of the computed update factors to the big integers) must happen once every 31 iterations instead of once every 32 iterations; this avoids the bad edge cases, at the cost of basically one extra update overall (about 220 cycles in my code). *However*, doing only 31 iterations means that update factors can now be stored more efficiently: I can put two of them in the same 64-bit register. This speeds up the inner loop, now down to about 6.17 cycles per iteration (instead of 9 cycles per iteration). Hence the better performance (and with an algorithm which is now, hopefully, correct).\r\n\r\nIf you want to stick to \"pure C\", the main problem should be convincing the C compiler to emit a code sequence that uses the appropriate `cmov` opcodes. Usually, when writing constant-time code, we use boolean combinations, but `cmov` should be faster. This unfortunately depends quite a lot on the compiler brand (GCC and Clang don't behave the same here), version, and optimization flags.\r\n",
      "user": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678810703",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 678853328,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODg1MzMyOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678853328",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T01:02:56Z",
      "updated_at": "2020-08-24T01:12:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "@pornin I realized I was compiling with GCC, while you were intending (and probably optimized for) compilation with clang. The difference is huge (and bigger than before, with your latest change). GCC needs 9600 cycles for me; clang needs only 6970. Any intuition as to what GCC is doing wrong?\r\n\r\n@peterdettman So optbingcd is now actually 1.5x faster than the (constant time) safegcd in this PR, but variable-time safegcd is another 1.25x faster than that still.\r\n\r\n> If you want to stick to \"pure C\", the main problem should be convincing the C compiler to emit a code sequence that uses the appropriate `cmov` opcodes. Usually, when writing constant-time code, we use boolean combinations, but `cmov` should be faster. This unfortunately depends quite a lot on the compiler brand (GCC and Clang don't behave the same here), version, and optimization flags.\r\n\r\nYeah, we're relying on cmovs in this codebase already for certain constant-time algorithms, and have valgrind-based tests that the result is in fact constant-time on a number of platforms. Though, is cmov sufficient for your algorithm? It seems to me you need constant-time leading-zero-counting as well, which I'm not sure is possible on every system.\r\n\r\nOne thing I'd be interested to hear is whether you think that a variable-time version of your algorithm would be possible that improves upon the runtime significantly. The variable-time safegcd variant here beats libgmp on x86_64 already, so it does seem there are possibilities.\r\n\r\nPS: we've met at HACS",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678853328",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3683317854,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MzMxNzg1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683317854",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T01:02:56Z"
    },
    {
      "event": "subscribed",
      "id": 3683317857,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODMzMTc4NTc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683317857",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T01:02:56Z"
    },
    {
      "event": "mentioned",
      "id": 3683317860,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MzMxNzg2MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683317860",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T01:02:57Z"
    },
    {
      "event": "subscribed",
      "id": 3683317863,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODMzMTc4NjM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683317863",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T01:02:57Z"
    },
    {
      "event": "commented",
      "id": 678930208,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODkzMDIwOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678930208",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T06:26:05Z",
      "updated_at": "2020-08-24T06:26:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "> update factors can now be stored more efficiently: I can put two of them in the same 64-bit register.\r\n\r\n@pornin I'm still trying to understand how to cleanly manage the operations on the shared registers, but it sounds like a neat idea that might be worth trying in this PR by splitting divsteps_62 into 2 divsteps_31 or something similar.  It will be offset by some extra matrix multiplications, but on paper it looks net positive.\r\n\r\n> If you want to stick to \"pure C\", the main problem should be convincing the C compiler to emit a code sequence that uses the appropriate `cmov` opcodes.\r\n\r\nYes, and it's quite annoying. The only idiom I can find that reliably generates cmov-like instructions is an actual `if`, and when you have several of them in a group, I've found e.g. gcc likes to guess an actual branch will be faster (hard to complain about that when your C code has literal branches).\r\n\r\n@sipa If one manages to convince clang 10.0.1 to generate conditional moves (https://godbolt.org/z/Mzafe7), then I measure an improvement of >30% for `_fe_inv`, ~8200 haswell cycles. I expect on your CPU this might be closer to ~15% slower than this updated optbingcd.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678930208",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3683874711,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4Mzg3NDcxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683874711",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T06:26:06Z"
    },
    {
      "event": "subscribed",
      "id": 3683874715,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODM4NzQ3MTU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683874715",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T06:26:06Z"
    },
    {
      "event": "mentioned",
      "id": 3683874717,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4Mzg3NDcxNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683874717",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T06:26:06Z"
    },
    {
      "event": "subscribed",
      "id": 3683874718,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODM4NzQ3MTg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3683874718",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T06:26:06Z"
    },
    {
      "event": "commented",
      "id": 678969368,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODk2OTM2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678969368",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T07:52:45Z",
      "updated_at": "2020-08-24T08:14:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman That seems easy to do with a bit of inline asm. We could have functions for \"cmov_var\" operations that translate to native cmov instructions on x86_64 (and possibly others), and conditionals otherwise.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678969368",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3684188953,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NDE4ODk1Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3684188953",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T07:52:46Z"
    },
    {
      "event": "subscribed",
      "id": 3684188957,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODQxODg5NTc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3684188957",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T07:52:46Z"
    },
    {
      "event": "commented",
      "id": 678992473,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODk5MjQ3Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/678992473",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T08:40:54Z",
      "updated_at": "2020-08-24T08:40:54Z",
      "author_association": "NONE",
      "body": "@pornin \r\nI'm trying your optbingcg and especially the case when starting with len(a)==len(b) and msb(a) == msb(b) that should increase the number of wrong decisions: Here are my result. May be I'm doing something wrong...\r\n\r\n```\r\nTest add: ......................... done.\r\nTest mul: ......................... done.\r\nTest invr\na = 57896044618658097711785492504343953926634992332820282019710345259882855656616\r\nb = 51314689404857564656982019773616219587230925979562315155017551773576055083230\r\na = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000005ECA8\r\nb = 0x717315BF9C729435E3DB956DCD6164B5CA4C6371C6891AC722B267CFF0B9D0DE\r\nc = 0x8000000000000000000000000000000000000000000000000000000000000016\r\n```",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-678992473",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3684369777,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NDM2OTc3Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3684369777",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T08:40:54Z"
    },
    {
      "event": "subscribed",
      "id": 3684369780,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODQzNjk3ODA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3684369780",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T08:40:54Z"
    },
    {
      "event": "commented",
      "id": 679005926,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTAwNTkyNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679005926",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T09:06:50Z",
      "updated_at": "2020-08-24T09:06:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Given that (at least for safegcd), a variable-time algorithm is much faster, I wonder whether blinding is a better strategy to resist timing channels.\r\n\r\nGiven input x, draw a pseudorandom blinding factor b, and compute (x * b)^-1 * b = x^-1. The overhead is 2 muls and deriving b. The muls are cheap and an optimized implementation of ChaCha12 (should be enough for this purpose) needs around 300-600 cycles for a single block depending on the architecture.\r\n\r\nAnyway, I don't think we should be crazy about the performance of constant-time inversions. Variable-time/verification performance is more important for this library. ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679005926",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 679049730,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTA0OTczMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679049730",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T10:35:38Z",
      "updated_at": "2020-08-24T10:35:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Damn this is quite faster than libgmp. I remember looking into #290 and it was really hard to beat them.\r\nand this  takes *50+%* faster than libgmp :O\r\n\r\nmaster + libgmp:\r\n```\r\nscalar_inverse: min 15.8us / avg 15.9us / max 16.1us\r\nscalar_inverse_var: min 3.14us / avg 3.17us / max 3.22us\r\nfield_inverse: min 7.39us / avg 7.42us / max 7.52us\r\nfield_inverse_var: min 3.11us / avg 3.12us / max 3.15us\r\n```\r\n\r\nwith this PR:\r\n```\r\nscalar_inverse: min 4.61us / avg 4.66us / max 4.73us\r\nscalar_inverse_var: min 2.06us / avg 2.09us / max 2.13us\r\nfield_inverse: min 4.60us / avg 4.65us / max 4.76us\r\nfield_inverse_var: min 2.04us / avg 2.04us / max 2.06us\r\n```",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679049730",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 679078612,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTA3ODYxMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679078612",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T11:47:05Z",
      "updated_at": "2020-08-24T11:47:05Z",
      "author_association": "NONE",
      "body": "@JeanLucPons On my machine, with your example, my code returns the correct result:\r\n```\r\na = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000005ECA8\r\nb = 0x2E7970EBB2A522D59B69421568E9665BD93A0EE9CCA5AF7B7DB96CADA8367BB4\r\nc = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE\r\n```\r\nI don't know what went wrong in your case, but the algorithm should work fine for this one too.\r\n",
      "user": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679078612",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3685045610,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NTA0NTYxMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685045610",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T11:47:05Z"
    },
    {
      "event": "subscribed",
      "id": 3685045612,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODUwNDU2MTI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685045612",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T11:47:05Z"
    },
    {
      "event": "commented",
      "id": 679081750,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTA4MTc1MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679081750",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T11:54:48Z",
      "updated_at": "2020-08-24T11:54:48Z",
      "author_association": "NONE",
      "body": "> @JeanLucPons On my machine, with your example, my code returns the correct result:\r\n> I don't know what went wrong in your case, but the algorithm should work fine for this one too.\r\n\r\nThanks for the answer it was because I have to cut the _lzcnt_u64() into 2 __builtin_clz() but I wasn't aware that  __builtin_clz(0) was undefined, i would expect 32 but that's ok now i get the correct result too :)\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679081750",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3685071580,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NTA3MTU4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685071580",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T11:54:48Z"
    },
    {
      "event": "subscribed",
      "id": 3685071582,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODUwNzE1ODI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685071582",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T11:54:48Z"
    },
    {
      "event": "commented",
      "id": 679110697,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTExMDY5Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679110697",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T12:58:42Z",
      "updated_at": "2020-08-24T12:58:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "@real-or-random\r\n> Given that (at least for safegcd), a variable-time algorithm is much faster, I wonder whether blinding is a better strategy to resist timing channels.\r\n\r\nI think I suggested doing that in an issue but this work has made it less attractive.  One advantage of a truly constant time rather than blinded algorithm is that it makes it much easier to test hardware for EMI/power/timing sidechannels directly, since the traces will naturally be aligned and assuming alignement and cache state are managed they should take exactly the same amount of time down to the cycle for every run.  The safegcd and variable time safegcd are also extremely similar so it's not entirely redundant.\r\n\r\nWhen the performance difference was a factor of 5 I was leaning towards blinding and using the variable time being worth the above costs... at 2.2 it's at least a little less attractive.\r\n\r\nBlinding might be slightly less costly than you think--  right now the ecmult_gen uses a random projection for the initial point (secp256k1_gej_rescale). I believe that alone actually renders the input to the final inversion uniformly random, though it would deserve careful analysis. If it does, then it's already blinded. (well, almost, since the rescale currently only happens on randomize-- but that is already something that should get fixed independent of anything being done with the inversion).\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679110697",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3685308771,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NTMwODc3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685308771",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T12:58:42Z"
    },
    {
      "event": "subscribed",
      "id": 3685308776,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODUzMDg3NzY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685308776",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T12:58:42Z"
    },
    {
      "event": "commented",
      "id": 679116483,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTExNjQ4Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679116483",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T13:10:22Z",
      "updated_at": "2020-08-24T13:10:22Z",
      "author_association": "NONE",
      "body": "@sipa For constant-time counting of leading zeros, the usual idiom is something like this:\r\n```\r\nstatic inline uint64_t\r\ncount_leading_zeros(uint64_t x)\r\n{\r\n        uint64_t r, c;\r\n\r\n        r = 0;\r\n        c = -(((x >> 32) - 1) >> 63);\r\n        r += c & 32;\r\n        x ^= c & (x ^ (x << 32));\r\n        c = -(((x >> 48) - 1) >> 63);\r\n        r += c & 16;\r\n        x ^= c & (x ^ (x << 16));\r\n        c = -(((x >> 56) - 1) >> 63);\r\n        r += c & 8;\r\n        x ^= c & (x ^ (x << 8));\r\n        c = -(((x >> 60) - 1) >> 63);\r\n        r += c & 4;\r\n        x ^= c & (x ^ (x << 4));\r\n        c = -(((x >> 62) - 1) >> 63);\r\n        r += c & 2;\r\n        x ^= c & (x ^ (x << 2));\r\n        c = -(((x >> 63) - 1) >> 63);\r\n        r += c & 1;\r\n        x ^= c & (x ^ (x << 1));\r\n        r += 1 - ((x | -x) >> 63);\r\n        return (int)r;\r\n}\r\n```\r\n\r\nExperimentally, this leads to an inversion cost of about 6912 cycles, i.e. an overhead of about 659 cycles compared to the version with `_lzcnt_u64()` (since this routine is invoked 15 times, this would put its cost at about 44 cycles. There might be better methods.\r\n\r\nIn a non-constant-time setup, there is a fast algorithm described by Harley (in a newsgroup in 1996!): https://groups.google.com/g/comp.arch/c/daG3ld_SCA0/m/6rpQegohhF8J\r\nIt basically involves first propagating the highest 1 so that you get the value `2**n-1` (where the highest non-zero bit is at index `n-1`), then finding out which of the 32 possible values (for 32-bit words) you got with a multiplication and a lookup in a small table. The lookup makes it non-constant-time; it might be possible to make it constant-time by using the lookup index as a shift count and doing a few shifts of constant values. I suppose a 64-bit version is feasible along the same lines.\r\n",
      "user": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679116483",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3685355359,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NTM1NTM1OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685355359",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T13:10:22Z"
    },
    {
      "event": "subscribed",
      "id": 3685355370,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODUzNTUzNzA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685355370",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T13:10:22Z"
    },
    {
      "event": "commented",
      "id": 679121704,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTEyMTcwNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679121704",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T13:19:57Z",
      "updated_at": "2020-08-24T13:19:57Z",
      "author_association": "NONE",
      "body": "@sipa About a variable-time shortcut: as the algorithm advances, the internal `a` and `b` values shrink, and the algorithm converges when `a` reaches zero. You could make a shortcut at that point. This can be done efficiently at the start of the outer loop:\r\n\r\n```\r\n    if ((a.v0 | a.v1 | a.v2 | a.v3) == 0) {\r\n        // algorithm has converged, exit now\r\n    }\r\n```\r\n\r\nTake care that if you do a lower number of iterations, then the corrective factor (the `1/(2**508)`) must be adjusted accordingly. If you allow an exit at the start of each outer iteration, then that's 15 possible corrective factors, so 15 hardcoded values (which will take 480 bytes of read-only data, nothing too wild here).\r\n\r\nI don't know how much time can be saved that way on average. I _suppose_ you can shave off a couple of iterations, so maybe 10-15% on average? This should be measured.\r\n\r\nPS: HACS is very cool, too bad there won't be a physical one this year. Speaking of which, this kind of code is exactly what should be formally verified; there are so many possibilities for rare edge cases with carry propagation!\r\n",
      "user": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679121704",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3685396093,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NTM5NjA5Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685396093",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T13:19:57Z"
    },
    {
      "event": "subscribed",
      "id": 3685396101,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODUzOTYxMDE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685396101",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T13:19:57Z"
    },
    {
      "event": "commented",
      "id": 679175768,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTE3NTc2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679175768",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T14:54:28Z",
      "updated_at": "2020-08-24T14:54:28Z",
      "author_association": "NONE",
      "body": "I'm trying to evaluate to number of needed steep before a reaches 0 with the optbingcd method, and it seems very good. Here is an histogram for random inputs (no fail):\r\n[0,0,0,0,0,0,0,0,0,0,21548,875516,102932,4,0]\r\n(INV_INNER_FAST count (start at 1), the last item is the 43xINV_INNER )\r\ndivstep_62() needs ~9 loops (in average).\r\n\r\nHowever while I'm trying to see how this distribution evolve around the boundaries, I got again a failure :(\r\nI will try to find a host with the required instructions....\r\n\r\n```\r\na = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED00\r\nb = 0x2B404DC70A68B991255B404DC70A68B991255B404DC70A68B991255B404DC704\r\nc = 0x6FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\r\n```",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679175768",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 679181170,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTE4MTE3MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679181170",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T15:03:23Z",
      "updated_at": "2020-08-24T15:03:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "@pornin \r\n\r\nhttps://github.com/hcs0/Hackers-Delight/blob/master/ntz.c.txt is a nice collection of ctzl algorithms. One of those algorithms is in this PR (https://github.com/bitcoin-core/secp256k1/pull/767/commits/06d568a7e6596aae9a6837bb2eee3108347cbc3a) and ntz7 is a constant-time algorithm",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679181170",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3685880949,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NTg4MDk0OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685880949",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T15:03:23Z"
    },
    {
      "event": "subscribed",
      "id": 3685880950,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODU4ODA5NTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3685880950",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T15:03:23Z"
    },
    {
      "event": "commented",
      "id": 679221272,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTIyMTI3Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679221272",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T16:08:21Z",
      "updated_at": "2020-08-24T16:08:21Z",
      "author_association": "NONE",
      "body": "@JeanLucPons My bad, that bug was mine. Algorithm is fine, implementation needed a couple extra lines. Now it goes fine, and, for some reason, it's slightly _faster_ (by about 20 cycles).\r\n\r\nBug was that, when reaching the final stages, I was reusing the approximate values `xa` and `xb` from the previous round, instead of reading the \"true\" ones (which are then at most 44 bits). Bug would happen when, at that stage, the values would be larger than 32 bits, which does not in fact happen often (and was not triggered by the randomized tests).\r\n",
      "user": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679221272",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3686171602,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4NjE3MTYwMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3686171602",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T16:08:21Z"
    },
    {
      "event": "subscribed",
      "id": 3686171604,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODYxNzE2MDQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3686171604",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T16:08:21Z"
    },
    {
      "event": "commented",
      "id": 679419595,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTQxOTU5NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679419595",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T23:39:50Z",
      "updated_at": "2020-08-24T23:39:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think I suggested doing that in an issue but this work has made it less attractive. One advantage of a truly constant time rather than blinded algorithm is that it makes it much easier to test hardware for EMI/power/timing sidechannels directly, since the traces will naturally be aligned and assuming alignement and cache state are managed they should take exactly the same amount of time down to the cycle for every run.\r\n\r\nYeah, though I'm not aware of anybody doing these tests currently. Yes, we have the valgrind check but here, a declassify/classify is ok. And an argument in favor of blinding is that it does not rely on the compiler gods not introducing branches etc.  \r\n\r\n> The safegcd and variable time safegcd are also extremely similar so it's not entirely redundant.\r\n\r\nI don't understand. What is not redundant?\r\n\r\n> \r\n> When the performance difference was a factor of 5 I was leaning towards blinding and using the variable time being worth the above costs... at 2.2 it's at least a little less attractive.\r\n\r\nRight but I believe 2.2 is still a lot and a blinded version would also be simpler (less code).\r\n\r\n> Blinding might be slightly less costly than you think-- right now the ecmult_gen uses a random projection for the initial point (secp256k1_gej_rescale). I believe that alone actually renders the input to the final inversion uniformly random, though it would deserve careful analysis. If it does, then it's already blinded. (well, almost, since the rescale currently only happens on randomize-- but that is already something that should get fixed independent of anything being done with the inversion).\r\n\r\nHm, indeed. Note that we could derive the blinding factor via the secret key that we anyway get in signing (like deterministic signing), so there's no need to update the context. ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679419595",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 679457782,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTQ1Nzc4Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679457782",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T02:01:52Z",
      "updated_at": "2020-08-25T02:01:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I believe that alone actually renders the input to the final inversion uniformly random, though it would deserve careful analysis.\r\n\r\n@gmaxwell I think that's almost always true, but nontrivial to reason about. Our constant-time group addition is weird, and the output Z coordinate is *2(Z<sub>1</sub>Y<sub>1</sub> + Z<sub>1</sub><sup>4</sup>Y<sub>2</sub>)*, so it's not just propagating a factor with Z nicely (like doubling does). I suspect this formula for uniform *Z<sub>1</sub>* isn't exactly hiding all information about *Y<sub>1</sub>* and *Y<sub>2</sub>* (perhaps quadratic residue of a function of *Y<sub>1</sub>* and *Y<sub>2</sub>* gets through or so), and the fact that *Y<sub>1</sub>* (especially early in the algorithm) is correlated with *Z<sub>1</sub>* makes it even harder. Then there is the weird edge case to deal with addings of opposing Y, which cmovs another formula in place.\r\n\r\n@real-or-random I'm not sure how I feel about relying exclusively on blinding for protection against timing leaks. It suddenly makes a lot of code (including the (re)blinding logic itself) much more critical, and only protected by algebraic reasoning that's much harder to test for.\r\n\r\nAs far as it reducing complexity... true, having only variable-time inverse would gain us something. But if safegcd is the approach we take, there is also code shared between the variable-time and constant-time version, making it less \"extra\".",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679457782",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3687867815,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4Nzg2NzgxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3687867815",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T02:01:52Z"
    },
    {
      "event": "subscribed",
      "id": 3687867818,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODc4Njc4MTg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3687867818",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T02:01:52Z"
    },
    {
      "event": "mentioned",
      "id": 3687867821,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4Nzg2NzgyMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3687867821",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T02:01:52Z"
    },
    {
      "event": "subscribed",
      "id": 3687867824,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODc4Njc4MjQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3687867824",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T02:01:52Z"
    },
    {
      "event": "commented",
      "id": 679538505,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTUzODUwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679538505",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T03:45:11Z",
      "updated_at": "2020-08-25T03:45:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Blinding might be slightly less costly than you think-- right now the ecmult_gen uses a random projection for the initial point (secp256k1_gej_rescale). I believe that alone actually renders the input to the final inversion uniformly random, though it would deserve careful analysis.\r\n\r\nIf during `ecmult_gen` the accumulator passes through infinity, then the random projective factor is lost, at least as the current code stands. `_gej_add_ge` seems to deal with possible a->z == 0, but it's unclear to me whether it can otherwise produce an r->z == 0 output. If we never set z to 0, then the \"fixup\" code in the last few lines could set the result to (u2, s2, a->z) instead of (b->x, b->y, 1) and the projective randomization might be preserved in this way.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679538505",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 679565976,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTU2NTk3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679565976",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T04:05:58Z",
      "updated_at": "2020-08-25T04:10:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @sipa If one manages to convince clang 10.0.1 to generate conditional moves (https://godbolt.org/z/Mzafe7), then I measure an improvement of >30% for _fe_inv, ~8200 haswell cycles. I expect on your CPU this might be closer to ~15% slower than this updated optbingcd.\r\n\r\n~@peterdettman Where exactly do you need cmovs?~\r\n\r\nEDIT: nevermind, it's obvious from your godbolt link.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679565976",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3688102205,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4ODEwMjIwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3688102205",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T04:05:59Z"
    },
    {
      "event": "subscribed",
      "id": 3688102208,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODgxMDIyMDg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3688102208",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T04:05:59Z"
    },
    {
      "event": "mentioned",
      "id": 3688102877,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4ODEwMjg3Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3688102877",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T04:06:26Z"
    },
    {
      "event": "subscribed",
      "id": 3688102880,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODgxMDI4ODA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3688102880",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T04:06:26Z"
    },
    {
      "event": "commented",
      "id": 679853959,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTg1Mzk1OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679853959",
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T07:26:20Z",
      "updated_at": "2020-08-25T10:20:36Z",
      "author_association": "NONE",
      "body": "> @real-or-random\r\n> \r\n> > Given that (at least for safegcd), a variable-time algorithm is much faster, I wonder whether blinding is a better strategy to resist timing channels.\r\n> \r\n> I think I suggested doing that in an issue but this work has made it less attractive. One advantage of a truly constant time rather than blinded algorithm is that it makes it much easier to test hardware for EMI/power/timing sidechannels directly, since the traces will naturally be aligned and assuming alignement and cache state are managed they should take exactly the same amount of time down to the cycle for every run. The safegcd and variable time safegcd are also extremely similar so it's not entirely redundant.\r\n> \r\n> When the performance difference was a factor of 5 I was leaning towards blinding and using the variable time being worth the above costs... at 2.2 it's at least a little less attractive.\r\n> \r\n> Blinding might be slightly less costly than you think-- right now the ecmult_gen uses a random projection for the initial point (secp256k1_gej_rescale). I believe that alone actually renders the input to the final inversion uniformly random, though it would deserve careful analysis. If it does, then it's already blinded. (well, almost, since the rescale currently only happens on randomize-- but that is already something that should get fixed independent of anything being done with the inversion).\r\n\r\nThere are recent advances in attack vectors (i.e. machine learning and de-blinding techniques) against blinded ECC, while I don't think any paper was written on scalar inversion, the techniques might be relevant.\r\n\r\n- Side-Channel Attacks on Blinded Scalar Multiplications Revisited\\\r\n  Thomas Roche, Laurent Imbert, Victor Lomné\\\r\n  https://eprint.iacr.org/2019/1220\r\n\r\n- One Trace Is All It Takes: Machine Learning-Based Side-Channel Attack on EdDSA\\\r\n  Léo Weissbart, Stjepan Picek, Lejla Batina, 2019\\\r\n  https://eprint.iacr.org/2019/358",
      "user": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679853959",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3688675915,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4ODY3NTkxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3688675915",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T07:26:20Z"
    },
    {
      "event": "subscribed",
      "id": 3688675918,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODg2NzU5MTg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3688675918",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T07:26:20Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NWNjZmMzMGFhZjc4YmJmYTFlM2M3ZjE3MWM1YTdlNDI1YTJiYWQ1Yw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5ccfc30aaf78bbfa1e3c7f171c5a7e425a2bad5c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5ccfc30aaf78bbfa1e3c7f171c5a7e425a2bad5c",
      "tree": {
        "sha": "3189fbb9f220301d00449ec5be988dd6d1f22447",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3189fbb9f220301d00449ec5be988dd6d1f22447"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/65550c1f6d44da2bd9d72d6fd2256a6cba0fd828",
          "sha": "65550c1f6d44da2bd9d72d6fd2256a6cba0fd828",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/65550c1f6d44da2bd9d72d6fd2256a6cba0fd828"
        }
      ],
      "message": "Avoid redundant calculation",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-25T07:55:41Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-08-25T07:55:41Z"
      },
      "sha": "5ccfc30aaf78bbfa1e3c7f171c5a7e425a2bad5c"
    },
    {
      "event": "commented",
      "id": 679917261,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTkxNzI2MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679917261",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T09:34:08Z",
      "updated_at": "2020-08-25T09:34:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Small tweak to const-time divsteps methods gives significant speed boost.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679917261",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 679969344,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTk2OTM0NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679969344",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T11:31:35Z",
      "updated_at": "2020-08-25T11:31:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Small tweak to const-time divsteps methods gives significant speed boost.\r\n\r\nNice, I missed that one when looking at the code.\r\n\r\n> Moving the `eta` assignment to the end of the loop makes it already ~3% faster percent on my machine (Kabylake, gcc, -O2).\r\n\r\nDid you try this one too? As I said, it resulted in faster code on my machine (at least with the previous commit). \r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679969344",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 679980188,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTk4MDE4OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/679980188",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T11:58:10Z",
      "updated_at": "2020-08-25T11:58:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > Moving the `eta` assignment to the end of the loop makes it already ~3% faster percent on my machine (Kabylake, gcc, -O2).\r\n> \r\n> Did you try this one too? As I said, it resulted in faster code on my machine (at least with the previous commit).\r\n\r\nSorry for not replying to that. I have tried it and the differences are in the noise for me. If I am alone in that I'm happy to move it of course.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679980188",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 680035208,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDAzNTIwOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/680035208",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T13:46:12Z",
      "updated_at": "2020-08-25T13:46:12Z",
      "author_association": "NONE",
      "body": "@sipa I just added some GCC compatibility to my code. Three things were required:\r\n\r\n  - On my machine (Ubuntu 20.04), GCC defaults to building position-independent executables, but Clang does not. PIE implies some constraints on relocations; in the (assembly) routines for squaring and multiplications, I had opcodes that referenced a constant value in RAM. In order to make it work with PIE, I made that access relative to `rip` (which, in particular, removes any relocation). This does not change performance.\r\n\r\n  - My GCC installation does not seem to have the `__rdtsc()` intrinsic; I have to use inline assembly for that (this is in the test code only, for benchmarks).\r\n\r\n  - GCC was optimizing a bit too much the multiplications and squarings: the generated functions were empty! Apparently, declaring that a piece of inline assembly receives some pointers to data as input *and* clobbers `\"memory\"` is not enough for GCC to assume that the assembly code may indeed modify the data which is pointed to. It works with Clang, but GCC removes everything. A few `__volatile__` fix that.\r\n\r\nNone of the changes impacts performance with Clang. Performance with GCC is not as good; with `-O2 -march=native`, I get about 7400 cycles for inversion (with `-O3` it goes over 8000). My guess is that GCC has trouble with the multiplications into 128-bit integers (`unsigned __int128`) and/or with the additions-with-carry (`_addcarry_u64()`, `_subborrow_u64()`).\r\n\r\nOne may argue that if I write some routines in assembly, then maybe I should write *everything* in assembly. At least I would get performance that does not depend on compiler version and flags...\r\n",
      "user": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-680035208",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3690184407,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MDE4NDQwNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3690184407",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T13:46:12Z"
    },
    {
      "event": "subscribed",
      "id": 3690184411,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTAxODQ0MTE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3690184411",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T13:46:12Z"
    },
    {
      "event": "commented",
      "id": 680072662,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDA3MjY2Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/680072662",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T14:50:11Z",
      "updated_at": "2020-08-25T14:50:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "@pornin I actually opened a PR against your repo fixing all 3 issues ;)",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-680072662",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3690495619,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MDQ5NTYxOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3690495619",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T14:50:11Z"
    },
    {
      "event": "subscribed",
      "id": 3690495621,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTA0OTU2MjE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3690495621",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T14:50:11Z"
    },
    {
      "event": "commented",
      "id": 680084067,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDA4NDA2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/680084067",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T15:08:10Z",
      "updated_at": "2020-08-25T15:08:10Z",
      "author_association": "NONE",
      "body": "@sipa Ah! Sorry, I hadn't seen that. I tend to use GitHub as a push-only publication system.\r\n",
      "user": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-680084067",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3690584506,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MDU4NDUwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3690584506",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T15:08:10Z"
    },
    {
      "event": "subscribed",
      "id": 3690584510,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTA1ODQ1MTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3690584510",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T15:08:10Z"
    },
    {
      "event": "commented",
      "id": 680291154,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDI5MTE1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/680291154",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:01:18Z",
      "updated_at": "2020-08-25T22:01:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "> There are recent advances in attack vectors (i.e. machine learning and de-blinding techniques) against blinded ECC, while I don't think any paper was written on scalar inversion, the techniques might be relevant.\r\n> \r\n>     * Side-Channel Attacks on Blinded Scalar Multiplications Revisited\r\n>       Thomas Roche, Laurent Imbert, Victor Lomné\r\n>       https://eprint.iacr.org/2019/1220\r\n> \r\n>     * One Trace Is All It Takes: Machine Learning-Based Side-Channel Attack on EdDSA\r\n>       Léo Weissbart, Stjepan Picek, Lejla Batina, 2019\r\n>       https://eprint.iacr.org/2019/358\r\n\r\nI don't think these papers are relevant. The second is in fact an attack on a constant-time implementation and the first is an attack on blinding using small blinding factors. What I suggested is to blind with a \"full\" scalar (chosen uniformly from the set of all scalars).  Assuming the blinding itself is correct and constant-time, and a new blinding factor is derived for every inversion, this should not leave any further potential for side channels (or any channels -- you could in fact send the blinded input of the inversion algorithm to the attacker and the attacker would still not learn anything).\r\n\r\nBlinding has other issues for sure, e.g., what @sipa said.\r\n\r\n> @real-or-random I'm not sure how I feel about relying exclusively on blinding for protection against timing leaks. It suddenly makes a lot of code (including the (re)blinding logic itself) much more critical, and only protected by algebraic reasoning that's much harder to test for.\r\n\r\nYeah, it's entirely true that testing this is hard. It's like testing the pseudorandomness of a hash function and there you can have test vectors at least (admittedly with all problems that they have).  I see your point but I don't there's a clear case in favor of constant-time algorithms. One reason not to use blinding is simply that we don't use it anywhere else. Keeping everything constant time is just a simple and clear design. \r\n\r\n(I wanted to argue that blinding protects against other classes of bugs. If there is a bug that is triggered by a negligible set of inputs, e.g., in the carry handling, then the attacker has a hard time finding an input. But this argument is pointless for our use case of secret inversions, where the input is uniformly random anyway.)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-680291154",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3692088046,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MjA4ODA0Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692088046",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:01:19Z"
    },
    {
      "event": "subscribed",
      "id": 3692088051,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTIwODgwNTE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692088051",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:01:19Z"
    },
    {
      "event": "mentioned",
      "id": 3692088055,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MjA4ODA1NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692088055",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:01:19Z"
    },
    {
      "event": "subscribed",
      "id": 3692088059,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTIwODgwNTk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692088059",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:01:19Z"
    },
    {
      "event": "commented",
      "id": 680302275,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDMwMjI3NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/680302275",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:33:15Z",
      "updated_at": "2020-08-25T22:55:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman patch to make 5x52 field use cmovs:\r\n\r\n```patch\r\n--- a/src/field_5x52_impl.h\r\n+++ b/src/field_5x52_impl.h\r\n@@ -563,12 +563,33 @@ static uint64_t secp256k1_fe_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0,\r\n     int i;\r\n \r\n     for (i = 0; i < 62; ++i) {\r\n+        uint64_t neta;\r\n \r\n         VERIFY_CHECK((f & 1) == 1);\r\n         VERIFY_CHECK((u * f0 + v * g0) == f << i);\r\n         VERIFY_CHECK((q * f0 + r * g0) == g << i);\r\n \r\n         c2 = -(g & 1);\r\n+#ifdef USE_ASM_X86_64\r\n+        c1 = eta >> 63;\r\n+        x = -f;\r\n+        y = -u;\r\n+        z = -v;\r\n+        neta = -eta;\r\n+        __asm__ volatile (\r\n+           \"test %[c1], %[g];\\n\"\r\n+           \"cmovneq %[g], %[f];\\n\"\r\n+           \"cmovneq %[x], %[g];\\n\"\r\n+           \"cmovneq %[q], %[u];\\n\"\r\n+           \"cmovneq %[y], %[q];\\n\"\r\n+           \"cmovneq %[r], %[v];\\n\"\r\n+           \"cmovneq %[z], %[r];\\n\"\r\n+           \"cmovneq %[neta], %[eta];\\n\"\r\n+           : [f]\"+&r\"(f), [g]\"+&r\"(g), [u]\"+&r\"(u), [q]\"+&r\"(q), [v]\"+&r\"(v), [r]\"+&r\"(r), [eta]\"+&r\"(eta)\r\n+           : [c1]\"r\"(c1), [x]\"r\"(x), [y]\"r\"(y), [z]\"r\"(z), [neta]\"r\"(neta)\r\n+           : \"cc\");\r\n+        --eta;\r\n+#else\r\n         c1 = c2 & ((int64_t)eta >> 63);\r\n \r\n         x = (f ^ g) & c1;\r\n@@ -581,6 +602,7 @@ static uint64_t secp256k1_fe_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0,\r\n         v ^= z; r ^= z; r ^= c1; r -= c1;\r\n \r\n         eta = (eta ^ c1) - c1 - 1;\r\n+#endif\r\n \r\n         g += (f & c2); g >>= 1;\r\n         q += (u & c2); u <<= 1;\r\n```",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-680302275",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3692169301,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MjE2OTMwMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692169301",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:33:15Z"
    },
    {
      "event": "subscribed",
      "id": 3692169304,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTIxNjkzMDQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692169304",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:33:15Z"
    },
    {
      "event": "mentioned",
      "id": 3692209840,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MjIwOTg0MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692209840",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:52:22Z"
    },
    {
      "event": "subscribed",
      "id": 3692209841,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTIyMDk4NDE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692209841",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:52:22Z"
    },
    {
      "event": "commented",
      "id": 680308689,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDMwODY4OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/680308689",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:55:12Z",
      "updated_at": "2020-08-26T00:30:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Benchmarks on i7-7820HQ pinned at 2.6 GHz (all -O2, with GMP):\r\n```\r\n            field_inv                 field_inv_var\r\n            master safgcd cmov        master safgcd\r\n\r\ngcc-4.7:    6.75us 3.93us 4.28us      2.80us 2.29us\r\ngcc-4.9:    6.76us 3.75us 3.24us      2.81us 2.30us\r\ngcc-5:      6.76us 3.87us 3.23us      2.79us 2.41us\r\ngcc-6:      6.74us 3.80us 3.14us      2.79us 2.30us\r\ngcc-7:      6.76us 3.85us 3.11us      2.79us 2.32us\r\ngcc-8:      6.77us 3.85us 3.21us      2.80us 2.36us\r\ngcc-9:      6.76us 3.88us 3.09us      2.80us 2.34us\r\ngcc-10:     6.82us 3.85us 3.09us      2.80us 1.88us\r\n\r\nclang-3.7:  6.80us 3.74us 3.45us      2.79us 2.30us\r\nclang-3.8:  6.80us 3.71us 3.44us      2.79us 2.38us\r\nclang-4.0:  6.80us 3.70us 3.52us      2.79us 2.31us\r\nclang-6.0:  6.80us 3.74us 3.41us      2.79us 2.28us\r\nclang-7:    6.79us 3.74us 3.42us      2.78us 2.30us\r\nclang-8:    6.80us 3.77us 3.34us      2.79us 2.28us\r\nclang-9:    6.79us 3.74us 3.33us      2.81us 2.25us\r\nclang-10:   6.79us 3.75us 3.33us      2.79us 2.25us\r\n```\r\n\r\nSame benchmarks with -O3 -march=native:\r\n\r\n```\r\n            field_inv                 field_inv_var\r\n            master safgcd cmov        master safgcd\r\n\r\ngcc-4.7:    6.75us 3.93us 3.15us      2.80us 2.20us\r\ngcc-4.9:    6.77us 3.78us 3.24us      2.81us 2.45us\r\ngcc-5:      6.76us 3.80us 4.35us      2.80us 2.41us\r\ngcc-6:      6.76us 3.79us 3.10us      2.79us 2.47us\r\ngcc-7:      6.81us 3.79us 3.18us      2.79us 2.15us\r\ngcc-8:      6.80us 3.84us 4.08us      2.80us 2.19us\r\ngcc-9:      6.76us 3.77us 3.77us      2.80us 2.12us\r\ngcc-10:     6.78us 3.71us 4.34us      2.80us 1.79us\r\n\r\nclang-3.7:  6.82us 3.68us 3.40us      2.79us 2.33us\r\nclang-3.8:  6.81us 3.69us 3.43us      2.79us 2.22us\r\nclang-4.0:  6.81us 3.69us 3.52us      2.79us 2.16us\r\nclang-6.0:  6.83us 3.70us 3.39us      2.79us 2.19us\r\nclang-7:    6.82us 3.71us 3.42us      2.78us 2.19us\r\nclang-8:    6.82us 3.72us 3.33us      2.79us 2.22us\r\nclang-9:    6.82us 3.74us 3.32us      2.78us 2.14us\r\nclang-10:   6.82us 3.74us 3.32us      2.80us 2.15us\r\n```\r\n\r\n\r\n@pornin's (constant time) code takes 2.68us on the same system, though for a different (and 1 bit smaller) field.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-680308689",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3692215766,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5MjIxNTc2Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692215766",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:55:12Z"
    },
    {
      "event": "subscribed",
      "id": 3692215768,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTIyMTU3Njg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3692215768",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T22:55:12Z"
    },
    {
      "event": "commented",
      "id": 680324852,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDMyNDg1Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/680324852",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T23:52:58Z",
      "updated_at": "2020-08-25T23:52:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> But this argument is pointless for our use case of secret inversions, where the input is uniformly random anyway.)\r\n\r\nThat consideration is not irrelevant to the use-case in consensus-critical verification and could use a constant random value generated at context creation, which makes blinding very cheap. ... but checking the inversion can also be done for that application and is even cheaper than blinding (one element mul and a compare, vs two element multiplications).\r\n\r\nI like the idea of doing both of these things for validation I think that plus testing with a billion random values is sufficiently correct that formal validation isn't needed (though certainly would be good).\r\n\r\n>  though I'm not aware of anybody doing these tests currently.\r\n\r\nI have made a few attempts, we previously got power sidechannel traces that td-linux captured,  it's just extremely difficult to work out the kinks and get traces that are clean enough to automate the analysis and use in a CI setup without getting spurious alerts. Many different secrets and repeat that many times and then scale and compare the correlation between traces (after adjusting for offset/amplitude error) of the same secret vs the correlation of traces of different secrets,  and consider the test failed if these two sets become too distinguishable-- MSE(secret1_trace1,secret2_trace1) - MSE(secret1_trace1,secret1_trace2) > threshold.  \r\n\r\nThis is a lot stronger test in some ways than actual attacks, but actual attacks require hand massaging to target specific parts of algorithms and aren't suitable for a CI sort of this.   This will at least alert if someone makes a change that greats a new honking-big side channel.\r\n\r\nThis approach isn't workable though if there is any variable time component, as the misalignment will dominate the difference... even though that vartime part wouldn't be a big impediment for an attacker who would just manually adjust their tooling to ignore it.\r\n\r\nI also found a cycle-accurate risc-v simulator that simulates everything including cache, branch prediction, and dram,. I haven't yet figured out the appropriate test harness, but I should be able to have one where it sets different secrets, flushes the caches, starts the simulation mode, and measures that it takes exactly the same number of cycles independent of the secrets. Not as sensitive as something that measures sidechannels, but it's all software.\r\n\r\nIt would also be broken by a variable time inverse.\r\n\r\nFor the approach in the PR the constant time and var time inverses are essentially the same-- variable time just has early termination and maybe makes some arbitrary choices among optimizations differently because the early termination works better with some choices that are slower than the constant time optimal ones.\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-680324852",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "commented",
      "id": 681779274,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTc3OTI3NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/681779274",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T08:29:08Z",
      "updated_at": "2020-08-27T08:29:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa Thanks, but I generally can't reproduce those results. With a small tweak I can get the assembler version to be about 5% faster than the current C version, but otherwise it's not even close (at least 10% slower) to the ~8200 cycles I can get from clang for my example code (convenience re-link: https://godbolt.org/z/Mzafe7). Not sure why and can't spare the time to investigate much for the next week or so. Perhaps you can try compiling for and/or testing on haswell too, otherwise I can't explain the difference.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-681779274",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3698366469,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY5ODM2NjQ2OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3698366469",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T08:29:08Z"
    },
    {
      "event": "subscribed",
      "id": 3698366475,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2OTgzNjY0NzU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3698366475",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T08:29:08Z"
    },
    {
      "event": "commented",
      "id": 684748746,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDc0ODc0Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/684748746",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T10:30:06Z",
      "updated_at": "2020-09-01T10:30:06Z",
      "author_association": "NONE",
      "body": "Hello,\r\nI implemented a vartime divstep62 based on the @pornin's method.\r\nIt ends (in average) in 6.13 divstep62 against 9.00 for safegcd.\r\nOn my I5 (compiled with Visual Studio 2019), both methods have a similar speed.\r\nHowever on my old Xeon (compiled with gcc 7 -O2), pornin's method is 1.22 time faster.\r\nhttps://github.com/JeanLucPons/Kangaroo/blob/e313da10d5fd3380e34c532a554ce987202d23b3/SECPK1/IntMod.cpp#L184\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-684748746",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3714083747,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzcxNDA4Mzc0Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3714083747",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T10:30:07Z"
    },
    {
      "event": "subscribed",
      "id": 3714083750,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3MTQwODM3NTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3714083750",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T10:30:07Z"
    },
    {
      "event": "commented",
      "id": 685153279,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTE1MzI3OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/685153279",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T21:52:00Z",
      "updated_at": "2020-09-01T21:52:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman I'm happy with the knowledge that at least in some cases, simple asm optimizations can be used to improve things further. I don't think we need to include any of that in this PR.\r\n\r\nDo you have any thoughts on next steps here? Do you want to keep experimenting with variations of the code, or do you think it's time to get it closer to a mergeable shape? I'm happy to help with either.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-685153279",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3716978838,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzcxNjk3ODgzOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3716978838",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T21:52:00Z"
    },
    {
      "event": "subscribed",
      "id": 3716978840,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3MTY5Nzg4NDA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3716978840",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T21:52:00Z"
    },
    {
      "event": "commented",
      "id": 686401969,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjQwMTk2OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/686401969",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-03T10:35:22Z",
      "updated_at": "2020-09-03T10:35:22Z",
      "author_association": "NONE",
      "body": "I compared @pornin method and safegcd method (vartime) using the cycle counter (__rdtsc).\r\nMy code does not have particular optimization for a specific prime so I tried with 2^255-19 and 2^256-0x1000003D1 and it didn't have significant impact.\r\n\r\nVS2019: I5-8500\r\n4600 (pornin)\r\n4680 (safegcd)\r\n\r\ngcc-8: Xeon X5647\r\n6788 (pornin)\r\n8172 (safegcd)\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-686401969",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3724055114,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzcyNDA1NTExNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3724055114",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-03T10:35:22Z"
    },
    {
      "event": "subscribed",
      "id": 3724055118,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3MjQwNTUxMTg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3724055118",
      "actor": {
        "login": "pornin",
        "id": 14964627,
        "node_id": "MDQ6VXNlcjE0OTY0NjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/14964627?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pornin",
        "html_url": "https://github.com/pornin",
        "followers_url": "https://api.github.com/users/pornin/followers",
        "following_url": "https://api.github.com/users/pornin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pornin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pornin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pornin/subscriptions",
        "organizations_url": "https://api.github.com/users/pornin/orgs",
        "repos_url": "https://api.github.com/users/pornin/repos",
        "events_url": "https://api.github.com/users/pornin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pornin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-03T10:35:22Z"
    },
    {
      "event": "commented",
      "id": 687583246,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzU4MzI0Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/687583246",
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-05T10:03:41Z",
      "updated_at": "2020-09-05T10:03:41Z",
      "author_association": "NONE",
      "body": "I manage to get a significant speed up (for vartime impl) with VS2019 by using the _tzcnt_u64() intrinsic instead of _BitScanForward64(). I also checked the usage of AVX2.\r\n\r\nVS2019: I5-8500 + _tzcnt_u64 + AVX2\r\n3780 (pornin)\r\n4532 (safegcd)\r\n\r\nVS2019: I5-8500 + _tzcnt_u64 + no SIMD\r\n4150 (pornin)\r\n4310 (safegcd)\r\n\r\nI cannot explain why VS2019 generates a less efficient code with AVX2 for safegcd.\r\n",
      "user": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-687583246",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6Y2JkMmQ1N2RjZWUwNDRkZTlhMWZhYmM4ODg3ZmYwOTBhMmZhNDQ4Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "tree": {
        "sha": "2fe29221a4769e5ed61a478f91ea9b42b1272cce",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/2fe29221a4769e5ed61a478f91ea9b42b1272cce"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5ccfc30aaf78bbfa1e3c7f171c5a7e425a2bad5c",
          "sha": "5ccfc30aaf78bbfa1e3c7f171c5a7e425a2bad5c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5ccfc30aaf78bbfa1e3c7f171c5a7e425a2bad5c"
        }
      ],
      "message": "Faster const-time divsteps",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-09-09T07:31:42Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-09-09T07:31:42Z"
      },
      "sha": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482"
    },
    {
      "event": "commented",
      "id": 689373911,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTM3MzkxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/689373911",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T07:43:21Z",
      "updated_at": "2020-09-09T07:43:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Do you have any thoughts on next steps here? Do you want to keep experimenting with variations of the code, or do you think it's time to get it closer to a mergeable shape? I'm happy to help with either.\r\n\r\n@sipa With this last commit we're around 5-10% faster on haswell than the safegcd paper (really this time), with no asm. I think that's a good place to leave off and focus on merging. I'd be very glad to simply hand that over to you.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-689373911",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3744404265,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzc0NDQwNDI2NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3744404265",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T07:43:21Z"
    },
    {
      "event": "subscribed",
      "id": 3744404271,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3NDQ0MDQyNzE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3744404271",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-09T07:43:21Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T08:35:13Z",
      "updated_at": "2020-09-10T08:35:13Z",
      "source": {
        "issue": {
          "id": 519813731,
          "node_id": "MDU6SXNzdWU1MTk4MTM3MzE=",
          "url": "https://api.github.com/repos/vacp2p/research/issues/7",
          "repository_url": "https://api.github.com/repos/vacp2p/research",
          "labels_url": "https://api.github.com/repos/vacp2p/research/issues/7/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/vacp2p/research/issues/7/comments",
          "events_url": "https://api.github.com/repos/vacp2p/research/issues/7/events",
          "html_url": "https://github.com/vacp2p/research/issues/7",
          "number": 7,
          "state": "open",
          "state_reason": null,
          "title": "Research zkSNARKS blocker: Benchmark and optimize proof time",
          "body": "## Problem\r\n\r\nProve time for Semaphore (https://github.com/kobigurk/semaphore) zKSNARKs using circom, groth and snarkjs is currently way too long. It takes on the order of ~10m to generate a proof. With Websnark, it is likely to take 30s, which might still be too long. We should experiment with native code on mobile here.\r\n\r\n## Acceptance criteria\r\n\r\nWhile we can potentially use precomputed proofs to some extent, this needs to be on the order of a seconds to be feasible for e.g. spam protection signalling normal messages. This means a performance improvement of a bit more than *two orders of magnitude is necessary*. Alternatively, perf can be a bit less if we get precomputed proofs and batching to work smoothly.\r\n\r\n## Details\r\n\r\nSee https://github.com/vacp2p/research/blob/master/zksnarks/semaphore/src/hello.js#L118 for proof generation. This is using snarkjs, circom and running through Node, which is likely one of the slower environments. Additionally, number of constraints for the snark are around ~60k.\r\n\r\nReducing the problem to a simpler circuit (Pedersen commitment, 5 rounds), see https://ethresear.ch/t/benchmark-circom-vs-bellman-wasm-in-chrome-on-mobile/5261, we note the previous benchmarks of Circom and Bellman in different environments such as Node/WASM/Native:\r\n\r\n- Node: ~50s\r\n- Wasm (Circom and Bellman, incl on mobile) ~1s\r\n- Native(Bellman, multicore somewhat useful) ~0.1s\r\n\r\nI.e. wasm 50x faster, and native 500x faster. There appears to be WIP and room for improvement for the wasm benchmarks.\r\n\r\nCircom and Bellman both have around ~3.5k constraints, i.e. 5% of our original snark.\r\n\r\n```\r\nMacBook Core-i7 @ 2.6Ghz\r\ncircom (node.js):        53685ms\r\ncircom (chrome):         53266ms\r\ncircom (websnark):       1408ms\r\nbellman (webassembly):   1151ms\r\nbellman (rust, 1 core):  235ms\r\nbellman (rust, 8 cores): 85ms\r\n\r\niPhone XS\r\nbellman (webassembly):   1126ms\r\n```\r\n\r\nFor our initial problem, this would mean roughly:\r\n\r\n3.5k -> 60k; 20x constraints\r\n\r\n```\r\n> circom (node.js):        53685ms\r\n> circom (websnark):       1408ms\r\n> bellman (rust, 8 cores): 85ms\r\n```\r\n\r\n=> node ~15m\r\n=> wasm ~30s\r\n=> native ~2s\r\n\r\n## Possible solutions\r\n\r\n### 1. Use a better environment (WASM or native).\r\n\r\nNo-brainer. Either use Websnarks with existing Circom snarks or Bellman to WASM.\r\n\r\nWASM might not be enough though, especially to get to subsecond, and requires more optimization.\r\n\r\nNative would be useful, especially for resource restricted devices and for spam protection. Additional benchmarks on mobile would be good to have. A big issue is in terms of deployment - currently native would mean something like Bellman, which right now doesn't have a library like Circom for writing SNARKs. This seems to be an ongoing effort:\r\n\r\n> We currently work on Circom -> Bellman export so that we can combine the ease of use of Circom language and performance and portability of Bellman. The goal is to make a toolchain that allows you to write snarks in Circom and get super fast .wasm + js bindings as compilation result, hiding the complexity of Bellman under the hood.\r\n\r\n### 2. Decrease number of constraints.\r\n\r\n60k could possible be reduce quite a lot, but require additional research (e.g. merkle tree structure, number of rounds for various hash functions, etc). If this could be halved, then Webnarks might be enough.\r\n\r\n### 3. Use a different type of ZKP\r\n\r\nOther types of ZKP come with lower proof time, but with other trade offs (such as proof size). The main reasons to explore this would, from my current POV, be related to: proof time; security assumptions (cryptographic assumptions and trusted setup); and proof time.\r\n\r\n### 4. Precompute proofs\r\n\r\nIt's possible we can precompute proofs for e.g. spam protection. This means you can instantly signal, and then 'save up' messages. How this would work in practice requires further research.\r\n\r\n### 5. Prover as a service?\r\n\r\nI don't know what this would look like, but perhaps proof generation could be outsourced. This appears to be STARKware business model if I understand it correctly: https://starkware.co/the-road-ahead-in-2019/\r\n\r\n### 6. Batching of signals\r\n\r\nA bit similar to 'precompute case', but it might be doable to take many messages in a 30s period and batch them together. In the human chat case, this would impact UX. Worth exploring though.\r\n\r\n## Note\r\n\r\nThe benchmark in problem descrption and ethresear.ch might be incorrect, so worth checking them again.",
          "user": {
            "login": "oskarth",
            "id": 1552237,
            "node_id": "MDQ6VXNlcjE1NTIyMzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1552237?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oskarth",
            "html_url": "https://github.com/oskarth",
            "followers_url": "https://api.github.com/users/oskarth/followers",
            "following_url": "https://api.github.com/users/oskarth/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/oskarth/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/oskarth/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/oskarth/subscriptions",
            "organizations_url": "https://api.github.com/users/oskarth/orgs",
            "repos_url": "https://api.github.com/users/oskarth/repos",
            "events_url": "https://api.github.com/users/oskarth/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/oskarth/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/vacp2p/research/milestones/2",
            "html_url": "https://github.com/vacp2p/research/milestone/2",
            "labels_url": "https://api.github.com/repos/vacp2p/research/milestones/2/labels",
            "id": 5315502,
            "node_id": "MDk6TWlsZXN0b25lNTMxNTUwMg==",
            "number": 2,
            "state": "open",
            "title": "zkSNARKS Feasibility",
            "description": "",
            "creator": {
              "login": "decanus",
              "id": 7621705,
              "node_id": "MDQ6VXNlcjc2MjE3MDU=",
              "avatar_url": "https://avatars.githubusercontent.com/u/7621705?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/decanus",
              "html_url": "https://github.com/decanus",
              "followers_url": "https://api.github.com/users/decanus/followers",
              "following_url": "https://api.github.com/users/decanus/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/decanus/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/decanus/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/decanus/subscriptions",
              "organizations_url": "https://api.github.com/users/decanus/orgs",
              "repos_url": "https://api.github.com/users/decanus/repos",
              "events_url": "https://api.github.com/users/decanus/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/decanus/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 2,
            "closed_issues": 4,
            "created_at": "2020-04-16T11:16:20Z",
            "updated_at": "2021-07-14T09:15:05Z"
          },
          "locked": false,
          "comments": 25,
          "created_at": "2019-11-08T05:51:50Z",
          "updated_at": "2020-10-14T04:25:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 695195867,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE5NTg2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/695195867",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-19T10:24:39Z",
      "updated_at": "2020-09-19T10:24:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "We discussed random blinding here. I just found this talk which demonstrates a sidechannel attack on the subsequent gcd algorithm if the blinding multiplication is done over the integers (without mod): https://youtu.be/ORGCHkSInjs?list=PLeeS-3Ml-rpqyNMiXWuheOmKAgCkUaass&t=1450 It's not directly related to the discussion here but I found it interesting.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-695195867",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T02:37:19Z",
      "updated_at": "2020-10-12T02:37:19Z",
      "source": {
        "issue": {
          "id": 718995620,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTAxMjU5NzAy",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/831",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/831/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/831/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/831/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/831",
          "number": 831,
          "state": "closed",
          "state_reason": null,
          "title": "Safegcd inverses, drop Jacobi symbols, remove libgmp",
          "body": "This is a rebased and squashed version of #767, adding safegcd-based implementations of constant-time and variable-time modular inverses for scalars and field elements, by Peter Dettman. The PR is organized as follows:\r\n* **Add secp256k1_ctz{32,64}_var functions** Introduction of ctz functions to util.h (which use `__builtin_ctz` on recent GCC and Clang, but fall back to using a software emulation using de Bruijn on other platforms). This isn't used anywhere in this commit, but does include tests.\r\n* **Add safegcd based modular inverse modules** Add Peter Dettman's safegcd code from #767 (without some of his optimizations, which are moved to later commits), turned into separate modules by me.\r\n* **Add extensive comments on the safegcd algorithm and implementation** Add a long description of the algorithm and optimizations to `doc/safegcd_implementation.md`, as well as additional comments to the code itself. It is probably best to review this together with the previous commit (they're separated to keep authorship).\r\n* **Add tests for modinv modules** Adds tests on the modinv interface directly, for arbitrary moduli.\r\n* **Improve bounds checks in modinv modules** Adds a lot of sanity checking to the modinv modules.\r\n* **Move secp256k1_scalar_{inverse{_var},is_even} to per-impl files** A pure refactor to prepare for switching the field and scalar code to modinv.\r\n* **Make field/scalar code use the new modinv modules for inverses** Actually switch over.\r\n* **Add extra modular inverse tests** This adds modular inverse tests through the field/scalar interface, now that those use modinv.\r\n* **Remove unused Jacobi symbol support** No longer needed.\r\n* **Remove num/gmp support** Bye-bye.\r\n* 3 commits with further optimizations.\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 55,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/831",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/831",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/831.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/831.patch"
          },
          "closed_at": "2021-03-18T00:04:27Z",
          "created_at": "2020-10-12T02:37:19Z",
          "updated_at": "2021-03-18T00:04:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 706938435,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjkzODQzNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/706938435",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T07:39:02Z",
      "updated_at": "2020-10-12T07:39:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "See rebased/squashed version in #831.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-706938435",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "reviewed",
      "id": 507986868,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTg2ODY4",
      "url": null,
      "actor": null,
      "commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "A few comments to test my understanding.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#pullrequestreview-507986868",
      "submitted_at": "2020-10-14T04:34:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
    },
    {
      "event": "commented",
      "id": 708276635,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODI3NjYzNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/708276635",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T09:21:28Z",
      "updated_at": "2020-10-14T09:21:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> A few comments to test my understanding.\r\n\r\nIt would be nice add code comments for all these clarifications.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-708276635",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T01:59:32Z",
      "updated_at": "2020-10-15T01:59:32Z",
      "source": {
        "issue": {
          "id": 718850826,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTAxMTQ4Njk1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20121",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20121/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20121/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20121/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20121",
          "number": 20121,
          "state": "closed",
          "state_reason": null,
          "title": "configure: Allow users to explicitly enable libsecp256k1's GMP bignum support",
          "body": "By moving the `--with-bignum=no` option to the start of the configure args, users can explicitly override it when configuring Bitcoin Core.\r\n\r\nWhen this option was originally added in 2015 (7fd5b801ff16d748b5ca13ded09ed5da8eacf7e7 #6210), there was mention of a runtime crash reported by gmaxwell. Do details of that incident exist anywhere? Was it ever resolved? Did it crash at startup? If not, could it be triggered remotely?",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20121",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20121",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20121.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20121.patch"
          },
          "closed_at": "2020-11-19T20:09:39Z",
          "created_at": "2020-10-11T14:42:34Z",
          "updated_at": "2022-02-15T10:48:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 709570018,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwOTU3MDAxOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/709570018",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T20:23:10Z",
      "updated_at": "2020-10-15T20:23:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@real-or-random Definitely.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-709570018",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3883425218,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg4MzQyNTIxOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3883425218",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T20:23:10Z"
    },
    {
      "event": "subscribed",
      "id": 3883425223,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4ODM0MjUyMjM=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3883425223",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T20:23:11Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-17T02:16:35Z",
      "updated_at": "2020-10-17T02:16:35Z",
      "source": {
        "issue": {
          "id": 712679337,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDk2MTIwNTMz",
          "url": "https://api.github.com/repos/zcash/zcash/issues/4757",
          "repository_url": "https://api.github.com/repos/zcash/zcash",
          "labels_url": "https://api.github.com/repos/zcash/zcash/issues/4757/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/zcash/zcash/issues/4757/comments",
          "events_url": "https://api.github.com/repos/zcash/zcash/issues/4757/events",
          "html_url": "https://github.com/zcash/zcash/pull/4757",
          "number": 4757,
          "state": "closed",
          "state_reason": null,
          "title": "Update secp256k1",
          "body": "This migrates us to the same dependency version that upstream Bitcoin\r\nCore migrated to in bitcoin/bitcoin#19944.\r\n\r\nAlso enables the endomorphism optimization now that the patents have\r\nexpired.",
          "user": {
            "login": "str4d",
            "id": 4993799,
            "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/str4d",
            "html_url": "https://github.com/str4d",
            "followers_url": "https://api.github.com/users/str4d/followers",
            "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
            "organizations_url": "https://api.github.com/users/str4d/orgs",
            "repos_url": "https://api.github.com/users/str4d/repos",
            "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/str4d/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 179182764,
              "node_id": "MDU6TGFiZWwxNzkxODI3NjQ=",
              "url": "https://api.github.com/repos/zcash/zcash/labels/A-consensus",
              "name": "A-consensus",
              "description": "Area: Consensus rules",
              "color": "ff6b75",
              "default": false
            },
            {
              "id": 246763044,
              "node_id": "MDU6TGFiZWwyNDY3NjMwNDQ=",
              "url": "https://api.github.com/repos/zcash/zcash/labels/S-waiting-on-review",
              "name": "S-waiting-on-review",
              "description": "Status: Awaiting review from the assignee but also interested parties.",
              "color": "1d76db",
              "default": false
            },
            {
              "id": 442116761,
              "node_id": "MDU6TGFiZWw0NDIxMTY3NjE=",
              "url": "https://api.github.com/repos/zcash/zcash/labels/A-dependencies",
              "name": "A-dependencies",
              "description": "Area: Dependencies",
              "color": "f7e101",
              "default": false
            },
            {
              "id": 1728707252,
              "node_id": "MDU6TGFiZWwxNzI4NzA3MjUy",
              "url": "https://api.github.com/repos/zcash/zcash/labels/S-committed",
              "name": "S-committed",
              "description": "Status: Planned work in a sprint",
              "color": "1d76db",
              "default": false
            }
          ],
          "assignee": {
            "login": "daira",
            "id": 643204,
            "node_id": "MDQ6VXNlcjY0MzIwNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/643204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/daira",
            "html_url": "https://github.com/daira",
            "followers_url": "https://api.github.com/users/daira/followers",
            "following_url": "https://api.github.com/users/daira/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/daira/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/daira/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/daira/subscriptions",
            "organizations_url": "https://api.github.com/users/daira/orgs",
            "repos_url": "https://api.github.com/users/daira/repos",
            "events_url": "https://api.github.com/users/daira/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/daira/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "daira",
              "id": 643204,
              "node_id": "MDQ6VXNlcjY0MzIwNA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/643204?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/daira",
              "html_url": "https://github.com/daira",
              "followers_url": "https://api.github.com/users/daira/followers",
              "following_url": "https://api.github.com/users/daira/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/daira/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/daira/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/daira/subscriptions",
              "organizations_url": "https://api.github.com/users/daira/orgs",
              "repos_url": "https://api.github.com/users/daira/repos",
              "events_url": "https://api.github.com/users/daira/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/daira/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/zcash/zcash/milestones/145",
            "html_url": "https://github.com/zcash/zcash/milestone/145",
            "labels_url": "https://api.github.com/repos/zcash/zcash/milestones/145/labels",
            "id": 5964398,
            "node_id": "MDk6TWlsZXN0b25lNTk2NDM5OA==",
            "number": 145,
            "state": "closed",
            "title": "Core Sprint 2020-41",
            "description": "",
            "creator": {
              "login": "r3ld3v",
              "id": 57410303,
              "node_id": "MDQ6VXNlcjU3NDEwMzAz",
              "avatar_url": "https://avatars.githubusercontent.com/u/57410303?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/r3ld3v",
              "html_url": "https://github.com/r3ld3v",
              "followers_url": "https://api.github.com/users/r3ld3v/followers",
              "following_url": "https://api.github.com/users/r3ld3v/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/r3ld3v/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/r3ld3v/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/r3ld3v/subscriptions",
              "organizations_url": "https://api.github.com/users/r3ld3v/orgs",
              "repos_url": "https://api.github.com/users/r3ld3v/repos",
              "events_url": "https://api.github.com/users/r3ld3v/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/r3ld3v/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 25,
            "created_at": "2020-10-08T05:06:32Z",
            "updated_at": "2021-02-19T21:48:40Z",
            "closed_at": "2020-10-26T18:38:52Z",
            "due_on": "2020-10-21T07:00:00Z"
          },
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/zcash/zcash/pulls/4757",
            "html_url": "https://github.com/zcash/zcash/pull/4757",
            "diff_url": "https://github.com/zcash/zcash/pull/4757.diff",
            "patch_url": "https://github.com/zcash/zcash/pull/4757.patch"
          },
          "closed_at": "2020-10-21T18:18:15Z",
          "created_at": "2020-10-01T09:44:22Z",
          "updated_at": "2020-10-21T23:56:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 511269893,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMjY5ODkz",
      "url": null,
      "actor": null,
      "commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#pullrequestreview-511269893",
      "submitted_at": "2020-10-18T23:24:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
    },
    {
      "event": "reviewed",
      "id": 519413800,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NDEzODAw",
      "url": null,
      "actor": null,
      "commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#pullrequestreview-519413800",
      "submitted_at": "2020-10-29T08:06:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ODVkYTdhOWU0ZDBmYjNiMjI1MTU3MmY0YmM2ODNmNjVmZDU0ZjZlNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/85da7a9e4d0fb3b2251572f4bc683f65fd54f6e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/85da7a9e4d0fb3b2251572f4bc683f65fd54f6e7",
      "tree": {
        "sha": "a9e7a9e7e78dc3c23c719511a56f86fb66fc8e78",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a9e7a9e7e78dc3c23c719511a56f86fb66fc8e78"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
          "sha": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cbd2d57dcee044de9a1fabc8887ff090a2fa4482"
        }
      ],
      "message": "Rework _update_de I/O bounds",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-11-10T15:52:04Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-11-10T15:52:04Z"
      },
      "sha": "85da7a9e4d0fb3b2251572f4bc683f65fd54f6e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YzliNzcxNzgyNzBkZGFlOTQ1NzA2OWJiNDE5ZjkxMWVhMWI5YjYzYg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c9b77178270ddae9457069bb419f911ea1b9b63b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c9b77178270ddae9457069bb419f911ea1b9b63b",
      "tree": {
        "sha": "8e3933854d82cf9bee0c8e391ef77a84485ff6d1",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/8e3933854d82cf9bee0c8e391ef77a84485ff6d1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/85da7a9e4d0fb3b2251572f4bc683f65fd54f6e7",
          "sha": "85da7a9e4d0fb3b2251572f4bc683f65fd54f6e7",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/85da7a9e4d0fb3b2251572f4bc683f65fd54f6e7"
        }
      ],
      "message": "Rework _update_de for 32bit",
      "committer": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-11-11T09:46:36Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2020-11-11T09:46:36Z"
      },
      "sha": "c9b77178270ddae9457069bb419f911ea1b9b63b"
    },
    {
      "event": "commented",
      "id": 725870676,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTg3MDY3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/725870676",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-12T06:34:03Z",
      "updated_at": "2020-11-12T06:34:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa Just so we don't duplicate efforts: I am working on porting this into your new PR.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-725870676",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3987032016,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzk4NzAzMjAxNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3987032016",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-12T06:34:03Z"
    },
    {
      "event": "subscribed",
      "id": 3987032019,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5ODcwMzIwMTk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3987032019",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-12T06:34:03Z"
    },
    {
      "event": "commented",
      "id": 725887276,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTg4NzI3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/725887276",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-12T07:12:05Z",
      "updated_at": "2020-11-12T07:12:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman Cool, thanks! I was planning on doing so myself soon, but hadn't started.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-725887276",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "mentioned",
      "id": 3987145751,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzk4NzE0NTc1MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3987145751",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-12T07:12:05Z"
    },
    {
      "event": "subscribed",
      "id": 3987145754,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5ODcxNDU3NTQ=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3987145754",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-12T07:12:05Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T13:46:55Z",
      "updated_at": "2021-01-27T13:46:55Z",
      "source": {
        "issue": {
          "id": 522582420,
          "node_id": "MDU6SXNzdWU1MjI1ODI0MjA=",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/694",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/694/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/694/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/694/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/694",
          "number": 694,
          "state": "open",
          "state_reason": null,
          "title": "Use blinded instead of constant time inverse in secret gej->ge?",
          "body": "Currently the conversion from projective to affine in pubkey creation, signing, and ECDH use a constant time ladder inverse because the z value conceivably leaks information. This applies even in the pubkey and signing case where the resulting point is made public.\r\n\r\nThe constant time inverse is much slower than the best variable time inverse.\r\n\r\nIf the point is rescaled with a uniformly random value via secp256k1_gej_rescale (at the cost of four multiplies and a square) then z becomes uniformly random and thus inverting it cannot leak any information at all. Blinding in this way is arguably more secure against EMI/DPA sidechannels because the slow ladder inverse does a lot of operations and has more potential to leak than a couple used for blinding.\r\n\r\nBenchmarking schnorr signing using this and the GMP inverse gives me a speedup of 1.15x, though that isn't including the time to come up with a random value.\r\n",
          "user": {
            "login": "gmaxwell",
            "id": 858454,
            "node_id": "MDQ6VXNlcjg1ODQ1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmaxwell",
            "html_url": "https://github.com/gmaxwell",
            "followers_url": "https://api.github.com/users/gmaxwell/followers",
            "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
            "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
            "repos_url": "https://api.github.com/users/gmaxwell/repos",
            "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "created_at": "2019-11-14T02:20:20Z",
          "updated_at": "2021-01-27T19:17:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T09:36:37Z",
      "updated_at": "2021-01-28T09:36:37Z",
      "source": {
        "issue": {
          "id": 795834822,
          "node_id": "MDU6SXNzdWU3OTU4MzQ4MjI=",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/881",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/881/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/881/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/881/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/881",
          "number": 881,
          "state": "open",
          "state_reason": null,
          "title": "Rescale initial point before every ecmult_gen ",
          "body": "[...] right now the ecmult_gen uses a random projection for the initial point (secp256k1_gej_rescale). ([...] the rescale currently only happens on randomize-- but that is already something that should get fixed independent of anything being done with the inversion).\r\n\r\n_Originally posted by @gmaxwell in https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-679110697_",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "created_at": "2021-01-28T09:36:37Z",
          "updated_at": "2021-10-09T20:55:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 770175108,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDE3NTEwOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/770175108",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-30T08:05:02Z",
      "updated_at": "2021-01-30T08:05:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closing in favor of #831.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#issuecomment-770175108",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/767"
    },
    {
      "event": "closed",
      "id": 4268892865,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDI2ODg5Mjg2NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4268892865",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-30T08:05:02Z"
    },
    {
      "event": "referenced",
      "id": 4473115190,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ0NzMxMTUxOTA=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4473115190",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "26de4dfeb1f1436dae1fcf17f57bdaa43540f940",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/26de4dfeb1f1436dae1fcf17f57bdaa43540f940",
      "created_at": "2021-03-18T00:04:26Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-02T17:12:43Z",
      "updated_at": "2021-04-02T17:12:43Z",
      "source": {
        "issue": {
          "id": 849344843,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4MTM0OTcx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21573",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21573/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21573/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21573/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21573",
          "number": 21573,
          "state": "closed",
          "state_reason": null,
          "title": "Update libsecp256k1 subtree to latest master",
          "body": "This updates our src/secp256k1 subtree to the latest upstream master. The changes include:\r\n\r\n* The introduction of safegcd-based modular inverses, reducing ECDSA signing time by 25%-30% and ECDSA verification time by 15%-17%.\r\n  * [Original paper](https://gcd.cr.yp.to/papers.html) by Daniel J. Bernstein and Bo-Yin Yang\r\n  * [Implementation](https://github.com/bitcoin-core/secp256k1/pull/767) by Peter Dettman; [final](https://github.com/bitcoin-core/secp256k1/pull/831) version\r\n  * [Explanation](https://github.com/bitcoin-core/secp256k1/blob/master/doc/safegcd_implementation.md) of the algorithm using Python snippets\r\n  * [Analysis](https://github.com/sipa/safegcd-bounds) of the maximum number of iterations the algorithm needs\r\n  * [Formal proof in Coq](https://medium.com/blockstream/a-formal-proof-of-safegcd-bounds-695e1735a348) by Russell O'Connor, for a high-level equivalent algorithm\r\n* Removal of libgmp as an (optional) dependency (which wasn't used in the Bitcoin Core build)\r\n* CI changes (Travis -> Cirrus)\r\n* Build system improvements\r\n\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 159815356,
              "node_id": "MDU6TGFiZWwxNTk4MTUzNTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Upstream",
              "name": "Upstream",
              "color": "bfd4f2",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21573",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21573",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21573.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21573.patch"
          },
          "closed_at": "2021-06-07T15:05:42Z",
          "created_at": "2021-04-02T17:12:43Z",
          "updated_at": "2022-08-18T18:24:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-04T04:26:05Z",
      "updated_at": "2021-04-04T04:26:05Z",
      "source": {
        "issue": {
          "id": 849794989,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4NDg0ODM5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21590",
          "number": 21590,
          "state": "open",
          "state_reason": null,
          "title": "Safegcd-based modular inverses in MuHash3072",
          "body": "This implements a safegcd-based modular inverse for MuHash3072. It is a fairly straightforward translation of [the libsecp256k1 implementation](https://github.com/bitcoin-core/secp256k1/pull/831), with the following changes:\r\n* Generic for 32-bit and 64-bit\r\n* Specialized for the specific MuHash3072 modulus (2^3072 - 1103717).\r\n* A bit more C++ish\r\n* Far fewer sanity checks\r\n\r\nA benchmark is also included for MuHash3072::Finalize. The new implementation is around 100x faster on x86_64 for me (from 5.8 ms to 57 μs); for 32-bit code the factor is likely even larger.\r\n\r\nFor more information:\r\n  * [Original paper](https://gcd.cr.yp.to/papers.html) by Daniel J. Bernstein and Bo-Yin Yang\r\n  * [Implementation](https://github.com/bitcoin-core/secp256k1/pull/767) for libsecp256k1 by Peter Dettman; and the [final](https://github.com/bitcoin-core/secp256k1/pull/831) version\r\n  * [Explanation](https://github.com/bitcoin-core/secp256k1/blob/master/doc/safegcd_implementation.md) of the algorithm using Python snippets\r\n  * [Analysis](https://github.com/sipa/safegcd-bounds) of the maximum number of iterations the algorithm needs\r\n   * [Formal proof in Coq](https://medium.com/blockstream/a-formal-proof-of-safegcd-bounds-695e1735a348) by Russell O'Connor (for the 256-bit version of the algorithm; here we use a 3072-bit one).\r\n\r\nTODO:\r\n* [ ] Add more tests\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21590",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21590.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21590.patch"
          },
          "created_at": "2021-04-04T04:26:05Z",
          "updated_at": "2023-04-26T14:21:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 4852668562,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NTI2Njg1NjI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4852668562",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "359f72105ba0184fbf998dfd84217c4229dc54ad",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/359f72105ba0184fbf998dfd84217c4229dc54ad",
      "created_at": "2021-06-07T15:05:24Z"
    },
    {
      "event": "referenced",
      "id": 5138105096,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMzgxMDUwOTY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5138105096",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bc61867454632aa84bec8234363b80e685e21acf",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/bc61867454632aa84bec8234363b80e685e21acf",
      "created_at": "2021-08-10T22:22:01Z"
    },
    {
      "event": "referenced",
      "id": 5149897909,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNDk4OTc5MDk=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5149897909",
      "actor": {
        "login": "5tefan",
        "id": 5855806,
        "node_id": "MDQ6VXNlcjU4NTU4MDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5855806?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/5tefan",
        "html_url": "https://github.com/5tefan",
        "followers_url": "https://api.github.com/users/5tefan/followers",
        "following_url": "https://api.github.com/users/5tefan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/5tefan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/5tefan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/5tefan/subscriptions",
        "organizations_url": "https://api.github.com/users/5tefan/orgs",
        "repos_url": "https://api.github.com/users/5tefan/repos",
        "events_url": "https://api.github.com/users/5tefan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/5tefan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dd45c616b64de3a32bc03b5dc9ab22256e85a867",
      "commit_url": "https://api.github.com/repos/5tefan/dash/commits/dd45c616b64de3a32bc03b5dc9ab22256e85a867",
      "created_at": "2021-08-12T14:39:48Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "JeanLucPons",
        "id": 23553641,
        "node_id": "MDQ6VXNlcjIzNTUzNjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23553641?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeanLucPons",
        "html_url": "https://github.com/JeanLucPons",
        "followers_url": "https://api.github.com/users/JeanLucPons/followers",
        "following_url": "https://api.github.com/users/JeanLucPons/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeanLucPons/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeanLucPons/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeanLucPons/subscriptions",
        "organizations_url": "https://api.github.com/users/JeanLucPons/orgs",
        "repos_url": "https://api.github.com/users/JeanLucPons/repos",
        "events_url": "https://api.github.com/users/JeanLucPons/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeanLucPons/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-19T10:58:46Z",
      "updated_at": "2022-01-19T10:58:46Z",
      "source": {
        "issue": {
          "id": 1107153839,
          "node_id": "I_kwDOCjuLI85B_dOv",
          "url": "https://api.github.com/repos/JeanLucPons/VanitySearch/issues/121",
          "repository_url": "https://api.github.com/repos/JeanLucPons/VanitySearch",
          "labels_url": "https://api.github.com/repos/JeanLucPons/VanitySearch/issues/121/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/JeanLucPons/VanitySearch/issues/121/comments",
          "events_url": "https://api.github.com/repos/JeanLucPons/VanitySearch/issues/121/events",
          "html_url": "https://github.com/JeanLucPons/VanitySearch/issues/121",
          "number": 121,
          "state": "open",
          "state_reason": null,
          "title": "DRS62",
          "body": "Could you please give a source about the method of modular inversion you use in the project? It is DRS62 (delayed right shift 62 bits). I can't find any articles about this method on the internet.",
          "user": {
            "login": "ViktYusk",
            "id": 20248888,
            "node_id": "MDQ6VXNlcjIwMjQ4ODg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/20248888?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ViktYusk",
            "html_url": "https://github.com/ViktYusk",
            "followers_url": "https://api.github.com/users/ViktYusk/followers",
            "following_url": "https://api.github.com/users/ViktYusk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ViktYusk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ViktYusk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ViktYusk/subscriptions",
            "organizations_url": "https://api.github.com/users/ViktYusk/orgs",
            "repos_url": "https://api.github.com/users/ViktYusk/repos",
            "events_url": "https://api.github.com/users/ViktYusk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ViktYusk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 1,
          "created_at": "2022-01-18T17:04:24Z",
          "updated_at": "2022-01-19T17:20:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-08T23:08:42Z",
      "updated_at": "2022-02-08T23:08:42Z",
      "source": {
        "issue": {
          "id": 1127791935,
          "node_id": "PR_kwDOCHlkMM4yQ01o",
          "url": "https://api.github.com/repos/mratsim/constantine/issues/172",
          "repository_url": "https://api.github.com/repos/mratsim/constantine",
          "labels_url": "https://api.github.com/repos/mratsim/constantine/issues/172/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/mratsim/constantine/issues/172/comments",
          "events_url": "https://api.github.com/repos/mratsim/constantine/issues/172/events",
          "html_url": "https://github.com/mratsim/constantine/pull/172",
          "number": 172,
          "state": "closed",
          "state_reason": null,
          "title": "Fast modular inversion",
          "body": "This implements fast constant-time modular inversion.\r\n\r\nPreliminary benchmarks, without Assembly\r\n\r\n![image](https://user-images.githubusercontent.com/22738317/153080648-5fef863b-ad60-4b82-a2dd-ebbfb034bafd.png)\r\n![image](https://user-images.githubusercontent.com/22738317/153080676-5c57e33f-ac66-4748-8109-954a9a0d7f99.png)\r\n![image](https://user-images.githubusercontent.com/22738317/153080773-cc9338f2-8b73-4d98-89f3-5eab641aa699.png)\r\n![image](https://user-images.githubusercontent.com/22738317/153080810-8e5c7b9e-04d9-4c49-999b-338e780fef7c.png)\r\n![image](https://user-images.githubusercontent.com/22738317/153080850-6cc8d866-c105-4f77-88e7-731590d4981e.png)\r\n![image](https://user-images.githubusercontent.com/22738317/153080881-3790c0b5-90b9-4fc0-bb32-96a6e388ec89.png)\r\n\r\nOn BLS12-381, this is almost 8x faster than Niels Möller algorithm (constant-time inversion in GMP) and Fermat's Little Theorem inversion with addition chains.",
          "user": {
            "login": "mratsim",
            "id": 22738317,
            "node_id": "MDQ6VXNlcjIyNzM4MzE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mratsim",
            "html_url": "https://github.com/mratsim",
            "followers_url": "https://api.github.com/users/mratsim/followers",
            "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
            "organizations_url": "https://api.github.com/users/mratsim/orgs",
            "repos_url": "https://api.github.com/users/mratsim/repos",
            "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mratsim/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/mratsim/constantine/pulls/172",
            "html_url": "https://github.com/mratsim/constantine/pull/172",
            "diff_url": "https://github.com/mratsim/constantine/pull/172.diff",
            "patch_url": "https://github.com/mratsim/constantine/pull/172.patch"
          },
          "closed_at": "2022-02-10T13:05:07Z",
          "created_at": "2022-02-08T21:47:16Z",
          "updated_at": "2022-02-11T10:39:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "mratsim",
        "id": 22738317,
        "node_id": "MDQ6VXNlcjIyNzM4MzE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mratsim",
        "html_url": "https://github.com/mratsim",
        "followers_url": "https://api.github.com/users/mratsim/followers",
        "following_url": "https://api.github.com/users/mratsim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mratsim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mratsim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
        "organizations_url": "https://api.github.com/users/mratsim/orgs",
        "repos_url": "https://api.github.com/users/mratsim/repos",
        "events_url": "https://api.github.com/users/mratsim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mratsim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-09T09:46:14Z",
      "updated_at": "2022-02-09T09:46:14Z",
      "source": {
        "issue": {
          "id": 1126459995,
          "node_id": "PR_kwDOAP4Jqs4yMemH",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1073",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1073/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1073/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1073/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1073",
          "number": 1073,
          "state": "closed",
          "state_reason": null,
          "title": "Implement the modular inverse using unsigned 256-bit integers addition and shifts",
          "body": "Original algorithm borrowed from this paper (LS3):\r\nhttps://www.researchgate.net/publication/304417579_Modular_Inverse_Algorithms_Without_Multiplications_for_Cryptographic_Applications\r\n\r\n<img width=\"777\" alt=\"image\" src=\"https://user-images.githubusercontent.com/702124/152866106-a7ad5d03-fa7d-496a-bcbb-fcb77c8331e8.png\">\r\n\r\nWas improved by Anton Bukov (@k06a) and Mikhail Melnik (@zumzoom) to use unsigned 256-bit integers: https://gist.github.com/k06a/b990b7c7dda766d4f661e653d6804a53\r\n\r\nThis would allow to avoid usage of 62-bit signed representation and compute modinv without 256-bit multiplications and division.\r\n\r\nCode is passing all the tests, but we injected some code to benchmark new also, need to move it to the bench target for sure, maybe someone could help with this?\r\n\r\nRunning tests on ARM64 (Apple M1 Max) gives 20% improvement for `modinv()` method:\r\n```c\r\nt1 = clock();\r\nfor (i = 0; i < 1000000; i++) {\r\n    secp256k1_scalar_to_signed62(&s, x);\r\n    secp256k1_modinv64(&s, &secp256k1_const_modinfo_scalar);\r\n    secp256k1_scalar_from_signed62(r, &s);\r\n    CHECK(secp256k1_scalar_eq(r, &rrr));\r\n}\r\nt2 = clock();\r\nfor (i = 0; i < 1000000; i++) {    \r\n    secp256k1_modinv64_scalar(r, x, &secp256k1_const_mod_scalar);\r\n    CHECK(secp256k1_scalar_eq(r, &rrr));\r\n}\r\nt3 = clock();\r\nprintf(\"Time old: %f\\n\", ((double)(t2 - t1)) / CLOCKS_PER_SEC);\r\nprintf(\"Time new: %f\\n\", ((double)(t3 - t2)) / CLOCKS_PER_SEC);\r\nprintf(\"Improvement: %.2f%%\\n\", (1 - (double)(t3 - t2) / (double)(t2 - t1)) * 100);\r\n```\r\n=>\r\n```\r\nTime old: 3.284568\r\nTime new: 2.639177\r\nImprovement: 19.65%\r\n```\r\n\r\nPlease help to test in on x86 and x64 architectures, we tested only ARM64.",
          "user": {
            "login": "k06a",
            "id": 702124,
            "node_id": "MDQ6VXNlcjcwMjEyNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/k06a",
            "html_url": "https://github.com/k06a",
            "followers_url": "https://api.github.com/users/k06a/followers",
            "following_url": "https://api.github.com/users/k06a/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/k06a/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/k06a/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
            "organizations_url": "https://api.github.com/users/k06a/orgs",
            "repos_url": "https://api.github.com/users/k06a/repos",
            "events_url": "https://api.github.com/users/k06a/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/k06a/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1073",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1073",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1073.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1073.patch"
          },
          "closed_at": "2022-04-16T12:49:35Z",
          "created_at": "2022-02-07T20:24:52Z",
          "updated_at": "2022-07-14T15:16:47Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/457337802",
      "pull_request_review_id": 451559864,
      "id": 457337802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzNzgwMg==",
      "diff_hunk": "@@ -498,4 +498,380 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static const secp256k1_fe SECP256K1_FE_TWO_POW_744 = SECP256K1_FE_CONST(\n+    0x0E90A100UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000100UL, 0x000B7300UL, 0x1D214200UL\n+);\n+\n+static void secp256k1_fe_mul_add(int64_t a0, int64_t a1, int64_t b0, int64_t b1, int64_t c0, int64_t c1, int64_t d0, int64_t d1, int64_t *t) {\n+\n+    /*  Each [a0,a1], etc. pair is a 126-bit signed value e.g. a0 + a1 * 2^64.\n+     *  This method calculates ([a0,a1] * [c0,c1]) + ([b0,b1] * [d0,d1]), and\n+     *  writes the 252-bit signed result to [t[0],t[1],t[2],t[3]].\n+     */\n+\n+    int64_t z0, z1, z2, z3;\n+    int128_t tt;\n+\n+    tt  = (int128_t)a0 * b0\n+        + (int128_t)c0 * d0;\n+    z0  = (int64_t)tt; tt -= z0; tt >>= 64;\n+\n+    tt += (int128_t)a0 * b1\n+        + (int128_t)a1 * b0\n+        + (int128_t)c0 * d1\n+        + (int128_t)c1 * d0;\n+    z1  = (int64_t)tt; tt -= z1; tt >>= 64;\n+\n+    tt += (int128_t)a1 * b1\n+        + (int128_t)c1 * d1;\n+    z2  = (int64_t)tt; tt -= z2; tt >>= 64;\n+\n+    z3 = (int64_t)tt;\n+\n+    t[0] = z0; t[1] = z1; t[2] = z2; t[3] = z3;\n+}\n+\n+static void secp256k1_fe_combine_1s(int64_t *t) {\n+\n+    int64_t a = t[0], b = t[1], c = t[2], d = t[3],\n+            e = t[4], f = t[5], g = t[6], h = t[7];\n+    int128_t I, J, K, L;\n+\n+    I = (int128_t)e * a + (int128_t)f * c;\n+    J = (int128_t)e * b + (int128_t)f * d;\n+    K = (int128_t)g * a + (int128_t)h * c;\n+    L = (int128_t)g * b + (int128_t)h * d;\n+\n+    a = (int64_t)I; I -= a; I >>= 64; b = (int64_t)I;\n+    c = (int64_t)J; J -= c; J >>= 64; d = (int64_t)J;\n+    e = (int64_t)K; K -= e; K >>= 64; f = (int64_t)K;\n+    g = (int64_t)L; L -= g; L >>= 64; h = (int64_t)L;\n+\n+    t[0] = a; t[1] = b; t[2] = c; t[3] = d;\n+    t[4] = e; t[5] = f; t[6] = g; t[7] = h;\n+}\n+\n+static void secp256k1_fe_combine_2s(int64_t *t) {\n+\n+    int64_t a0 = t[ 0], a1 = t[ 1];\n+    int64_t b0 = t[ 2], b1 = t[ 3];\n+    int64_t c0 = t[ 4], c1 = t[ 5];\n+    int64_t d0 = t[ 6], d1 = t[ 7];\n+    int64_t e0 = t[ 8], e1 = t[ 9];\n+    int64_t f0 = t[10], f1 = t[11];\n+    int64_t g0 = t[12], g1 = t[13];\n+    int64_t h0 = t[14], h1 = t[15];\n+\n+    secp256k1_fe_mul_add(e0, e1, a0, a1, f0, f1, c0, c1, &t[0]);\n+    secp256k1_fe_mul_add(e0, e1, b0, b1, f0, f1, d0, d1, &t[4]);\n+    secp256k1_fe_mul_add(g0, g1, a0, a1, h0, h1, c0, c1, &t[8]);\n+    secp256k1_fe_mul_add(g0, g1, b0, b1, h0, h1, d0, d1, &t[12]);\n+}\n+\n+static void secp256k1_fe_decode_matrix(secp256k1_fe *r, int64_t *t) {\n+\n+    uint64_t u0, u1, u2, u3, u4;\n+    uint64_t r0, r1, r2, r3, r4;\n+    int128_t cc;\n+\n+    cc  = t[0];\n+    u0  = (uint64_t)cc; cc >>= 64;\n+    cc += t[1];\n+    u1  = (uint64_t)cc; cc >>= 64;\n+    cc += t[2];\n+    u2  = (uint64_t)cc; cc >>= 64;\n+    cc += t[3];\n+    u3  = (uint64_t)cc; cc >>= 64;\n+    u4  = (uint64_t)cc;\n+\n+    VERIFY_CHECK(u4 == 0 || u4 == UINT64_MAX);\n+\n+    /* Add twice the field prime in case u4 is non-zero (which represents -2^256). */\n+    r0 = 0xFFFFEFFFFFC2FULL * 2;\n+    r1 = 0xFFFFFFFFFFFFFULL * 2;\n+    r2 = 0xFFFFFFFFFFFFFULL * 2;\n+    r3 = 0xFFFFFFFFFFFFFULL * 2;\n+    r4 = 0x0FFFFFFFFFFFFULL * 2;\n+\n+    r0 += u0 & 0xFFFFFFFFFFFFFULL;\n+    r1 += u0 >> 52 | ((u1 << 12) & 0xFFFFFFFFFFFFFULL);\n+    r2 += u1 >> 40 | ((u2 << 24) & 0xFFFFFFFFFFFFFULL);\n+    r3 += u2 >> 28 | ((u3 << 36) & 0xFFFFFFFFFFFFFULL);\n+    r4 += u3 >> 16 |  (u4 << 48);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 2;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_62(int64_t *r, const secp256k1_fe *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *n = &a->n[0];\n+    uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 52) & M62;\n+    r[1] = (a1 >> 10 | a2 << 42) & M62;\n+    r[2] = (a2 >> 20 | a3 << 32) & M62;\n+    r[3] = (a3 >> 30 | a4 << 22) & M62;\n+    r[4] =  a4 >> 40;\n+}\n+\n+static int secp256k1_fe_divsteps_62(uint16_t eta, uint64_t f0, uint64_t g0, int64_t *t) {",
      "path": "src/field_5x52_impl.h",
      "position": null,
      "original_position": 136,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just one thing I noticed when skimming through it: The types of `eta` are pretty inconsistent. You use `uint16_t` inside the function, return an `int` and then store it in an `int16_t`.",
      "created_at": "2020-07-20T12:29:29Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r457337802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/457337802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 633,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458421228",
      "pull_request_review_id": 451559864,
      "id": 458421228,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMTIyOA==",
      "diff_hunk": "@@ -498,4 +498,380 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static const secp256k1_fe SECP256K1_FE_TWO_POW_744 = SECP256K1_FE_CONST(\n+    0x0E90A100UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000100UL, 0x000B7300UL, 0x1D214200UL\n+);\n+\n+static void secp256k1_fe_mul_add(int64_t a0, int64_t a1, int64_t b0, int64_t b1, int64_t c0, int64_t c1, int64_t d0, int64_t d1, int64_t *t) {\n+\n+    /*  Each [a0,a1], etc. pair is a 126-bit signed value e.g. a0 + a1 * 2^64.\n+     *  This method calculates ([a0,a1] * [c0,c1]) + ([b0,b1] * [d0,d1]), and\n+     *  writes the 252-bit signed result to [t[0],t[1],t[2],t[3]].\n+     */\n+\n+    int64_t z0, z1, z2, z3;\n+    int128_t tt;\n+\n+    tt  = (int128_t)a0 * b0\n+        + (int128_t)c0 * d0;\n+    z0  = (int64_t)tt; tt -= z0; tt >>= 64;\n+\n+    tt += (int128_t)a0 * b1\n+        + (int128_t)a1 * b0\n+        + (int128_t)c0 * d1\n+        + (int128_t)c1 * d0;\n+    z1  = (int64_t)tt; tt -= z1; tt >>= 64;\n+\n+    tt += (int128_t)a1 * b1\n+        + (int128_t)c1 * d1;\n+    z2  = (int64_t)tt; tt -= z2; tt >>= 64;\n+\n+    z3 = (int64_t)tt;\n+\n+    t[0] = z0; t[1] = z1; t[2] = z2; t[3] = z3;\n+}\n+\n+static void secp256k1_fe_combine_1s(int64_t *t) {\n+\n+    int64_t a = t[0], b = t[1], c = t[2], d = t[3],\n+            e = t[4], f = t[5], g = t[6], h = t[7];\n+    int128_t I, J, K, L;\n+\n+    I = (int128_t)e * a + (int128_t)f * c;\n+    J = (int128_t)e * b + (int128_t)f * d;\n+    K = (int128_t)g * a + (int128_t)h * c;\n+    L = (int128_t)g * b + (int128_t)h * d;\n+\n+    a = (int64_t)I; I -= a; I >>= 64; b = (int64_t)I;\n+    c = (int64_t)J; J -= c; J >>= 64; d = (int64_t)J;\n+    e = (int64_t)K; K -= e; K >>= 64; f = (int64_t)K;\n+    g = (int64_t)L; L -= g; L >>= 64; h = (int64_t)L;\n+\n+    t[0] = a; t[1] = b; t[2] = c; t[3] = d;\n+    t[4] = e; t[5] = f; t[6] = g; t[7] = h;\n+}\n+\n+static void secp256k1_fe_combine_2s(int64_t *t) {\n+\n+    int64_t a0 = t[ 0], a1 = t[ 1];\n+    int64_t b0 = t[ 2], b1 = t[ 3];\n+    int64_t c0 = t[ 4], c1 = t[ 5];\n+    int64_t d0 = t[ 6], d1 = t[ 7];\n+    int64_t e0 = t[ 8], e1 = t[ 9];\n+    int64_t f0 = t[10], f1 = t[11];\n+    int64_t g0 = t[12], g1 = t[13];\n+    int64_t h0 = t[14], h1 = t[15];\n+\n+    secp256k1_fe_mul_add(e0, e1, a0, a1, f0, f1, c0, c1, &t[0]);\n+    secp256k1_fe_mul_add(e0, e1, b0, b1, f0, f1, d0, d1, &t[4]);\n+    secp256k1_fe_mul_add(g0, g1, a0, a1, h0, h1, c0, c1, &t[8]);\n+    secp256k1_fe_mul_add(g0, g1, b0, b1, h0, h1, d0, d1, &t[12]);\n+}\n+\n+static void secp256k1_fe_decode_matrix(secp256k1_fe *r, int64_t *t) {\n+\n+    uint64_t u0, u1, u2, u3, u4;\n+    uint64_t r0, r1, r2, r3, r4;\n+    int128_t cc;\n+\n+    cc  = t[0];\n+    u0  = (uint64_t)cc; cc >>= 64;\n+    cc += t[1];\n+    u1  = (uint64_t)cc; cc >>= 64;\n+    cc += t[2];\n+    u2  = (uint64_t)cc; cc >>= 64;\n+    cc += t[3];\n+    u3  = (uint64_t)cc; cc >>= 64;\n+    u4  = (uint64_t)cc;\n+\n+    VERIFY_CHECK(u4 == 0 || u4 == UINT64_MAX);\n+\n+    /* Add twice the field prime in case u4 is non-zero (which represents -2^256). */\n+    r0 = 0xFFFFEFFFFFC2FULL * 2;\n+    r1 = 0xFFFFFFFFFFFFFULL * 2;\n+    r2 = 0xFFFFFFFFFFFFFULL * 2;\n+    r3 = 0xFFFFFFFFFFFFFULL * 2;\n+    r4 = 0x0FFFFFFFFFFFFULL * 2;\n+\n+    r0 += u0 & 0xFFFFFFFFFFFFFULL;\n+    r1 += u0 >> 52 | ((u1 << 12) & 0xFFFFFFFFFFFFFULL);\n+    r2 += u1 >> 40 | ((u2 << 24) & 0xFFFFFFFFFFFFFULL);\n+    r3 += u2 >> 28 | ((u3 << 36) & 0xFFFFFFFFFFFFFULL);\n+    r4 += u3 >> 16 |  (u4 << 48);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 2;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_62(int64_t *r, const secp256k1_fe *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *n = &a->n[0];\n+    uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 52) & M62;\n+    r[1] = (a1 >> 10 | a2 << 42) & M62;\n+    r[2] = (a2 >> 20 | a3 << 32) & M62;\n+    r[3] = (a3 >> 30 | a4 << 22) & M62;\n+    r[4] =  a4 >> 40;\n+}\n+\n+static int secp256k1_fe_divsteps_62(uint16_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = -(uint64_t)1, v = 0, q = 0, r = -(uint64_t)1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((u * f0 + v * g0) == -f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == -g << i);\n+\n+        c1 = -(g & (eta >> 15));\n+\n+        x = (f ^ g) & c1;\n+        f ^= x; g ^= x; g ^= c1; g -= c1;\n+\n+        y = (u ^ q) & c1;\n+        u ^= y; q ^= y; q ^= c1; q -= c1;\n+\n+        z = (v ^ r) & c1;\n+        v ^= z; r ^= z; r ^= c1; r -= c1;\n+\n+        eta = (eta ^ (uint16_t)c1) - (uint16_t)c1 - 1;",
      "path": "src/field_5x52_impl.h",
      "position": null,
      "original_position": 158,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On a related note, seeing integer types smaller than `int` makes me somewhat nervous. Most people looking at this line for example won't notice that all the arithmetic here is performed on (signed) `int` due to integer promotion rules. (I believe that's not an issue in this line, it's just a general remark.)",
      "created_at": "2020-07-21T22:18:11Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r458421228",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458421228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 655,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458586989",
      "pull_request_review_id": 453057129,
      "id": 458586989,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4Njk4OQ==",
      "diff_hunk": "@@ -498,4 +498,380 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static const secp256k1_fe SECP256K1_FE_TWO_POW_744 = SECP256K1_FE_CONST(\n+    0x0E90A100UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000100UL, 0x000B7300UL, 0x1D214200UL\n+);\n+\n+static void secp256k1_fe_mul_add(int64_t a0, int64_t a1, int64_t b0, int64_t b1, int64_t c0, int64_t c1, int64_t d0, int64_t d1, int64_t *t) {\n+\n+    /*  Each [a0,a1], etc. pair is a 126-bit signed value e.g. a0 + a1 * 2^64.\n+     *  This method calculates ([a0,a1] * [c0,c1]) + ([b0,b1] * [d0,d1]), and\n+     *  writes the 252-bit signed result to [t[0],t[1],t[2],t[3]].\n+     */\n+\n+    int64_t z0, z1, z2, z3;\n+    int128_t tt;\n+\n+    tt  = (int128_t)a0 * b0\n+        + (int128_t)c0 * d0;\n+    z0  = (int64_t)tt; tt -= z0; tt >>= 64;\n+\n+    tt += (int128_t)a0 * b1\n+        + (int128_t)a1 * b0\n+        + (int128_t)c0 * d1\n+        + (int128_t)c1 * d0;\n+    z1  = (int64_t)tt; tt -= z1; tt >>= 64;\n+\n+    tt += (int128_t)a1 * b1\n+        + (int128_t)c1 * d1;\n+    z2  = (int64_t)tt; tt -= z2; tt >>= 64;\n+\n+    z3 = (int64_t)tt;\n+\n+    t[0] = z0; t[1] = z1; t[2] = z2; t[3] = z3;\n+}\n+\n+static void secp256k1_fe_combine_1s(int64_t *t) {\n+\n+    int64_t a = t[0], b = t[1], c = t[2], d = t[3],\n+            e = t[4], f = t[5], g = t[6], h = t[7];\n+    int128_t I, J, K, L;\n+\n+    I = (int128_t)e * a + (int128_t)f * c;\n+    J = (int128_t)e * b + (int128_t)f * d;\n+    K = (int128_t)g * a + (int128_t)h * c;\n+    L = (int128_t)g * b + (int128_t)h * d;\n+\n+    a = (int64_t)I; I -= a; I >>= 64; b = (int64_t)I;\n+    c = (int64_t)J; J -= c; J >>= 64; d = (int64_t)J;\n+    e = (int64_t)K; K -= e; K >>= 64; f = (int64_t)K;\n+    g = (int64_t)L; L -= g; L >>= 64; h = (int64_t)L;\n+\n+    t[0] = a; t[1] = b; t[2] = c; t[3] = d;\n+    t[4] = e; t[5] = f; t[6] = g; t[7] = h;\n+}\n+\n+static void secp256k1_fe_combine_2s(int64_t *t) {\n+\n+    int64_t a0 = t[ 0], a1 = t[ 1];\n+    int64_t b0 = t[ 2], b1 = t[ 3];\n+    int64_t c0 = t[ 4], c1 = t[ 5];\n+    int64_t d0 = t[ 6], d1 = t[ 7];\n+    int64_t e0 = t[ 8], e1 = t[ 9];\n+    int64_t f0 = t[10], f1 = t[11];\n+    int64_t g0 = t[12], g1 = t[13];\n+    int64_t h0 = t[14], h1 = t[15];\n+\n+    secp256k1_fe_mul_add(e0, e1, a0, a1, f0, f1, c0, c1, &t[0]);\n+    secp256k1_fe_mul_add(e0, e1, b0, b1, f0, f1, d0, d1, &t[4]);\n+    secp256k1_fe_mul_add(g0, g1, a0, a1, h0, h1, c0, c1, &t[8]);\n+    secp256k1_fe_mul_add(g0, g1, b0, b1, h0, h1, d0, d1, &t[12]);\n+}\n+\n+static void secp256k1_fe_decode_matrix(secp256k1_fe *r, int64_t *t) {\n+\n+    uint64_t u0, u1, u2, u3, u4;\n+    uint64_t r0, r1, r2, r3, r4;\n+    int128_t cc;\n+\n+    cc  = t[0];\n+    u0  = (uint64_t)cc; cc >>= 64;\n+    cc += t[1];\n+    u1  = (uint64_t)cc; cc >>= 64;\n+    cc += t[2];\n+    u2  = (uint64_t)cc; cc >>= 64;\n+    cc += t[3];\n+    u3  = (uint64_t)cc; cc >>= 64;\n+    u4  = (uint64_t)cc;\n+\n+    VERIFY_CHECK(u4 == 0 || u4 == UINT64_MAX);\n+\n+    /* Add twice the field prime in case u4 is non-zero (which represents -2^256). */\n+    r0 = 0xFFFFEFFFFFC2FULL * 2;\n+    r1 = 0xFFFFFFFFFFFFFULL * 2;\n+    r2 = 0xFFFFFFFFFFFFFULL * 2;\n+    r3 = 0xFFFFFFFFFFFFFULL * 2;\n+    r4 = 0x0FFFFFFFFFFFFULL * 2;\n+\n+    r0 += u0 & 0xFFFFFFFFFFFFFULL;\n+    r1 += u0 >> 52 | ((u1 << 12) & 0xFFFFFFFFFFFFFULL);\n+    r2 += u1 >> 40 | ((u2 << 24) & 0xFFFFFFFFFFFFFULL);\n+    r3 += u2 >> 28 | ((u3 << 36) & 0xFFFFFFFFFFFFFULL);\n+    r4 += u3 >> 16 |  (u4 << 48);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 2;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_62(int64_t *r, const secp256k1_fe *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *n = &a->n[0];\n+    uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 52) & M62;\n+    r[1] = (a1 >> 10 | a2 << 42) & M62;\n+    r[2] = (a2 >> 20 | a3 << 32) & M62;\n+    r[3] = (a3 >> 30 | a4 << 22) & M62;\n+    r[4] =  a4 >> 40;\n+}\n+\n+static int secp256k1_fe_divsteps_62(uint16_t eta, uint64_t f0, uint64_t g0, int64_t *t) {",
      "path": "src/field_5x52_impl.h",
      "position": null,
      "original_position": 136,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "in_reply_to_id": 457337802,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, it should be cleaned up. It's logically a signed value (~ in [-744,744]) in the sense that the algorithm as-written switches on the sign of it, but the actual constant-time code for _divsteps is in \"bit-twiddling\" style, and I wanted to make it clear that there's no reliance (in this method) on arithmetic right-shift. Conceptually maybe it's (u)int_fast16_t, but I was a bit lazy about dealing with the variable sizes before things worked. Possibly uint64_t (resp. uint32_t for 32bit) makes more sense.",
      "created_at": "2020-07-22T07:22:35Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r458586989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458586989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 633,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458587958",
      "pull_request_review_id": 453058424,
      "id": 458587958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4Nzk1OA==",
      "diff_hunk": "@@ -498,4 +498,380 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static const secp256k1_fe SECP256K1_FE_TWO_POW_744 = SECP256K1_FE_CONST(\n+    0x0E90A100UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000100UL, 0x000B7300UL, 0x1D214200UL\n+);\n+\n+static void secp256k1_fe_mul_add(int64_t a0, int64_t a1, int64_t b0, int64_t b1, int64_t c0, int64_t c1, int64_t d0, int64_t d1, int64_t *t) {\n+\n+    /*  Each [a0,a1], etc. pair is a 126-bit signed value e.g. a0 + a1 * 2^64.\n+     *  This method calculates ([a0,a1] * [c0,c1]) + ([b0,b1] * [d0,d1]), and\n+     *  writes the 252-bit signed result to [t[0],t[1],t[2],t[3]].\n+     */\n+\n+    int64_t z0, z1, z2, z3;\n+    int128_t tt;\n+\n+    tt  = (int128_t)a0 * b0\n+        + (int128_t)c0 * d0;\n+    z0  = (int64_t)tt; tt -= z0; tt >>= 64;\n+\n+    tt += (int128_t)a0 * b1\n+        + (int128_t)a1 * b0\n+        + (int128_t)c0 * d1\n+        + (int128_t)c1 * d0;\n+    z1  = (int64_t)tt; tt -= z1; tt >>= 64;\n+\n+    tt += (int128_t)a1 * b1\n+        + (int128_t)c1 * d1;\n+    z2  = (int64_t)tt; tt -= z2; tt >>= 64;\n+\n+    z3 = (int64_t)tt;\n+\n+    t[0] = z0; t[1] = z1; t[2] = z2; t[3] = z3;\n+}\n+\n+static void secp256k1_fe_combine_1s(int64_t *t) {\n+\n+    int64_t a = t[0], b = t[1], c = t[2], d = t[3],\n+            e = t[4], f = t[5], g = t[6], h = t[7];\n+    int128_t I, J, K, L;\n+\n+    I = (int128_t)e * a + (int128_t)f * c;\n+    J = (int128_t)e * b + (int128_t)f * d;\n+    K = (int128_t)g * a + (int128_t)h * c;\n+    L = (int128_t)g * b + (int128_t)h * d;\n+\n+    a = (int64_t)I; I -= a; I >>= 64; b = (int64_t)I;\n+    c = (int64_t)J; J -= c; J >>= 64; d = (int64_t)J;\n+    e = (int64_t)K; K -= e; K >>= 64; f = (int64_t)K;\n+    g = (int64_t)L; L -= g; L >>= 64; h = (int64_t)L;\n+\n+    t[0] = a; t[1] = b; t[2] = c; t[3] = d;\n+    t[4] = e; t[5] = f; t[6] = g; t[7] = h;\n+}\n+\n+static void secp256k1_fe_combine_2s(int64_t *t) {\n+\n+    int64_t a0 = t[ 0], a1 = t[ 1];\n+    int64_t b0 = t[ 2], b1 = t[ 3];\n+    int64_t c0 = t[ 4], c1 = t[ 5];\n+    int64_t d0 = t[ 6], d1 = t[ 7];\n+    int64_t e0 = t[ 8], e1 = t[ 9];\n+    int64_t f0 = t[10], f1 = t[11];\n+    int64_t g0 = t[12], g1 = t[13];\n+    int64_t h0 = t[14], h1 = t[15];\n+\n+    secp256k1_fe_mul_add(e0, e1, a0, a1, f0, f1, c0, c1, &t[0]);\n+    secp256k1_fe_mul_add(e0, e1, b0, b1, f0, f1, d0, d1, &t[4]);\n+    secp256k1_fe_mul_add(g0, g1, a0, a1, h0, h1, c0, c1, &t[8]);\n+    secp256k1_fe_mul_add(g0, g1, b0, b1, h0, h1, d0, d1, &t[12]);\n+}\n+\n+static void secp256k1_fe_decode_matrix(secp256k1_fe *r, int64_t *t) {\n+\n+    uint64_t u0, u1, u2, u3, u4;\n+    uint64_t r0, r1, r2, r3, r4;\n+    int128_t cc;\n+\n+    cc  = t[0];\n+    u0  = (uint64_t)cc; cc >>= 64;\n+    cc += t[1];\n+    u1  = (uint64_t)cc; cc >>= 64;\n+    cc += t[2];\n+    u2  = (uint64_t)cc; cc >>= 64;\n+    cc += t[3];\n+    u3  = (uint64_t)cc; cc >>= 64;\n+    u4  = (uint64_t)cc;\n+\n+    VERIFY_CHECK(u4 == 0 || u4 == UINT64_MAX);\n+\n+    /* Add twice the field prime in case u4 is non-zero (which represents -2^256). */\n+    r0 = 0xFFFFEFFFFFC2FULL * 2;\n+    r1 = 0xFFFFFFFFFFFFFULL * 2;\n+    r2 = 0xFFFFFFFFFFFFFULL * 2;\n+    r3 = 0xFFFFFFFFFFFFFULL * 2;\n+    r4 = 0x0FFFFFFFFFFFFULL * 2;\n+\n+    r0 += u0 & 0xFFFFFFFFFFFFFULL;\n+    r1 += u0 >> 52 | ((u1 << 12) & 0xFFFFFFFFFFFFFULL);\n+    r2 += u1 >> 40 | ((u2 << 24) & 0xFFFFFFFFFFFFFULL);\n+    r3 += u2 >> 28 | ((u3 << 36) & 0xFFFFFFFFFFFFFULL);\n+    r4 += u3 >> 16 |  (u4 << 48);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 2;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_62(int64_t *r, const secp256k1_fe *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *n = &a->n[0];\n+    uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 52) & M62;\n+    r[1] = (a1 >> 10 | a2 << 42) & M62;\n+    r[2] = (a2 >> 20 | a3 << 32) & M62;\n+    r[3] = (a3 >> 30 | a4 << 22) & M62;\n+    r[4] =  a4 >> 40;\n+}\n+\n+static int secp256k1_fe_divsteps_62(uint16_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = -(uint64_t)1, v = 0, q = 0, r = -(uint64_t)1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((u * f0 + v * g0) == -f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == -g << i);\n+\n+        c1 = -(g & (eta >> 15));\n+\n+        x = (f ^ g) & c1;\n+        f ^= x; g ^= x; g ^= c1; g -= c1;\n+\n+        y = (u ^ q) & c1;\n+        u ^= y; q ^= y; q ^= c1; q -= c1;\n+\n+        z = (v ^ r) & c1;\n+        v ^= z; r ^= z; r ^= c1; r -= c1;\n+\n+        eta = (eta ^ (uint16_t)c1) - (uint16_t)c1 - 1;",
      "path": "src/field_5x52_impl.h",
      "position": null,
      "original_position": 158,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "in_reply_to_id": 458421228,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Am I just missing a U i.e. 1U or else could you explain?",
      "created_at": "2020-07-22T07:24:27Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r458587958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458587958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 655,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458712051",
      "pull_request_review_id": 453214041,
      "id": 458712051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxMjA1MQ==",
      "diff_hunk": "@@ -498,4 +498,380 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static const secp256k1_fe SECP256K1_FE_TWO_POW_744 = SECP256K1_FE_CONST(\n+    0x0E90A100UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000100UL, 0x000B7300UL, 0x1D214200UL\n+);\n+\n+static void secp256k1_fe_mul_add(int64_t a0, int64_t a1, int64_t b0, int64_t b1, int64_t c0, int64_t c1, int64_t d0, int64_t d1, int64_t *t) {\n+\n+    /*  Each [a0,a1], etc. pair is a 126-bit signed value e.g. a0 + a1 * 2^64.\n+     *  This method calculates ([a0,a1] * [c0,c1]) + ([b0,b1] * [d0,d1]), and\n+     *  writes the 252-bit signed result to [t[0],t[1],t[2],t[3]].\n+     */\n+\n+    int64_t z0, z1, z2, z3;\n+    int128_t tt;\n+\n+    tt  = (int128_t)a0 * b0\n+        + (int128_t)c0 * d0;\n+    z0  = (int64_t)tt; tt -= z0; tt >>= 64;\n+\n+    tt += (int128_t)a0 * b1\n+        + (int128_t)a1 * b0\n+        + (int128_t)c0 * d1\n+        + (int128_t)c1 * d0;\n+    z1  = (int64_t)tt; tt -= z1; tt >>= 64;\n+\n+    tt += (int128_t)a1 * b1\n+        + (int128_t)c1 * d1;\n+    z2  = (int64_t)tt; tt -= z2; tt >>= 64;\n+\n+    z3 = (int64_t)tt;\n+\n+    t[0] = z0; t[1] = z1; t[2] = z2; t[3] = z3;\n+}\n+\n+static void secp256k1_fe_combine_1s(int64_t *t) {\n+\n+    int64_t a = t[0], b = t[1], c = t[2], d = t[3],\n+            e = t[4], f = t[5], g = t[6], h = t[7];\n+    int128_t I, J, K, L;\n+\n+    I = (int128_t)e * a + (int128_t)f * c;\n+    J = (int128_t)e * b + (int128_t)f * d;\n+    K = (int128_t)g * a + (int128_t)h * c;\n+    L = (int128_t)g * b + (int128_t)h * d;\n+\n+    a = (int64_t)I; I -= a; I >>= 64; b = (int64_t)I;\n+    c = (int64_t)J; J -= c; J >>= 64; d = (int64_t)J;\n+    e = (int64_t)K; K -= e; K >>= 64; f = (int64_t)K;\n+    g = (int64_t)L; L -= g; L >>= 64; h = (int64_t)L;\n+\n+    t[0] = a; t[1] = b; t[2] = c; t[3] = d;\n+    t[4] = e; t[5] = f; t[6] = g; t[7] = h;\n+}\n+\n+static void secp256k1_fe_combine_2s(int64_t *t) {\n+\n+    int64_t a0 = t[ 0], a1 = t[ 1];\n+    int64_t b0 = t[ 2], b1 = t[ 3];\n+    int64_t c0 = t[ 4], c1 = t[ 5];\n+    int64_t d0 = t[ 6], d1 = t[ 7];\n+    int64_t e0 = t[ 8], e1 = t[ 9];\n+    int64_t f0 = t[10], f1 = t[11];\n+    int64_t g0 = t[12], g1 = t[13];\n+    int64_t h0 = t[14], h1 = t[15];\n+\n+    secp256k1_fe_mul_add(e0, e1, a0, a1, f0, f1, c0, c1, &t[0]);\n+    secp256k1_fe_mul_add(e0, e1, b0, b1, f0, f1, d0, d1, &t[4]);\n+    secp256k1_fe_mul_add(g0, g1, a0, a1, h0, h1, c0, c1, &t[8]);\n+    secp256k1_fe_mul_add(g0, g1, b0, b1, h0, h1, d0, d1, &t[12]);\n+}\n+\n+static void secp256k1_fe_decode_matrix(secp256k1_fe *r, int64_t *t) {\n+\n+    uint64_t u0, u1, u2, u3, u4;\n+    uint64_t r0, r1, r2, r3, r4;\n+    int128_t cc;\n+\n+    cc  = t[0];\n+    u0  = (uint64_t)cc; cc >>= 64;\n+    cc += t[1];\n+    u1  = (uint64_t)cc; cc >>= 64;\n+    cc += t[2];\n+    u2  = (uint64_t)cc; cc >>= 64;\n+    cc += t[3];\n+    u3  = (uint64_t)cc; cc >>= 64;\n+    u4  = (uint64_t)cc;\n+\n+    VERIFY_CHECK(u4 == 0 || u4 == UINT64_MAX);\n+\n+    /* Add twice the field prime in case u4 is non-zero (which represents -2^256). */\n+    r0 = 0xFFFFEFFFFFC2FULL * 2;\n+    r1 = 0xFFFFFFFFFFFFFULL * 2;\n+    r2 = 0xFFFFFFFFFFFFFULL * 2;\n+    r3 = 0xFFFFFFFFFFFFFULL * 2;\n+    r4 = 0x0FFFFFFFFFFFFULL * 2;\n+\n+    r0 += u0 & 0xFFFFFFFFFFFFFULL;\n+    r1 += u0 >> 52 | ((u1 << 12) & 0xFFFFFFFFFFFFFULL);\n+    r2 += u1 >> 40 | ((u2 << 24) & 0xFFFFFFFFFFFFFULL);\n+    r3 += u2 >> 28 | ((u3 << 36) & 0xFFFFFFFFFFFFFULL);\n+    r4 += u3 >> 16 |  (u4 << 48);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 2;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_62(int64_t *r, const secp256k1_fe *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *n = &a->n[0];\n+    uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 52) & M62;\n+    r[1] = (a1 >> 10 | a2 << 42) & M62;\n+    r[2] = (a2 >> 20 | a3 << 32) & M62;\n+    r[3] = (a3 >> 30 | a4 << 22) & M62;\n+    r[4] =  a4 >> 40;\n+}\n+\n+static int secp256k1_fe_divsteps_62(uint16_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = -(uint64_t)1, v = 0, q = 0, r = -(uint64_t)1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((u * f0 + v * g0) == -f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == -g << i);\n+\n+        c1 = -(g & (eta >> 15));\n+\n+        x = (f ^ g) & c1;\n+        f ^= x; g ^= x; g ^= c1; g -= c1;\n+\n+        y = (u ^ q) & c1;\n+        u ^= y; q ^= y; q ^= c1; q -= c1;\n+\n+        z = (v ^ r) & c1;\n+        v ^= z; r ^= z; r ^= c1; r -= c1;\n+\n+        eta = (eta ^ (uint16_t)c1) - (uint16_t)c1 - 1;",
      "path": "src/field_5x52_impl.h",
      "position": null,
      "original_position": 158,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "0c3869a46d3eccf0324f4c40c076215093de0ab5",
      "in_reply_to_id": 458421228,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The way integer operations (and this includes bitwise as well as unary operators,  shifts and comparisons) is done in C can be pretty unexpected for types smaller than `int`: Before any other rules apply, \"Integer types smaller than `int` are promoted when an operation is performed on them. If all values of the original type can be represented as an `int`, the value of the smaller type is converted to an `int`; otherwise, it is converted to an `unsigned int`\" [1]. On our targets, `int` is the same as `int32_t`, so an `uint16_t` for sure fits in an `int`. The possibility that an unsigned integer is converted to a signed integer is fucked up because signed overflow is undefined behavior.  And compilers have been reported to rely on this [2, 3]. \r\n\r\nFor this line here, this means `eta ^ (uint16_t)c1` is evaluated by first converting `eta` and `(uint16_t)c1` to `int` and then performing the `^`. Then for the `-`, the right operand `(uint16_t)c1` is converted to `int`. In those cases,  it's easy to see that it doesn't make a difference, at least for our targets.\r\n\r\nIn general, if you ignore the theoretical cases like `int` 17 is bits wide, it seems (without a proof) that the only interesting operations are multiplication, left shifts, right shifts, and comparisons, the former two because of possible overflows, comparisons because of issues with comparing signed and unsigned values, and right shifts because it's relevant whether the left operand is signed or unsigned.\r\n\r\nThe real fuckup here is that the `stdint.h` types were supposed to be used for portable arithmetic but portable arithmetic is not possible in C because all integer arithmetic, no matter what type, implicitly depends on the size of `int` by the above rule. Our code would probably blow up on a target where `int` is 64 bits. (Yes, this exists.)\r\n\r\nThe typical trick to work around this is to start the arithmetic with an unsigned int value, e.g., `(1U * eta) ^ (uint16_t)c1`. No need to point out that this is ugly.\r\n\r\n[1] https://wiki.sei.cmu.edu/confluence/display/c/INT02-C.+Understand+integer+conversion+rules  \r\n[2] https://stackoverflow.com/questions/24795651/whats-the-best-c-way-to-multiply-unsigned-integers-modularly-safely the link is for C++ but the same rules apply in this case\r\n[3] https://www.cryptologie.net/article/418/integer-promotion-in-c/",
      "created_at": "2020-07-22T11:04:37Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r458712051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/458712051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 655,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504394883",
      "pull_request_review_id": 507986868,
      "id": 504394883,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NDg4Mw==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;",
      "path": "src/field_10x26_impl.h",
      "position": null,
      "original_position": 232,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a point to multiplying by 4 and then shifting down again?",
      "created_at": "2020-10-14T04:31:19Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504394883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504394883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504395245",
      "pull_request_review_id": 507986868,
      "id": 504395245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NTI0NQ==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;",
      "path": "src/field_10x26_impl.h",
      "position": 489,
      "original_position": 454,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Am I right in thinking that (cond == 0) corresponds to (len >= 2 && (fn == 0 || fn == -1) && (gn == 0 || gn == -1))?",
      "created_at": "2020-10-14T04:32:48Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504395245",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504395245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1652,
      "original_line": 1617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504395655",
      "pull_request_review_id": 507986868,
      "id": 504395655,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NTY1NQ==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;\n+        cond |= fn ^ (fn >> 31);\n+        cond |= gn ^ (gn >> 31);\n+\n+        if (cond == 0) {",
      "path": "src/field_10x26_impl.h",
      "position": 493,
      "original_position": 458,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This clause is there so that when the top nonzero element is 0 or -1, we stuff it into bit 29 of the element below?\r\n\r\nHow is it guaranteed that at the end this 29th bit is gone (in scalar_encode)?",
      "created_at": "2020-10-14T04:34:25Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504395655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504395655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1656,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504401041",
      "pull_request_review_id": 507993952,
      "id": 504401041,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwMTA0MQ==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;",
      "path": "src/field_10x26_impl.h",
      "position": null,
      "original_position": 232,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504394883,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See the comment for this line: shift up/down is sign extension, so that the result is in [-2^29, 2^29].",
      "created_at": "2020-10-14T04:55:45Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504401041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504401041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504402161",
      "pull_request_review_id": 507995304,
      "id": 504402161,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwMjE2MQ==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;",
      "path": "src/field_10x26_impl.h",
      "position": null,
      "original_position": 232,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504394883,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I see!",
      "created_at": "2020-10-14T05:00:17Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504402161",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504402161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504402285",
      "pull_request_review_id": 507995461,
      "id": 504402285,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwMjI4NQ==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;",
      "path": "src/field_10x26_impl.h",
      "position": 489,
      "original_position": 454,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395245,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. i.e. if the length is more than 1, and the top words of both f and g contain only a sign bit, then we can shorten the length and keep the sign(s) in the top bits of the new top word(s).",
      "created_at": "2020-10-14T05:00:46Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504402285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504402285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1652,
      "original_line": 1617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504403407",
      "pull_request_review_id": 507996851,
      "id": 504403407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwMzQwNw==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;\n+        cond |= fn ^ (fn >> 31);\n+        cond |= gn ^ (gn >> 31);\n+\n+        if (cond == 0) {",
      "path": "src/field_10x26_impl.h",
      "position": 493,
      "original_position": 458,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395655,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The sign bit is stuffed into bits 30, 31 - I'm not sure where 29 comes from. Are you asking about secp256k1_fe_decode_30 (since we are in field code here)? f, g are never decoded.",
      "created_at": "2020-10-14T05:05:21Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504403407",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504403407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1656,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504404710",
      "pull_request_review_id": 507998419,
      "id": 504404710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwNDcxMA==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;",
      "path": "src/field_10x26_impl.h",
      "position": 489,
      "original_position": 454,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395245,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I should clarify that whilst d, e, f, g are arrays of signed values, only the top word is ever negative.",
      "created_at": "2020-10-14T05:09:54Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r504404710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/504404710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1652,
      "original_line": 1617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507246396",
      "pull_request_review_id": 511268978,
      "id": 507246396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0NjM5Ng==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;",
      "path": "src/field_10x26_impl.h",
      "position": 489,
      "original_position": 454,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395245,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there an easy argument why that's always the case, even with a modulus that's encoded using negative limbs?",
      "created_at": "2020-10-18T23:14:45Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r507246396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507246396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1652,
      "original_line": 1617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507248061",
      "pull_request_review_id": 511269321,
      "id": 507248061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0ODA2MQ==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;\n+        cond |= fn ^ (fn >> 31);\n+        cond |= gn ^ (gn >> 31);\n+\n+        if (cond == 0) {",
      "path": "src/field_10x26_impl.h",
      "position": 493,
      "original_position": 458,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395655,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry for the confusion, let me restate:\r\n* All the inner arithmetic supports 31 bits values (+ sign bit)\r\n* Generally both d/e and g/f only store 30 significant bits per limb\r\n  * Except when the top limb of f/g are both 0 or -1, in which case it's stuffed into the previous limb, possibly pushing that one to 31 bits.\r\n  * D/e strictly only have 30 bits per limb, and only the top limb can be negative (otherwise the decode functions would fail).\r\n\r\nAnalogously for the 64-bit version, using with s/30/62/. ",
      "created_at": "2020-10-18T23:18:20Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r507248061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507248061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1656,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507250464",
      "pull_request_review_id": 511269893,
      "id": 507250464,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI1MDQ2NA==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there no point in taking advantage of the fact that 741 iterations is enough? (this loop looks like it supports 12*62 = 744 iterations).\r\n\r\n@gmaxwell and I have been trying to find example inputs that need a large number of iterations (using a beam search that tries to find low bits that increase the average iteration count (over many high bits that follow) , but the best so far is 0x4212888e98e92e1c5384b37d0bf0655ec3bbad64381e713d6d6b0490d4858c83 (modulo the field order p), which needs 637 iterations.\r\n\r\nI've also worked on some code that uses partial evaluation and interval reasoning to split up the range of inputs that have a large bound (using the log2(sqrt(f^2+4*g^2)) formula from the paper), until better bounds for the entire range is found. If my code is correct, both the field and scalar logic only need 737 iterations at most - but proving anything better will take a long time.\r\n\r\nSome scratch code is here: https://gist.github.com/sipa/5736b83903336a1e6f3ccdeaa4cfbfea",
      "created_at": "2020-10-18T23:24:59Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r507250464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507250464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507393693",
      "pull_request_review_id": 511384607,
      "id": 507393693,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5MzY5Mw==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;\n+        cond |= fn ^ (fn >> 31);\n+        cond |= gn ^ (gn >> 31);\n+\n+        if (cond == 0) {",
      "path": "src/field_10x26_impl.h",
      "position": 493,
      "original_position": 458,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395655,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My bounds analysis for the update methods was based on s31 values in the matrices produced by _divsteps_30, and s30 values in d, e, f, g. The update methods currently only leave negative values in the top limb of d, e, f, g, but the modulus (and therefore initial f) might have negatives elsewhere.\r\n\r\nYour questions have made me realize that the dynamic shortening of f, g can result in a top limb of f or g (or both) that is s31. Probably not an issue, but it might be best to redo bounds analysis for the update methods.",
      "created_at": "2020-10-19T03:06:20Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r507393693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507393693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1656,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507399908",
      "pull_request_review_id": 511387349,
      "id": 507399908,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5OTkwOA==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;",
      "path": "src/field_10x26_impl.h",
      "position": 489,
      "original_position": 454,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395245,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I overstated it; f can be initialised with negative limbs from the modulus. The update methods only leave a negative value in the top limb. _update_fg is always called at least once.",
      "created_at": "2020-10-19T03:16:39Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r507399908",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507399908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1652,
      "original_line": 1617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507423317",
      "pull_request_review_id": 511396175,
      "id": 507423317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyMzMxNw==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 507250464,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For a limit of 741 I doubt there's much to be gained by saving 3 divsteps, and I prefer the simplicity. Maybe for the 32-bit version saving 9 divsteps could be more viable. Two example approaches: 1) more code (alternate divsteps method plus extra calling code) -> careful about benchmark results neglecting e.g. the instruction cache impact, or branch prediction slot. 2) pass the iteration count to divsteps -> careful not to break compiler's ability to unroll divsteps loop (or handcoded asm).\r\n\r\nI do hope that mathematical developments could reduce the max iterations. Checking the limit for the specific prime could gain a few bits as you say. It's unclear to me whether the worst-case input(s) can be generated, but it would be wonderful if \"bad\" inputs could be cheaply characterised (maybe based on something like the Hamming weight in NAF), then cheaply \"fixed\" in constant-time (something simple like multiplication by a small constant), so that a new limit would apply.",
      "created_at": "2020-10-19T03:54:31Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r507423317",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/507423317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/508207018",
      "pull_request_review_id": 512328074,
      "id": 508207018,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwNzAxOA==",
      "diff_hunk": "@@ -1164,4 +1164,486 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_decode_30(secp256k1_fe *r, const int32_t *a) {\n+\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4],\n+                   a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n+    uint32_t r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t;\n+\n+    t = (int32_t)a8 >> 16;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(t == 0 || t == -(uint32_t)1);\n+\n+    /* Add 2P if a8 is \"negative\". */\n+    r0  = 0x3FFF85EUL & t;\n+    r1  = 0x3FFFF7FUL & t;\n+    r2  = 0x3FFFFFFUL & t;\n+    r3  = 0x3FFFFFFUL & t;\n+    r4  = 0x3FFFFFFUL & t;\n+    r5  = 0x3FFFFFFUL & t;\n+    r6  = 0x3FFFFFFUL & t;\n+    r7  = 0x3FFFFFFUL & t;\n+    r8  = 0x3FFFFFFUL & t;\n+    r9  = 0x07FFFFFUL & t;\n+\n+    r0 +=  a0                   & M26;\n+    r1 += (a0 >> 26 | a1 <<  4) & M26;\n+    r2 += (a1 >> 22 | a2 <<  8) & M26;\n+    r3 += (a2 >> 18 | a3 << 12) & M26;\n+    r4 += (a3 >> 14 | a4 << 16) & M26;\n+    r5 += (a4 >> 10 | a5 << 20) & M26;\n+    r6 += (a5 >>  6 | a6 << 24) & M26;\n+    r7 += (a6 >>  2           ) & M26;\n+    r8 += (a6 >> 28 | a7 <<  2) & M26;\n+    r9 += (a7 >> 24 | a8 <<  6);\n+\n+    r->n[0] = r0;\n+    r->n[1] = r1;\n+    r->n[2] = r2;\n+    r->n[3] = r3;\n+    r->n[4] = r4;\n+    r->n[5] = r5;\n+    r->n[6] = r6;\n+    r->n[7] = r7;\n+    r->n[8] = r8;\n+    r->n[9] = r9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 0;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_encode_30(int32_t *r, const secp256k1_fe *a) {\n+\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint32_t *n = &a->n[0];\n+    const uint64_t a0 = n[0], a1 = n[1], a2 = n[2], a3 = n[3], a4 = n[4],\n+                   a5 = n[5], a6 = n[6], a7 = n[7], a8 = n[8], a9 = n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r[0] = (a0       | a1 << 26) & M30;\n+    r[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r[6] = (a6 >> 24 | a7 <<  2\n+                     | a8 << 28) & M30;\n+    r[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r[8] =  a9 >>  6;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int32_t)eta >> 31;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static uint32_t secp256k1_fe_divsteps_30_var(uint32_t eta, uint32_t f0, uint32_t g0, int32_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[32] = {\n+        0x00, 0x01, 0x02, 0x18, 0x03, 0x13, 0x06, 0x19, 0x16, 0x04, 0x14, 0x0A,\n+        0x10, 0x07, 0x0C, 0x1A, 0x1F, 0x17, 0x12, 0x05, 0x15, 0x09, 0x0F, 0x0B,\n+        0x1E, 0x11, 0x08, 0x0E, 0x1D, 0x0D, 0x1C, 0x1B };\n+#endif\n+\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        x = g | (UINT32_MAX << i);\n+\n+#if 0\n+        zeros = __builtin_ctzl(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x04D7651F) >> 27];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+\n+        if ((int32_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+        }\n+\n+        /* Handle up to 8 divsteps at once, subject to eta and i. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int32_t)u;\n+    t[1] = (int32_t)v;\n+    t[2] = (int32_t)q;\n+    t[3] = (int32_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_fe_update_de_30(int32_t *d, int32_t *e, const int32_t *t) {\n+\n+    /* P == 2^256 - 2^32 - C30 */\n+    const int64_t C30 = 0x3D1L;\n+    /* I30 == -P^-1 mod 2^30 */\n+    const int32_t I30 = 0x12253531L;\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t di, ei, md, me;\n+    int64_t cd, ce;\n+    int i;\n+\n+    di = d[0];\n+    ei = e[0];\n+\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+\n+    /* Calculate the multiples of P to add, to zero the 30 bottom bits. We choose md, me\n+     * from the centred range [-2^29, 2^29) to keep d, e within [-2^256, 2^256). */\n+    md = (I30 * 4 * (int32_t)cd) >> 2;\n+    me = (I30 * 4 * (int32_t)ce) >> 2;\n+\n+    cd -= (int64_t)C30 * md;\n+    ce -= (int64_t)C30 * me;\n+\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+\n+    cd -= (int64_t)4 * md;\n+    ce -= (int64_t)4 * me;\n+\n+    for (i = 1; i < 8; ++i) {\n+\n+        di = d[i];\n+        ei = e[i];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        d[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    {\n+        di = d[8];\n+        ei = e[8];\n+\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+\n+        cd += (int64_t)65536 * md;\n+        ce += (int64_t)65536 * me;\n+\n+        d[7] = (int32_t)cd & M30; cd >>= 30;\n+        e[7] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+\n+    d[8] = (int32_t)cd;\n+    e[8] = (int32_t)ce;\n+}\n+\n+static void secp256k1_fe_update_fg_30(int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < 9; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[8] = (int32_t)cf;\n+    g[8] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_update_fg_30_var(int len, int32_t *f, int32_t *g, const int32_t *t) {\n+\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+\n+        f[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+\n+    f[len - 1] = (int32_t)cf;\n+    g[len - 1] = (int32_t)cg;\n+}\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b0, b1;\n+    int i, sign;\n+    uint32_t eta;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b0 = *a;\n+    secp256k1_fe_normalize(&b0);\n+    secp256k1_fe_encode_30(g, &b0);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b0);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+        eta = secp256k1_fe_divsteps_30(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30(f, g, t);\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+\n+    VERIFY_CHECK((g[0] | g[1] | g[2] | g[3] | g[4] | g[5] | g[6] | g[7] | g[8]) == 0);\n+\n+    sign = (f[0] >> 1) & 1;\n+\n+    secp256k1_fe_decode_30(&b0, d);\n+\n+    secp256k1_fe_negate(&b1, &b0, 2);\n+    secp256k1_fe_cmov(&b0, &b1, sign);\n+    secp256k1_fe_normalize_weak(&b0);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(&b0) == !zero_in);\n+#endif\n+\n+    *r = b0;\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int32_t t[4];\n+    int32_t d[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t e[9] = { 1, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    int32_t f[9] = { 0x3FFFFC2F, 0x3FFFFFFB, 0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF,\n+        0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF, 0xFFFF };\n+    int32_t g[9];\n+    secp256k1_fe b;\n+    int i, j, len = 9, sign;\n+    uint32_t eta;\n+    int32_t cond, fn, gn;\n+#ifdef VERIFY\n+    int zero_in;\n+#endif\n+\n+    b = *a;\n+    secp256k1_fe_normalize(&b);\n+    secp256k1_fe_encode_30(g, &b);\n+\n+#ifdef VERIFY\n+    zero_in = secp256k1_fe_is_zero(&b);\n+#endif\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If g has leading zeros (w.r.t 256 bits), then eta can be set initially to\n+     * -(1 + clz(g)), and the worst-case divstep count would be only (741 - clz(g)). */\n+    eta = -(uint32_t)1;\n+\n+    for (i = 0; i < 25; ++i) {\n+\n+        eta = secp256k1_fe_divsteps_30_var(eta, f[0], g[0], t);\n+        secp256k1_fe_update_de_30(d, e, t);\n+        secp256k1_fe_update_fg_30_var(len, f, g, t);\n+\n+        if (g[0] == 0) {\n+            cond = 0;\n+            for (j = 1; j < len; ++j) {\n+                cond |= g[j];\n+            }\n+            if (cond == 0) {\n+                break;\n+            }\n+        }\n+\n+        fn = f[len - 1];\n+        gn = g[len - 1];\n+\n+        cond = ((int32_t)len - 2) >> 31;",
      "path": "src/field_10x26_impl.h",
      "position": 489,
      "original_position": 454,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 504395245,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Got is.",
      "created_at": "2020-10-20T04:49:08Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r508207018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/508207018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1652,
      "original_line": 1617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/508754642",
      "pull_request_review_id": 513028162,
      "id": 508754642,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NDY0Mg==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 507250464,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we call b(x,y) = &lfloor;49/17 log<sub>2</sub>(&radic;(x<sup>2</sup> + 4y<sup>2</sup>)))&rfloor;, with appropriate corrections for small inputs, then I believe these bounds are correct:\r\n* &delta; = 1: iter &leq; b(|f|,|g|) [from the paper]\r\n* &delta; < 1: iter &leq; 1 - &delta; + b(|f|, ((2<sup>1-&delta;</sup>-1)|f| + |g|) / 2<sup>1-&delta;</sup>) [&delta; will only go up the next 1-&delta; steps, and in each, the g argument is either halved or averaged with f; after that many steps, this formula is an upper bound (corresponding to always averaging)]\r\n* &delta; > 1: iter &leq; 1 + &delta; + b(|g|, |g| + (|f| + |g|)/2<sup>1+&delta;</sup>) [by assuming the next step will have an odd g and using the previous rule, but correcting for the fact that more &delta;-incrementing even-g steps can happen in between]\r\n\r\nWith those rules, it seems like I've proven that no input (for either field or scalar order modulus) ever needs more than 736 iterations using the code above (with finds a partition of the input range based on fixing low bits, and using partial evaluation + the bounds above to find a bound <= 736 for each).\r\n",
      "created_at": "2020-10-20T18:39:34Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r508754642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/508754642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511537378",
      "pull_request_review_id": 516319814,
      "id": 511537378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNzM3OA==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 507250464,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Update: we've proven that no inputs for either field or scalar order need more than 735 iterations. We could do 734 but I don't think it's worth the effort, as by extrapolation it would take around 16 years of CPU time (which is doable, but needs some effort to distribute the work across network nodes etc) - which means that even if proven it would make the computation hard to repeat. The &leq;736 bound takes a couple of minutes on to prove with the (somewhat involved) C++ code, and a few hours in Python.\r\n\r\n| Bound | Proof steps for field | Proof steps for scalar |\r\n| --- | --- | --- |\r\n| &leq;741 | 1 | 1 |\r\n| &leq;740 | 21 | 21 |\r\n| &leq;739 | 85 | 85 |\r\n| &leq;738 | 17835 | 17835 |\r\n| &leq;737 | 6753276 | 6753276 |\r\n| &leq;736 | 2879322241 | 2879322241 |\r\n| &leq;735 | 1216906236685 | 1216976994782 |\r\n",
      "created_at": "2020-10-25T02:28:59Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r511537378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511537378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511539877",
      "pull_request_review_id": 516321011,
      "id": 511539877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzOTg3Nw==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 507250464,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The ≤735 proof takes 80 minutes on a 128 core host.\r\n\r\nI wouldn't mind doing the  ≤734 and wouldn't mind doing-- even without networking code-- if it would actually be even slightly useful, but it'll take me about a month realtime that way (for each field and scalar) (I could do it 4 or 5 days with a networked version).  ≤733-- by extrapolation-- would be about 7000 cpu-years and reasonably beyond my ability to do but it could be done (e.g. with the help of an actual supercomputer).\r\n\r\nI don't think ≤732 is currently provable using all the kings cycles and all the kings mems, at least not using these techniques.\r\n",
      "created_at": "2020-10-25T03:04:39Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r511539877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511539877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511565739",
      "pull_request_review_id": 516336006,
      "id": 511565739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTczOQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 507250464,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I don't think ≤732 is currently provable using all the kings cycles and all the kings mems, at least not using these techniques.\r\n\r\nSurely all the kings men can muster 1M c6g.16xlarge instances for a week (~ 350M USD).",
      "created_at": "2020-10-25T08:38:19Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r511565739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511565739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511569583",
      "pull_request_review_id": 516338775,
      "id": 511569583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2OTU4Mw==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 507250464,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa curious to see the code used to prove this ",
      "created_at": "2020-10-25T09:15:30Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r511569583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511569583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511624617",
      "pull_request_review_id": 516380052,
      "id": 511624617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYyNDYxNw==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);\n+    secp256k1_scalar_cmov(r, &u, a4 >> 63);\n+}\n+\n+static void secp256k1_scalar_encode_62(int64_t *r, const secp256k1_scalar *a) {\n+\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t *d = &a->d[0];\n+    const uint64_t a0 = d[0], a1 = d[1], a2 = d[2], a3 = d[3];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_scalar_check_overflow(a) == 0);\n+#endif\n+\n+    r[0] =  a0                   & M62;\n+    r[1] = (a0 >> 62 | a1 <<  2) & M62;\n+    r[2] = (a1 >> 60 | a2 <<  4) & M62;\n+    r[3] = (a2 >> 58 | a3 <<  6) & M62;\n+    r[4] =  a3 >> 56;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 62; ++i) {\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+\n+        c1 = (int64_t)eta >> 63;\n+        c2 = -(g & 1);\n+\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+\n+        c1 &= c2;\n+        eta = (eta ^ c1) - (c1 + 1);\n+\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static uint64_t secp256k1_scalar_divsteps_62_var(uint64_t eta, uint64_t f0, uint64_t g0, int64_t *t) {\n+\n+#if 1\n+    static const uint8_t debruijn[64] = {\n+        0, 1, 2, 53, 3, 7, 54, 27, 4, 38, 41, 8, 34, 55, 48, 28,\n+        62, 5, 39, 46, 44, 42, 22, 9, 24, 35, 59, 56, 49, 18, 29, 11,\n+        63, 52, 6, 26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,\n+        51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12\n+    };\n+#endif\n+\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m, w, x, y, z;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+\n+        x = g | (UINT64_MAX << i);\n+\n+        /* Use a sentinel bit to count zeros only up to i. */\n+#if 0\n+        zeros = __builtin_ctzll(x);\n+#else\n+        zeros = debruijn[((x & -x) * 0x022FDD63CC95386D) >> 58];\n+#endif\n+\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+\n+        if (i <= 0) {\n+            break;\n+        }\n+\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+\n+        if ((int64_t)eta < 0) {\n+            eta = -eta;\n+            x = f; f = g; g = -x;\n+            y = u; u = q; q = -y;\n+            z = v; v = r; r = -z;\n+\n+            /* Handle up to 6 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* Handle up to 4 divsteps at once, subject to eta and i. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+\n+    t[0] = (int64_t)u;\n+    t[1] = (int64_t)v;\n+    t[2] = (int64_t)q;\n+    t[3] = (int64_t)r;\n+\n+    return eta;\n+}\n+\n+static void secp256k1_scalar_update_de_62(int64_t *d, int64_t *e, const int64_t *t) {\n+\n+    /* I62 == -P^-1 mod 2^62 */\n+    const int64_t I62 = 0x0B0DFF665588B13FLL;\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t P[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, -0x15LL, 0, 256 };\n+    const int64_t d0 = d[0], d1 = d[1], d2 = d[2], d3 = d[3], d4 = d[4];\n+    const int64_t e0 = e[0], e1 = e[1], e2 = e[2], e3 = e[3], e4 = e[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t md, me;\n+    int128_t cd, ce;\n+\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+\n+    /* Calculate the multiples of P to add, to zero the 62 bottom bits. We choose md, me\n+     * from the centred range [-2^61, 2^61) to keep d, e within [-2^256, 2^256). */\n+    md = (I62 * 4 * (int64_t)cd) >> 2;\n+    me = (I62 * 4 * (int64_t)ce) >> 2;\n+\n+    cd += (int128_t)P[0] * md;\n+    ce += (int128_t)P[0] * me;\n+\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+\n+    cd += (int128_t)P[1] * md;\n+    ce += (int128_t)P[1] * me;\n+\n+    d[0] = (int64_t)cd & M62; cd >>= 62;\n+    e[0] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+\n+    cd += (int128_t)P[2] * md;\n+    ce += (int128_t)P[2] * me;\n+\n+    d[1] = (int64_t)cd & M62; cd >>= 62;\n+    e[1] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+\n+    d[2] = (int64_t)cd & M62; cd >>= 62;\n+    e[2] = (int64_t)ce & M62; ce >>= 62;\n+\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+\n+    cd += (int128_t)P[4] * md;\n+    ce += (int128_t)P[4] * me;\n+\n+    d[3] = (int64_t)cd & M62; cd >>= 62;\n+    e[3] = (int64_t)ce & M62; ce >>= 62;\n+\n+    d[4] = (int64_t)cd;\n+    e[4] = (int64_t)ce;\n+}\n+\n+static void secp256k1_scalar_update_fg_62(int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f[0], f1 = f[1], f2 = f[2], f3 = f[3], f4 = f[4];\n+    const int64_t g0 = g[0], g1 = g[1], g2 = g[2], g3 = g[3], g4 = g[4];\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int128_t cf, cg;\n+\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+\n+    f[0] = (int64_t)cf & M62; cf >>= 62;\n+    g[0] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+\n+    f[1] = (int64_t)cf & M62; cf >>= 62;\n+    g[1] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+\n+    f[2] = (int64_t)cf & M62; cf >>= 62;\n+    g[2] = (int64_t)cg & M62; cg >>= 62;\n+\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+\n+    f[3] = (int64_t)cf & M62; cf >>= 62;\n+    g[3] = (int64_t)cg & M62; cg >>= 62;\n+\n+    f[4] = (int64_t)cf;\n+    g[4] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_update_fg_62_var(int len, int64_t *f, int64_t *g, const int64_t *t) {\n+\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t[0], v = t[1], q = t[2], r = t[3];\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+\n+    VERIFY_CHECK(len > 0);\n+\n+    fi = f[0];\n+    gi = g[0];\n+\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+\n+    for (i = 1; i < len; ++i) {\n+\n+        fi = f[i];\n+        gi = g[i];\n+\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+\n+        f[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+\n+    f[len - 1] = (int64_t)cf;\n+    g[len - 1] = (int64_t)cg;\n+}\n+\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+    int i;\n+    *r = 0;\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n+            *r = i;\n+    /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n+     * have a composite group order; fix it in exhaustive_tests.c). */\n+    VERIFY_CHECK(*r != 0);\n+}\n+#else\n+\n+    /* Modular inversion based on the paper \"Fast constant-time gcd computation and\n+     * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang. */\n+\n+    int64_t t[4];\n+    int64_t d[5] = { 0, 0, 0, 0, 0 };\n+    int64_t e[5] = { 1, 0, 0, 0, 0 };\n+    int64_t f[5] = { 0x3FD25E8CD0364141LL, 0x2ABB739ABD2280EELL, 0x3FFFFFFFFFFFFFEBLL,\n+        0x3FFFFFFFFFFFFFFFLL, 0xFFLL };\n+    int64_t g[5];\n+    secp256k1_scalar b0;\n+    int i, sign;\n+    uint64_t eta;\n+#ifdef VERIFY\n+    int zero_in = secp256k1_scalar_is_zero(x);\n+#endif\n+\n+    b0 = *x;\n+    secp256k1_scalar_encode_62(g, &b0);\n+\n+    /* The paper uses 'delta'; eta == -delta (a performance tweak).\n+     *\n+     * If the maximum bitlength of g is known to be less than 256, then eta can be set\n+     * initially to -(1 + (256 - maxlen(g))), and only (741 - (256 - maxlen(g))) total\n+     * divsteps are needed. */\n+    eta = -(uint64_t)1;\n+\n+    for (i = 0; i < 12; ++i) {",
      "path": "src/scalar_4x64_impl.h",
      "position": 389,
      "original_position": 353,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 507250464,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@elichai https://gist.github.com/sipa/5736b83903336a1e6f3ccdeaa4cfbfea\r\n\r\n* fgcd.cpp is a heuristic search for large inputs\r\n* fgcd_recurse.{py,cpp} are provers for a maximum bound",
      "created_at": "2020-10-25T17:21:11Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r511624617",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/511624617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1345,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514068872",
      "pull_request_review_id": 519413800,
      "id": 514068872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2ODg3Mg==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm wondering if there is a good reason to do this in the scalar/field representation rather than the signed30/62 representation? There could be a single addition chain that negates (based on the sign of `f[0]`) and (conditionally) adds the modulus if the computed inverse is negative.",
      "created_at": "2020-10-29T08:06:26Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514068872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514068872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514073869",
      "pull_request_review_id": 519420088,
      "id": 514073869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3Mzg2OQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No good reason - I do it as part of the inverse in [the BouncyCastle implementation](https://github.com/bcgit/bc-java/blob/aa63149d1542425c089b8b631506aa47f48a5ee0/core/src/main/java/org/bouncycastle/math/raw/Mod.java#L99). As written that requires D to be in [-P, P), which I believe is correct, but so far in secp256k1 I only assumed [-2^256,2^256).",
      "created_at": "2020-10-29T08:16:03Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514073869",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514073869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514658037",
      "pull_request_review_id": 520297096,
      "id": 514658037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY1ODAzNw==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I had a hard time verifying those bounds, so I wrote a (hopefully faithful) reimplementation of the algorithm here in Python, only replacing the limb decomposition with native integers (which are arbitrary length in Python): https://gist.github.com/sipa/5736b83903336a1e6f3ccdeaa4cfbfea#file-fgcd-py\r\n\r\nBased on the choice of the limb size and moduli, better bounds may hold, but if I make no assumptions (allowing any modulus, and any limb size from 1 bit up to however many bits the modulus is), I can only verify that the \"d\" value at the end of the divsteps iterations is in [-2P, P). Care to share you reasoning for why it'd be tighter than that?",
      "created_at": "2020-10-30T01:14:02Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514658037",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514658037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514724085",
      "pull_request_review_id": 520338554,
      "id": 514724085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcyNDA4NQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~Hmm, when I restrict it to even limb sizes of at least 6 bits, [-P,P) seems to hold.~~\r\n\r\nScratch that, inverse of 19934 modulo 21163, with 6 bit limbs, gives d=-23436.",
      "created_at": "2020-10-30T02:30:35Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514724085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514724085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514746520",
      "pull_request_review_id": 520345093,
      "id": 514746520,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc0NjUyMA==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was a while ago now... I recall doing some exhaustive testing for small values and finding an asymptote for the worst-case at around +/- 5*P/6 (actually just a bit larger), but I'm foggy on the details. We could certainly use more analysis here and it's probably best to go with [-2P, P) for the moment if you can prove that.",
      "created_at": "2020-10-30T02:53:45Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514746520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514746520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514751584",
      "pull_request_review_id": 520346814,
      "id": 514751584,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc1MTU4NA==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BTW, we are only actually interested in limbs of 30+ bits, right? Does your test show a clear trend for the worst-case as the limb size increases?",
      "created_at": "2020-10-30T02:59:43Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514751584",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514751584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514793446",
      "pull_request_review_id": 520358665,
      "id": 514793446,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc5MzQ0Ng==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, we only care about limbs of 30 or 62 bits in practice, but for exhaustive tests with small values it seemed better to also look at the effect of other/smaller limb sizes.\r\n\r\nAnd indeed, there is somewhat of a downtrend. Odd limb sizes seem to be slightly worse than even ones. For even limb sizes >= 8 I can't find inputs that result in d outside of [-P, P). Though, this may be just because the search space is larger, and while such inputs are rarer, they don't actually stop existing.",
      "created_at": "2020-10-30T03:43:36Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514793446",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514793446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514827713",
      "pull_request_review_id": 520367537,
      "id": 514827713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgyNzcxMw==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After iterating over all moduli up to 33301, and all inputs in [0, modulus). \"iterations\" is the number limb-sized multi-divsteps that were needed to reach g=0. The table entries are the ratio -d/m, for the lowest d seen.\r\n\r\n| limb bits | 1 iteration | 2 iterations | 3 iterations | 4 iterations | 5 iterations | 6 iterations | 7 iterations | max |\r\n| -- | -- | -- | -- | -- | -- | -- | -- | -- |\r\n| 1 | | | 0.333333 | 0.600000 | 0.714286 | 1.153846 | 1.294118 | 1.988523 |\r\n| 2 | | 0.428571 | 0.727273 | 0.894737 | 1.073171 | 1.033708 | 1.179104 | 1.273476 |\r\n| 3 | 0.333333 | 0.714286 | 0.742268 | 1.228916 | 0.893238 | 1.273476 | 1.238157 | 1.353553 |\r\n| 4 | 0.428571 | 0.727273 | 0.821782 | 0.931232 | 0.948829 | 1.255086 | 1.271807 | 1.271807 |\r\n| 5 | | 0.790698 | 0.872404 | 1.138999 | 0.961705 | 1.274614 | 0.935210 | 1.274614 |\r\n| 6 | 0.210526 | 0.790698 | 0.908851 | 0.940290 | 1.107404 | 0.919449 | 0.755455 | 1.107404 |\r\n| 7 | 0.232558 | 0.794521 | 0.904947 | 1.181315 | 0.940741 | 0.849245 | | 1.181315 |\r\n| 8 | | 0.821782 | 0.914713 | 0.934919 | 0.863095 | | | 0.934919 |\r\n| 9 | | 0.821656 | 0.918805 | 1.165892 | 0.731644 | | | 1.165892 |\r\n| 10 | 0.248021 | 0.830424 | 0.925502 | 0.857774 | | | | 0.925502 |\r\n| 11 | | 0.830892 | 0.922294 | 0.850083 | | | | 0.922294 |\r\n| 12 | 0.249510 | 0.828776 | 0.926862 | 0.731644 | | | | 0.926862 |\r\n| 13 | 0.249755 | 0.832723 | 0.926357 | | | | | 0.926357 |\r\n| 14 | | 0.832906 | 0.862055 | | | | | 0.862055 |\r\n| 15 | | 0.832906 | 0.845425 | | | | | 0.845425 |\r\n| 16 | 0.249969 | 0.833227 | 0.834568 | | | | | 0.834568 |\r\n",
      "created_at": "2020-10-30T04:19:18Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514827713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514827713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514888630",
      "pull_request_review_id": 520395836,
      "id": 514888630,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4ODYzMA==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess we need to look at  (find) the worst-case matrix (4x4x30bits) M and some fixed-point X so that update_de_(X, X, M) leaves D, E <= X on output. Maybe an interesting first question is: why is there an asymptote (seemingly) at ~5/6 - can we check behaviour for \"infinite\" limb size?",
      "created_at": "2020-10-30T06:05:58Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514888630",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514888630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514903061",
      "pull_request_review_id": 520413380,
      "id": 514903061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMzA2MQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm a bit surprised that the \"1 iteration\" column has entries for some and not others. That implies that the number of iterations needed for a given modulus/input combination depends on the limb size (more than just rounding up to the next limbsize multiple). Is that possible?",
      "created_at": "2020-10-30T06:57:19Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514903061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514903061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514936415",
      "pull_request_review_id": 520456088,
      "id": 514936415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzNjQxNQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It doesn't sound right, no. If (1 iteration of) n divsteps sends g to 0, then g will be 0 forevermore. So the first iteration of (n + 1) divsteps must also send g to 0.",
      "created_at": "2020-10-30T08:25:41Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r514936415",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/514936415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515442666",
      "pull_request_review_id": 521103756,
      "id": 515442666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MjY2Ng==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was wrong. In a new version I'm verifying that the number of big steps is exactly (n+l-1)/l, where n is the number of steps needed with limbsize 1bit, and l the limb size.\r\n\r\nI've ran more numbers, but I'm unconvinced there is much we can be certain about. \"groupsize\" is the limb size in what follows (as I don't really have limbs, but bits are still processed in groups):\r\n\r\n### All prime moduli up to 110947:\r\ngroupsize=1: any=-2.055085..1.000000 end=-1.993407..0.422482\r\ngroupsize=2: any=-1.491790..1.044510 end=-1.397171..0.803614\r\ngroupsize=3: any=-1.552709..1.170796 end=-1.369628..0.946939\r\ngroupsize=4: any=-1.374500..1.106852 end=-1.274800..0.878979\r\ngroupsize=5: any=-1.448697..1.071038 end=-1.274614..0.888029\r\ngroupsize=6: any=-1.253247..1.066610 end=-1.249308..0.848182\r\ngroupsize=7: any=-1.242349..0.985827 end=-1.181315..0.883249\r\ngroupsize=8: any=-1.235770..0.991852 end=-0.935896..0.848735\r\ngroupsize=9: any=-1.228235..0.989970 end=-1.176310..0.884596\r\ngroupsize=10: any=-1.038560..0.995537 end=-0.927074..0.846394\r\ngroupsize=11: any=-0.998062..0.983944 end=-0.922294..0.848562\r\ngroupsize=12: any=-0.994568..0.982599 end=-0.927107..0.846037\r\ngroupsize=13: any=-0.993722..0.986827 end=-0.928188..0.847768\r\ngroupsize=14: any=-0.972259..0.967022 end=-0.926749..0.845945\r\ngroupsize=15: any=-0.976746..0.975281 end=-0.899866..0.836040\r\ngroupsize=16: any=-0.947529..0.899753 end=-0.862346..0.833838\r\n\r\n### 10% of prime moduli up to 349507:\r\ngroupsize=1: any=-2.051133..0.995659 end=-1.995117..0.421344\r\ngroupsize=2: any=-1.492478..1.031685 end=-1.396499..0.803922\r\ngroupsize=3: any=-1.558648..1.170698 end=-1.371851..0.948689\r\ngroupsize=4: any=-1.381529..1.077632 end=-1.274312..0.879803\r\ngroupsize=5: any=-1.502681..1.078220 end=-1.272138..0.888213\r\ngroupsize=6: any=-1.313554..1.083599 end=-1.250655..0.857256\r\ngroupsize=7: any=-1.249881..1.005733 end=-1.249881..0.884644\r\ngroupsize=8: any=-1.230708..0.989838 end=-0.958233..0.849045\r\ngroupsize=9: any=-1.219221..0.992666 end=-1.176310..0.883021\r\ngroupsize=10: any=-1.142527..0.994789 end=-0.930372..0.848842\r\ngroupsize=11: any=-1.166794..0.989934 end=-1.166794..0.882834\r\ngroupsize=12: any=-0.995544..0.988289 end=-0.926862..0.836935\r\ngroupsize=13: any=-0.993748..0.988289 end=-0.915995..0.845237\r\ngroupsize=14: any=-0.984945..0.975717 end=-0.926749..0.839390\r\ngroupsize=15: any=-0.995626..0.975281 end=-0.925214..0.847219\r\ngroupsize=16: any=-0.987976..0.985138 end=-0.927226..0.836313\r\n\r\n### 1% of prime moduli up to 1131973:\r\ngroupsize=1: any=-2.052378..0.993162 end=-1.994926..0.422179\r\ngroupsize=2: any=-1.494688..1.033515 end=-1.396643..0.802153\r\ngroupsize=3: any=-1.562146..1.169104 end=-1.371607..0.946862\r\ngroupsize=4: any=-1.378231..1.114226 end=-1.273925..0.879529\r\ngroupsize=5: any=-1.475837..1.083105 end=-1.271721..0.888214\r\ngroupsize=6: any=-1.295239..1.047611 end=-1.254773..0.848775\r\ngroupsize=7: any=-1.330274..0.986786 end=-1.250550..0.885003\r\ngroupsize=8: any=-1.248294..0.991616 end=-1.248294..0.853758\r\ngroupsize=9: any=-1.228581..0.995544 end=-1.176310..0.872221\r\ngroupsize=10: any=-1.177726..0.992804 end=-0.925239..0.848618\r\ngroupsize=11: any=-1.167367..0.987836 end=-1.167367..0.883213\r\ngroupsize=12: any=-0.998108..0.990108 end=-0.928186..0.841764\r\ngroupsize=13: any=-1.150210..0.977471 end=-1.150210..0.849172\r\ngroupsize=14: any=-0.993729..0.977471 end=-0.911387..0.839390\r\ngroupsize=15: any=-0.985101..0.970516 end=-0.913996..0.835745\r\ngroupsize=16: any=-0.957962..0.979279 end=-0.922496..0.842599\r\n\r\n### 0.1% of prime moduli up to 3464117:\r\ngroupsize=1: any=-2.050473..1.003521 end=-1.989695..0.421928\r\ngroupsize=2: any=-1.497404..1.043420 end=-1.396404..0.804456\r\ngroupsize=3: any=-1.564505..1.162865 end=-1.371172..0.948631\r\ngroupsize=4: any=-1.377905..1.079789 end=-1.274672..0.879191\r\ngroupsize=5: any=-1.496653..1.110779 end=-1.271000..0.887810\r\ngroupsize=6: any=-1.297679..1.077534 end=-1.251278..0.848526\r\ngroupsize=7: any=-1.300602..1.021607 end=-1.248854..0.884289\r\ngroupsize=8: any=-1.248034..1.005337 end=-1.248034..0.848858\r\ngroupsize=9: any=-1.228581..0.995544 end=-1.176310..0.848870\r\ngroupsize=10: any=-1.207779..0.995366 end=-0.929434..0.847704\r\ngroupsize=11: any=-1.153446..0.990005 end=-1.153446..0.882861\r\ngroupsize=12: any=-0.996765..0.989516 end=-0.927898..0.847193\r\ngroupsize=13: any=-1.163140..0.987821 end=-1.163140..0.883305\r\ngroupsize=14: any=-0.995132..0.984791 end=-0.893015..0.835079\r\ngroupsize=15: any=-0.995132..0.967950 end=-0.907344..0.834382\r\ngroupsize=16: any=-0.984029..0.961038 end=-0.906420..0.834617\r\n\r\n### 0.01% of moduli up to 11039339:\r\ngroupsize=1: any=-2.051940..0.996391 end=-1.996305..0.421290\r\ngroupsize=2: any=-1.499505..1.051901 end=-1.396416..0.802318\r\ngroupsize=3: any=-1.561363..1.166551 end=-1.368984..0.948631\r\ngroupsize=4: any=-1.383586..1.091238 end=-1.274289..0.880152\r\ngroupsize=5: any=-1.481463..1.085957 end=-1.260109..0.888202\r\ngroupsize=6: any=-1.299034..1.060646 end=-1.251278..0.857331\r\ngroupsize=7: any=-1.260355..0.992207 end=-1.250235..0.883328\r\ngroupsize=8: any=-1.231910..0.992368 end=-0.956577..0.848064\r\ngroupsize=9: any=-1.216104..0.991101 end=-1.199865..0.884526\r\ngroupsize=10: any=-1.225255..0.993749 end=-0.934115..0.847749\r\ngroupsize=11: any=-1.148017..0.991232 end=-0.924975..0.846513\r\ngroupsize=12: any=-1.018515..0.987497 end=-0.927898..0.846874\r\ngroupsize=13: any=-1.160253..0.983809 end=-1.160253..0.882765\r\ngroupsize=14: any=-1.003507..0.986345 end=-0.921619..0.844235\r\ngroupsize=15: any=-0.996078..0.971918 end=-0.916266..0.836446\r\ngroupsize=16: any=-0.993275..0.965574 end=-0.866950..0.834224\r\n\r\n### 0.001% of prime moduli up to 28747003:\r\ngroupsize=1: any=-2.053982..0.996391 end=-1.992506..0.421290\r\ngroupsize=2: any=-1.493148..1.041476 end=-1.395867..0.800439\r\ngroupsize=3: any=-1.556455..1.154373 end=-1.369605..0.945930\r\ngroupsize=4: any=-1.384990..1.072617 end=-1.272547..0.879611\r\ngroupsize=5: any=-1.470865..1.075154 end=-1.270969..0.887815\r\ngroupsize=6: any=-1.260852..1.065870 end=-1.251268..0.848581\r\ngroupsize=7: any=-1.313924..1.017953 end=-1.250235..0.883669\r\ngroupsize=8: any=-1.246336..0.992604 end=-0.963704..0.848223\r\ngroupsize=9: any=-1.241720..0.992726 end=-1.241720..0.884562\r\ngroupsize=10: any=-1.183389..0.992054 end=-0.928432..0.845884\r\ngroupsize=11: any=-1.185953..0.986327 end=-0.927732..0.853218\r\ngroupsize=12: any=-1.090875..0.986342 end=-0.927898..0.843522\r\ngroupsize=13: any=-1.000580..0.977187 end=-0.914065..0.843360\r\ngroupsize=14: any=-0.995132..0.989678 end=-0.928494..0.846937\r\ngroupsize=15: any=-1.164714..0.963789 end=-1.164714..0.881029\r\ngroupsize=16: any=-0.992100..0.975921 end=-0.914312..0.835900\r\n\r\n### 0.0001% of prime moduli up to 87960151:\r\ngroupsize=1: any=-2.052892..0.993336 end=-1.995083..0.422630\r\ngroupsize=2: any=-1.495467..1.047303 end=-1.396386..0.795697\r\ngroupsize=3: any=-1.555671..1.163660 end=-1.371843..0.946223\r\ngroupsize=4: any=-1.382615..1.119554 end=-1.272758..0.878755\r\ngroupsize=5: any=-1.475855..1.092415 end=-1.259864..0.887520\r\ngroupsize=6: any=-1.319167..1.058888 end=-1.249887..0.848697\r\ngroupsize=7: any=-1.313924..1.010592 end=-1.250286..0.884678\r\ngroupsize=8: any=-1.231136..0.991234 end=-0.939565..0.848686\r\ngroupsize=9: any=-1.200750..0.989698 end=-1.166432..0.884064\r\ngroupsize=10: any=-1.227392..0.989845 end=-0.937704..0.847799\r\ngroupsize=11: any=-1.153800..0.988057 end=-1.153800..0.846207\r\ngroupsize=12: any=-1.088226..0.991479 end=-0.924114..0.846646\r\ngroupsize=13: any=-0.997867..0.988057 end=-0.914374..0.845121\r\ngroupsize=14: any=-0.997096..0.980230 end=-0.916255..0.836382\r\ngroupsize=15: any=-1.157445..0.989845 end=-1.157445..0.842492\r\ngroupsize=16: any=-0.994511..0.975921 end=-0.914883..0.843662\r\n\r\nThe any=-a..b indicates the range of d and e over the modulus (a=min(d/m, e/m), b=max(d/m, e/m)) during the execution (after any big step, including the last one). The end=-a..b indicates the range of d (not e) after the last big step. For small values there appears to be a convergence to -5/6..5/6 for the end range, but this is far less clear for larger moduli. I believe it may be a property that only holds as long as the modulus is small compared to the group size.\r\n\r\nThe only thing that seems easy to prove is that if *max(abs(d),abs(e)) <= &alpha; modulus* before a big step, then *max(abs(d'),abs(e')) <= (&alpha;+1/2)modulus*, due to the fact that all entries in the *2<sup>-groupsize</sup>t* matrix are between -1 and 1, and the sum and difference of any row in that matrix is also between -1 and 1. But that only bounds the final abs(d) below *7 modulus* (on 64 bit) and *13.5 modulus* (on 32 bit).",
      "created_at": "2020-10-31T02:00:50Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515442666",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515442666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515450861",
      "pull_request_review_id": 521109680,
      "id": 515450861,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MDg2MQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "D, E, begin as (0,1) and are then multiplied by some number of n-divstep matrices. The cases we are most interested in are those where the total number of divsteps (ignoring any \"0\" steps at the end) is an exact multiple of n (groupsize), so we can simplify this to just: start with (D,E)= (0,1) and find worst-case matrices (I mean worst-case using the actual possible divsteps not a vague upper bound). It should be either a specific calculable matrix depending only on n, or at most a cycle of 2 or 4 (since there are signs and 2 variables D, E). Then just iterate applying the matrix (matrices) to D,E (in this way you can easily study very large inputs too). If for some experiment you want the initial F, G, you can just invert the matrices and apply to F,G = (1,0) or (-1,0).\r\n\r\nEDIT: I suppose the first iteration is special and more tricky to determine a worst-case for.",
      "created_at": "2020-10-31T03:43:51Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515450861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515450861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515454581",
      "pull_request_review_id": 521112057,
      "id": 515454581,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NDU4MQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess it's more complicated than that because you don't have the modulus initially, so you'd have to produce the non-modular D,E, chain first, then back-calculate the modulus, then run it again with update_DE, etc.",
      "created_at": "2020-10-31T04:34:56Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515454581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515454581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515567739",
      "pull_request_review_id": 521188287,
      "id": 515567739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2NzczOQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not convinced there is a tractable way of finding the actual worst-case matrices. If there was, the bounds analysis in the paper would be significantly simpler.\r\n\r\nThis is the best I've got, showing that d is in range *[-0x16000000180000006000000180000006000000180000006000000180000006000, 0x15ffffff67ffffff9ffffffe7ffffff9ffffffe7ffffff9ffffffe7ffffffa000]* (for 25 30-bit iterations) and in range *[-0x16000000000000001800000000000000600000000000000180000000000000040, 0x15ffffffffffffff67ffffffffffffff9ffffffffffffffe7ffffffffffffff80]* (for 12 62-bit iterations):\r\n* Start with the ((at least one odd g since start of big step, delta) -> list of (d,e) pairs) map {(False, 1): [(0, 1)]}.\r\n* Iterate 25 times:\r\n  * Iterate 30 times:\r\n    * Apply the divstep rule (ignoring the division by 2) on the input map, both taking the \"g is even\" branch, and the \"g is odd\" branch (which depends on delta>0 or not), for every input (d,e), constructing a new map. This is the equivalent of doing 1 bit work of divsteps, and immediately applying the resulting t matrix to d,e.\r\n    * Minimize the list of points in every map entry by computing its convex hull.\r\n  * Apply the \"add multiple of modulus and shift down by 30 bits\" logic from update_de, taking into account that [-2^29, 2^29) times the modulus is added, except for d when no odd g was ever encountered (which would just have been multiplied by 2^30 in that case, and will thus certainly still be a multiple of the modulus after shifting down by 30 steps).\r\n* Find the minimal and maximal d in any list produced anywhere above.\r\n\r\nCode is here: https://gist.github.com/sipa/5736b83903336a1e6f3ccdeaa4cfbfea#file-hull-py . It's somewhat surprising to me that computing the convex hull of the images of (0, 1) after 62 divsteps is tractable to compute, but the result looks plausible.",
      "created_at": "2020-11-01T02:55:16Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515567739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515567739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515572278",
      "pull_request_review_id": 521190662,
      "id": 515572278,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MjI3OA==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How about I modify update_DE so that if u\\*D and v\\*E (resp. q\\*D and r\\*E) have the same sign then we force the sign of md (resp. me) to be the opposite?",
      "created_at": "2020-11-01T04:03:01Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515572278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515572278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515573434",
      "pull_request_review_id": 521191397,
      "id": 515573434,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MzQzNA==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll think about that... but is that easy/cheap to do? You may need to scan for the first non-zero limb to find the sign; doing that (especially in constant time) may not be that much cheaper than an addition chain to add/subtract a modulus.",
      "created_at": "2020-11-01T04:21:46Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515573434",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515573434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515573486",
      "pull_request_review_id": 521191433,
      "id": 515573486,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MzQ4Ng==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's cheap, the sign is always correct in the top limb for D, E. EDIT: They are in 2's complement basically, on a 2^30 radix to avoid overflow issues in the updates and so that the implicit shift is free.",
      "created_at": "2020-11-01T04:22:47Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515573486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515573486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515579583",
      "pull_request_review_id": 521194967,
      "id": 515579583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3OTU4Mw==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BTW, I've kind of accepted [-2P, 2P) for the moment. Just looking for a sign-based fixup for update_de; the ones I've tried so far actually give larger worst-case values in random trials, but perhaps they allow a locally-reasoned proof.",
      "created_at": "2020-11-01T05:56:31Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r515579583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/515579583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/516405449",
      "pull_request_review_id": 522165396,
      "id": 516405449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNTQ0OQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems this convex hull approximation technique also works for bounding the number of divsteps needed! https://gist.github.com/sipa/5736b83903336a1e6f3ccdeaa4cfbfea#file-hull-bound-py\r\n\r\nIf the code is correct (and it looks like it is for sufficiently small inputs), it proves that for any 256-bit modulus M and input in [0..M), no more than 723 divsteps are needed. Still not enough to reduce our number of big step iterations in either 32 or 64 bit, but perhaps there are other gains? \r\n\r\nEDIT: if the input is restricted to 0..MODULUS/2, 721 is enough. So close to only needing 24 iterations in 32 bit mode.",
      "created_at": "2020-11-03T03:05:11Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r516405449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/516405449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/520673159",
      "pull_request_review_id": 527349765,
      "id": 520673159,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3MzE1OQ==",
      "diff_hunk": "@@ -957,4 +957,460 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n     r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);\n }\n \n+static const secp256k1_scalar SECP256K1_SCALAR_NEG_TWO_POW_256 = SECP256K1_SCALAR_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFDUL,\n+    0x755DB9CDUL, 0x5E914077UL, 0x7FA4BD19UL, 0xA06C8282UL\n+);\n+\n+static void secp256k1_scalar_decode_62(secp256k1_scalar *r, const int64_t *a) {\n+\n+    const uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    uint64_t r0, r1, r2, r3;\n+    secp256k1_scalar u;\n+\n+    /* a must be in the range [-2^256, 2^256). */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK((int64_t)a4 >> 8 == 0 || (int64_t)a4 >> 8 == -(int64_t)1);\n+\n+    r0 = a0      | a1 << 62;\n+    r1 = a1 >> 2 | a2 << 60;\n+    r2 = a2 >> 4 | a3 << 58;\n+    r3 = a3 >> 6 | a4 << 56;\n+\n+    r->d[0] = r0;\n+    r->d[1] = r1;\n+    r->d[2] = r2;\n+    r->d[3] = r3;\n+\n+    secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+\n+    secp256k1_scalar_add(&u, r, &SECP256K1_SCALAR_NEG_TWO_POW_256);",
      "path": "src/scalar_4x64_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c9b77178270ddae9457069bb419f911ea1b9b63b",
      "original_commit_id": "cbd2d57dcee044de9a1fabc8887ff090a2fa4482",
      "in_reply_to_id": 514068872,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've pushed some changes that should address this issue of the size constraints on D, E. See comments in _update_de method(s). I've only done 64bit, but the pattern should be clear. This latest commit also does the final normalization within the 62-bit format.",
      "created_at": "2020-11-10T15:56:16Z",
      "updated_at": "2020-11-11T09:47:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/767#discussion_r520673159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/520673159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/767"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 990,
      "side": "RIGHT"
    }
  ]
}