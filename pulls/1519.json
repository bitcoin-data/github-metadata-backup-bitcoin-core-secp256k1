{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519",
    "id": 1831748262,
    "node_id": "PR_kwDOAP4Jqs5tLkKm",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1519.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1519.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1519",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1519/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
    "number": 1519,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Add BIP352 `silentpayments` module",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Depends on https://github.com/bitcoin-core/secp256k1/pull/1518\r\n\r\n---\r\n\r\nThis PR adds a new Silent Payments ([BIP352](https://github.com/bitcoin/bips/pull/1458)) module to secp256k1. It is a continuation of the work started in https://github.com/bitcoin-core/secp256k1/pull/1471.\r\n\r\nThe module implements the full protocol, except for transaction input filtering and silent payment address encoding / decoding as those will be the responsibility of the wallet software. It is organized with functions for sending (prefixed with `_sender`) and receiving (prefixed by `_recipient`).\r\n\r\n#### For sending\r\n\r\n1. Collect private keys into two lists: `taproot_seckeys` and `plain_seckeys`\r\n    Two lists are used since the `taproot_seckeys` may need negation. `taproot_seckeys` are passed as keypairs to avoid the function needing to compute the public key to determine parity. `plain_seckeys` are passed as just secret keys\r\n2. Create the `_silentpayment_recipient` objects\r\n    These structs hold the scan and spend public key and an index for remembering the original ordering. It is expected that a caller will start with a list of silent payment addresses (with the desired amounts), convert these into an array of `recipients` and then match the generated outputs back to the original silent payment addresses. The index is used to return the generated outputs in the original order\r\n3. Call `silentpayments_sender_create_outputs` to generate the xonly public keys for the recipients\r\n    This function can be called with one or more recipients. The same recipient may be repeated to generate multiple outputs for the same recipient\r\n    \r\n#### For scanning\r\n\r\n1. Collect the public keys into two lists `taproot_pubkeys` and `plain_pubeys`\r\n    This avoids the caller needing to convert taproot public keys into compressed public keys (and vice versa)\r\n2. Compute the input data needed, i.e. sum the public keys and compute the `input_hash`\r\n    This is done as a separate step to allow the caller to reuse this output if scanning for multiple scan keys. It also allows a caller to use this function for aggregating the transaction inputs and storing them in an index to vend to light clients later (or for faster rescans when recovering a wallet)\r\n4. Call `silentpayments_recipient_scan_outputs` to scan the transaction outputs and return the tweak data (and optionally label information) needed for spending later\r\n\r\nIn addition, a few utility functions for labels are provided for the recipient for creating a label tweak and tweaked spend public key for their address. Finally, two functions are exposed in the API for supporting light clients, `_recipient_created_shared_secret` and `_recipient_create_output_pubkey`. These functions enable incremental scanning for scenarios where the caller does not have access to the transaction outputs:\r\n\r\n1. Calculating a shared secret\r\n    This is done as a separate step to allow the caller to reuse the shared secret result when creating outputs and avoid needing to do a costly ECDH every time they need to check for an additional output\r\n3. Generate an output (with `k = 0`)\r\n5. Check if the output exists in the UTXO set (using their preferred light client protocol)\r\n6. If the output exists, proceed by generating a new output from the shared secret with `k++`\r\n\r\nSee `examples/silentpayments.c` for a demonstration of how the API is expected to be used.\r\n\r\n### Note for reviewers\r\n\r\nMy immediate goal is to get feedback on the API so that I can pull this module into https://github.com/bitcoin/bitcoin/pull/28122 (silent payments in the bitcoin core wallet). That unblocks from finishing the bitcoin core PRs while work continues on this module.\r\n\r\n#### Notable differences between this PR and the previous version\r\n\r\nSee https://github.com/bitcoin-core/secp256k1/issues/1427 and https://github.com/bitcoin-core/secp256k1/pull/1471 for discussions on the API design. This iteration of the module attempts to be much more high level and incorporate the feedback from #1471. I also added a `secp256k1_silentpayments_public_data` opaque data type, which contains the summed public key and the input_hash. My motivation here was:\r\n\r\n1. I caught myself mixing up the order of arguments between `A_sum` and `recipient_spend_key`, which was impossible to catch with `ARG_CHECKS` and would result in the scanning process finishing without errors, but not finding any outputs\r\n2. Combining public key and input_hash into the same data type allows for completely hiding `input_hash` from the caller, which makes for an overall simpler API IMO\r\n\r\nI also removed the need for the recipient to generate a shared secret before using the `secp256k1_silentpayments_recipient_scan_outputs` function and instead create the shared secret inside the function.\r\n\r\n### Outstanding work\r\n\r\n- [ ] clean up the testing code\r\n- [ ] improve test coverage (currently only using the BIP352 test vectors)\r\n- [ ] optimize the implementation, where possible",
    "labels": [
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      }
    ],
    "created_at": "2024-04-19T14:21:15Z",
    "updated_at": "2024-05-03T08:30:50Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "60d5ec4a6483bc80c5a219217d1f1fe8e4d4e3c4",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "josibake:bip352-silentpayments-module",
      "ref": "bip352-silentpayments-module",
      "sha": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 751433786,
        "node_id": "R_kgDOLMn4Og",
        "name": "secp256k1",
        "full_name": "josibake/secp256k1",
        "owner": {
          "login": "josibake",
          "id": 7444140,
          "node_id": "MDQ6VXNlcjc0NDQxNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/josibake",
          "html_url": "https://github.com/josibake",
          "followers_url": "https://api.github.com/users/josibake/followers",
          "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
          "organizations_url": "https://api.github.com/users/josibake/orgs",
          "repos_url": "https://api.github.com/users/josibake/repos",
          "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/josibake/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/josibake/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/josibake/secp256k1",
        "archive_url": "https://api.github.com/repos/josibake/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/josibake/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/josibake/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/josibake/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/josibake/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/josibake/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/josibake/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/josibake/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/josibake/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/josibake/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/josibake/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/josibake/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/josibake/secp256k1/events",
        "forks_url": "https://api.github.com/repos/josibake/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/josibake/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/josibake/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/josibake/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/josibake/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/josibake/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/josibake/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/josibake/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/josibake/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/josibake/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/josibake/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/josibake/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/josibake/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/josibake/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/josibake/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/josibake/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:josibake/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/josibake/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/josibake/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/josibake/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/josibake/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/josibake/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/josibake/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/josibake/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/josibake/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/josibake/secp256k1/hooks",
        "svn_url": "https://github.com/josibake/secp256k1",
        "language": "C",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 11144,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-03T08:59:30Z",
        "created_at": "2024-02-01T15:52:50Z",
        "updated_at": "2024-04-23T11:56:32Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "da515074e3ebc8abc85a4fff3a31d7694ecf897b",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1967,
        "watchers_count": 1967,
        "size": 10880,
        "default_branch": "master",
        "open_issues_count": 136,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-03T08:21:32Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2024-05-01T17:20:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 6540,
    "deletions": 12,
    "changed_files": 24,
    "commits": 15,
    "review_comments": 53,
    "comments": 3
  },
  "events": [
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-19T14:25:06Z",
      "updated_at": "2024-04-19T14:25:06Z",
      "source": {
        "issue": {
          "id": 2054852916,
          "node_id": "PR_kwDOAP4Jqs5is1PD",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471",
          "number": 1471,
          "state": "closed",
          "state_reason": null,
          "title": "Add silentpayments (BIP352) module",
          "body": "This PR adds a new Silent Payments ([BIP352](https://github.com/bitcoin/bips/pull/1458)) module to secp256k1. The following routines are provided ($a_i$ are input private keys, $A_i$ are input public keys, $b$ and $B$ denote recipient privkeys/pubkeys that would be encoded in silent payment addresses, $d$ and $P$ the keypair for the actual transaction taproot x-only output):\r\n\r\n| Side     | Function                        | Inputs                           | Outputs                                                                   |\r\n|----------|---------------------------------|----------------------------------|---------------------------------------------------------------------------|\r\n|  Sender  | `_create_private_tweak_data`    | $a_1...a_n$, $outpoint_L$        | $a_{sum} = (a_1 + a_2 + ... + a_n)$<br>$inputhash =  hash_I(outpoint_L \\|\\| (a_{sum} * G))$ |\r\n| Receiver | `_create_public_tweak_data`     | $A_1...A_n$, $outpoint_L$        | $A_{sum} = (A_1 + A_2 + ... + A_n)$<br>$inputhash = hash_I(outpoint_L \\|\\| A_{sum})$ |\r\n| Receiver | `_create_tweaked_pubkey`       |  $A_{sum}, inputhash$       |  $A_{tweaked} = inputhash * A_{sum}$\r\n|  Both  | `_create_shared_secret`    | $Pub$, $sec$<br>(Sender: $B_{scan}, a_{sum}$<br>Receiver: $A_{sum}, b_{scan}$<br>Lightclient: $A_{tweaked}, b_{scan}$)        | $SS = (inputhash * sec) * Pub$ (ECDH)                                      |\r\n| Receiver | `_create_label_tweak`           | $b_{scan}, m$                    | $labeltweak = hash_L(b_{scan} \\|\\| m)$<br>$label = labeltweak * G$                                    |\r\n| Receiver | `_create_address_spend_pubkey`  | $B_{spend}, label$          | $B_m = B_{spend} + label$                                        |\r\n| Sender   | `_sender_create_output_pubkey`         | $SS, B_m, k$ | $P_{xonly} = B_m + hash_S(SS \\|\\| k) * G$        |\r\n| Receiver | `_receiver_scan_output`               | $SS, B_m, k, tx_{output}$        | $t_k = hash_S(SS \\|\\| k)$<br>$P_{xonly} = B_m + t_k * G$  [not returned]<br>$directmatch = P_{xonly} == tx_{output}$<br>if $directmatch == 0$:<br>$\\quad label1 = tx_{output} - P$<br>$\\quad label2 = -tx_{output} - P$\r\n| Receiver | `_create_output_seckey`         | $b_{spend}, t_k, (labeltweak)$ | $d = (b_{spend} + labeltweak) + t_k$                        |\r\n\r\nwhere\r\n* $hash_I$ denotes a SHA256 tagged hash with tag \"BIP0352/Inputs\"\r\n* $hash_L$ denotes a SHA256 tagged hash with tag \"BIP0352/Label\"\r\n* $hash_S$ denotes a SHA256 tagged hash with tag \"BIP0352/SharedSecret\"\r\n\r\nFor ending up with output key material used for sending to / scanning for / spending from, both sides would follow the chain of `tweak_data -> shared_secret -> output key`. The public tweak data can be useful for faster scanning of output transactions by storing them in an index, see e.g. Bitcoin Core PR https://github.com/bitcoin/bitcoin/pull/28241. Private tweak data is arguably less useful, so in theory one could collapse the tweak data and shared secret creation functions into a single one, but IMHO it's nicer if the API is symmetric.\r\n\r\nAs discussed in https://github.com/bitcoin-core/secp256k1/issues/1427#issuecomment-1757675172, the approach of passing in two separate key pairs for taproot and non-taproot inputs is followed here. This may seem a bit confusing at first, but has the advantage that the caller doesn't have to deal with enforcing even y-parity for key material manually (e.g. negating private keys of taproot outputs if they would end up in an odd point), which seems error-prone.\r\n\r\nThe last commit contains the BIP352 test vectors, converted to C code with a Python script. An earlier version of the tests, directly written in Python (by calling in to the secp256k1 shared library using ctypes) can still be found here: https://github.com/theStack/secp256k1/tree/silentpayments-module-demo_old5",
          "user": {
            "login": "theStack",
            "id": 91535,
            "node_id": "MDQ6VXNlcjkxNTM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theStack",
            "html_url": "https://github.com/theStack",
            "followers_url": "https://api.github.com/users/theStack/followers",
            "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
            "organizations_url": "https://api.github.com/users/theStack/orgs",
            "repos_url": "https://api.github.com/users/theStack/repos",
            "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theStack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 4975353639,
              "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
              "name": "feature",
              "description": "",
              "color": "731E95",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 44,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1471.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1471.patch"
          },
          "closed_at": "2024-04-19T16:17:41Z",
          "created_at": "2023-12-23T17:39:21Z",
          "updated_at": "2024-04-19T16:17:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 12541859026,
      "node_id": "LE_lADOAP4Jqs6GTERUzwAAAALrjZTS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12541859026",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-19T16:18:02Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGI3NjRjYTg0Zjk4Y2VlNjMxNGIwZjU4OTEwNTFjODdjMWUzM2M4MmM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b764ca84f98cee6314b0f5891051c87c1e33c82c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b764ca84f98cee6314b0f5891051c87c1e33c82c",
      "tree": {
        "sha": "3be5530a77efe712582520eaf740c51f2c61ff79",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3be5530a77efe712582520eaf740c51f2c61ff79"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3be5530a77efe712582520eaf740c51f2c61ff79\nparent da515074e3ebc8abc85a4fff3a31d7694ecf897b\nauthor Jonas Nick <jonasd.nick@gmail.com> 1713375231 +0000\ncommitter Jonas Nick <jonasd.nick@gmail.com> 1713799346 +0000\n\nAdd secp256k1_pubkey_sort\n\nCo-authored-by: Tim Ruffing <crypto@timruffing.de>\nCo-authored-by: Russell O'Connor <roconnor@blockstream.io>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEES7uEWm9aZaad+uwjSGHb8mISNgUFAmYmgLQACgkQSGHb8mIS\nNgUKJg//a+yRprEqQK2synmG8XpB7bQT0DfIW0tCd9a1Ld61PsbffwvLhsHhEtOZ\n6Y2C7XzAPKqwaNv7dGN2sfu+1LJjP8McwbQHzyAbbFhP/JGx1oL55gm7wdohsdUT\n05O7Z6SY89ZruMCFQnbhX+wNzzqT0dqUpxxYJgGtwquwFJFWHlKX7+DeiuN0jalU\nfO6QeO3H01WltoujpbJvdAx0xmJ0xDR7ZEndkvH8zA+3UdZ6aH/6iCxO0fk7wkXD\n124MxkmL9vC3QjtWf++ifnk14iJee3EuA5v1V1u2v6gdK0NSK5dMLSzN6o49MsLL\nkn3Zhf1xVx/rcxqE7pM3JDvBh3Nr11KiaSldDx8yaslMgLFlBxh31FjKth82M3I8\ntfCESrwKg7jKRq/MiXS/APSQ5GZZLBb5mx5MyvcA2P4ugxJE7tAUsoShS9zfZpz0\nCmthFBZOYCOi8fSsR04TdQ3tD7b/T//SK+JsrrZPAwm+z81wxkUHa1JgRJUf1Lcr\nNzAEAU3YW69LVaWIDAIbNP32GC9/UU9hDiz+gKUUM09gp3A7+yqg6dNlDCXDq7j3\n1sxScAzDpGo7vywRnq48dKtVi00qYwKAr+roIxma8rEFltYD84sL2qBuiyhAi3yB\nbNbCsBSBYlMK4cJO3XIors4ZnpKzFD9g9eUGl6h65yAh6Uyd9Jc=\n=8qeg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/da515074e3ebc8abc85a4fff3a31d7694ecf897b",
          "sha": "da515074e3ebc8abc85a4fff3a31d7694ecf897b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/da515074e3ebc8abc85a4fff3a31d7694ecf897b"
        }
      ],
      "message": "Add secp256k1_pubkey_sort\n\nCo-authored-by: Tim Ruffing <crypto@timruffing.de>\nCo-authored-by: Russell O'Connor <roconnor@blockstream.io>",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-04-22T15:22:26Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2024-04-17T17:33:51Z"
      },
      "sha": "b764ca84f98cee6314b0f5891051c87c1e33c82c"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-22T16:09:36Z",
      "updated_at": "2024-04-22T16:09:36Z",
      "source": {
        "issue": {
          "id": 1913356976,
          "node_id": "I_kwDOABII585yC4Kw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/28536",
          "number": 28536,
          "state": "open",
          "state_reason": null,
          "title": "BIP352 tracking issue",
          "body": "This issue will be updated to reflect the current state of [BIP352](https://github.com/bitcoin/bips/pull/1458) integration.\r\n\r\nPRs ready for review:\r\n\r\n* https://github.com/bitcoin/bips/pull/1458\r\n* https://github.com/bitcoin-core/secp256k1/pull/1519\r\n* https://github.com/bitcoin/bitcoin/pull/28122\r\n\r\nTesting:\r\n* For a wallet with send and receive support, compile https://github.com/bitcoin/bitcoin/pull/28453\r\n* Post your signet / testnet silent payment address in the comments!\r\n\r\nOverall plan:\r\n\r\n* Send and receive support in the Bitcoin Core wallet:\r\n  - [x] Code cleanup / refactor: https://github.com/bitcoin/bitcoin/pull/28244\r\n  - [x] Dependency: https://github.com/bitcoin/bitcoin/pull/28246\r\n  - [x] Dependency: https://github.com/bitcoin/bitcoin/pull/25273\r\n  - [x] Dependency: https://github.com/bitcoin/bitcoin/pull/28560\r\n  - [ ] Implement silent payments as a `libsecp` module: https://github.com/bitcoin-core/secp256k1/pull/1519\r\n  - [ ] Base protocol: https://github.com/bitcoin/bitcoin/pull/28122\r\n  - [ ] Sending (depends on 28122, 25273, 28560): https://github.com/bitcoin/bitcoin/pull/28201\r\n  - [ ] Receiving (depends on 28122, 28201): https://github.com/bitcoin/bitcoin/pull/28453\r\n  - [ ] Send and receive functional tests (depends on 28453) (not started)\r\n\r\n* Light client support:\r\n  - [ ] Index for silent payment tweaks (depends on 28122): https://github.com/bitcoin/bitcoin/pull/28241\r\n  - [ ] New BIP157 filter type for tweak data (not started)\r\n  - [ ] Serve new filter type (not started)\r\n\r\n<details>\r\n  <summary>Older stuff</summary>\r\n\r\n\r\n  <ul>\r\n  <li>Closed / Superseded:\r\n     <ul>\r\n     <li>Tracking PR (superseded by this issue): #27827</li>\r\n     <li>Receiving (superseded by 28453): #28202</li>\r\n      <li>Original draft implementation: #24897</li>\r\n     <li>Original libsecp256k1 module (superseded by 1519): bitcoin-core/secp256k1/pull/1471\r\n      </ul>\r\n  </li>\r\n  </ul>\r\n</details>\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "created_at": "2023-09-26T11:59:59Z",
          "updated_at": "2024-04-22T16:10:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 2015096769,
      "node_id": "PRR_kwDOAP4Jqs54G-_B",
      "url": null,
      "actor": null,
      "commit_id": "3d080277895655e8274ee73aacd154c4ead143e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nLeft some initial feedback, especially around the scanning routine, will do an in-depth review round soon. Didn't look closer at the `public_data` type routines and the examples yet.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#pullrequestreview-2015096769",
      "submitted_at": "2024-04-22T16:26:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGQzN2NlMWJkNjA1ODE4NGE1YmRmMDk1ZDQxNGUxZjFiNTdlNWZlNWI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d37ce1bd6058184a5bdf095d414e1f1b57e5fe5b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d37ce1bd6058184a5bdf095d414e1f1b57e5fe5b",
      "tree": {
        "sha": "d74a298e53349231f90be42769e0b09ed2c640b5",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d74a298e53349231f90be42769e0b09ed2c640b5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d74a298e53349231f90be42769e0b09ed2c640b5\nparent b764ca84f98cee6314b0f5891051c87c1e33c82c\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1695828134 +0200\ncommitter josibake <josibake@protonmail.com> 1713873671 +0200\n\nbuild: add skeleton for new silentpayments (BIP352) module\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmYnowcACgkQity1WMTz\nPWUIFg/+KITAkv0npzFhuvdX8qad7ag9baVCYW1tKav1lo0v6vfdcQB/7ACXtZEn\nCy/5vrd4bBk3Ci3Zt/Mv81xCwf0kNApH6A+GOlcuuJAvejhUZhkfKG06+SfXazQW\n5pp44nLyGR62s5TPhDPxNu2BzOONfjl0VimoaT7NrebAMW3eAw2akisfgqHDLvxj\nlbYb5iek/zzQSNtLmbmZpvx3oiO5UaLhXc/rDz7OZDNLuuSM0y8KfbBYG1dSzECS\nL6VS2eSOSCcSG7T9Hd8boooeNb4fYH0q7V0+yVJqeu0zYmXFowd41vmZMPj0oRDT\nM0sqQqANOArBxCq3RjFpLlLs0J/QFPUjHaIXOfWCNQ6/kG7K6/iRpeFAcdAOMC3y\n5Fq9E0+VGkwUgoTa2PB2TVUWZ/WwsOHwJaqZcfG8bnRsiI9NEJPpSEau5sAta5Bz\nAsE97B9w5qJMtgsQOTDx37DaMHmW2XvhJuyBUIY9hT5pphHg3JIF72zePnM9Cm6h\n5vQCLOdp1V9rdbjlLczPDXYcdipE0nP6+GPo7DMaIN5fSNiNWWXkaDq2PcQZ8vOz\n4QFDhnmrxlMBwoqaeFkKEOW5QzUQKQc4wx4XCgHnI161E5w2UBSHXkpPlQ1C0zmN\nDyzUFtSv5bqMRQY724f8YEcbEHozAN8RCsfz9M/hM680MtoiztA=\n=AaqO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b764ca84f98cee6314b0f5891051c87c1e33c82c",
          "sha": "b764ca84f98cee6314b0f5891051c87c1e33c82c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b764ca84f98cee6314b0f5891051c87c1e33c82c"
        }
      ],
      "message": "build: add skeleton for new silentpayments (BIP352) module",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-23T12:01:11Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-09-27T15:22:14Z"
      },
      "sha": "d37ce1bd6058184a5bdf095d414e1f1b57e5fe5b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12588114369,
      "node_id": "HRFPE_lADOAP4Jqs6GTERUzwAAAALuT2HB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12588114369",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T08:38:21Z"
    },
    {
      "event": "commented",
      "id": 2074419309,
      "node_id": "IC_kwDOAP4Jqs57pSBt",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2074419309",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T08:45:36Z",
      "updated_at": "2024-04-24T08:45:36Z",
      "author_association": "MEMBER",
      "body": "Rebased on #1518 (https://github.com/bitcoin-core/secp256k1/commit/3d080277895655e8274ee73aacd154c4ead143e3 -> https://github.com/bitcoin-core/secp256k1/commit/8b48bf19c3c020e653734f6c9d9364e6a47a30d1, [compare](https://github.com/josibake/secp256k1/compare/bip352-silentpayments-module-01..josibake:secp256k1:bip352-silentpayments-module-rebase))",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#issuecomment-2074419309",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1519"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12588974018,
      "node_id": "HRFPE_lADOAP4Jqs6GTERUzwAAAALuXH_C",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12588974018",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T09:38:43Z"
    },
    {
      "event": "commented",
      "id": 2074531708,
      "node_id": "IC_kwDOAP4Jqs57ptd8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2074531708",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T09:39:20Z",
      "updated_at": "2024-04-24T09:39:20Z",
      "author_association": "MEMBER",
      "body": "Updated https://github.com/bitcoin-core/secp256k1/commit/8b48bf19c3c020e653734f6c9d9364e6a47a30d1 -> https://github.com/bitcoin-core/secp256k1/commit/f5585d4b93606144e76e45ad3d43a797a9afefcf ([bip352-silentpayments-module-rebase](https://github.com/josibake/secp256k1/tree/bip352-silentpayments-module-rebase) -> [bip352-silentpayments-module-02](https://github.com/josibake/secp256k1/tree/bip352-silentpayments-module-02), [compare](https://github.com/josibake/secp256k1/compare/bip352-silentpayments-module-rebase..josibake:secp256k1:bip352-silentpayments-module-02)):\r\n\r\n* Fix function documentation for `_recipient_scan_outputs`\r\n* Replace `VERIFY_CHECK` with `return 0;` in `_sender_create_outputs`\r\n* Remove unneeded `declassify` code from `_sender_create_outputs`\r\n* Change `_gej_add_ge` to `_gej_add_var` in `_recipient_public_data_create`\r\n* Fix label scanning in `_recipient_scan_outputs`\r\n* Remove unneeded prints from the tests\r\n\r\nFor the label scanning, I looked for an example of using an invalid public key but didn't see anything except for the `invalid_pubkey_bytes` in the tests. For now, if the output is found without a label, I'm setting `found_with_label = 0` and saving the found output in both the `output` and `label` field. Happy to change this if there is a better suggestion for communicating an invalid public key.\r\n\r\nI also used `secp256k1_pubkey_save` instead of `output = *tx_outputs`, as I think this makes the code more clear.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#issuecomment-2074531708",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1519"
    },
    {
      "event": "reviewed",
      "id": 2026864465,
      "node_id": "PRR_kwDOAP4Jqs54z39R",
      "url": null,
      "actor": null,
      "commit_id": "f5585d4b93606144e76e45ad3d43a797a9afefcf",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Second review round through, looks good so far! Left a bunch of nits, mostly about naming and missing ARG_CHECKS etc.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#pullrequestreview-2026864465",
      "submitted_at": "2024-04-28T01:45:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-02T08:35:35Z",
      "updated_at": "2024-05-02T08:35:35Z",
      "source": {
        "issue": {
          "id": 1816230792,
          "node_id": "PR_kwDOABII585WHu-Q",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28122",
          "number": 28122,
          "state": "open",
          "state_reason": null,
          "title": "Silent Payments: Implement BIP352",
          "body": "This PR is part of integrating silent payments into Bitcoin Core. The project is tracked in https://github.com/bitcoin/bitcoin/issues/28536\r\n\r\n## BIP352\r\n\r\nThis PR focuses strictly on the BIP logic and attempts to separate it from the wallet and transaction implementation details. This is accomplished by working directly with public and private keys, instead of needing a wallet backend and transactions for testing. Labels for the receiver are optional and thus deferred for a later PR.\r\n\r\nTest vectors from the BIP are included as unit tests.\r\n\r\nBefore reviewing, it is strongly recommended you read https://github.com/bitcoin/bips/pull/1458 and take a look at the reference python implementation on the BIP.\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 249581124,
              "node_id": "MDU6TGFiZWwyNDk1ODExMjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Privacy",
              "name": "Privacy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28122",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28122",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28122.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28122.patch"
          },
          "created_at": "2023-07-21T18:36:37Z",
          "updated_at": "2024-05-02T08:41:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDkzYjQyMTgzN2E5NGRjYWU0Y2UwZTEyNzBlYTIxMTZmZjAwMjdmMGI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/93b421837a94dcae4ce0e1270ea2116ff0027f0b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/93b421837a94dcae4ce0e1270ea2116ff0027f0b",
      "tree": {
        "sha": "bb39deb9c7e6e3d25478329b18e44f81eee763fb",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/bb39deb9c7e6e3d25478329b18e44f81eee763fb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bb39deb9c7e6e3d25478329b18e44f81eee763fb\nparent d37ce1bd6058184a5bdf095d414e1f1b57e5fe5b\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1703345298 +0100\ncommitter josibake <josibake@protonmail.com> 1714667071 +0200\n\ndoc: add module description for silentpayments\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmYzvkMACgkQity1WMTz\nPWV8Yg//SD3NRAQP0zi48LbaHAaysSICcyCdgiAk4uGL+8RSAu8RoOIDkDuFkGrP\nyGQAIWrKwAmv2mKOsqqkB3G2pcVgOTIMBx1ZyrnaqX/f5ezKS201IDd5Y7WwHgqk\nhLiGx/PM4aEOi8dS+vH9yE/YzTExF5fWIv8uCNhfhoOV7koMfRi4VRBpDSJf0ZmC\n0B2p7cHVZ/Vr4WYmmZadSagmC+2E2cdH/gZxexjeMP9t7zgDMNHuMlVEXPIjFtmi\n/j7jIAse3e5K1Nv9+HsexhoD8bHy5FSOmgv1fFAgwDljOrjvnnxrrkMLiC0UiTyO\n6o/PD2g439xFl9lV1x17/UFHY/bhx9yFBHxI/NMSFaR4mO4Z2GsnrckyrslRCj3H\nPFGFzh5H6NuXDTS78y3uOp4zseEF3Tmtu0OM4C+DCdWP65oFHV72n8r2/NxY4/Ib\nixWf5jqbW9DhFLn8Sl4+7pP42AC9InDp6XfOxGtoUW0l7Uoanvcee1/1uLYU8uIy\n1j5UvShnjVaqT9qb6ISLx5QaZ2yy+VYATh6y/N4/zZHWTVnGmVH+IczoR6NC4B0/\nikV+afg+CUxYiLFRx99ooirakoUEvfZMxSxSXWbeIm3IrEtwYMGvdQMi7PUOLjJd\n9znSTFf96Pul6N3HsTxXEYhAuFtxDyDS7e/oZLCk6ImDENflVB8=\n=SeFa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d37ce1bd6058184a5bdf095d414e1f1b57e5fe5b",
          "sha": "d37ce1bd6058184a5bdf095d414e1f1b57e5fe5b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d37ce1bd6058184a5bdf095d414e1f1b57e5fe5b"
        }
      ],
      "message": "doc: add module description for silentpayments",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-02T16:24:31Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-12-23T15:28:18Z"
      },
      "sha": "93b421837a94dcae4ce0e1270ea2116ff0027f0b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDUyMWQ2ZTdjZTBiOTZkY2U5ZmM3NWQ5NDBjZmJjZTVlNmIxNmI5NjA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/521d6e7ce0b96dce9fc75d940cfbce5e6b16b960",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/521d6e7ce0b96dce9fc75d940cfbce5e6b16b960",
      "tree": {
        "sha": "4f6863cb00edd46b69d04127704752b7d2db7e2e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4f6863cb00edd46b69d04127704752b7d2db7e2e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4f6863cb00edd46b69d04127704752b7d2db7e2e\nparent 93b421837a94dcae4ce0e1270ea2116ff0027f0b\nauthor josibake <josibake@protonmail.com> 1711383817 +0100\ncommitter josibake <josibake@protonmail.com> 1714667075 +0200\n\nsilentpayments: add sortable recipient struct\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmYzvkMACgkQity1WMTz\nPWXUhQ//alGp6A8gTTG5SgcXL8fku1UklvWVAmdiyBdr7/WlZlFXt15CtnGcOEga\ngfv0sLodxxKxMv55b+9H4Yv8wV0pmY/j8XAB6sfjhKncd5UuooJP1r9xRuvFFZUY\n6Z7lSNI0C5iH3hGoUPOGfGlTuCUYS9Ccc1t0auFZTaSeeBmO9jUVWb27lAPI5tfu\nIuph9qmNQhs1+3pfZvLIU9T13ut34mRvLpuyq5+NKlo5SeQMknRGaW6cH9xdv/PM\nO86HhJ7xjB5r0AuYowXh16PJFNTOfoftsjT9qbkglW+f7SCFZcCxDPugMX3d3B2b\n6130z0912rEAk8T62YD3B52/h+x9t9XPCz34y/Df1qEthrg/VbCOJjognjinUJ0a\nP1ErRZVqi0HppDXdaJosrnFm0r64CChcma9bRpgBfQDlFrWPXiCBhmHfQ1RpxM5O\nSqcbGUY+C0lKVh5MFy5rQSaEpg3m2HNagFrVuOiepTzL7hCxw1Wm3prpqxz+wbrK\ntdwM3AMbNRndsh7XQQjGlcGgV9uiF4irkpJoTmZ+RcfzW0m6nR5mnZF0E/rW9UJn\nHN5nkgjsas6WpaWL7ByWm0RLex8q5FT3mf/V+jD9z5FSo+a1+MvjRWEV8rKc7pIp\nc/kDa1V+QUzwYdpfgyKGsYYaJC+EFMorZfXk5C2RA2F5RVeULoI=\n=VlP7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/93b421837a94dcae4ce0e1270ea2116ff0027f0b",
          "sha": "93b421837a94dcae4ce0e1270ea2116ff0027f0b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/93b421837a94dcae4ce0e1270ea2116ff0027f0b"
        }
      ],
      "message": "silentpayments: add sortable recipient struct",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-02T16:24:35Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-03-25T16:23:37Z"
      },
      "sha": "521d6e7ce0b96dce9fc75d940cfbce5e6b16b960"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDk0NGJmNzZkNjM0MGMzNmQ3OThjOWEwMjIyY2JlNjJiMWM2NjU0ZGU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/944bf76d6340c36d798c9a0222cbe62b1c6654de",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/944bf76d6340c36d798c9a0222cbe62b1c6654de",
      "tree": {
        "sha": "67d158d5a3c1066df293adfbe554557ec897907f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/67d158d5a3c1066df293adfbe554557ec897907f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 67d158d5a3c1066df293adfbe554557ec897907f\nparent 521d6e7ce0b96dce9fc75d940cfbce5e6b16b960\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1696468440 +0200\ncommitter josibake <josibake@protonmail.com> 1714720333 +0200\n\nsilentpayments: implement shared secret creation\n\nAdd function for calculating either a*B or A*b. This function is used by both\nthe sender and the recipient (i.e. a*B == A*b).\n\nAdd functions for generating the tagged input hash, as this is used when\ncreating the shared secret.\n\nIn a later commit, `create_shared_secret` will be exposed in the API for\nthe receiver to use when scanning as a light client.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0jk0ACgkQity1WMTz\nPWXoQRAAt7TP37QxiBsJhRJeHHnMla9rrHwrfJw++OQuLSrpqCX+EfIZ+7UbaKU1\ndPq4zghdDsKWrQ4mq01Pm+y0zU28t2Ena/KYj3G5jyntVFNRJ7VeC1sNc0i4SDzL\nOk0133pFoVOCwIb3j84Hqrh7qE1B0+Tbn99Dg2DOyy7Bid/BEUFmn7b/r1AltnE1\n9N7d6HlcQ0V6Wp9K3rd+lmvnLrmt89Nl3fs3AXImNJSR+ZdhvuaFN2aLiEIXKNWY\nMszjKlzS/9kUSLD5w8ChhNkVi3ivIWz3QYx4nEB3gC44LB0E8oxwVQ8xavfGWwAj\nLQ2YJYmRd80fzz8HbDlksyYA7kSPVFEtjXvYVL5W5w9XMAcqR2JWm86JaNMZDqLS\neduDY6TtS7bG5ZzHzvDWnf52Vt2PXpvawOgx0zdJwDMkg8qqKJ/ZUmXIivTv3S/X\nMmccVxsKfWdBgsXiMriWOOkYMCv8Foxq7hvTsi0yIPF+OmkMVOLhcJ0D6xj5AlEQ\nzzeVKHq6VNAU6L1IzwwEOA/+2IYGrbI7EQgaOu5Z/HxPj+4DAVggM3PZ9QXedAzM\nx4hAAy2ESY//jer4d5QEpH2mlf1GbMzURLYRLgUsiWzr/H+d23XX5WFwZD33PjIE\n3vXOwCtcrTvYQST9P61NC9XXQuUQvbSX3U6nuNab80uzH6sHpds=\n=0OIW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/521d6e7ce0b96dce9fc75d940cfbce5e6b16b960",
          "sha": "521d6e7ce0b96dce9fc75d940cfbce5e6b16b960",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/521d6e7ce0b96dce9fc75d940cfbce5e6b16b960"
        }
      ],
      "message": "silentpayments: implement shared secret creation\n\nAdd function for calculating either a*B or A*b. This function is used by both\nthe sender and the recipient (i.e. a*B == A*b).\n\nAdd functions for generating the tagged input hash, as this is used when\ncreating the shared secret.\n\nIn a later commit, `create_shared_secret` will be exposed in the API for\nthe receiver to use when scanning as a light client.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T07:12:13Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-10-05T01:14:00Z"
      },
      "sha": "944bf76d6340c36d798c9a0222cbe62b1c6654de"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGY2N2U1NzY0ZjFlMDhkMzNiNDEwNWRjN2VhNDg5MGJhNjY1ZWM4YjE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f67e5764f1e08d33b4105dc7ea4890ba665ec8b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f67e5764f1e08d33b4105dc7ea4890ba665ec8b1",
      "tree": {
        "sha": "0cbc32ecac6d7841f9bb480f5d5d400070d8c21d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0cbc32ecac6d7841f9bb480f5d5d400070d8c21d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0cbc32ecac6d7841f9bb480f5d5d400070d8c21d\nparent 944bf76d6340c36d798c9a0222cbe62b1c6654de\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1695853820 +0200\ncommitter josibake <josibake@protonmail.com> 1714720339 +0200\n\nsilentpayments: implement output pubkey creation\n\nAdd methods for creating an xonly output from a shared secret. This\ninvolves adding a tagged hash for creating the output.\n\nThis function will be exposed in the API in a later commit for the\nreceiver to use when scanning as a light client.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0jlMACgkQity1WMTz\nPWVFdQ/8Ds/4b2JeUvGxcok9bzj6YixliJiGhLN291ggXXfN2INtAIUxWmgMtXgR\nT6F5LVZSBo+HABitFHjKOohWB9/kV6dCmL7yM3Tq115qDJNunkX4Jlz9OrnQa3hF\n9VLBZEadIwHo/ZN0jzQPIlDK6VYABdziIFjNCkKa1fppiotaxumZuoDqGSeUwUOq\n3y4LYz1XcRW/NYie1mHqD2LI4+hfnCuvFJ2BNH1K6+sOpdIWSLEkSgSLOFHgsGcs\nAj5nizzmot1Uk7HMwUIn5mJpiUtuvUBPrOZXP/wYtxEa6e9hhhcHSv7V1zxcrQE5\nMdh+omwIt7wTA39yvbGvAUZXZbIXc1mFocpWU5bc+tIHs0uIf12sqrPNx/3L5HOP\n2Khx2f1VFSmYvhPi171O+4HkueJmlLyONsYN9lXGcJdfc2yTDJYPov9UHsEPSSFJ\nKRVDy5d1e756+044gVHLsEQDwS4wqdCA+hIWr8eEL7FZTvl6kmbMLPInYZPQTTjp\nc1TaGpT47l+P0VwZ5/Ui9tRKydFnw38ysxtVLpgnxTkSNy4/hQkiZbCBOpRc0f6M\nxI0fy6nKWc4aAMOfjj3u0mwfw2FJNMpcw+qPrz84BkrNnpLgS8jkgdAgzU/M3GfH\naQGRbGKCgTG7mOi9Epn6WLf9HuDdeVlbRYgaLI5MhP9zy5bMGHI=\n=wdrc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/944bf76d6340c36d798c9a0222cbe62b1c6654de",
          "sha": "944bf76d6340c36d798c9a0222cbe62b1c6654de",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/944bf76d6340c36d798c9a0222cbe62b1c6654de"
        }
      ],
      "message": "silentpayments: implement output pubkey creation\n\nAdd methods for creating an xonly output from a shared secret. This\ninvolves adding a tagged hash for creating the output.\n\nThis function will be exposed in the API in a later commit for the\nreceiver to use when scanning as a light client.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T07:12:19Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-09-27T22:30:20Z"
      },
      "sha": "f67e5764f1e08d33b4105dc7ea4890ba665ec8b1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGQ5ZTRhOTI3NDg5NzM1ZGM0NDgyNTA2ZDQ3NWYyNWQ1ZjRjM2VhMzQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d9e4a927489735dc4482506d475f25d5f4c3ea34",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d9e4a927489735dc4482506d475f25d5f4c3ea34",
      "tree": {
        "sha": "795657bd132665b0783dbdbb9eeee2a850e4672e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/795657bd132665b0783dbdbb9eeee2a850e4672e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 795657bd132665b0783dbdbb9eeee2a850e4672e\nparent f67e5764f1e08d33b4105dc7ea4890ba665ec8b1\nauthor josibake <josibake@protonmail.com> 1711391150 +0100\ncommitter josibake <josibake@protonmail.com> 1714720339 +0200\n\nsilentpayments: add sender routine\n\nGiven a set of private keys, the smallest outpoint, and list of recipients this\nfunction handles the entire sender flow:\n\n1. Sum up the private keys\n2. Calculate the input_hash\n3. For each recipient:\n    3a. Calculate a shared secret\n    3b. Create the requested number of outputs\n\nThis function assumes a single sender context in that it requires the\nsender to have access to all of the private keys. In the future, this\nAPI may be expanded to allow for a multiple senders or for a single\nsender who does not have access to all private keys at any given time,\nbut for now these modes are considered out of scope / unsafe.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0jlMACgkQity1WMTz\nPWUdNA//c7PNwvQ3uO8i+UVZvuwiUTVG5L9ZJ/803n5GZ+DwaOFbWzqD9oIfDdN3\nBRsOBGbDcRG0TnR0PCvFVulHAGSdy2PdnwPEB0C0uYwOJVzgXJF9Gfx9wWI2H0uO\nmSbKiJiAK25VCUel8mx+yf/TnCT3uM+pR7vgbitxccaMGpxWSaKe9p2PGkWhGsO/\nxTVTC/HUIruQ48Lp6/cltPGVxxXM3eIzp2RsjTkLjCIRHoIgOiXK/plBGooSVmo4\nWP2dfex7oQt+I0bm3RGkuvPc8HjaiR7MEDigkEyW7GQbtjk/6MM0RqCACYjnQVbr\nedBjLva6yah9jLDm+kHRjoJRY0OCdQjPocSqt8MfLUiN6xm5KE2EsPxo96xV7NZb\nWicOq0rDl4Y1mTjVG14gFD1LN4jeGg9t0jeRGemHIKI5Hh6HMPOKc24yD+DahEER\n4iSr6lCyQ80w3pgl5G/uvHP04yx/j4QbuAXNeomu8l3mKT3WuxFMHTzPReIjbzto\nacBHEfSiqCjik2o9Xn7iMqHOgrwZONj9lPiDSoHpfMOkBhKY4AxLIwC2XyT60LuL\n31ePX1chXT0U+NPrOUaei631iG7yAxCKka69lk3jdp3IcL/2HnRLYhjUvFnYCWt3\nM1Sfa+t8/dlg1N4bVELHQ1ILJLrs/noR4mHjnUltNQESLW7CFxE=\n=cnAy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f67e5764f1e08d33b4105dc7ea4890ba665ec8b1",
          "sha": "f67e5764f1e08d33b4105dc7ea4890ba665ec8b1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f67e5764f1e08d33b4105dc7ea4890ba665ec8b1"
        }
      ],
      "message": "silentpayments: add sender routine\n\nGiven a set of private keys, the smallest outpoint, and list of recipients this\nfunction handles the entire sender flow:\n\n1. Sum up the private keys\n2. Calculate the input_hash\n3. For each recipient:\n    3a. Calculate a shared secret\n    3b. Create the requested number of outputs\n\nThis function assumes a single sender context in that it requires the\nsender to have access to all of the private keys. In the future, this\nAPI may be expanded to allow for a multiple senders or for a single\nsender who does not have access to all private keys at any given time,\nbut for now these modes are considered out of scope / unsafe.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T07:12:19Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-03-25T18:25:50Z"
      },
      "sha": "d9e4a927489735dc4482506d475f25d5f4c3ea34"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDI2ODQ1NTkzMDZlNjBjNDVkM2U4MTg5N2E2NWE3Y2Y0Nzg5N2Y2MDM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2684559306e60c45d3e81897a65a7cf47897f603",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2684559306e60c45d3e81897a65a7cf47897f603",
      "tree": {
        "sha": "136fabefc07d56d527ef9b8d4ad95dc44dff3936",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/136fabefc07d56d527ef9b8d4ad95dc44dff3936"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 136fabefc07d56d527ef9b8d4ad95dc44dff3936\nparent d9e4a927489735dc4482506d475f25d5f4c3ea34\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1705946165 +0100\ncommitter josibake <josibake@protonmail.com> 1714720339 +0200\n\nsilentpayments: add recipient label support\n\nAdd function for creating a label tweak. This requires a tagged hash\nfunction for labels. This function is used by the receiver for creating\nlabels to be used for a) creating labelled addresses and b) to populate\na labels cache when scanning.\n\nAdd function for creating a labelled spend pubkey. This involves taking\na label tweak, turning it into a public key and adding it to the spend\npublic key. This function is used by the receiver to create a labelled\nsilent payment address.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0jlMACgkQity1WMTz\nPWW0ABAAjMCfhe6YmndXWwuxoBEQyVL9D9q0UlmSXZXbMIU/UaBbLKHtOe0j0lgl\nPNvZGe7jOlGYJg+wApaINFZ1Lllj9OsxDzHwZrfEjXIaGdJkPKOTRRnikiIYHumU\nfDuhIR9Klun4fwfloEWTyDUpkJvNsNSMaT+rEpYaYEe0AngbdsYwfwLxTRgYbhLW\n/ISF+jCZ0L1lX/tD2Q5PYvqeSVsMU6ADIQA/Hz1CvCsIoudaRd7b9WTQQRHIC/QQ\nW9oSobtx8/inird/rvjJNM5td3ueYq/LpHJJN8h24U33GFPFhZsVnfDDIHp0luN0\njQqjvJgHbO1JJFPQosIQGs5Rm8JVO5TXyyUjX1/cXLlI+BmfnLtqERmtIsPhSLCa\nF6WBtINMqZmq0GGSTE2aWZD0AroI6h2hSGjStxnSzJVTVkVbCWL3GmsXHVzoapdg\ntA+NZp2ZbOVgNzhPsANa/Q+Uz1LbALv0KgJq87mib4AG5ItaHMWg2mwAOGi6ATi5\nMPgXJoPsw1im/SYleCIsy1gdLOoNSgmk252Zu9N1ZoMf4L0lrNIq+L0aA+NMWIJo\nDKMDmFCDXT7nv0BJBo3QU6IBDeS3HxT1WmhQD6mZiTm0e9a0I+WO+YhuZEXnaoOH\nQpYCg+/T833rAVppMMeWvG9EitzsEmgBgehcnpDAzdCfdnfYB3g=\n=aAQU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d9e4a927489735dc4482506d475f25d5f4c3ea34",
          "sha": "d9e4a927489735dc4482506d475f25d5f4c3ea34",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d9e4a927489735dc4482506d475f25d5f4c3ea34"
        }
      ],
      "message": "silentpayments: add recipient label support\n\nAdd function for creating a label tweak. This requires a tagged hash\nfunction for labels. This function is used by the receiver for creating\nlabels to be used for a) creating labelled addresses and b) to populate\na labels cache when scanning.\n\nAdd function for creating a labelled spend pubkey. This involves taking\na label tweak, turning it into a public key and adding it to the spend\npublic key. This function is used by the receiver to create a labelled\nsilent payment address.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T07:12:19Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-01-22T17:56:05Z"
      },
      "sha": "2684559306e60c45d3e81897a65a7cf47897f603"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12693217589,
      "node_id": "HRFPE_lADOAP4Jqs6GTERUzwAAAAL0kyE1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12693217589",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T08:03:39Z"
    },
    {
      "event": "mentioned",
      "id": 12693287039,
      "node_id": "MEE_lADOAP4Jqs6GTERUzwAAAAL0lDB_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12693287039",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T08:10:24Z"
    },
    {
      "event": "subscribed",
      "id": 12693287051,
      "node_id": "SE_lADOAP4Jqs6GTERUzwAAAAL0lDCL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12693287051",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T08:10:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGZmYjJmNDU1NDdkNmVlODY0YjdhZWY4YzQxNmU5M2M4ZDU3ZGYwZjg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ffb2f45547d6ee864b7aef8c416e93c8d57df0f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ffb2f45547d6ee864b7aef8c416e93c8d57df0f8",
      "tree": {
        "sha": "5fc2667c833b3188d104cf59d65e2d39b53f6ae7",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/5fc2667c833b3188d104cf59d65e2d39b53f6ae7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5fc2667c833b3188d104cf59d65e2d39b53f6ae7\nparent 2684559306e60c45d3e81897a65a7cf47897f603\nauthor josibake <josibake@protonmail.com> 1713516040 +0200\ncommitter josibake <josibake@protonmail.com> 1714724467 +0200\n\nsilentpayments: add opaque data type `public_data`\n\nAdd data type for passing around the summed input public key (A_sum) and\nthe input hash tweak (input_hash). This data is passed to the scanner\nbefore the ECDH step as two separate elements so that the scanner can\nmultiply b_scan * input_hash before doing ECDH.\n\nAdd functions for deserializing / serializing a public_data object to\nand from a public key. When serializing a public_data object, the\ninput_hash is multplied into A_sum. This is so the object can be stored\nas public key for wallet rescanning later, or to vend to light clients.\nFor the light client, a `_parse` function is added which parses the\ncompressed public key serialization into a `public_data` object.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0nnkACgkQity1WMTz\nPWVqwhAAkwOhGqJr1XThFQ04tgRJTgSpVsvQgaHM4gpikb4gyAPpenZ5gDIriSO0\nufJ2QoC3DobmZDOGUcqMjqTjmGpfHO6aX/TRcy4lEFWzfh26Msobu+B/+WR9T9dL\nX6Jv70H8e9/BON5S3Hty1PVuG/G5YVd6XrfYV53z2HtzR5zAmXWHkdq4G06j/OYr\nYze44E09MSccZF4pFqCHl+A1TYP2CNfQOaU59+KZBdIGklhsev2YU+j4vRQ4/xYz\ntEWgF//s5oU4Z4hlywNg3giBbi5wCZ1bAS9VjElOwRaAP9ArLqGhHFx28xJ4f3Dz\n21PX0m6IWXwMBAB5pL679pPcoakoFIwzqLYs4ewN951iooNIlP1w8m6vugFm2JBd\nunV0IQ9R7ZkOSIP1d6idoSXPkIkgVIdP/9V68uP2BtvCLKaZOJMXTr4SzOK6szfr\nBXbUwEXODxPbVxbqJ1bYmwnz2/pUyW2Miw/tEi3QpenuJx3xBGymbNMD+iirm8Vx\n+2kaELh/gjVeBXCoIAIoyGQfReX0IWHPzKbmFQMqbUsOaSSeGwdmJ6VXGgD8j8cq\n51d/vg3uCOv4hs+XHsFHCm7nzyZUDF8Dn7RGPR5x/Ex6EdHMW0BR/pA8hS+tnKVa\nFnQiWOZkONB4OT+Oe4tklZpjoWE3dHAUGJjkZgmXCIJ4I5wChQQ=\n=V20U\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2684559306e60c45d3e81897a65a7cf47897f603",
          "sha": "2684559306e60c45d3e81897a65a7cf47897f603",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2684559306e60c45d3e81897a65a7cf47897f603"
        }
      ],
      "message": "silentpayments: add opaque data type `public_data`\n\nAdd data type for passing around the summed input public key (A_sum) and\nthe input hash tweak (input_hash). This data is passed to the scanner\nbefore the ECDH step as two separate elements so that the scanner can\nmultiply b_scan * input_hash before doing ECDH.\n\nAdd functions for deserializing / serializing a public_data object to\nand from a public key. When serializing a public_data object, the\ninput_hash is multplied into A_sum. This is so the object can be stored\nas public key for wallet rescanning later, or to vend to light clients.\nFor the light client, a `_parse` function is added which parses the\ncompressed public key serialization into a `public_data` object.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T08:21:07Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-19T08:40:40Z"
      },
      "sha": "ffb2f45547d6ee864b7aef8c416e93c8d57df0f8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGViYTczMjk2YWM2YmQwN2YyZDU1OTc2M2UwOGRmNTE0ZjYyZTNhM2Y",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/eba73296ac6bd07f2d559763e08df514f62e3a3f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/eba73296ac6bd07f2d559763e08df514f62e3a3f",
      "tree": {
        "sha": "ba807935c698053d5e8adf9eb5c9edab38eaf643",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ba807935c698053d5e8adf9eb5c9edab38eaf643"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ba807935c698053d5e8adf9eb5c9edab38eaf643\nparent ffb2f45547d6ee864b7aef8c416e93c8d57df0f8\nauthor josibake <josibake@protonmail.com> 1713516088 +0200\ncommitter josibake <josibake@protonmail.com> 1714724473 +0200\n\nsilentpayments: add recipient scanning routine\n\nAdd routine for scanning a transaction and returning the necessary\nspending data for any found outputs. This function works with labels via\na lookup callback and requires access to the transaction outputs.\nRequiring access to the transaction outputs is not suitable for light\nclients, but light client support is enabled in followup commits.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0nnkACgkQity1WMTz\nPWVC2g/9F2lhfXAwkMzqIvVPJjsQDPzJd2AsgvOC+fibqSHx9QEL2JRJJ7Nqe9kq\n1TCwqBsE/I5zkr4v8GOEUVE+1TT34dNbK9lC0IVp2Zclu6qNBGx+5oFJiAtXKAAM\n+cu6GbxjP7DdIbtInDkE4HQofnuHidZZ6SdrluMOOqugILDfDNIW1EcArOVd1aGN\nAHhuTSA+niEp/EQpmzoQfzWzlAGZmXF5uRjvIHEVZ3HErWBENxkjqMOMGs693pmW\ntN2mo2TimfkNxAcqo8AF2n2bxWDtkKE9xloa4bvLjJN5Dd2EqcuwSVz1bxBnSXrq\nU5Q+lnS+LYHfB0dr2PqxgdVQ/kB/Wd4jW9+LO3fHf8LzcUWgP0lxRL0s8Qu6dbJl\nlnjp+HXidH2L1aCy3r8XPjDlJp+lQkhGATArhGvzAr2Vz/4XIOxB5O4Ev94Hqawt\niDUAnqfEJH++JSyZjNiU762hxyYMRhAst8wbK2z0M3U1AJYz9dHzl3hTPGuzVwUq\n6kPW1mh4CFFuNklSc0NU2NxWJ143ZT6MMRI9kHUVNVBEYyHomZx0W7qsOlYrvS4U\nb0m78B5LoKnYGJbO99CKWf1f2RIwR3YXFKnOF0FMtmX0Jwo9EDSC8WZQeoLdOQl1\nvgyLg6+HEcrfIVjgSQxKEjyRv7eJtEnizpL3gU6YwtQz2zYndsc=\n=21YM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ffb2f45547d6ee864b7aef8c416e93c8d57df0f8",
          "sha": "ffb2f45547d6ee864b7aef8c416e93c8d57df0f8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ffb2f45547d6ee864b7aef8c416e93c8d57df0f8"
        }
      ],
      "message": "silentpayments: add recipient scanning routine\n\nAdd routine for scanning a transaction and returning the necessary\nspending data for any found outputs. This function works with labels via\na lookup callback and requires access to the transaction outputs.\nRequiring access to the transaction outputs is not suitable for light\nclients, but light client support is enabled in followup commits.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T08:21:13Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-19T08:41:28Z"
      },
      "sha": "eba73296ac6bd07f2d559763e08df514f62e3a3f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGJjNDUzM2Y0YzUxZDY3ZGY4Mjk5YTkxNjgxNDQwMjVhNGI1NDg4ZmQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bc4533f4c51d67df8299a9168144025a4b5488fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bc4533f4c51d67df8299a9168144025a4b5488fd",
      "tree": {
        "sha": "51861fbbf9e117ebc24d49862b9570adcc684255",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/51861fbbf9e117ebc24d49862b9570adcc684255"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 51861fbbf9e117ebc24d49862b9570adcc684255\nparent eba73296ac6bd07f2d559763e08df514f62e3a3f\nauthor josibake <josibake@protonmail.com> 1713516138 +0200\ncommitter josibake <josibake@protonmail.com> 1714724473 +0200\n\nsilentpayments: add recipient light client support\n\nExpose a shared secret routine in the public API and a output_pubkey\ncreation routine. These are simple wrappers around the same functions\nthe module is using under the hood. They are exposed for the light\nclient as the minimal set of operations they need to do scanning without\naccess to the transaction outputs.\n\nThis means the light client will need to manage their own scanning\nstate, so wherever possible it is preferrable to use the\n`_recipient_scan_ouputs` function.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0nnkACgkQity1WMTz\nPWU/0xAAzE/5RgAFbf2K9OTs5gMbpNfXjVVbFtH2MxWIc463Y9g5UAb1O66qgRJ1\nJVyTEzxFNS1ok9sC4FdycmHNq9/YxVwxWHgpvEsA4kUtSmWfTYa6FJgYBlb3btRa\nj3J37vKsRMylYGMahT37D+WMAxJMi92ykBWURZxUaGSzqu9vEuFTsaqJkLYjxNhV\nwXlO3ULL0ti5f7rZm2/tp35L9DfaCkZOk+9yhWKvCZASXcg2CmmQ/0eX2/CjwlYi\noOHqgj6ce1f5YX+aXk4Jdw81zMafvEk8rI4tg2dMRCOREvzvZjBp1RhoaDZ+KIQy\nQJWAqGiE/LeDGOxf9ydcsD1+GgJgWmic5nOCrvjTv7XOEsvsE3ikyxQLpgKgwPoy\n6N6zeXSbxu2h1d/X+gl3ElhsovqRlFUCGzn6OmcuJBx7mDcvPC29AS/TLO3iZbIY\nm0I8mZN27BeDTV+1uRAr6KQAoR7irugqyp216Wyk4okchZ5+PM3u4YOPAiiu3mdt\nO6LU4pjtcZe/l1lOyGJ/7o64K3DpxFRc15rC3n9fy734/zsAahW+QTv2N+LVbC0G\noT4EAj75OpSpgnYcOOLKYe3b7HQ01DARQ8s4ZFTM0a6+JvvevSLsu0APF+rPVNFg\nK4fFeEmbJBKxL3rDIVGR/KJi3QMNWt7PNwJaTmHy/iu33Qzadfo=\n=A7FF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/eba73296ac6bd07f2d559763e08df514f62e3a3f",
          "sha": "eba73296ac6bd07f2d559763e08df514f62e3a3f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/eba73296ac6bd07f2d559763e08df514f62e3a3f"
        }
      ],
      "message": "silentpayments: add recipient light client support\n\nExpose a shared secret routine in the public API and a output_pubkey\ncreation routine. These are simple wrappers around the same functions\nthe module is using under the hood. They are exposed for the light\nclient as the minimal set of operations they need to do scanning without\naccess to the transaction outputs.\n\nThis means the light client will need to manage their own scanning\nstate, so wherever possible it is preferrable to use the\n`_recipient_scan_ouputs` function.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T08:21:13Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-19T08:42:18Z"
      },
      "sha": "bc4533f4c51d67df8299a9168144025a4b5488fd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRmNmI2M2Q3YWU5YTcyODBiZWMzNTkyZGU3OTQ5NjdjNjU4MTgzYjU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/df6b63d7ae9a7280bec3592de794967c658183b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/df6b63d7ae9a7280bec3592de794967c658183b5",
      "tree": {
        "sha": "7dcd48113ffefbb4c0ca5cd3983c4a513cba6a6e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7dcd48113ffefbb4c0ca5cd3983c4a513cba6a6e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7dcd48113ffefbb4c0ca5cd3983c4a513cba6a6e\nparent bc4533f4c51d67df8299a9168144025a4b5488fd\nauthor josibake <josibake@protonmail.com> 1713202589 +0200\ncommitter josibake <josibake@protonmail.com> 1714724473 +0200\n\nsilentpayments: add examples/silentpayments.c\n\nDemonstrate sending, scanning, and light client scanning.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0nnkACgkQity1WMTz\nPWXaJA//e9AI75KZRoXsEXRETxAR6uEWlOrOM8Y9gxE1usGsdpJ+EJrU1q0OjxYA\n84LUOoX18Gf2PrmMvdlDNx3F9dDZyZgUDtZ6IIA2BFOxiB13QRIHwKqbQDUdckqn\nCLwamAB0SV0nGNj/OToMVA2/xg9T3jT9Vp/LSioT/zlRFhMbgKjFMAM/LTmr7NRX\nhJ83TASBfb9RphbCZhBsKegTCwlh9ELGcmiqfcPf2x2qeYaYmWBxhse+lxd0v3Bk\nL+z43L/FPGlm/kKMIUibp1rl9as46HrerujvM9PatDsE5vgCNoHmuycdcletCMwc\ngBCsKLu0fm+u26P1IHnBft2gF4Ar/5mxLnl0+BhMxORFVWm1ZdLkgwe9R8/9qQKl\nq5395vWn2kmok/cZ3jRr56q3+c0bkKrJRsEDMW7ydSmnft7m0ct2w62f1JirVc3J\n4BDxkrLoX5gPjuTmZ6IOeoTjfzwp67oJvhbn1h8d6xxKdTJyqxmlJqbshFScvy1+\n0gSD/TJMtiAeq6oVyyo9zsNS+rueQZ2gLwB7Q4aAk3VRn8G3F5qSCvuykP3jIleY\nNmCY2tZJyBwfS5yTZmpvCyu+hWIh+Rh+wrMbT9m1Am8h8k6Gvgsb4O7h5wI0obys\nrcdTT+sSLcGfUKie4c8YrLMo0+ldG+HnTKG/XA6TSSwLItRWKbY=\n=yayU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bc4533f4c51d67df8299a9168144025a4b5488fd",
          "sha": "bc4533f4c51d67df8299a9168144025a4b5488fd",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bc4533f4c51d67df8299a9168144025a4b5488fd"
        }
      ],
      "message": "silentpayments: add examples/silentpayments.c\n\nDemonstrate sending, scanning, and light client scanning.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T08:21:13Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-15T17:36:29Z"
      },
      "sha": "df6b63d7ae9a7280bec3592de794967c658183b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGEwYzM4YzliMWE5NzAzOTI0MjI2MjNhMGM4ODQwM2E5OTY5ZmU4OGQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a0c38c9b1a970392422623a0c88403a9969fe88d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a0c38c9b1a970392422623a0c88403a9969fe88d",
      "tree": {
        "sha": "6bbd0a8517c655358289f57e4d4f965494890372",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6bbd0a8517c655358289f57e4d4f965494890372"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6bbd0a8517c655358289f57e4d4f965494890372\nparent df6b63d7ae9a7280bec3592de794967c658183b5\nauthor josibake <josibake@protonmail.com> 1714066415 +0200\ncommitter josibake <josibake@protonmail.com> 1714724473 +0200\n\nsilentpayments: add benchmark for `scan_outputs`\n\nAdd a benchmark for `scan_outputs` as this is the most performance\ncritical part of silent payments.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0nnkACgkQity1WMTz\nPWXIIw//VLVpQX1U7IoRdp0qk3CDEUYPHadZzaQogXgmd7TzNjUm8Z6qWK8kmKeP\ncGO9fg4PGIfP+9agYDfg+8lQH/LclgKJFhzCtZdygYZwdkncmIF9ASwLVrPdkXu8\n1m+2aQU2mJHp2k+7rXsPQ1Pgp8tuZkpAuoOEcfiXUT8Xe5WFWzenv2XRxLPuajoB\n5b1w9zxIXCnBxSpXhwj/dlnlzw/y/RzvZjreOeOm++dkFB5qrzfvYE6MSSdL8Bdi\nSHLWH1Q4sMPxfLtXBcyFQ//UB8gM1EeGouY7ed+vKwgJXR3WRxtUMTiFqOfqUOxm\nU2GV6dH0qBDJy5a7Tru8encGlRKsjmwdD09znqQZ1VTk4Gd8tHz/Xl3KQwGBZQOr\nLJXzwiM8CQjxnO4SUloPHjcSNUS3HZKosmMHvQmSBDkGCk+rmChQlF4uf8e91FMp\nGlEKrgfuGlt5VvAd0G2w28oEa/Xa+9FZNiw40ERH9pu5ZUcY0l0sKoI/C8+14W5d\nkOR2L4lhLLi2EIO/XdhUp/HN7JL4c2TeObkqWG40aX8SPWzScZY/Nc7TOtK+z31S\ne2UNw+URN85QHtNI3HawrqhUm3JIOiGTn9kP0huGKTYKIMMBi3vkttTXDqu4BdHO\n6HbeZAt2yli+ZHJ/HqI1DHZ3gW7Ns8UuGC4701qoBVcENVPs41w=\n=A2d6\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/df6b63d7ae9a7280bec3592de794967c658183b5",
          "sha": "df6b63d7ae9a7280bec3592de794967c658183b5",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/df6b63d7ae9a7280bec3592de794967c658183b5"
        }
      ],
      "message": "silentpayments: add benchmark for `scan_outputs`\n\nAdd a benchmark for `scan_outputs` as this is the most performance\ncritical part of silent payments.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T08:21:13Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-25T17:33:35Z"
      },
      "sha": "a0c38c9b1a970392422623a0c88403a9969fe88d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGE3ODRlNGMyYzdjYzE2ZjVkNjI3NzVhYzM0ZWJkMzM4MjY4Y2E1NGQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a784e4c2c7cc16f5d62775ac34ebd338268ca54d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a784e4c2c7cc16f5d62775ac34ebd338268ca54d",
      "tree": {
        "sha": "ac06570dbb956fd9abe4f15e6144dae80ca3abc4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ac06570dbb956fd9abe4f15e6144dae80ca3abc4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ac06570dbb956fd9abe4f15e6144dae80ca3abc4\nparent a0c38c9b1a970392422623a0c88403a9969fe88d\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1708642163 +0100\ncommitter josibake <josibake@protonmail.com> 1714724473 +0200\n\ntests: add BIP-352 test vectors\n\nThe vectors are generated with a Python script that converts the .json\nfile from the BIP to C code:\n\n$ ./tools/tests_silentpayments_generate.py test_vectors.json > ./src/modules/silentpayments/vectors.h\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0nnkACgkQity1WMTz\nPWXr1w//U//jm7WUxIy6oAVwQ9mPpS0JlxOeuRNoqGGCRjde8pkzk+miO4PQyWBM\ng+swVPoHOM2TyzMkXEOG3AdqINbtSC2yCx5LSS11F36SYm4RghVAgwt3xdQThlwU\n8bUlAvholt7p+P+hYy8Gx7N4TYlqbSgb9COEfc0DD16f1enqiAVZd5ztg5eNugtj\nPGqvBBPK/fHT4Mq8vpfh5pMtUNCnQS9PH6Bm/n8qWoGpz363OKiycMJYq77R9Dqr\n2NMe5XUDOlKV6BkVAYRSkEoP6IfAZ/qDGIOc1DbGwr7kxOBM91CAqrBYHXVkHnKW\n0uJgHE4lIfxJWmC2xA1bB8EI8oZOIu95esDVdFxCs6JcrVqv0vQ0dAmzITJskeBb\nSxQ/hyljOVHktHKztzDkYz16OSmbz3OTlw2B4uqV7ohuuKS+MUqSiEAXf0KwyvKi\nrvRJ4UQG1rowNELxtwaboH6nSwOXvzPhYuoNA7U+fq5ddvgXBtLgHk/AEdVViqxt\n/fPl6YKZsxjnwl3LSUS/7b5eUnk6E0Y2WeCIYJ51izA/EiGXI/CpUmhmoylbMQif\n6Auok/4sNgIrZnoNezwn1JxrRdpM1BjhTc3vwHBhtmVrw8VPU9+YxHc/ZoV/pcnx\nDdZ7dYxaorM3ASD/NmP6Hsw0y1owfcqajOMDOWILjpET+g5NeSM=\n=QwRT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a0c38c9b1a970392422623a0c88403a9969fe88d",
          "sha": "a0c38c9b1a970392422623a0c88403a9969fe88d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a0c38c9b1a970392422623a0c88403a9969fe88d"
        }
      ],
      "message": "tests: add BIP-352 test vectors\n\nThe vectors are generated with a Python script that converts the .json\nfile from the BIP to C code:\n\n$ ./tools/tests_silentpayments_generate.py test_vectors.json > ./src/modules/silentpayments/vectors.h",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T08:21:13Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-22T22:49:23Z"
      },
      "sha": "a784e4c2c7cc16f5d62775ac34ebd338268ca54d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDFhM2EwMGJkMDk5OWE4OWUzMGQ1ZGM5ZjkyNzU5MmVhZDcyYWI3YTM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "tree": {
        "sha": "d88726d07107058293fad0489051cd54b5af63fe",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d88726d07107058293fad0489051cd54b5af63fe"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d88726d07107058293fad0489051cd54b5af63fe\nparent a784e4c2c7cc16f5d62775ac34ebd338268ca54d\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1708644341 +0100\ncommitter josibake <josibake@protonmail.com> 1714724474 +0200\n\nci: enable silentpayments module\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmY0nnoACgkQity1WMTz\nPWXb3A/8D6XW2CCT+1OXDlmv7xPDxEs69Cld0XAoam3ME9YRvlq+Z0g6W//OOL4D\nbuJB0VHw95grvJjiG9FfEX6jc65ZRIWdiQ+IyCn+grd0Dk8P+MtbuFhMwiOcvamX\nqzqu/6pS6/gYSyiuxL+5WU4P5DmyLthagRylI40Pq0TR8IcaK+6sOe01xhtE9M+S\nfIPKvMmMZl9a03vqv2U4zJM1LBjkUTq9g2u5w9xoYz8veX8nJjPR6QtqTTFVElpV\nySs2JW4aE1jfzNba1NltjVXTRdC9f1C2cnPp//6IWIA28lTpGFz6JuRWLa24tYz8\nWC799iTM1noPAhh6xaju5qygnoMqlnm9yQnRvZ3i8xmtTCB6hW0aD5ydlIt/8ZJZ\nOKK2Cy4xha9Xslg+sWTkUHdLOfAhsUz0nvPxF1seDmBn9zKO9po7JRn2eyIpGn47\ngbil6AlWtZk9FB8q4zsRIdVu+aJBaSx/UXZpOt0+MRbFJb54uON7HLFexRNnwL4U\nhaLlVteCBXK9vr22lA6NUaCDeQnJKb884YDRQyQqGY+77ftOIl2po6rvD6Y4/9Kf\nbLNFn06WNrLj7qmv7AfHcALTmqh6dtkaC8ZodOwo9isn0PXOga5m6H87xPCx82EI\nD5aBXhA7jY31pNRNzHl8P2iarR/NfR36mxv/DtVFeNZbB8kvUkc=\n=Chx1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a784e4c2c7cc16f5d62775ac34ebd338268ca54d",
          "sha": "a784e4c2c7cc16f5d62775ac34ebd338268ca54d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a784e4c2c7cc16f5d62775ac34ebd338268ca54d"
        }
      ],
      "message": "ci: enable silentpayments module",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-03T08:21:14Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-22T23:25:41Z"
      },
      "sha": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12693404541,
      "node_id": "HRFPE_lADOAP4Jqs6GTERUzwAAAAL0lft9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12693404541",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T08:21:32Z"
    },
    {
      "event": "commented",
      "id": 2092544520,
      "node_id": "IC_kwDOAP4Jqs58ubII",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2092544520",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T08:25:39Z",
      "updated_at": "2024-05-03T08:25:39Z",
      "author_association": "MEMBER",
      "body": "Thanks for the thorough review, @theStack ! I've addressed your feedback, along with some other changes.\r\n\r\n---\r\nUpdate https://github.com/bitcoin-core/secp256k1/commit/f5585d4b93606144e76e45ad3d43a797a9afefcf -> https://github.com/bitcoin-core/secp256k1/commit/1a3a00bd0999a89e30d5dc9f927592ead72ab7a3 ([bip352-silentpayments-module-02](https://github.com/josibake/secp256k1/tree/bip352-silentpayments-module-02) -> [bip352-silentpayments-module-03](https://github.com/josibake/secp256k1/tree/bip352-silentpayments-module-03), [compare](https://github.com/josibake/secp256k1/compare/bip352-silentpayments-module-02..josibake:secp256k1:bip352-silentpayments-module-03))\r\n\r\n* Spelling and wording cleanups, notably:\r\n  *  `s/receiver/recipient/`, `s/labeled/labelled/`\r\n  * `s/scan_seckey/scan_key/`\r\n* Reduce duplicate code in `scan_outputs`\r\n* Add `ARG_CHECK`s\r\n* Update tests\r\n* Add benchmark for `scan_outputs`\r\n\r\nThe sending tests now check that the generated outputs match exactly one of the possible expected output sets. Previously, the sending tests were checking that the generated outputs exist in the array of all possible outputs, but this wouldn't catch a bug where `k` is not being set correctly e.g.  *[A<sub>k=0</sub>, B<sub>k=0</sub>]* would (incorrectly) pass *[A<sub>k=0</sub>, B<sub>k=1</sub>, A<sub>k=1</sub>, B<sub>k=0</sub>]* but will now (correctly) fail *[[A<sub>k=0</sub>, B<sub>k=1</sub>], [A<sub>k=1</sub>, B<sub>k=0</sub>]]*",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#issuecomment-2092544520",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1519"
    },
    {
      "event": "mentioned",
      "id": 12693448859,
      "node_id": "MEE_lADOAP4Jqs6GTERUzwAAAAL0lqib",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12693448859",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T08:25:40Z"
    },
    {
      "event": "subscribed",
      "id": 12693448875,
      "node_id": "SE_lADOAP4Jqs6GTERUzwAAAAL0lqir",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12693448875",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T08:25:40Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574947042",
      "pull_request_review_id": 2015096769,
      "id": 1574947042,
      "node_id": "PRRC_kwDOAP4Jqs5d38ji",
      "diff_hunk": "@@ -433,4 +433,137 @@ int secp256k1_silentpayments_recipient_public_data_parse(const secp256k1_context\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs, size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs, size_t n_tx_outputs,\n+    const unsigned char *scan_key,\n+    const secp256k1_silentpayments_public_data *public_data,\n+    const secp256k1_pubkey *receiver_spend_pubkey,\n+    const secp256k1_silentpayments_label_lookup label_lookup,\n+    const void *label_context\n+) {\n+    secp256k1_scalar t_k_scalar;\n+    secp256k1_ge receiver_spend_pubkey_ge;\n+    secp256k1_xonly_pubkey P_output_xonly;\n+    secp256k1_pubkey A_sum;\n+    unsigned char shared_secret[33];\n+    size_t i, k, n_found;\n+    int found, combined;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(found_outputs != NULL);\n+    ARG_CHECK(tx_outputs != NULL);\n+    ARG_CHECK(scan_key != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    combined = (int)public_data->data[0];\n+    {\n+        unsigned char input_hash[32];\n+        unsigned char *input_hash_ptr;\n+        if (combined) {\n+            input_hash_ptr = NULL;\n+        } else {\n+            memset(input_hash, 0, 32);\n+            input_hash_ptr = input_hash;\n+        }\n+        if (!secp256k1_silentpayments_recipient_public_data_load(ctx, &A_sum, input_hash_ptr, public_data)) {\n+            return 0;\n+        }\n+        secp256k1_pubkey_load(ctx, &receiver_spend_pubkey_ge, receiver_spend_pubkey);\n+        if (!secp256k1_silentpayments_create_shared_secret(ctx, shared_secret, scan_key, &A_sum, input_hash_ptr)) {\n+            return 0;\n+        }\n+    }\n+\n+    n_found = 0;\n+    k = 0;\n+    while (1) {\n+        secp256k1_ge P_output_ge = receiver_spend_pubkey_ge;\n+        /* Calculate t_k = hash(shared_secret || ser_32(k)) */\n+        secp256k1_silentpayments_create_t_k(&t_k_scalar, shared_secret, k);\n+\n+        /* Calculate P_output = B_spend + t_k * G */\n+        if (!secp256k1_eckey_pubkey_tweak_add(&P_output_ge, &t_k_scalar)) {\n+            return 0;\n+        }\n+\n+        /* If the calculated output matches the one from the tx, we have a direct match and can\n+         * return without labels calculation (one of the two would result in point of infinity) */\n+        secp256k1_xonly_pubkey_save(&P_output_xonly, &P_output_ge);\n+        found = 0;\n+        for (i = 0; i < n_tx_outputs; i++) {\n+            if (secp256k1_xonly_pubkey_cmp(ctx, &P_output_xonly, tx_outputs[i]) == 0) {\n+                found_outputs[n_found]->output = *tx_outputs[i];",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 65,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `found_with_label` boolean needs to be set here, to not leave it uninitialized (I guess we don't want to rely on the user zeroing the `_found_output` struct instances before scanning):\r\n```suggestion\r\n                found_outputs[n_found]->output = *tx_outputs[i];\r\n                found_outputs[n_found]->found_with_label = 0;\r\n```\r\nShould we also set `label` here to something invalid for consistency, e.g. all-zero-bytes, even though the user wouldn't evaluate it anyways? Not sure what the best practices are in cases like this and if returning uninitialized data is acceptable.\r\n\r\nMight be nice to update the tests to also check for the `found_with_label` flag. ",
      "created_at": "2024-04-22T15:21:20Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1574947042",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574947042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574962225",
      "pull_request_review_id": 2015096769,
      "id": 1574962225,
      "node_id": "PRRC_kwDOAP4Jqs5d4AQx",
      "diff_hunk": "@@ -222,6 +222,57 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     size_t n_plain_pubkeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Scan for Silent Payment transaction outputs.\n+ *\n+ *  Given a input public sum, an input_hash, a recipient's spend public key B_spend, and the relevant transaction\n+ *  outputs, scan for outputs belong to the recipient and return the tweak(s) needed for spending\n+ *  the output(s). An optional label_lookup callback function and label_context can be passed if the\n+ *  recipient uses labels. This allows for checking if a label exists in the recipients label cache\n+ *  and retrieving the label tweak during scanning.\n+ *\n+ *  Returns: 1 if output scanning was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:         found_outputs: pointer to an array of pointers to found output objects. The found outputs\n+ *                              array MUST be initialized to be the same length as the tx_outputs array\n+ *             n_found_outputs: pointer to an integer indicating the final size of the found outputs array.\n+ *                              This number represents the number of outputs found while scanning (0 if\n+ *                              none are found)\n+ *  In:             tx_outputs: pointer to the tx's x-only public key outputs\n+ *                n_tx_outputs: the number of tx_outputs being scanned\n+ *                    scan_key: pointer to the recipient's scan key\n+ *           public_tweak_data: pointer to the input public key sum (optionaly, with the `input_hash`",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n *                 public_data: pointer to the input public key sum (optionaly, with the `input_hash`\r\n```",
      "created_at": "2024-04-22T15:30:04Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1574962225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574962225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574963125",
      "pull_request_review_id": 2015096769,
      "id": 1574963125,
      "node_id": "PRRC_kwDOAP4Jqs5d4Ae1",
      "diff_hunk": "@@ -222,6 +222,57 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     size_t n_plain_pubkeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Scan for Silent Payment transaction outputs.\n+ *\n+ *  Given a input public sum, an input_hash, a recipient's spend public key B_spend, and the relevant transaction\n+ *  outputs, scan for outputs belong to the recipient and return the tweak(s) needed for spending\n+ *  the output(s). An optional label_lookup callback function and label_context can be passed if the\n+ *  recipient uses labels. This allows for checking if a label exists in the recipients label cache\n+ *  and retrieving the label tweak during scanning.\n+ *\n+ *  Returns: 1 if output scanning was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:         found_outputs: pointer to an array of pointers to found output objects. The found outputs\n+ *                              array MUST be initialized to be the same length as the tx_outputs array\n+ *             n_found_outputs: pointer to an integer indicating the final size of the found outputs array.\n+ *                              This number represents the number of outputs found while scanning (0 if\n+ *                              none are found)\n+ *  In:             tx_outputs: pointer to the tx's x-only public key outputs\n+ *                n_tx_outputs: the number of tx_outputs being scanned\n+ *                    scan_key: pointer to the recipient's scan key\n+ *           public_tweak_data: pointer to the input public key sum (optionaly, with the `input_hash`\n+ *                              multiplied in, see `_recipient_compute_public_data`).\n+ *      recipient_spend_pubkey: pointer to the receiver's spend pubkey\n+ *                  input_hash: pointer to the input_hash. MUST be NULL if the input_hash is already\n+ *                              multipled into the input public key sum (see `_recipient_compute_public_data`)",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 26,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n```\r\n(parameter doesn't exist anymore)",
      "created_at": "2024-04-22T15:30:22Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1574963125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574963125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 246,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574976504",
      "pull_request_review_id": 2015096769,
      "id": 1574976504,
      "node_id": "PRRC_kwDOAP4Jqs5d4Dv4",
      "diff_hunk": "@@ -328,4 +328,109 @@ int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(const secp25\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_public_data_create(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_xonly_pubkey * const *xonly_pubkeys,\n+    size_t n_xonly_pubkeys,\n+    const secp256k1_pubkey * const *plain_pubkeys,\n+    size_t n_plain_pubkeys\n+) {\n+    size_t i;\n+    size_t pubkeylen = 65;\n+    secp256k1_pubkey A_sum;\n+    secp256k1_ge A_sum_ge, addend;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash_local[32];\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    memset(input_hash_local, 0, 32);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_pubkey_load(ctx, &addend, plain_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "4fb8716f4f1f6b10757f53024eb22263829fe888",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure why I chose the constant-time point addition routines back then in #1471 (probably was inspired by `_ec_pubkey_combine`), but I strongly suspect that they are not needed for summing up public data:\r\n```suggestion\r\n        secp256k1_gej_add_ge_var(&A_sum_gej, &A_sum_gej, &addend, NULL);\r\n```\r\n(also for second summing loop a few lines below)",
      "created_at": "2024-04-22T15:39:48Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1574976504",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574976504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574990516",
      "pull_request_review_id": 2015096769,
      "id": 1574990516,
      "node_id": "PRRC_kwDOAP4Jqs5d4HK0",
      "diff_hunk": "@@ -0,0 +1,264 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_SILENTPAYMENTS_TESTS_H\n+#define SECP256K1_MODULE_SILENTPAYMENTS_TESTS_H\n+\n+#include \"../../../include/secp256k1_silentpayments.h\"\n+#include \"../../../src/modules/silentpayments/vectors.h\"\n+#include \"../../../examples/examples_util.h\"\n+#include \"assert.h\"\n+\n+struct label_cache_entry {\n+    secp256k1_pubkey label;\n+    unsigned char label_tweak[32];\n+};\n+struct labels_cache {\n+    const secp256k1_context *ctx;\n+    size_t entries_used;\n+    struct label_cache_entry entries[10];\n+};\n+struct labels_cache labels_cache;\n+const unsigned char* label_lookup(const secp256k1_pubkey* key, const void* cache_ptr) {\n+    const struct labels_cache* cache = (const struct labels_cache*)cache_ptr;\n+    size_t i;\n+    for (i = 0; i < cache->entries_used; i++) {\n+        if (secp256k1_ec_pubkey_cmp(cache->ctx, &cache->entries[i].label, key) == 0) {\n+            return cache->entries[i].label_tweak;\n+        }\n+    }\n+    return NULL;\n+}\n+\n+void run_silentpayments_test_vector_send(const struct bip352_test_vector *test) {\n+    secp256k1_silentpayments_recipient recipients[MAX_OUTPUTS_PER_TEST_CASE];\n+    const secp256k1_silentpayments_recipient *recipient_ptrs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey generated_outputs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey *generated_output_ptrs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_keypair taproot_keypairs[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_keypair const *taproot_keypair_ptrs[MAX_INPUTS_PER_TEST_CASE];\n+    unsigned char const *plain_seckeys[MAX_INPUTS_PER_TEST_CASE];\n+    unsigned char created_output[32];\n+    size_t i, j;\n+    int match;\n+\n+    /* Check that sender creates expected outputs */\n+    for (i = 0; i < test->num_outputs; i++) {\n+        CHECK(secp256k1_ec_pubkey_parse(CTX, &recipients[i].scan_pubkey, test->recipient_pubkeys[i].scan_pubkey, 33));\n+        CHECK(secp256k1_ec_pubkey_parse(CTX, &recipients[i].spend_pubkey, test->recipient_pubkeys[i].spend_pubkey, 33));\n+        recipients[i].index = i;\n+        recipient_ptrs[i] = &recipients[i];\n+        generated_output_ptrs[i] = &generated_outputs[i];\n+    }\n+    for (i = 0; i < test->num_plain_inputs; i++) {\n+        plain_seckeys[i] = test->plain_seckeys[i];\n+    }\n+    for (i = 0; i < test->num_taproot_inputs; i++) {\n+        int ret = secp256k1_keypair_create(CTX, &taproot_keypairs[i], test->taproot_seckeys[i]);\n+        assert(ret);\n+        taproot_keypair_ptrs[i] = &taproot_keypairs[i];\n+    }\n+    CHECK(secp256k1_silentpayments_sender_create_outputs(CTX,\n+                generated_output_ptrs,\n+                recipient_ptrs,\n+                test->num_outputs,\n+                test->outpoint_smallest,\n+                test->num_taproot_inputs > 0 ? taproot_keypair_ptrs : NULL, test->num_taproot_inputs,\n+                test->num_plain_inputs > 0 ? plain_seckeys : NULL, test->num_plain_inputs\n+    ));\n+    for (i = 0; i < test->num_outputs; i++) {\n+        CHECK(secp256k1_xonly_pubkey_serialize(CTX, created_output, &generated_outputs[i]));\n+        match = 0;\n+        /* Loop over both lists to ensure tests don't fail due to different orderings of outputs */\n+        for (j = 0; j < test->num_recipient_outputs; j++) {\n+            if (secp256k1_memcmp_var(created_output, test->recipient_outputs[j], 32) == 0) {\n+                match = 1;\n+                break;\n+            }\n+        }\n+        CHECK(match);\n+    }\n+}\n+\n+void run_silentpayments_test_vector_receive(const struct bip352_test_vector *test) {\n+    secp256k1_pubkey plain_pubkeys_objs[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey xonly_pubkeys_objs[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey tx_output_objs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_silentpayments_found_output found_output_objs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_pubkey const *plain_pubkeys[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey const *xonly_pubkeys[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey const *tx_outputs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_silentpayments_found_output *found_outputs[MAX_OUTPUTS_PER_TEST_CASE];\n+    unsigned char found_outputs_light_client[MAX_OUTPUTS_PER_TEST_CASE][32];\n+    secp256k1_pubkey receiver_scan_pubkey;\n+    secp256k1_pubkey receiver_spend_pubkey;\n+    size_t i,j;\n+    int match;\n+    size_t n_found = 0;\n+    unsigned char found_output[32];\n+    unsigned char found_signatures[10][64];\n+    secp256k1_silentpayments_public_data public_data, public_data_index;\n+    unsigned char shared_secret_lightclient[33];\n+    unsigned char light_client_data[33];\n+\n+\n+    /* prepare the inputs */\n+    {\n+        for (i = 0; i < test->num_plain_inputs; i++) {\n+            CHECK(secp256k1_ec_pubkey_parse(CTX, &plain_pubkeys_objs[i], test->plain_pubkeys[i], 33));\n+            plain_pubkeys[i] = &plain_pubkeys_objs[i];\n+        }\n+        for (i = 0; i < test->num_taproot_inputs; i++) {\n+            CHECK(secp256k1_xonly_pubkey_parse(CTX, &xonly_pubkeys_objs[i], test->xonly_pubkeys[i]));\n+            xonly_pubkeys[i] = &xonly_pubkeys_objs[i];\n+        }\n+        CHECK(secp256k1_silentpayments_recipient_public_data_create(CTX, &public_data,\n+            test->outpoint_smallest,\n+            test->num_taproot_inputs > 0 ? xonly_pubkeys : NULL, test->num_taproot_inputs,\n+            test->num_plain_inputs > 0 ? plain_pubkeys : NULL, test->num_plain_inputs\n+        ));\n+    }\n+    /* prepare the outputs */\n+    {\n+        for (i = 0; i < test->num_to_scan_outputs; i++) {\n+            CHECK(secp256k1_xonly_pubkey_parse(CTX, &tx_output_objs[i], test->to_scan_outputs[i]));\n+            tx_outputs[i] = &tx_output_objs[i];\n+        }\n+        for (i = 0; i < test->num_found_output_pubkeys; i++) {\n+            found_outputs[i] = &found_output_objs[i];\n+        }\n+    }\n+\n+    /* scan / spend pubkeys are not in the given data of the receiver part, so let's compute them */\n+    CHECK(secp256k1_ec_pubkey_create(CTX, &receiver_scan_pubkey, test->scan_seckey));\n+    CHECK(secp256k1_ec_pubkey_create(CTX, &receiver_spend_pubkey, test->spend_seckey));\n+\n+    /* create labels cache */\n+    labels_cache.ctx = CTX;\n+    labels_cache.entries_used = 0;\n+    for (i = 0; i < test->num_labels; i++) {\n+        unsigned int m = test->label_integers[i];\n+        struct label_cache_entry *cache_entry = &labels_cache.entries[labels_cache.entries_used];\n+        CHECK(secp256k1_silentpayments_recipient_create_label_tweak(CTX, &cache_entry->label, cache_entry->label_tweak, test->scan_seckey, m));\n+        labels_cache.entries_used++;\n+    }\n+    CHECK(secp256k1_silentpayments_recipient_scan_outputs(CTX,\n+        found_outputs, &n_found,\n+        tx_outputs, test->num_to_scan_outputs,\n+        test->scan_seckey,\n+        &public_data,\n+        &receiver_spend_pubkey,\n+        label_lookup, &labels_cache)\n+    );\n+    for (i = 0; i < n_found; i++) {\n+        unsigned char full_seckey[32];\n+        secp256k1_keypair keypair;\n+        unsigned char signature[64];\n+        const unsigned char msg32[32] = /* sha256(\"message\") */\n+            {0xab,0x53,0x0a,0x13,0xe4,0x59,0x14,0x98,0x2b,0x79,0xf9,0xb7,0xe3,0xfb,0xa9,0x94,\n+             0xcf,0xd1,0xf3,0xfb,0x22,0xf7,0x1c,0xea,0x1a,0xfb,0xf0,0x2b,0x46,0x0c,0x6d,0x1d};\n+        const unsigned char aux32[32] = /* sha256(\"random auxiliary data\") */\n+            {0x0b,0x3f,0xdd,0xfd,0x67,0xbf,0x76,0xae,0x76,0x39,0xee,0x73,0x5b,0x70,0xff,0x15,\n+             0x83,0xfd,0x92,0x48,0xc0,0x57,0xd2,0x86,0x07,0xa2,0x15,0xf4,0x0b,0x0a,0x3e,0xcc};\n+        memcpy(&full_seckey, test->spend_seckey, 32);\n+        CHECK(secp256k1_ec_seckey_tweak_add(CTX, full_seckey, found_outputs[i]->tweak));\n+        CHECK(secp256k1_keypair_create(CTX, &keypair, full_seckey));\n+        CHECK(secp256k1_schnorrsig_sign32(CTX, signature, msg32, &keypair, aux32));\n+        memcpy(found_signatures[i], signature, 64);\n+    }\n+\n+    /* compare expected and scanned outputs (including calculated seckey tweaks and signatures) */\n+    for (i = 0; i < n_found; i++) {\n+        CHECK(secp256k1_xonly_pubkey_serialize(CTX, found_output, &found_outputs[i]->output));\n+        match = 0;\n+        for (j = 0; j < test->num_found_output_pubkeys; j++) {\n+            if (secp256k1_memcmp_var(&found_output, test->found_output_pubkeys[j], 32) == 0) {\n+                match = 1;\n+                CHECK(secp256k1_memcmp_var(found_outputs[i]->tweak, test->found_seckey_tweaks[j], 32) == 0);\n+                CHECK(secp256k1_memcmp_var(found_signatures[i], test->found_signatures[j], 64) == 0);\n+                break;\n+            }\n+        }\n+        CHECK(match);\n+    }\n+    CHECK(n_found == test->num_found_output_pubkeys);\n+    /* Scan as a light client\n+     * it is not recommended to use labels as a light client so here we are only\n+     * running this on tests that do not involve labels. Primarily, this test is to\n+     * ensure that _recipient_created_shared_secret and _create_shared_secret are the same\n+     */\n+    if (test->num_labels == 0) {\n+        CHECK(secp256k1_silentpayments_recipient_public_data_serialize(CTX, light_client_data, &public_data));\n+        CHECK(secp256k1_silentpayments_recipient_public_data_parse(CTX, &public_data_index, light_client_data));\n+        CHECK(secp256k1_silentpayments_recipient_create_shared_secret(CTX, shared_secret_lightclient, test->scan_seckey, &public_data_index));\n+        n_found = 0;\n+        {\n+            int found = 0;\n+            size_t k = 0;\n+            secp256k1_xonly_pubkey potential_output;\n+            unsigned char xonly_print[32];\n+\n+            while(1) {\n+\n+                CHECK(secp256k1_silentpayments_recipient_create_output_pubkey(CTX,\n+                    &potential_output,\n+                    shared_secret_lightclient,\n+                    &receiver_spend_pubkey,\n+                    k\n+                ));\n+                /* At this point, we check that the utxo exists with a light client protocol.\n+                 * For this example, we'll just iterate through the list of pubkeys */\n+                found = 0;\n+                secp256k1_xonly_pubkey_serialize(CTX, xonly_print, &potential_output);\n+                printf(\"what we generated :\");\n+                print_hex(xonly_print, 32);",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 216,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "85946762a59c39dfe21ac899359bcac443ab8d20",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Tests are usually silent, so this should be removed (or maybe put in some verbose/debug #if block, though I'm not sure if this is considered a good idea due to increased maintenance burden):\r\n```suggestion\r\n```",
      "created_at": "2024-04-22T15:49:34Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1574990516",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1574990516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 215,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575010116",
      "pull_request_review_id": 2015096769,
      "id": 1575010116,
      "node_id": "PRRC_kwDOAP4Jqs5d4L9E",
      "diff_hunk": "@@ -433,4 +433,137 @@ int secp256k1_silentpayments_recipient_public_data_parse(const secp256k1_context\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs, size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs, size_t n_tx_outputs,\n+    const unsigned char *scan_key,\n+    const secp256k1_silentpayments_public_data *public_data,\n+    const secp256k1_pubkey *receiver_spend_pubkey,\n+    const secp256k1_silentpayments_label_lookup label_lookup,\n+    const void *label_context\n+) {\n+    secp256k1_scalar t_k_scalar;\n+    secp256k1_ge receiver_spend_pubkey_ge;\n+    secp256k1_xonly_pubkey P_output_xonly;\n+    secp256k1_pubkey A_sum;\n+    unsigned char shared_secret[33];\n+    size_t i, k, n_found;\n+    int found, combined;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(found_outputs != NULL);\n+    ARG_CHECK(tx_outputs != NULL);\n+    ARG_CHECK(scan_key != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    combined = (int)public_data->data[0];\n+    {\n+        unsigned char input_hash[32];\n+        unsigned char *input_hash_ptr;\n+        if (combined) {\n+            input_hash_ptr = NULL;\n+        } else {\n+            memset(input_hash, 0, 32);\n+            input_hash_ptr = input_hash;\n+        }\n+        if (!secp256k1_silentpayments_recipient_public_data_load(ctx, &A_sum, input_hash_ptr, public_data)) {\n+            return 0;\n+        }\n+        secp256k1_pubkey_load(ctx, &receiver_spend_pubkey_ge, receiver_spend_pubkey);\n+        if (!secp256k1_silentpayments_create_shared_secret(ctx, shared_secret, scan_key, &A_sum, input_hash_ptr)) {\n+            return 0;\n+        }\n+    }\n+\n+    n_found = 0;\n+    k = 0;\n+    while (1) {\n+        secp256k1_ge P_output_ge = receiver_spend_pubkey_ge;\n+        /* Calculate t_k = hash(shared_secret || ser_32(k)) */\n+        secp256k1_silentpayments_create_t_k(&t_k_scalar, shared_secret, k);\n+\n+        /* Calculate P_output = B_spend + t_k * G */\n+        if (!secp256k1_eckey_pubkey_tweak_add(&P_output_ge, &t_k_scalar)) {\n+            return 0;\n+        }\n+\n+        /* If the calculated output matches the one from the tx, we have a direct match and can\n+         * return without labels calculation (one of the two would result in point of infinity) */\n+        secp256k1_xonly_pubkey_save(&P_output_xonly, &P_output_ge);\n+        found = 0;\n+        for (i = 0; i < n_tx_outputs; i++) {\n+            if (secp256k1_xonly_pubkey_cmp(ctx, &P_output_xonly, tx_outputs[i]) == 0) {\n+                found_outputs[n_found]->output = *tx_outputs[i];\n+                secp256k1_scalar_get_b32(found_outputs[n_found]->tweak, &t_k_scalar);\n+                found = 1;\n+                n_found++;\n+                k++;\n+                break;\n+            }\n+\n+            /* If desired, also calculate label candidates */\n+            if (label_lookup != NULL) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 74,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The handling of the first and second scan label candidate look quite similar (both their calculation and the setting of the found output / advancing the counters if the label lookup in the cache was successful), seems like quite a bit of code could be duplicated here.",
      "created_at": "2024-04-22T16:01:32Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1575010116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575010116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 505,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575023482",
      "pull_request_review_id": 2015096769,
      "id": 1575023482,
      "node_id": "PRRC_kwDOAP4Jqs5d4PN6",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *   Args:                 ctx: pointer to a context object\n+ *    Out:   generated_outputs: pointer to an array of pointers to xonly pubkeys, one per recipient.\n+ *                              The order of outputs here matches the original ordering of the\n+ *                              recipients array.\n+ *     In:          recipients: pointer to an array of pointers to silent payment recipients,",
      "path": "include/secp256k1_silentpayments.h",
      "position": 62,
      "original_position": 23,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Considering that the array is sorted in-place, is this in the category \"In/Out\"?",
      "created_at": "2024-04-22T16:10:37Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1575023482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575023482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575037779",
      "pull_request_review_id": 2015096769,
      "id": 1575037779,
      "node_id": "PRRC_kwDOAP4Jqs5d4StT",
      "diff_hunk": "@@ -173,4 +173,94 @@ int secp256k1_silentpayments_create_output_pubkey(const secp256k1_context *ctx,\n     return 1;\n }\n \n+int secp256k1_silentpayments_sender_create_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey **generated_outputs,\n+    const secp256k1_silentpayments_recipient **recipients,\n+    size_t n_recipients,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_keypair * const *taproot_seckeys,\n+    size_t n_taproot_seckeys,\n+    const unsigned char * const *plain_seckeys,\n+    size_t n_plain_seckeys\n+) {\n+    size_t i, k;\n+    secp256k1_scalar a_sum_scalar, addend;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash[32];\n+    unsigned char a_sum[32];\n+    unsigned char shared_secret[33];\n+    secp256k1_silentpayments_recipient last_recipient;\n+\n+    /* Sanity check inputs. */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(recipients != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(plain_seckeys == NULL || n_plain_seckeys >= 1);\n+    ARG_CHECK(taproot_seckeys == NULL || n_taproot_seckeys >= 1);\n+    ARG_CHECK((plain_seckeys != NULL) || (taproot_seckeys != NULL));\n+    ARG_CHECK((n_plain_seckeys + n_taproot_seckeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    /* ensure the index field is set correctly */\n+    for (i = 0; i < n_recipients; i++) {\n+        ARG_CHECK(recipients[i]->index == i);\n+    }\n+\n+    /* Compute input private keys sum: a_sum = a_1 + a_2 + ... + a_n */\n+    a_sum_scalar = secp256k1_scalar_zero;\n+    for (i = 0; i < n_plain_seckeys; i++) {\n+        int ret = secp256k1_scalar_set_b32_seckey(&addend, plain_seckeys[i]);\n+        VERIFY_CHECK(ret);\n+        (void)ret;\n+\n+        secp256k1_scalar_add(&a_sum_scalar, &a_sum_scalar, &addend);\n+        VERIFY_CHECK(!secp256k1_scalar_is_zero(&a_sum_scalar));\n+    }\n+    /* private keys used for taproot outputs have to be negated if they resulted in an odd point */\n+    for (i = 0; i < n_taproot_seckeys; i++) {\n+        secp256k1_ge addend_point;\n+        int ret = secp256k1_keypair_load(ctx, &addend, &addend_point, taproot_seckeys[i]);\n+        VERIFY_CHECK(ret);\n+        (void)ret;\n+        /* declassify addend_point to allow using it as a branch point (this is fine because addend_point is not a secret) */\n+        secp256k1_declassify(ctx, &addend_point, sizeof(addend_point));\n+        secp256k1_fe_normalize_var(&addend_point.y);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 56,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now that we get the point from a keypair instance, I think these lines are not needed anymore (see e.g. [a similar secret key negation code part in the schnorrsig module](https://github.com/bitcoin-core/secp256k1/blob/da515074e3ebc8abc85a4fff3a31d7694ecf897b/src/modules/schnorrsig/main_impl.h#L154-L160)):\r\n```suggestion\r\n```",
      "created_at": "2024-04-22T16:22:16Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1575037779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575037779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 226,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575039817",
      "pull_request_review_id": 2015096769,
      "id": 1575039817,
      "node_id": "PRRC_kwDOAP4Jqs5d4TNJ",
      "diff_hunk": "@@ -173,4 +173,94 @@ int secp256k1_silentpayments_create_output_pubkey(const secp256k1_context *ctx,\n     return 1;\n }\n \n+int secp256k1_silentpayments_sender_create_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey **generated_outputs,\n+    const secp256k1_silentpayments_recipient **recipients,\n+    size_t n_recipients,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_keypair * const *taproot_seckeys,\n+    size_t n_taproot_seckeys,\n+    const unsigned char * const *plain_seckeys,\n+    size_t n_plain_seckeys\n+) {\n+    size_t i, k;\n+    secp256k1_scalar a_sum_scalar, addend;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash[32];\n+    unsigned char a_sum[32];\n+    unsigned char shared_secret[33];\n+    secp256k1_silentpayments_recipient last_recipient;\n+\n+    /* Sanity check inputs. */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(recipients != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(plain_seckeys == NULL || n_plain_seckeys >= 1);\n+    ARG_CHECK(taproot_seckeys == NULL || n_taproot_seckeys >= 1);\n+    ARG_CHECK((plain_seckeys != NULL) || (taproot_seckeys != NULL));\n+    ARG_CHECK((n_plain_seckeys + n_taproot_seckeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    /* ensure the index field is set correctly */\n+    for (i = 0; i < n_recipients; i++) {\n+        ARG_CHECK(recipients[i]->index == i);\n+    }\n+\n+    /* Compute input private keys sum: a_sum = a_1 + a_2 + ... + a_n */\n+    a_sum_scalar = secp256k1_scalar_zero;\n+    for (i = 0; i < n_plain_seckeys; i++) {\n+        int ret = secp256k1_scalar_set_b32_seckey(&addend, plain_seckeys[i]);\n+        VERIFY_CHECK(ret);\n+        (void)ret;\n+\n+        secp256k1_scalar_add(&a_sum_scalar, &a_sum_scalar, &addend);\n+        VERIFY_CHECK(!secp256k1_scalar_is_zero(&a_sum_scalar));\n+    }\n+    /* private keys used for taproot outputs have to be negated if they resulted in an odd point */\n+    for (i = 0; i < n_taproot_seckeys; i++) {\n+        secp256k1_ge addend_point;\n+        int ret = secp256k1_keypair_load(ctx, &addend, &addend_point, taproot_seckeys[i]);\n+        VERIFY_CHECK(ret);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we return an error (i.e. `return 0`) here if the user passes in an invalid keypair?",
      "created_at": "2024-04-22T16:24:01Z",
      "updated_at": "2024-04-22T16:26:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1575039817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1575039817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 223,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577437389",
      "pull_request_review_id": 2019121206,
      "id": 1577437389,
      "node_id": "PRRC_kwDOAP4Jqs5eBcjN",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *   Args:                 ctx: pointer to a context object\n+ *    Out:   generated_outputs: pointer to an array of pointers to xonly pubkeys, one per recipient.\n+ *                              The order of outputs here matches the original ordering of the\n+ *                              recipients array.\n+ *     In:          recipients: pointer to an array of pointers to silent payment recipients,",
      "path": "include/secp256k1_silentpayments.h",
      "position": 62,
      "original_position": 23,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": 1575023482,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good question. I would argue no, since the caller is passing the array in and then never using it again. The fact that the array is sorted in place is irrelevant to the caller since they shouldn't be reading those values again, anyways. But maybe there is a more strict definition of In/Out, that if the function can modify the parameter it is an Out param?",
      "created_at": "2024-04-24T07:46:38Z",
      "updated_at": "2024-04-24T07:46:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577437389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577437389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577545322",
      "pull_request_review_id": 2019306258,
      "id": 1577545322,
      "node_id": "PRRC_kwDOAP4Jqs5eB25q",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *   Args:                 ctx: pointer to a context object\n+ *    Out:   generated_outputs: pointer to an array of pointers to xonly pubkeys, one per recipient.\n+ *                              The order of outputs here matches the original ordering of the\n+ *                              recipients array.\n+ *     In:          recipients: pointer to an array of pointers to silent payment recipients,",
      "path": "include/secp256k1_silentpayments.h",
      "position": 62,
      "original_position": 23,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": 1575023482,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think there's a definition for this case and I don't remember a precedent. \"In\" seems fine to me if the modified argument is not supposed to be read again. The doc also mentions already that the array is modified (\"The recipient array will be sorted in place\").",
      "created_at": "2024-04-24T08:59:58Z",
      "updated_at": "2024-04-24T08:59:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577545322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577545322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577601080",
      "pull_request_review_id": 2019395443,
      "id": 1577601080,
      "node_id": "PRRC_kwDOAP4Jqs5eCEg4",
      "diff_hunk": "@@ -173,4 +173,94 @@ int secp256k1_silentpayments_create_output_pubkey(const secp256k1_context *ctx,\n     return 1;\n }\n \n+int secp256k1_silentpayments_sender_create_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey **generated_outputs,\n+    const secp256k1_silentpayments_recipient **recipients,\n+    size_t n_recipients,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_keypair * const *taproot_seckeys,\n+    size_t n_taproot_seckeys,\n+    const unsigned char * const *plain_seckeys,\n+    size_t n_plain_seckeys\n+) {\n+    size_t i, k;\n+    secp256k1_scalar a_sum_scalar, addend;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash[32];\n+    unsigned char a_sum[32];\n+    unsigned char shared_secret[33];\n+    secp256k1_silentpayments_recipient last_recipient;\n+\n+    /* Sanity check inputs. */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(recipients != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(plain_seckeys == NULL || n_plain_seckeys >= 1);\n+    ARG_CHECK(taproot_seckeys == NULL || n_taproot_seckeys >= 1);\n+    ARG_CHECK((plain_seckeys != NULL) || (taproot_seckeys != NULL));\n+    ARG_CHECK((n_plain_seckeys + n_taproot_seckeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    /* ensure the index field is set correctly */\n+    for (i = 0; i < n_recipients; i++) {\n+        ARG_CHECK(recipients[i]->index == i);\n+    }\n+\n+    /* Compute input private keys sum: a_sum = a_1 + a_2 + ... + a_n */\n+    a_sum_scalar = secp256k1_scalar_zero;\n+    for (i = 0; i < n_plain_seckeys; i++) {\n+        int ret = secp256k1_scalar_set_b32_seckey(&addend, plain_seckeys[i]);\n+        VERIFY_CHECK(ret);\n+        (void)ret;\n+\n+        secp256k1_scalar_add(&a_sum_scalar, &a_sum_scalar, &addend);\n+        VERIFY_CHECK(!secp256k1_scalar_is_zero(&a_sum_scalar));\n+    }\n+    /* private keys used for taproot outputs have to be negated if they resulted in an odd point */\n+    for (i = 0; i < n_taproot_seckeys; i++) {\n+        secp256k1_ge addend_point;\n+        int ret = secp256k1_keypair_load(ctx, &addend, &addend_point, taproot_seckeys[i]);\n+        VERIFY_CHECK(ret);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 52,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": 1575039817,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Replaced both instances of `VERIFY_CHECK` in this function with `return 0;`.",
      "created_at": "2024-04-24T09:40:05Z",
      "updated_at": "2024-04-24T09:40:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577601080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577601080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 223,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577601481",
      "pull_request_review_id": 2019396053,
      "id": 1577601481,
      "node_id": "PRRC_kwDOAP4Jqs5eCEnJ",
      "diff_hunk": "@@ -173,4 +173,94 @@ int secp256k1_silentpayments_create_output_pubkey(const secp256k1_context *ctx,\n     return 1;\n }\n \n+int secp256k1_silentpayments_sender_create_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey **generated_outputs,\n+    const secp256k1_silentpayments_recipient **recipients,\n+    size_t n_recipients,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_keypair * const *taproot_seckeys,\n+    size_t n_taproot_seckeys,\n+    const unsigned char * const *plain_seckeys,\n+    size_t n_plain_seckeys\n+) {\n+    size_t i, k;\n+    secp256k1_scalar a_sum_scalar, addend;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash[32];\n+    unsigned char a_sum[32];\n+    unsigned char shared_secret[33];\n+    secp256k1_silentpayments_recipient last_recipient;\n+\n+    /* Sanity check inputs. */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(recipients != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(plain_seckeys == NULL || n_plain_seckeys >= 1);\n+    ARG_CHECK(taproot_seckeys == NULL || n_taproot_seckeys >= 1);\n+    ARG_CHECK((plain_seckeys != NULL) || (taproot_seckeys != NULL));\n+    ARG_CHECK((n_plain_seckeys + n_taproot_seckeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    /* ensure the index field is set correctly */\n+    for (i = 0; i < n_recipients; i++) {\n+        ARG_CHECK(recipients[i]->index == i);\n+    }\n+\n+    /* Compute input private keys sum: a_sum = a_1 + a_2 + ... + a_n */\n+    a_sum_scalar = secp256k1_scalar_zero;\n+    for (i = 0; i < n_plain_seckeys; i++) {\n+        int ret = secp256k1_scalar_set_b32_seckey(&addend, plain_seckeys[i]);\n+        VERIFY_CHECK(ret);\n+        (void)ret;\n+\n+        secp256k1_scalar_add(&a_sum_scalar, &a_sum_scalar, &addend);\n+        VERIFY_CHECK(!secp256k1_scalar_is_zero(&a_sum_scalar));\n+    }\n+    /* private keys used for taproot outputs have to be negated if they resulted in an odd point */\n+    for (i = 0; i < n_taproot_seckeys; i++) {\n+        secp256k1_ge addend_point;\n+        int ret = secp256k1_keypair_load(ctx, &addend, &addend_point, taproot_seckeys[i]);\n+        VERIFY_CHECK(ret);\n+        (void)ret;\n+        /* declassify addend_point to allow using it as a branch point (this is fine because addend_point is not a secret) */\n+        secp256k1_declassify(ctx, &addend_point, sizeof(addend_point));\n+        secp256k1_fe_normalize_var(&addend_point.y);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 56,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": 1575037779,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed.",
      "created_at": "2024-04-24T09:40:20Z",
      "updated_at": "2024-04-24T09:40:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577601481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577601481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 226,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577607223",
      "pull_request_review_id": 2019405342,
      "id": 1577607223,
      "node_id": "PRRC_kwDOAP4Jqs5eCGA3",
      "diff_hunk": "@@ -433,4 +433,137 @@ int secp256k1_silentpayments_recipient_public_data_parse(const secp256k1_context\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs, size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs, size_t n_tx_outputs,\n+    const unsigned char *scan_key,\n+    const secp256k1_silentpayments_public_data *public_data,\n+    const secp256k1_pubkey *receiver_spend_pubkey,\n+    const secp256k1_silentpayments_label_lookup label_lookup,\n+    const void *label_context\n+) {\n+    secp256k1_scalar t_k_scalar;\n+    secp256k1_ge receiver_spend_pubkey_ge;\n+    secp256k1_xonly_pubkey P_output_xonly;\n+    secp256k1_pubkey A_sum;\n+    unsigned char shared_secret[33];\n+    size_t i, k, n_found;\n+    int found, combined;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(found_outputs != NULL);\n+    ARG_CHECK(tx_outputs != NULL);\n+    ARG_CHECK(scan_key != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    combined = (int)public_data->data[0];\n+    {\n+        unsigned char input_hash[32];\n+        unsigned char *input_hash_ptr;\n+        if (combined) {\n+            input_hash_ptr = NULL;\n+        } else {\n+            memset(input_hash, 0, 32);\n+            input_hash_ptr = input_hash;\n+        }\n+        if (!secp256k1_silentpayments_recipient_public_data_load(ctx, &A_sum, input_hash_ptr, public_data)) {\n+            return 0;\n+        }\n+        secp256k1_pubkey_load(ctx, &receiver_spend_pubkey_ge, receiver_spend_pubkey);\n+        if (!secp256k1_silentpayments_create_shared_secret(ctx, shared_secret, scan_key, &A_sum, input_hash_ptr)) {\n+            return 0;\n+        }\n+    }\n+\n+    n_found = 0;\n+    k = 0;\n+    while (1) {\n+        secp256k1_ge P_output_ge = receiver_spend_pubkey_ge;\n+        /* Calculate t_k = hash(shared_secret || ser_32(k)) */\n+        secp256k1_silentpayments_create_t_k(&t_k_scalar, shared_secret, k);\n+\n+        /* Calculate P_output = B_spend + t_k * G */\n+        if (!secp256k1_eckey_pubkey_tweak_add(&P_output_ge, &t_k_scalar)) {\n+            return 0;\n+        }\n+\n+        /* If the calculated output matches the one from the tx, we have a direct match and can\n+         * return without labels calculation (one of the two would result in point of infinity) */\n+        secp256k1_xonly_pubkey_save(&P_output_xonly, &P_output_ge);\n+        found = 0;\n+        for (i = 0; i < n_tx_outputs; i++) {\n+            if (secp256k1_xonly_pubkey_cmp(ctx, &P_output_xonly, tx_outputs[i]) == 0) {\n+                found_outputs[n_found]->output = *tx_outputs[i];\n+                secp256k1_scalar_get_b32(found_outputs[n_found]->tweak, &t_k_scalar);\n+                found = 1;\n+                n_found++;\n+                k++;\n+                break;\n+            }\n+\n+            /* If desired, also calculate label candidates */\n+            if (label_lookup != NULL) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 74,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": 1575010116,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree! I'm working on a commit now to improve this section and also minimize the conversions between `pubkey -> ge > gej`. Specifically, there was a [comment from Llyod](https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8?permalink_comment_id=4125475#gistcomment-4125475) on the original gist that mentions being able to test equality with `jacobian == affine`, which could save us conversions from `gej` to `ge`. I'm going to try and incorporate that feedback and remove some of the repeated code in a follow up commit.",
      "created_at": "2024-04-24T09:44:39Z",
      "updated_at": "2024-04-24T09:44:40Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577607223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577607223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 505,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577608530",
      "pull_request_review_id": 2019407393,
      "id": 1577608530,
      "node_id": "PRRC_kwDOAP4Jqs5eCGVS",
      "diff_hunk": "@@ -0,0 +1,264 @@\n+/***********************************************************************\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_SILENTPAYMENTS_TESTS_H\n+#define SECP256K1_MODULE_SILENTPAYMENTS_TESTS_H\n+\n+#include \"../../../include/secp256k1_silentpayments.h\"\n+#include \"../../../src/modules/silentpayments/vectors.h\"\n+#include \"../../../examples/examples_util.h\"\n+#include \"assert.h\"\n+\n+struct label_cache_entry {\n+    secp256k1_pubkey label;\n+    unsigned char label_tweak[32];\n+};\n+struct labels_cache {\n+    const secp256k1_context *ctx;\n+    size_t entries_used;\n+    struct label_cache_entry entries[10];\n+};\n+struct labels_cache labels_cache;\n+const unsigned char* label_lookup(const secp256k1_pubkey* key, const void* cache_ptr) {\n+    const struct labels_cache* cache = (const struct labels_cache*)cache_ptr;\n+    size_t i;\n+    for (i = 0; i < cache->entries_used; i++) {\n+        if (secp256k1_ec_pubkey_cmp(cache->ctx, &cache->entries[i].label, key) == 0) {\n+            return cache->entries[i].label_tweak;\n+        }\n+    }\n+    return NULL;\n+}\n+\n+void run_silentpayments_test_vector_send(const struct bip352_test_vector *test) {\n+    secp256k1_silentpayments_recipient recipients[MAX_OUTPUTS_PER_TEST_CASE];\n+    const secp256k1_silentpayments_recipient *recipient_ptrs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey generated_outputs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey *generated_output_ptrs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_keypair taproot_keypairs[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_keypair const *taproot_keypair_ptrs[MAX_INPUTS_PER_TEST_CASE];\n+    unsigned char const *plain_seckeys[MAX_INPUTS_PER_TEST_CASE];\n+    unsigned char created_output[32];\n+    size_t i, j;\n+    int match;\n+\n+    /* Check that sender creates expected outputs */\n+    for (i = 0; i < test->num_outputs; i++) {\n+        CHECK(secp256k1_ec_pubkey_parse(CTX, &recipients[i].scan_pubkey, test->recipient_pubkeys[i].scan_pubkey, 33));\n+        CHECK(secp256k1_ec_pubkey_parse(CTX, &recipients[i].spend_pubkey, test->recipient_pubkeys[i].spend_pubkey, 33));\n+        recipients[i].index = i;\n+        recipient_ptrs[i] = &recipients[i];\n+        generated_output_ptrs[i] = &generated_outputs[i];\n+    }\n+    for (i = 0; i < test->num_plain_inputs; i++) {\n+        plain_seckeys[i] = test->plain_seckeys[i];\n+    }\n+    for (i = 0; i < test->num_taproot_inputs; i++) {\n+        int ret = secp256k1_keypair_create(CTX, &taproot_keypairs[i], test->taproot_seckeys[i]);\n+        assert(ret);\n+        taproot_keypair_ptrs[i] = &taproot_keypairs[i];\n+    }\n+    CHECK(secp256k1_silentpayments_sender_create_outputs(CTX,\n+                generated_output_ptrs,\n+                recipient_ptrs,\n+                test->num_outputs,\n+                test->outpoint_smallest,\n+                test->num_taproot_inputs > 0 ? taproot_keypair_ptrs : NULL, test->num_taproot_inputs,\n+                test->num_plain_inputs > 0 ? plain_seckeys : NULL, test->num_plain_inputs\n+    ));\n+    for (i = 0; i < test->num_outputs; i++) {\n+        CHECK(secp256k1_xonly_pubkey_serialize(CTX, created_output, &generated_outputs[i]));\n+        match = 0;\n+        /* Loop over both lists to ensure tests don't fail due to different orderings of outputs */\n+        for (j = 0; j < test->num_recipient_outputs; j++) {\n+            if (secp256k1_memcmp_var(created_output, test->recipient_outputs[j], 32) == 0) {\n+                match = 1;\n+                break;\n+            }\n+        }\n+        CHECK(match);\n+    }\n+}\n+\n+void run_silentpayments_test_vector_receive(const struct bip352_test_vector *test) {\n+    secp256k1_pubkey plain_pubkeys_objs[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey xonly_pubkeys_objs[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey tx_output_objs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_silentpayments_found_output found_output_objs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_pubkey const *plain_pubkeys[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey const *xonly_pubkeys[MAX_INPUTS_PER_TEST_CASE];\n+    secp256k1_xonly_pubkey const *tx_outputs[MAX_OUTPUTS_PER_TEST_CASE];\n+    secp256k1_silentpayments_found_output *found_outputs[MAX_OUTPUTS_PER_TEST_CASE];\n+    unsigned char found_outputs_light_client[MAX_OUTPUTS_PER_TEST_CASE][32];\n+    secp256k1_pubkey receiver_scan_pubkey;\n+    secp256k1_pubkey receiver_spend_pubkey;\n+    size_t i,j;\n+    int match;\n+    size_t n_found = 0;\n+    unsigned char found_output[32];\n+    unsigned char found_signatures[10][64];\n+    secp256k1_silentpayments_public_data public_data, public_data_index;\n+    unsigned char shared_secret_lightclient[33];\n+    unsigned char light_client_data[33];\n+\n+\n+    /* prepare the inputs */\n+    {\n+        for (i = 0; i < test->num_plain_inputs; i++) {\n+            CHECK(secp256k1_ec_pubkey_parse(CTX, &plain_pubkeys_objs[i], test->plain_pubkeys[i], 33));\n+            plain_pubkeys[i] = &plain_pubkeys_objs[i];\n+        }\n+        for (i = 0; i < test->num_taproot_inputs; i++) {\n+            CHECK(secp256k1_xonly_pubkey_parse(CTX, &xonly_pubkeys_objs[i], test->xonly_pubkeys[i]));\n+            xonly_pubkeys[i] = &xonly_pubkeys_objs[i];\n+        }\n+        CHECK(secp256k1_silentpayments_recipient_public_data_create(CTX, &public_data,\n+            test->outpoint_smallest,\n+            test->num_taproot_inputs > 0 ? xonly_pubkeys : NULL, test->num_taproot_inputs,\n+            test->num_plain_inputs > 0 ? plain_pubkeys : NULL, test->num_plain_inputs\n+        ));\n+    }\n+    /* prepare the outputs */\n+    {\n+        for (i = 0; i < test->num_to_scan_outputs; i++) {\n+            CHECK(secp256k1_xonly_pubkey_parse(CTX, &tx_output_objs[i], test->to_scan_outputs[i]));\n+            tx_outputs[i] = &tx_output_objs[i];\n+        }\n+        for (i = 0; i < test->num_found_output_pubkeys; i++) {\n+            found_outputs[i] = &found_output_objs[i];\n+        }\n+    }\n+\n+    /* scan / spend pubkeys are not in the given data of the receiver part, so let's compute them */\n+    CHECK(secp256k1_ec_pubkey_create(CTX, &receiver_scan_pubkey, test->scan_seckey));\n+    CHECK(secp256k1_ec_pubkey_create(CTX, &receiver_spend_pubkey, test->spend_seckey));\n+\n+    /* create labels cache */\n+    labels_cache.ctx = CTX;\n+    labels_cache.entries_used = 0;\n+    for (i = 0; i < test->num_labels; i++) {\n+        unsigned int m = test->label_integers[i];\n+        struct label_cache_entry *cache_entry = &labels_cache.entries[labels_cache.entries_used];\n+        CHECK(secp256k1_silentpayments_recipient_create_label_tweak(CTX, &cache_entry->label, cache_entry->label_tweak, test->scan_seckey, m));\n+        labels_cache.entries_used++;\n+    }\n+    CHECK(secp256k1_silentpayments_recipient_scan_outputs(CTX,\n+        found_outputs, &n_found,\n+        tx_outputs, test->num_to_scan_outputs,\n+        test->scan_seckey,\n+        &public_data,\n+        &receiver_spend_pubkey,\n+        label_lookup, &labels_cache)\n+    );\n+    for (i = 0; i < n_found; i++) {\n+        unsigned char full_seckey[32];\n+        secp256k1_keypair keypair;\n+        unsigned char signature[64];\n+        const unsigned char msg32[32] = /* sha256(\"message\") */\n+            {0xab,0x53,0x0a,0x13,0xe4,0x59,0x14,0x98,0x2b,0x79,0xf9,0xb7,0xe3,0xfb,0xa9,0x94,\n+             0xcf,0xd1,0xf3,0xfb,0x22,0xf7,0x1c,0xea,0x1a,0xfb,0xf0,0x2b,0x46,0x0c,0x6d,0x1d};\n+        const unsigned char aux32[32] = /* sha256(\"random auxiliary data\") */\n+            {0x0b,0x3f,0xdd,0xfd,0x67,0xbf,0x76,0xae,0x76,0x39,0xee,0x73,0x5b,0x70,0xff,0x15,\n+             0x83,0xfd,0x92,0x48,0xc0,0x57,0xd2,0x86,0x07,0xa2,0x15,0xf4,0x0b,0x0a,0x3e,0xcc};\n+        memcpy(&full_seckey, test->spend_seckey, 32);\n+        CHECK(secp256k1_ec_seckey_tweak_add(CTX, full_seckey, found_outputs[i]->tweak));\n+        CHECK(secp256k1_keypair_create(CTX, &keypair, full_seckey));\n+        CHECK(secp256k1_schnorrsig_sign32(CTX, signature, msg32, &keypair, aux32));\n+        memcpy(found_signatures[i], signature, 64);\n+    }\n+\n+    /* compare expected and scanned outputs (including calculated seckey tweaks and signatures) */\n+    for (i = 0; i < n_found; i++) {\n+        CHECK(secp256k1_xonly_pubkey_serialize(CTX, found_output, &found_outputs[i]->output));\n+        match = 0;\n+        for (j = 0; j < test->num_found_output_pubkeys; j++) {\n+            if (secp256k1_memcmp_var(&found_output, test->found_output_pubkeys[j], 32) == 0) {\n+                match = 1;\n+                CHECK(secp256k1_memcmp_var(found_outputs[i]->tweak, test->found_seckey_tweaks[j], 32) == 0);\n+                CHECK(secp256k1_memcmp_var(found_signatures[i], test->found_signatures[j], 64) == 0);\n+                break;\n+            }\n+        }\n+        CHECK(match);\n+    }\n+    CHECK(n_found == test->num_found_output_pubkeys);\n+    /* Scan as a light client\n+     * it is not recommended to use labels as a light client so here we are only\n+     * running this on tests that do not involve labels. Primarily, this test is to\n+     * ensure that _recipient_created_shared_secret and _create_shared_secret are the same\n+     */\n+    if (test->num_labels == 0) {\n+        CHECK(secp256k1_silentpayments_recipient_public_data_serialize(CTX, light_client_data, &public_data));\n+        CHECK(secp256k1_silentpayments_recipient_public_data_parse(CTX, &public_data_index, light_client_data));\n+        CHECK(secp256k1_silentpayments_recipient_create_shared_secret(CTX, shared_secret_lightclient, test->scan_seckey, &public_data_index));\n+        n_found = 0;\n+        {\n+            int found = 0;\n+            size_t k = 0;\n+            secp256k1_xonly_pubkey potential_output;\n+            unsigned char xonly_print[32];\n+\n+            while(1) {\n+\n+                CHECK(secp256k1_silentpayments_recipient_create_output_pubkey(CTX,\n+                    &potential_output,\n+                    shared_secret_lightclient,\n+                    &receiver_spend_pubkey,\n+                    k\n+                ));\n+                /* At this point, we check that the utxo exists with a light client protocol.\n+                 * For this example, we'll just iterate through the list of pubkeys */\n+                found = 0;\n+                secp256k1_xonly_pubkey_serialize(CTX, xonly_print, &potential_output);\n+                printf(\"what we generated :\");\n+                print_hex(xonly_print, 32);",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 216,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "85946762a59c39dfe21ac899359bcac443ab8d20",
      "in_reply_to_id": 1574990516,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":doh: those sneaked in from my debugging, good catch!",
      "created_at": "2024-04-24T09:45:40Z",
      "updated_at": "2024-04-24T09:45:40Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577608530",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577608530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 215,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577608898",
      "pull_request_review_id": 2019407957,
      "id": 1577608898,
      "node_id": "PRRC_kwDOAP4Jqs5eCGbC",
      "diff_hunk": "@@ -328,4 +328,109 @@ int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(const secp25\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_public_data_create(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_xonly_pubkey * const *xonly_pubkeys,\n+    size_t n_xonly_pubkeys,\n+    const secp256k1_pubkey * const *plain_pubkeys,\n+    size_t n_plain_pubkeys\n+) {\n+    size_t i;\n+    size_t pubkeylen = 65;\n+    secp256k1_pubkey A_sum;\n+    secp256k1_ge A_sum_ge, addend;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash_local[32];\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    memset(input_hash_local, 0, 32);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_pubkey_load(ctx, &addend, plain_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "4fb8716f4f1f6b10757f53024eb22263829fe888",
      "in_reply_to_id": 1574976504,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-24T09:45:56Z",
      "updated_at": "2024-04-24T09:45:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577608898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577608898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577609153",
      "pull_request_review_id": 2019408344,
      "id": 1577609153,
      "node_id": "PRRC_kwDOAP4Jqs5eCGfB",
      "diff_hunk": "@@ -222,6 +222,57 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     size_t n_plain_pubkeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Scan for Silent Payment transaction outputs.\n+ *\n+ *  Given a input public sum, an input_hash, a recipient's spend public key B_spend, and the relevant transaction\n+ *  outputs, scan for outputs belong to the recipient and return the tweak(s) needed for spending\n+ *  the output(s). An optional label_lookup callback function and label_context can be passed if the\n+ *  recipient uses labels. This allows for checking if a label exists in the recipients label cache\n+ *  and retrieving the label tweak during scanning.\n+ *\n+ *  Returns: 1 if output scanning was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:         found_outputs: pointer to an array of pointers to found output objects. The found outputs\n+ *                              array MUST be initialized to be the same length as the tx_outputs array\n+ *             n_found_outputs: pointer to an integer indicating the final size of the found outputs array.\n+ *                              This number represents the number of outputs found while scanning (0 if\n+ *                              none are found)\n+ *  In:             tx_outputs: pointer to the tx's x-only public key outputs\n+ *                n_tx_outputs: the number of tx_outputs being scanned\n+ *                    scan_key: pointer to the recipient's scan key\n+ *           public_tweak_data: pointer to the input public key sum (optionaly, with the `input_hash`",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": 1574962225,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-04-24T09:46:07Z",
      "updated_at": "2024-04-24T09:46:07Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577609153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577609153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577609295",
      "pull_request_review_id": 2019408535,
      "id": 1577609295,
      "node_id": "PRRC_kwDOAP4Jqs5eCGhP",
      "diff_hunk": "@@ -222,6 +222,57 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     size_t n_plain_pubkeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Scan for Silent Payment transaction outputs.\n+ *\n+ *  Given a input public sum, an input_hash, a recipient's spend public key B_spend, and the relevant transaction\n+ *  outputs, scan for outputs belong to the recipient and return the tweak(s) needed for spending\n+ *  the output(s). An optional label_lookup callback function and label_context can be passed if the\n+ *  recipient uses labels. This allows for checking if a label exists in the recipients label cache\n+ *  and retrieving the label tweak during scanning.\n+ *\n+ *  Returns: 1 if output scanning was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:         found_outputs: pointer to an array of pointers to found output objects. The found outputs\n+ *                              array MUST be initialized to be the same length as the tx_outputs array\n+ *             n_found_outputs: pointer to an integer indicating the final size of the found outputs array.\n+ *                              This number represents the number of outputs found while scanning (0 if\n+ *                              none are found)\n+ *  In:             tx_outputs: pointer to the tx's x-only public key outputs\n+ *                n_tx_outputs: the number of tx_outputs being scanned\n+ *                    scan_key: pointer to the recipient's scan key\n+ *           public_tweak_data: pointer to the input public key sum (optionaly, with the `input_hash`\n+ *                              multiplied in, see `_recipient_compute_public_data`).\n+ *      recipient_spend_pubkey: pointer to the receiver's spend pubkey\n+ *                  input_hash: pointer to the input_hash. MUST be NULL if the input_hash is already\n+ *                              multipled into the input public key sum (see `_recipient_compute_public_data`)",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 26,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": 1574963125,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-04-24T09:46:12Z",
      "updated_at": "2024-04-24T09:46:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577609295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577609295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 246,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577610073",
      "pull_request_review_id": 2019409884,
      "id": 1577610073,
      "node_id": "PRRC_kwDOAP4Jqs5eCGtZ",
      "diff_hunk": "@@ -433,4 +433,137 @@ int secp256k1_silentpayments_recipient_public_data_parse(const secp256k1_context\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs, size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs, size_t n_tx_outputs,\n+    const unsigned char *scan_key,\n+    const secp256k1_silentpayments_public_data *public_data,\n+    const secp256k1_pubkey *receiver_spend_pubkey,\n+    const secp256k1_silentpayments_label_lookup label_lookup,\n+    const void *label_context\n+) {\n+    secp256k1_scalar t_k_scalar;\n+    secp256k1_ge receiver_spend_pubkey_ge;\n+    secp256k1_xonly_pubkey P_output_xonly;\n+    secp256k1_pubkey A_sum;\n+    unsigned char shared_secret[33];\n+    size_t i, k, n_found;\n+    int found, combined;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(found_outputs != NULL);\n+    ARG_CHECK(tx_outputs != NULL);\n+    ARG_CHECK(scan_key != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    combined = (int)public_data->data[0];\n+    {\n+        unsigned char input_hash[32];\n+        unsigned char *input_hash_ptr;\n+        if (combined) {\n+            input_hash_ptr = NULL;\n+        } else {\n+            memset(input_hash, 0, 32);\n+            input_hash_ptr = input_hash;\n+        }\n+        if (!secp256k1_silentpayments_recipient_public_data_load(ctx, &A_sum, input_hash_ptr, public_data)) {\n+            return 0;\n+        }\n+        secp256k1_pubkey_load(ctx, &receiver_spend_pubkey_ge, receiver_spend_pubkey);\n+        if (!secp256k1_silentpayments_create_shared_secret(ctx, shared_secret, scan_key, &A_sum, input_hash_ptr)) {\n+            return 0;\n+        }\n+    }\n+\n+    n_found = 0;\n+    k = 0;\n+    while (1) {\n+        secp256k1_ge P_output_ge = receiver_spend_pubkey_ge;\n+        /* Calculate t_k = hash(shared_secret || ser_32(k)) */\n+        secp256k1_silentpayments_create_t_k(&t_k_scalar, shared_secret, k);\n+\n+        /* Calculate P_output = B_spend + t_k * G */\n+        if (!secp256k1_eckey_pubkey_tweak_add(&P_output_ge, &t_k_scalar)) {\n+            return 0;\n+        }\n+\n+        /* If the calculated output matches the one from the tx, we have a direct match and can\n+         * return without labels calculation (one of the two would result in point of infinity) */\n+        secp256k1_xonly_pubkey_save(&P_output_xonly, &P_output_ge);\n+        found = 0;\n+        for (i = 0; i < n_tx_outputs; i++) {\n+            if (secp256k1_xonly_pubkey_cmp(ctx, &P_output_xonly, tx_outputs[i]) == 0) {\n+                found_outputs[n_found]->output = *tx_outputs[i];",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 65,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": 1574947042,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated and for now am just setting the label with the output when the output is found without a label, but would be better if we have a \"canonical\" invalid pubkey I can use.",
      "created_at": "2024-04-24T09:46:51Z",
      "updated_at": "2024-04-24T09:48:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577610073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577610073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577623058",
      "pull_request_review_id": 2019430407,
      "id": 1577623058,
      "node_id": "PRRC_kwDOAP4Jqs5eCJ4S",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *   Args:                 ctx: pointer to a context object\n+ *    Out:   generated_outputs: pointer to an array of pointers to xonly pubkeys, one per recipient.\n+ *                              The order of outputs here matches the original ordering of the\n+ *                              recipients array.\n+ *     In:          recipients: pointer to an array of pointers to silent payment recipients,",
      "path": "include/secp256k1_silentpayments.h",
      "position": 62,
      "original_position": 23,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "14ca7545780a1a60a5039a677546c066988654c0",
      "in_reply_to_id": 1575023482,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Going to leave it as \"In\" for now. I think it makes it more clear to the caller that they are supposed to read the `recipients` array after the function call.",
      "created_at": "2024-04-24T09:56:37Z",
      "updated_at": "2024-04-24T09:56:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1577623058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1577623058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992204",
      "pull_request_review_id": 2026864465,
      "id": 1581992204,
      "node_id": "PRRC_kwDOAP4Jqs5eS0kM",
      "diff_hunk": "@@ -9,8 +9,36 @@\n #include \"../../../include/secp256k1.h\"\n #include \"../../../include/secp256k1_silentpayments.h\"\n \n-/* TODO: implement functions for sender side. */\n+/** Sort an array of silent payment recipients. This is used to group recipients by scan pubkey to\n+ *  ensure the correct values of k are used when creating multiple outputs for a recipient. */\n+static int secp256k1_silentpayments_recipient_sort_cmp(const void* pk1, const void* pk2, void *cmp_data) {\n+    return secp256k1_ec_pubkey_cmp(\n+        ((secp256k1_ec_pubkey_sort_cmp_data*)cmp_data)->ctx,\n+        &(*(const secp256k1_silentpayments_recipient **)pk1)->scan_pubkey,\n+        &(*(const secp256k1_silentpayments_recipient **)pk2)->scan_pubkey",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 20,
      "original_position": 11,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "97220f7b29b77677e66a527ec933b022ceb2cceb",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`pk1`/`pk2` are addresses for _silentpayments_recipient instances, so involving double-pointers here doesn't seem to be necessary:\r\n```suggestion\r\n        &((const secp256k1_silentpayments_recipient *)pk1)->scan_pubkey,\r\n        &((const secp256k1_silentpayments_recipient *)pk2)->scan_pubkey\r\n```",
      "created_at": "2024-04-28T01:18:12Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581992204",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": 19,
      "original_start_line": 17,
      "start_side": "RIGHT",
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992289",
      "pull_request_review_id": 2026864465,
      "id": 1581992289,
      "node_id": "PRRC_kwDOAP4Jqs5eS0lh",
      "diff_hunk": "@@ -9,8 +9,36 @@\n #include \"../../../include/secp256k1.h\"\n #include \"../../../include/secp256k1_silentpayments.h\"\n \n-/* TODO: implement functions for sender side. */\n+/** Sort an array of silent payment recipients. This is used to group recipients by scan pubkey to\n+ *  ensure the correct values of k are used when creating multiple outputs for a recipient. */\n+static int secp256k1_silentpayments_recipient_sort_cmp(const void* pk1, const void* pk2, void *cmp_data) {\n+    return secp256k1_ec_pubkey_cmp(\n+        ((secp256k1_ec_pubkey_sort_cmp_data*)cmp_data)->ctx,\n+        &(*(const secp256k1_silentpayments_recipient **)pk1)->scan_pubkey,\n+        &(*(const secp256k1_silentpayments_recipient **)pk2)->scan_pubkey\n+    );\n+}\n \n-/* TODO: implement functions for receiver side. */\n+int secp256k1_silentpayments_recipient_sort(const secp256k1_context* ctx, const secp256k1_silentpayments_recipient **recipients, size_t n_recipients) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 24,
      "original_position": 16,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "97220f7b29b77677e66a527ec933b022ceb2cceb",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be static, since it's not part of the public API",
      "created_at": "2024-04-28T01:18:51Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581992289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992522",
      "pull_request_review_id": 2026864465,
      "id": 1581992522,
      "node_id": "PRRC_kwDOAP4Jqs5eS0pK",
      "diff_hunk": "@@ -173,4 +173,90 @@ int secp256k1_silentpayments_create_output_pubkey(const secp256k1_context *ctx,\n     return 1;\n }\n \n+int secp256k1_silentpayments_sender_create_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey **generated_outputs,\n+    const secp256k1_silentpayments_recipient **recipients,\n+    size_t n_recipients,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_keypair * const *taproot_seckeys,\n+    size_t n_taproot_seckeys,\n+    const unsigned char * const *plain_seckeys,\n+    size_t n_plain_seckeys\n+) {\n+    size_t i, k;\n+    secp256k1_scalar a_sum_scalar, addend;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash[32];\n+    unsigned char a_sum[32];\n+    unsigned char shared_secret[33];\n+    secp256k1_silentpayments_recipient last_recipient;\n+\n+    /* Sanity check inputs. */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(recipients != NULL);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 198,
      "original_position": 26,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "50dcc1aeddfc2d522ebe02b9709f8c1c119c6027",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could also ARG_CHECK for n_recipients here:\r\n```suggestion\r\n    ARG_CHECK(recipients != NULL);\r\n    ARG_CHECK(n_recipients >= 1);\r\n```",
      "created_at": "2024-04-28T01:21:29Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581992522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 198,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992596",
      "pull_request_review_id": 2026864465,
      "id": 1581992596,
      "node_id": "PRRC_kwDOAP4Jqs5eS0qU",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "50dcc1aeddfc2d522ebe02b9709f8c1c119c6027",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo\r\n```suggestion\r\n * pairs, depending on whether the seckeys correspond to x-only outputs or not.\r\n```",
      "created_at": "2024-04-28T01:22:20Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581992596",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992633",
      "pull_request_review_id": 2026864465,
      "id": 1581992633,
      "node_id": "PRRC_kwDOAP4Jqs5eS0q5",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 18,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "50dcc1aeddfc2d522ebe02b9709f8c1c119c6027",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n *  Returns: 1 if creation of outputs was successful. 0 if an error occured.\r\n```",
      "created_at": "2024-04-28T01:23:07Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581992633",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581992633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993053",
      "pull_request_review_id": 2026864465,
      "id": 1581993053,
      "node_id": "PRRC_kwDOAP4Jqs5eS0xd",
      "diff_hunk": "@@ -93,6 +93,51 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_sender_c\n     size_t n_plain_seckeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(5);\n \n+/** Create Silent Payment label tweak and label.\n+ *\n+ *  Given a recipient's scan private key b_scan and a label integer m, calculate\n+ *  the corresponding label tweak and label:\n+ *\n+ *  label_tweak = hash(b_scan || m)\n+ *  label = label_tweak * G\n+ *\n+ *  Returns: 1 if label tweak and label creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:           label_tweak: pointer to the resulting label tweak\n+ *   In:  receiver_scan_seckey: pointer to the receiver's scan private key\n+ *                           m: label integer (0 is used for change outputs)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_create_label_tweak(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *label,\n+    unsigned char *label_tweak32,\n+    const unsigned char *receiver_scan_seckey,\n+    unsigned int m\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Create Silent Payment labelled spend public key.\n+ *\n+ *  Given a recipient's spend public key B_spend and a label, calculate\n+ *  the corresponding serialized labelled spend public key:\n+ *\n+ *  B_m = B_spend + label\n+ *\n+ *  The result is used by the recipient to create a Silent Payment address, consisting\n+ *  of the serialized and concatenated scan public key and (labelled) spend public key each.\n+ *\n+ *  Returns: 1 if labelled spend public key creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out: l_addr_spend_pubkey33: pointer to the resulting labelled spend public key\n+ *   In: receiver_spend_pubkey: pointer to the receiver's spend pubkey\n+ *                       label: pointer to the the receiver's label\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *labeled_spend_pubkey,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 44,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "aeef18499580e576f2078b20936842b899b05bd3",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: should use either `labeled` or `labelled` consistently (both seem to be correct english) for function name vs parameter",
      "created_at": "2024-04-28T01:27:04Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 134,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993106",
      "pull_request_review_id": 2026864465,
      "id": 1581993106,
      "node_id": "PRRC_kwDOAP4Jqs5eS0yS",
      "diff_hunk": "@@ -93,6 +93,51 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_sender_c\n     size_t n_plain_seckeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(5);\n \n+/** Create Silent Payment label tweak and label.\n+ *\n+ *  Given a recipient's scan private key b_scan and a label integer m, calculate\n+ *  the corresponding label tweak and label:\n+ *\n+ *  label_tweak = hash(b_scan || m)\n+ *  label = label_tweak * G\n+ *\n+ *  Returns: 1 if label tweak and label creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:           label_tweak: pointer to the resulting label tweak\n+ *   In:  receiver_scan_seckey: pointer to the receiver's scan private key\n+ *                           m: label integer (0 is used for change outputs)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_create_label_tweak(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *label,\n+    unsigned char *label_tweak32,\n+    const unsigned char *receiver_scan_seckey,\n+    unsigned int m\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Create Silent Payment labelled spend public key.\n+ *\n+ *  Given a recipient's spend public key B_spend and a label, calculate\n+ *  the corresponding serialized labelled spend public key:\n+ *\n+ *  B_m = B_spend + label\n+ *\n+ *  The result is used by the recipient to create a Silent Payment address, consisting\n+ *  of the serialized and concatenated scan public key and (labelled) spend public key each.\n+ *\n+ *  Returns: 1 if labelled spend public key creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out: l_addr_spend_pubkey33: pointer to the resulting labelled spend public key",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "aeef18499580e576f2078b20936842b899b05bd3",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the out-param description for `label` is missing",
      "created_at": "2024-04-28T01:27:36Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993315",
      "pull_request_review_id": 2026864465,
      "id": 1581993315,
      "node_id": "PRRC_kwDOAP4Jqs5eS01j",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as\n+ *  a compressed public key using `secp256k1_silentpayments_public_data_serialize`. The serialization\n+ *  is intended for sending the public input data to light clients. Light clients can use this\n+ *  serialization with `secp256k1_silentpayments_public_data_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[98];\n+} secp256k1_silentpayments_public_data;\n+\n+/** Parse a 33-byte sequence into a silent_payments_public_data object.\n+ *\n+ *  Returns: 1 if the data was able to be parsed.\n+ *           0 if the sequence is invalid (e.g. does not represnt a valid public key).\n+ *\n+ *  Args:        ctx: pointer to a context object.\n+ *  Out: public_data: pointer to a silentpayments_public_data object. If 1 is returned, it is set to a\n+ *                    parsed version of input33.\n+ *  In:      input33: pointer to a serialized silentpayments_public_data.\n+ */\n+\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *input33\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a silentpayments_public_data object into a 33-byte sequence.\n+ *\n+ *  Returns: 1 always.\n+ *\n+ *  Args:       ctx: pointer to a context object.\n+ *  Out:   output33: pointer to a 32-byte array to place the serialized key in.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n *  Out:   output33: pointer to a 33-byte array to place the serialized silentpayments_public_data in.\r\n```",
      "created_at": "2024-04-28T01:30:42Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993393",
      "pull_request_review_id": 2026864465,
      "id": 1581993393,
      "node_id": "PRRC_kwDOAP4Jqs5eS02x",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as\n+ *  a compressed public key using `secp256k1_silentpayments_public_data_serialize`. The serialization\n+ *  is intended for sending the public input data to light clients. Light clients can use this\n+ *  serialization with `secp256k1_silentpayments_public_data_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[98];\n+} secp256k1_silentpayments_public_data;\n+\n+/** Parse a 33-byte sequence into a silent_payments_public_data object.\n+ *\n+ *  Returns: 1 if the data was able to be parsed.\n+ *           0 if the sequence is invalid (e.g. does not represnt a valid public key).",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 19,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n *           0 if the sequence is invalid (e.g. does not represent a valid public key).\r\n```",
      "created_at": "2024-04-28T01:31:17Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993506",
      "pull_request_review_id": 2026864465,
      "id": 1581993506,
      "node_id": "PRRC_kwDOAP4Jqs5eS04i",
      "diff_hunk": "@@ -324,4 +324,109 @@ int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(const secp25\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_public_data_create(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_xonly_pubkey * const *xonly_pubkeys,\n+    size_t n_xonly_pubkeys,\n+    const secp256k1_pubkey * const *plain_pubkeys,\n+    size_t n_plain_pubkeys\n+) {\n+    size_t i;\n+    size_t pubkeylen = 65;\n+    secp256k1_pubkey A_sum;\n+    secp256k1_ge A_sum_ge, addend;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash_local[32];\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    memset(input_hash_local, 0, 32);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_pubkey_load(ctx, &addend, plain_pubkeys[i]);\n+        secp256k1_gej_add_ge_var(&A_sum_gej, &A_sum_gej, &addend, NULL);\n+    }\n+    for (i = 0; i < n_xonly_pubkeys; i++) {\n+        secp256k1_xonly_pubkey_load(ctx, &addend, xonly_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can use non-constant-time ge adding for the second loop here as well:\r\n```suggestion\r\n        secp256k1_gej_add_ge_var(&A_sum_gej, &A_sum_gej, &addend, NULL);\r\n```",
      "created_at": "2024-04-28T01:32:12Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993573",
      "pull_request_review_id": 2026864465,
      "id": 1581993573,
      "node_id": "PRRC_kwDOAP4Jqs5eS05l",
      "diff_hunk": "@@ -324,4 +324,109 @@ int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(const secp25\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_public_data_create(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_xonly_pubkey * const *xonly_pubkeys,\n+    size_t n_xonly_pubkeys,\n+    const secp256k1_pubkey * const *plain_pubkeys,\n+    size_t n_plain_pubkeys\n+) {\n+    size_t i;\n+    size_t pubkeylen = 65;\n+    secp256k1_pubkey A_sum;\n+    secp256k1_ge A_sum_ge, addend;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash_local[32];\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    memset(input_hash_local, 0, 32);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_pubkey_load(ctx, &addend, plain_pubkeys[i]);\n+        secp256k1_gej_add_ge_var(&A_sum_gej, &A_sum_gej, &addend, NULL);\n+    }\n+    for (i = 0; i < n_xonly_pubkeys; i++) {\n+        secp256k1_xonly_pubkey_load(ctx, &addend, xonly_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);\n+    }\n+    if (secp256k1_gej_is_infinity(&A_sum_gej)) {\n+        /* TODO: do we need a special error return code for this case? */\n+        return 0;\n+    }\n+    secp256k1_ge_set_gej(&A_sum_ge, &A_sum_gej);\n+\n+    /* Compute input_hash = hash(outpoint_L || A_sum) */\n+    secp256k1_silentpayments_calculate_input_hash(input_hash_local, outpoint_smallest36, &A_sum_ge);\n+    secp256k1_pubkey_save(&A_sum, &A_sum_ge);\n+    /* serialize the public_data struct */\n+    public_data->data[0] = 0;\n+    secp256k1_ec_pubkey_serialize(ctx, &public_data->data[1], &pubkeylen, &A_sum, SECP256K1_EC_UNCOMPRESSED);\n+    memcpy(&public_data->data[1 + pubkeylen], input_hash_local, 32);\n+    return 1;\n+}\n+\n+int secp256k1_silentpayments_recipient_public_data_load(const secp256k1_context *ctx, secp256k1_pubkey *pubkey, unsigned char *input_hash, const secp256k1_silentpayments_public_data *public_data) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 56,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: not used in public API, could be made static",
      "created_at": "2024-04-28T01:33:00Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993849",
      "pull_request_review_id": 2026864465,
      "id": 1581993849,
      "node_id": "PRRC_kwDOAP4Jqs5eS095",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as\n+ *  a compressed public key using `secp256k1_silentpayments_public_data_serialize`. The serialization\n+ *  is intended for sending the public input data to light clients. Light clients can use this\n+ *  serialization with `secp256k1_silentpayments_public_data_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[98];\n+} secp256k1_silentpayments_public_data;\n+\n+/** Parse a 33-byte sequence into a silent_payments_public_data object.\n+ *\n+ *  Returns: 1 if the data was able to be parsed.\n+ *           0 if the sequence is invalid (e.g. does not represnt a valid public key).\n+ *\n+ *  Args:        ctx: pointer to a context object.\n+ *  Out: public_data: pointer to a silentpayments_public_data object. If 1 is returned, it is set to a\n+ *                    parsed version of input33.\n+ *  In:      input33: pointer to a serialized silentpayments_public_data.\n+ */\n+\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *input33\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a silentpayments_public_data object into a 33-byte sequence.\n+ *\n+ *  Returns: 1 always.\n+ *\n+ *  Args:       ctx: pointer to a context object.\n+ *  Out:   output33: pointer to a 32-byte array to place the serialized key in.\n+ *  In: public_data: pointer to an initialized silentpayments_public_data object.\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *output33,\n+    const secp256k1_silentpayments_public_data *public_data\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Compute Silent Payment public data from input public keys and transaction inputs.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public tweak data:\n+ *\n+ * A_sum = A_1 + A_2 + ... + A_n\n+ * input_hash = hash(outpoint_lowest || A_sum)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is can be used for scanning on the recipient side, or stored\n+ * in an index for late use (e.g. wallet rescanning, vending data to light clients).\n+ *\n+ * If calling this function for scanning, the reciever must provide an output param\n+ * for the `input_hash`. If calling this function for simply aggregating the inputs\n+ * for later use, the caller can save the result with `silentpayments_public_data_serialize`.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:           public_data: pointer to public_data object containing the summed public key and\n+ *                              input_hash.\n+ *  In:    outpoint_smallest36: serialized smallest outpoint\n+ *               xonly_pubkeys: pointer to an array of pointers to taproot x-only\n+ *                              public keys (can be NULL if no taproot inputs are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *               plain_pubkeys: pointer to an array of pointers to non-taproot\n+ *                              public keys (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_create(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 185,
      "original_position": 78,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could reorder that function to be above the other _public_data API functions, since that's the first one in the lifecycle of a `_public_data` instance.",
      "created_at": "2024-04-28T01:35:43Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993914",
      "pull_request_review_id": 2026864465,
      "id": 1581993914,
      "node_id": "PRRC_kwDOAP4Jqs5eS0-6",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 7,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n *  copied/moved. Created with `secp256k1_silentpayments_public_data_create`. Can be serialized as\r\n```",
      "created_at": "2024-04-28T01:36:52Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581993914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581993914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581994092",
      "pull_request_review_id": 2026864465,
      "id": 1581994092,
      "node_id": "PRRC_kwDOAP4Jqs5eS1Bs",
      "diff_hunk": "@@ -222,6 +222,55 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     size_t n_plain_pubkeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Scan for Silent Payment transaction outputs.\n+ *\n+ *  Given a input public sum, an input_hash, a recipient's spend public key B_spend, and the relevant transaction\n+ *  outputs, scan for outputs belong to the recipient and return the tweak(s) needed for spending\n+ *  the output(s). An optional label_lookup callback function and label_context can be passed if the\n+ *  recipient uses labels. This allows for checking if a label exists in the recipients label cache\n+ *  and retrieving the label tweak during scanning.\n+ *\n+ *  Returns: 1 if output scanning was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:         found_outputs: pointer to an array of pointers to found output objects. The found outputs\n+ *                              array MUST be initialized to be the same length as the tx_outputs array\n+ *             n_found_outputs: pointer to an integer indicating the final size of the found outputs array.\n+ *                              This number represents the number of outputs found while scanning (0 if\n+ *                              none are found)\n+ *  In:             tx_outputs: pointer to the tx's x-only public key outputs\n+ *                n_tx_outputs: the number of tx_outputs being scanned\n+ *                    scan_key: pointer to the recipient's scan key\n+ *                 public_data: pointer to the input public key sum (optionaly, with the `input_hash`\n+ *                              multiplied in, see `_recipient_compute_public_data`).\n+ *      recipient_spend_pubkey: pointer to the receiver's spend pubkey\n+ *                label_lookup: pointer to a callback function for looking up a label value. This fucntion\n+ *                              takes a label pubkey as an argument and returns a pointer to the label tweak\n+ *                              if the label exists, otherwise returns a nullptr (NULL if labels are not used)\n+ *               label_context: pointer to a label context object (NULL if labels are not used)\n+ */\n+\n+typedef const unsigned char* (*secp256k1_silentpayments_label_lookup)(const secp256k1_pubkey*, const void*);\n+typedef struct {\n+    secp256k1_xonly_pubkey output;\n+    unsigned char tweak[32];\n+    int found_with_label;\n+    secp256k1_pubkey label;\n+} secp256k1_silentpayments_found_output;\n+\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs,\n+    size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs,\n+    size_t n_tx_outputs,\n+    const unsigned char *scan_key,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 45,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "016c20d95f96a7cdbe2e36793c37fcb35532f5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, to match the spend key naming:\r\n```suggestion\r\n    const unsigned char *recipient_scan_seckey,\r\n```",
      "created_at": "2024-04-28T01:39:30Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581994092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581994092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581994368",
      "pull_request_review_id": 2026864465,
      "id": 1581994368,
      "node_id": "PRRC_kwDOAP4Jqs5eS1GA",
      "diff_hunk": "@@ -429,4 +429,139 @@ int secp256k1_silentpayments_recipient_public_data_parse(const secp256k1_context\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs, size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs, size_t n_tx_outputs,\n+    const unsigned char *scan_key,\n+    const secp256k1_silentpayments_public_data *public_data,\n+    const secp256k1_pubkey *receiver_spend_pubkey,\n+    const secp256k1_silentpayments_label_lookup label_lookup,\n+    const void *label_context\n+) {\n+    secp256k1_scalar t_k_scalar;\n+    secp256k1_ge receiver_spend_pubkey_ge;\n+    secp256k1_xonly_pubkey P_output_xonly;\n+    secp256k1_pubkey A_sum;\n+    unsigned char shared_secret[33];\n+    size_t i, k, n_found;\n+    int found, combined;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(found_outputs != NULL);\n+    ARG_CHECK(tx_outputs != NULL);\n+    ARG_CHECK(scan_key != NULL);\n+    ARG_CHECK(public_data != NULL);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 459,
      "original_position": 27,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "016c20d95f96a7cdbe2e36793c37fcb35532f5dd",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could add ARG_CHECKS for `n_found_outputs != NULL` and `n_tx_outputs >= 1` here",
      "created_at": "2024-04-28T01:40:57Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581994368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581994368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 459,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581994645",
      "pull_request_review_id": 2026864465,
      "id": 1581994645,
      "node_id": "PRRC_kwDOAP4Jqs5eS1KV",
      "diff_hunk": "@@ -0,0 +1,417 @@\n+/*************************************************************************\n+ * Written in 2024 by josibake                                           *\n+ * To the extent possible under law, the author(s) have dedicated all    *\n+ * copyright and related and neighboring rights to the software in this  *\n+ * file to the public domain worldwide. This software is distributed     *\n+ * without any warranty. For the CC0 Public Domain Dedication, see       *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_extrakeys.h>\n+#include <secp256k1_silentpayments.h>\n+\n+#include \"examples_util.h\"\n+\n+/* Static data for Bob and Carol's silent payment addresses.\n+ * This consists of a scan key for each and the addresse data for each\n+ */\n+static unsigned char smallest_outpoint[36] = {\n+    0x16,0x9e,0x1e,0x83,0xe9,0x30,0x85,0x33,0x91,\n+    0xbc,0x6f,0x35,0xf6,0x05,0xc6,0x75,0x4c,0xfe,\n+    0xad,0x57,0xcf,0x83,0x87,0x63,0x9d,0x3b,0x40,\n+    0x96,0xc5,0x4f,0x18,0xf4,0x00,0x00,0x00,0x00\n+};\n+static unsigned char bob_scan_key[32] = {\n+    0xa8,0x90,0x54,0xc9,0x5b,0xe3,0xc3,0x01,\n+    0x56,0x65,0x74,0xf2,0xaa,0x93,0xad,0xe0,\n+    0x51,0x85,0x09,0x03,0xa6,0x9c,0xbd,0xd1,\n+    0xd4,0x7e,0xae,0x26,0x3d,0x7b,0xc0,0x31\n+};\n+static unsigned char bob_spend_pubkey[33] = {\n+    0x02,0xee,0x97,0xdf,0x83,0xb2,0x54,0x6a,\n+    0xf5,0xa7,0xd0,0x62,0x15,0xd9,0x8b,0xcb,\n+    0x63,0x7f,0xe0,0x5d,0xd0,0xfa,0x37,0x3b,\n+    0xd8,0x20,0xe6,0x64,0xd3,0x72,0xde,0x9a,0x01\n+};\n+static unsigned char bob_address[2][33] = {\n+    {\n+        0x02,0x15,0x40,0xae,0xa8,0x97,0x54,0x7a,\n+        0xd4,0x39,0xb4,0xe0,0xf6,0x09,0xe5,0xf0,\n+        0xfa,0x63,0xde,0x89,0xab,0x11,0xed,0xe3,\n+        0x1e,0x8c,0xde,0x4b,0xe2,0x19,0x42,0x5f,0x23\n+    },\n+    {\n+        0x02,0x3e,0xff,0xf8,0x18,0x51,0x65,0xea,\n+        0x63,0xa9,0x92,0xb3,0x9f,0x31,0xd8,0xfd,\n+        0x8e,0x0e,0x64,0xae,0xf9,0xd3,0x88,0x07,\n+        0x34,0x97,0x37,0x14,0xa5,0x3d,0x83,0x11,0x8d\n+    }\n+};\n+static unsigned char carol_scan_key[32] = {\n+    0x04,0xb2,0xa4,0x11,0x63,0x5c,0x09,0x77,\n+    0x59,0xaa,0xcd,0x0f,0x00,0x5a,0x4c,0x82,\n+    0xc8,0xc9,0x28,0x62,0xc6,0xfc,0x28,0x4b,\n+    0x80,0xb8,0xef,0xeb,0xc2,0x0c,0x3d,0x17\n+};\n+static unsigned char carol_address[2][33] = {\n+    {\n+        0x03,0xbb,0xc6,0x3f,0x12,0x74,0x5d,0x3b,\n+        0x9e,0x9d,0x24,0xc6,0xcd,0x7a,0x1e,0xfe,\n+        0xba,0xd0,0xa7,0xf4,0x69,0x23,0x2f,0xbe,\n+        0xcf,0x31,0xfb,0xa7,0xb4,0xf7,0xdd,0xed,0xa8\n+    },\n+    {\n+        0x03,0x81,0xeb,0x9a,0x9a,0x9e,0xc7,0x39,\n+        0xd5,0x27,0xc1,0x63,0x1b,0x31,0xb4,0x21,\n+        0x56,0x6f,0x5c,0x2a,0x47,0xb4,0xab,0x5b,\n+        0x1f,0x6a,0x68,0x6d,0xfb,0x68,0xea,0xb7,0x16\n+    }\n+};\n+\n+/* Labels\n+ * The structs and call back function are for demonstration only and not optimized.\n+ * In a production usecase, it is expected that the caller will be using a much more performant\n+ * method for storing and querying labels.\n+ */\n+\n+struct label_cache_entry {\n+    secp256k1_pubkey label;\n+    unsigned char label_tweak[32];\n+};\n+\n+struct labels_cache {\n+    const secp256k1_context *ctx;\n+    size_t entries_used;\n+    struct label_cache_entry entries[5];\n+};\n+\n+const unsigned char* label_lookup(const secp256k1_pubkey* key, const void* cache_ptr) {\n+    const struct labels_cache* cache = (const struct labels_cache*)cache_ptr;\n+    size_t i;\n+    for (i = 0; i < cache->entries_used; i++) {\n+        if (secp256k1_ec_pubkey_cmp(cache->ctx, &cache->entries[i].label, key) == 0) {\n+            return cache->entries[i].label_tweak;\n+        }\n+    }\n+    return NULL;\n+}\n+\n+int main(void) {\n+    enum { N_TX_INPUTS = 2, N_TX_OUTPUTS = 3 };\n+    unsigned char randomize[32];\n+    unsigned char xonly_print[32];\n+    secp256k1_xonly_pubkey tx_inputs[N_TX_INPUTS];\n+    secp256k1_xonly_pubkey tx_outputs[N_TX_OUTPUTS];\n+    int ret;\n+    size_t i;\n+    /* Before we can call actual API functions, we need to create a \"context\". */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    ret = secp256k1_context_randomize(ctx, randomize);\n+    assert(ret);\n+\n+    /*** Sending ***/\n+    {\n+        secp256k1_keypair sender_seckeys[N_TX_INPUTS];\n+        const secp256k1_keypair *sender_seckey_ptrs[N_TX_INPUTS];\n+        secp256k1_silentpayments_recipient recipients[N_TX_OUTPUTS];\n+        const secp256k1_silentpayments_recipient *recipient_ptrs[N_TX_OUTPUTS];\n+        secp256k1_xonly_pubkey *generated_output_ptrs[N_TX_OUTPUTS];\n+        char* address_amounts[N_TX_OUTPUTS] = {\"1.0 BTC\", \"2.0 BTC\", \"3.0 BTC\"};\n+        unsigned char (*sp_addresses[N_TX_OUTPUTS])[2][33];\n+\n+        /*** Generate private keys for the sender ***\n+         *\n+         * In this example, only taproot inputs are used but the function can be called with\n+         * a mix of taproot seckeys and plain seckeys. Taproot seckeys are passed as keypairs\n+         * to allow the sending function to check if the private keys need to be negated without needing\n+         * to do an expensive pubkey generation. This is not needed for plain seckeys since there is no need\n+         * for negation.\n+         *\n+         * The public key from each input keypair is saved in the `tx_inputs` array. This array will be used\n+         * later in the example to represent the public keys the recipient will extracte from the\n+         * transaction inputs.\n+         */\n+\n+        for (i = 0; i < 2; i++) {\n+            /* If the secret key is zero or out of range (bigger than secp256k1's\n+             * order), we try to sample a new key. Note that the probability of this\n+             * happening is negligible. */\n+            while (1) {\n+                unsigned char seckey[32];\n+                if (!fill_random(seckey, sizeof(seckey))) {\n+                    printf(\"Failed to generate randomness\\n\");\n+                    return 1;\n+                }\n+                /* Try to create a keypair with a valid context, it should only fail if\n+                 * the secret key is zero or out of range. */\n+                if (secp256k1_keypair_create(ctx, &sender_seckeys[i], seckey)) {\n+                    sender_seckey_ptrs[i] = &sender_seckeys[i];\n+                    ret = secp256k1_keypair_xonly_pub(ctx, &tx_inputs[i], NULL, &sender_seckeys[i]);\n+                    assert(ret);\n+                    break;\n+                } else {\n+                    printf(\"Failed to create keypair\\n\");\n+                    return 1;\n+                }",
      "path": "examples/silentpayments.c",
      "position": 167,
      "original_position": 167,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "6704738b690c2e07e96ef6f5a4266bd617701e02",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: i think the else-brach can be removed (or at least, the `return 1;` in it); if keypair creation fails, we want to continue in the loop and try with another secret key",
      "created_at": "2024-04-28T01:44:35Z",
      "updated_at": "2024-04-28T01:45:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1581994645",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1581994645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": 164,
      "original_start_line": 164,
      "start_side": "RIGHT",
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588884794",
      "pull_request_review_id": 2037624531,
      "id": 1588884794,
      "node_id": "PRRC_kwDOAP4Jqs5etHU6",
      "diff_hunk": "@@ -0,0 +1,417 @@\n+/*************************************************************************\n+ * Written in 2024 by josibake                                           *\n+ * To the extent possible under law, the author(s) have dedicated all    *\n+ * copyright and related and neighboring rights to the software in this  *\n+ * file to the public domain worldwide. This software is distributed     *\n+ * without any warranty. For the CC0 Public Domain Dedication, see       *\n+ * EXAMPLES_COPYING or https://creativecommons.org/publicdomain/zero/1.0 *\n+ *************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <secp256k1.h>\n+#include <secp256k1_extrakeys.h>\n+#include <secp256k1_silentpayments.h>\n+\n+#include \"examples_util.h\"\n+\n+/* Static data for Bob and Carol's silent payment addresses.\n+ * This consists of a scan key for each and the addresse data for each\n+ */\n+static unsigned char smallest_outpoint[36] = {\n+    0x16,0x9e,0x1e,0x83,0xe9,0x30,0x85,0x33,0x91,\n+    0xbc,0x6f,0x35,0xf6,0x05,0xc6,0x75,0x4c,0xfe,\n+    0xad,0x57,0xcf,0x83,0x87,0x63,0x9d,0x3b,0x40,\n+    0x96,0xc5,0x4f,0x18,0xf4,0x00,0x00,0x00,0x00\n+};\n+static unsigned char bob_scan_key[32] = {\n+    0xa8,0x90,0x54,0xc9,0x5b,0xe3,0xc3,0x01,\n+    0x56,0x65,0x74,0xf2,0xaa,0x93,0xad,0xe0,\n+    0x51,0x85,0x09,0x03,0xa6,0x9c,0xbd,0xd1,\n+    0xd4,0x7e,0xae,0x26,0x3d,0x7b,0xc0,0x31\n+};\n+static unsigned char bob_spend_pubkey[33] = {\n+    0x02,0xee,0x97,0xdf,0x83,0xb2,0x54,0x6a,\n+    0xf5,0xa7,0xd0,0x62,0x15,0xd9,0x8b,0xcb,\n+    0x63,0x7f,0xe0,0x5d,0xd0,0xfa,0x37,0x3b,\n+    0xd8,0x20,0xe6,0x64,0xd3,0x72,0xde,0x9a,0x01\n+};\n+static unsigned char bob_address[2][33] = {\n+    {\n+        0x02,0x15,0x40,0xae,0xa8,0x97,0x54,0x7a,\n+        0xd4,0x39,0xb4,0xe0,0xf6,0x09,0xe5,0xf0,\n+        0xfa,0x63,0xde,0x89,0xab,0x11,0xed,0xe3,\n+        0x1e,0x8c,0xde,0x4b,0xe2,0x19,0x42,0x5f,0x23\n+    },\n+    {\n+        0x02,0x3e,0xff,0xf8,0x18,0x51,0x65,0xea,\n+        0x63,0xa9,0x92,0xb3,0x9f,0x31,0xd8,0xfd,\n+        0x8e,0x0e,0x64,0xae,0xf9,0xd3,0x88,0x07,\n+        0x34,0x97,0x37,0x14,0xa5,0x3d,0x83,0x11,0x8d\n+    }\n+};\n+static unsigned char carol_scan_key[32] = {\n+    0x04,0xb2,0xa4,0x11,0x63,0x5c,0x09,0x77,\n+    0x59,0xaa,0xcd,0x0f,0x00,0x5a,0x4c,0x82,\n+    0xc8,0xc9,0x28,0x62,0xc6,0xfc,0x28,0x4b,\n+    0x80,0xb8,0xef,0xeb,0xc2,0x0c,0x3d,0x17\n+};\n+static unsigned char carol_address[2][33] = {\n+    {\n+        0x03,0xbb,0xc6,0x3f,0x12,0x74,0x5d,0x3b,\n+        0x9e,0x9d,0x24,0xc6,0xcd,0x7a,0x1e,0xfe,\n+        0xba,0xd0,0xa7,0xf4,0x69,0x23,0x2f,0xbe,\n+        0xcf,0x31,0xfb,0xa7,0xb4,0xf7,0xdd,0xed,0xa8\n+    },\n+    {\n+        0x03,0x81,0xeb,0x9a,0x9a,0x9e,0xc7,0x39,\n+        0xd5,0x27,0xc1,0x63,0x1b,0x31,0xb4,0x21,\n+        0x56,0x6f,0x5c,0x2a,0x47,0xb4,0xab,0x5b,\n+        0x1f,0x6a,0x68,0x6d,0xfb,0x68,0xea,0xb7,0x16\n+    }\n+};\n+\n+/* Labels\n+ * The structs and call back function are for demonstration only and not optimized.\n+ * In a production usecase, it is expected that the caller will be using a much more performant\n+ * method for storing and querying labels.\n+ */\n+\n+struct label_cache_entry {\n+    secp256k1_pubkey label;\n+    unsigned char label_tweak[32];\n+};\n+\n+struct labels_cache {\n+    const secp256k1_context *ctx;\n+    size_t entries_used;\n+    struct label_cache_entry entries[5];\n+};\n+\n+const unsigned char* label_lookup(const secp256k1_pubkey* key, const void* cache_ptr) {\n+    const struct labels_cache* cache = (const struct labels_cache*)cache_ptr;\n+    size_t i;\n+    for (i = 0; i < cache->entries_used; i++) {\n+        if (secp256k1_ec_pubkey_cmp(cache->ctx, &cache->entries[i].label, key) == 0) {\n+            return cache->entries[i].label_tweak;\n+        }\n+    }\n+    return NULL;\n+}\n+\n+int main(void) {\n+    enum { N_TX_INPUTS = 2, N_TX_OUTPUTS = 3 };\n+    unsigned char randomize[32];\n+    unsigned char xonly_print[32];\n+    secp256k1_xonly_pubkey tx_inputs[N_TX_INPUTS];\n+    secp256k1_xonly_pubkey tx_outputs[N_TX_OUTPUTS];\n+    int ret;\n+    size_t i;\n+    /* Before we can call actual API functions, we need to create a \"context\". */\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    if (!fill_random(randomize, sizeof(randomize))) {\n+        printf(\"Failed to generate randomness\\n\");\n+        return 1;\n+    }\n+    /* Randomizing the context is recommended to protect against side-channel\n+     * leakage See `secp256k1_context_randomize` in secp256k1.h for more\n+     * information about it. This should never fail. */\n+    ret = secp256k1_context_randomize(ctx, randomize);\n+    assert(ret);\n+\n+    /*** Sending ***/\n+    {\n+        secp256k1_keypair sender_seckeys[N_TX_INPUTS];\n+        const secp256k1_keypair *sender_seckey_ptrs[N_TX_INPUTS];\n+        secp256k1_silentpayments_recipient recipients[N_TX_OUTPUTS];\n+        const secp256k1_silentpayments_recipient *recipient_ptrs[N_TX_OUTPUTS];\n+        secp256k1_xonly_pubkey *generated_output_ptrs[N_TX_OUTPUTS];\n+        char* address_amounts[N_TX_OUTPUTS] = {\"1.0 BTC\", \"2.0 BTC\", \"3.0 BTC\"};\n+        unsigned char (*sp_addresses[N_TX_OUTPUTS])[2][33];\n+\n+        /*** Generate private keys for the sender ***\n+         *\n+         * In this example, only taproot inputs are used but the function can be called with\n+         * a mix of taproot seckeys and plain seckeys. Taproot seckeys are passed as keypairs\n+         * to allow the sending function to check if the private keys need to be negated without needing\n+         * to do an expensive pubkey generation. This is not needed for plain seckeys since there is no need\n+         * for negation.\n+         *\n+         * The public key from each input keypair is saved in the `tx_inputs` array. This array will be used\n+         * later in the example to represent the public keys the recipient will extracte from the\n+         * transaction inputs.\n+         */\n+\n+        for (i = 0; i < 2; i++) {\n+            /* If the secret key is zero or out of range (bigger than secp256k1's\n+             * order), we try to sample a new key. Note that the probability of this\n+             * happening is negligible. */\n+            while (1) {\n+                unsigned char seckey[32];\n+                if (!fill_random(seckey, sizeof(seckey))) {\n+                    printf(\"Failed to generate randomness\\n\");\n+                    return 1;\n+                }\n+                /* Try to create a keypair with a valid context, it should only fail if\n+                 * the secret key is zero or out of range. */\n+                if (secp256k1_keypair_create(ctx, &sender_seckeys[i], seckey)) {\n+                    sender_seckey_ptrs[i] = &sender_seckeys[i];\n+                    ret = secp256k1_keypair_xonly_pub(ctx, &tx_inputs[i], NULL, &sender_seckeys[i]);\n+                    assert(ret);\n+                    break;\n+                } else {\n+                    printf(\"Failed to create keypair\\n\");\n+                    return 1;\n+                }",
      "path": "examples/silentpayments.c",
      "position": 167,
      "original_position": 167,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "6704738b690c2e07e96ef6f5a4266bd617701e02",
      "in_reply_to_id": 1581994645,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-05-03T08:10:38Z",
      "updated_at": "2024-05-03T08:10:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588884794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588884794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": 164,
      "original_start_line": 164,
      "start_side": "RIGHT",
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588885068",
      "pull_request_review_id": 2037624941,
      "id": 1588885068,
      "node_id": "PRRC_kwDOAP4Jqs5etHZM",
      "diff_hunk": "@@ -429,4 +429,139 @@ int secp256k1_silentpayments_recipient_public_data_parse(const secp256k1_context\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs, size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs, size_t n_tx_outputs,\n+    const unsigned char *scan_key,\n+    const secp256k1_silentpayments_public_data *public_data,\n+    const secp256k1_pubkey *receiver_spend_pubkey,\n+    const secp256k1_silentpayments_label_lookup label_lookup,\n+    const void *label_context\n+) {\n+    secp256k1_scalar t_k_scalar;\n+    secp256k1_ge receiver_spend_pubkey_ge;\n+    secp256k1_xonly_pubkey P_output_xonly;\n+    secp256k1_pubkey A_sum;\n+    unsigned char shared_secret[33];\n+    size_t i, k, n_found;\n+    int found, combined;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(found_outputs != NULL);\n+    ARG_CHECK(tx_outputs != NULL);\n+    ARG_CHECK(scan_key != NULL);\n+    ARG_CHECK(public_data != NULL);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 459,
      "original_position": 27,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "016c20d95f96a7cdbe2e36793c37fcb35532f5dd",
      "in_reply_to_id": 1581994368,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added.",
      "created_at": "2024-05-03T08:10:53Z",
      "updated_at": "2024-05-03T08:10:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588885068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588885068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 459,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886367",
      "pull_request_review_id": 2037627106,
      "id": 1588886367,
      "node_id": "PRRC_kwDOAP4Jqs5etHtf",
      "diff_hunk": "@@ -222,6 +222,55 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     size_t n_plain_pubkeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Scan for Silent Payment transaction outputs.\n+ *\n+ *  Given a input public sum, an input_hash, a recipient's spend public key B_spend, and the relevant transaction\n+ *  outputs, scan for outputs belong to the recipient and return the tweak(s) needed for spending\n+ *  the output(s). An optional label_lookup callback function and label_context can be passed if the\n+ *  recipient uses labels. This allows for checking if a label exists in the recipients label cache\n+ *  and retrieving the label tweak during scanning.\n+ *\n+ *  Returns: 1 if output scanning was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:         found_outputs: pointer to an array of pointers to found output objects. The found outputs\n+ *                              array MUST be initialized to be the same length as the tx_outputs array\n+ *             n_found_outputs: pointer to an integer indicating the final size of the found outputs array.\n+ *                              This number represents the number of outputs found while scanning (0 if\n+ *                              none are found)\n+ *  In:             tx_outputs: pointer to the tx's x-only public key outputs\n+ *                n_tx_outputs: the number of tx_outputs being scanned\n+ *                    scan_key: pointer to the recipient's scan key\n+ *                 public_data: pointer to the input public key sum (optionaly, with the `input_hash`\n+ *                              multiplied in, see `_recipient_compute_public_data`).\n+ *      recipient_spend_pubkey: pointer to the receiver's spend pubkey\n+ *                label_lookup: pointer to a callback function for looking up a label value. This fucntion\n+ *                              takes a label pubkey as an argument and returns a pointer to the label tweak\n+ *                              if the label exists, otherwise returns a nullptr (NULL if labels are not used)\n+ *               label_context: pointer to a label context object (NULL if labels are not used)\n+ */\n+\n+typedef const unsigned char* (*secp256k1_silentpayments_label_lookup)(const secp256k1_pubkey*, const void*);\n+typedef struct {\n+    secp256k1_xonly_pubkey output;\n+    unsigned char tweak[32];\n+    int found_with_label;\n+    secp256k1_pubkey label;\n+} secp256k1_silentpayments_found_output;\n+\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs,\n+    size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs,\n+    size_t n_tx_outputs,\n+    const unsigned char *scan_key,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 45,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "016c20d95f96a7cdbe2e36793c37fcb35532f5dd",
      "in_reply_to_id": 1581994092,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed `s/receiver/recipient/` consistently. Also removed references to `seckey` and \"private,\" considering the scan key is not a private key.",
      "created_at": "2024-05-03T08:12:00Z",
      "updated_at": "2024-05-03T08:12:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588886367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886604",
      "pull_request_review_id": 2037627449,
      "id": 1588886604,
      "node_id": "PRRC_kwDOAP4Jqs5etHxM",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 7,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": 1581993914,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-05-03T08:12:13Z",
      "updated_at": "2024-05-03T08:12:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588886604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886793",
      "pull_request_review_id": 2037627751,
      "id": 1588886793,
      "node_id": "PRRC_kwDOAP4Jqs5etH0J",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as\n+ *  a compressed public key using `secp256k1_silentpayments_public_data_serialize`. The serialization\n+ *  is intended for sending the public input data to light clients. Light clients can use this\n+ *  serialization with `secp256k1_silentpayments_public_data_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[98];\n+} secp256k1_silentpayments_public_data;\n+\n+/** Parse a 33-byte sequence into a silent_payments_public_data object.\n+ *\n+ *  Returns: 1 if the data was able to be parsed.\n+ *           0 if the sequence is invalid (e.g. does not represnt a valid public key).\n+ *\n+ *  Args:        ctx: pointer to a context object.\n+ *  Out: public_data: pointer to a silentpayments_public_data object. If 1 is returned, it is set to a\n+ *                    parsed version of input33.\n+ *  In:      input33: pointer to a serialized silentpayments_public_data.\n+ */\n+\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *input33\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a silentpayments_public_data object into a 33-byte sequence.\n+ *\n+ *  Returns: 1 always.\n+ *\n+ *  Args:       ctx: pointer to a context object.\n+ *  Out:   output33: pointer to a 32-byte array to place the serialized key in.\n+ *  In: public_data: pointer to an initialized silentpayments_public_data object.\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_serialize(\n+    const secp256k1_context *ctx,\n+    unsigned char *output33,\n+    const secp256k1_silentpayments_public_data *public_data\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Compute Silent Payment public data from input public keys and transaction inputs.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public tweak data:\n+ *\n+ * A_sum = A_1 + A_2 + ... + A_n\n+ * input_hash = hash(outpoint_lowest || A_sum)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is can be used for scanning on the recipient side, or stored\n+ * in an index for late use (e.g. wallet rescanning, vending data to light clients).\n+ *\n+ * If calling this function for scanning, the reciever must provide an output param\n+ * for the `input_hash`. If calling this function for simply aggregating the inputs\n+ * for later use, the caller can save the result with `silentpayments_public_data_serialize`.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:           public_data: pointer to public_data object containing the summed public key and\n+ *                              input_hash.\n+ *  In:    outpoint_smallest36: serialized smallest outpoint\n+ *               xonly_pubkeys: pointer to an array of pointers to taproot x-only\n+ *                              public keys (can be NULL if no taproot inputs are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *               plain_pubkeys: pointer to an array of pointers to non-taproot\n+ *                              public keys (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_create(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 185,
      "original_position": 78,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": 1581993849,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-05-03T08:12:24Z",
      "updated_at": "2024-05-03T08:12:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588886793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886959",
      "pull_request_review_id": 2037628025,
      "id": 1588886959,
      "node_id": "PRRC_kwDOAP4Jqs5etH2v",
      "diff_hunk": "@@ -324,4 +324,109 @@ int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(const secp25\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_public_data_create(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_xonly_pubkey * const *xonly_pubkeys,\n+    size_t n_xonly_pubkeys,\n+    const secp256k1_pubkey * const *plain_pubkeys,\n+    size_t n_plain_pubkeys\n+) {\n+    size_t i;\n+    size_t pubkeylen = 65;\n+    secp256k1_pubkey A_sum;\n+    secp256k1_ge A_sum_ge, addend;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash_local[32];\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    memset(input_hash_local, 0, 32);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_pubkey_load(ctx, &addend, plain_pubkeys[i]);\n+        secp256k1_gej_add_ge_var(&A_sum_gej, &A_sum_gej, &addend, NULL);\n+    }\n+    for (i = 0; i < n_xonly_pubkeys; i++) {\n+        secp256k1_xonly_pubkey_load(ctx, &addend, xonly_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);\n+    }\n+    if (secp256k1_gej_is_infinity(&A_sum_gej)) {\n+        /* TODO: do we need a special error return code for this case? */\n+        return 0;\n+    }\n+    secp256k1_ge_set_gej(&A_sum_ge, &A_sum_gej);\n+\n+    /* Compute input_hash = hash(outpoint_L || A_sum) */\n+    secp256k1_silentpayments_calculate_input_hash(input_hash_local, outpoint_smallest36, &A_sum_ge);\n+    secp256k1_pubkey_save(&A_sum, &A_sum_ge);\n+    /* serialize the public_data struct */\n+    public_data->data[0] = 0;\n+    secp256k1_ec_pubkey_serialize(ctx, &public_data->data[1], &pubkeylen, &A_sum, SECP256K1_EC_UNCOMPRESSED);\n+    memcpy(&public_data->data[1 + pubkeylen], input_hash_local, 32);\n+    return 1;\n+}\n+\n+int secp256k1_silentpayments_recipient_public_data_load(const secp256k1_context *ctx, secp256k1_pubkey *pubkey, unsigned char *input_hash, const secp256k1_silentpayments_public_data *public_data) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 56,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": 1581993573,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-05-03T08:12:35Z",
      "updated_at": "2024-05-03T08:12:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588886959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588886959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588887146",
      "pull_request_review_id": 2037628330,
      "id": 1588887146,
      "node_id": "PRRC_kwDOAP4Jqs5etH5q",
      "diff_hunk": "@@ -324,4 +324,109 @@ int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(const secp25\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_public_data_create(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_xonly_pubkey * const *xonly_pubkeys,\n+    size_t n_xonly_pubkeys,\n+    const secp256k1_pubkey * const *plain_pubkeys,\n+    size_t n_plain_pubkeys\n+) {\n+    size_t i;\n+    size_t pubkeylen = 65;\n+    secp256k1_pubkey A_sum;\n+    secp256k1_ge A_sum_ge, addend;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash_local[32];\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_smallest36 != NULL);\n+    memset(input_hash_local, 0, 32);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_pubkey_load(ctx, &addend, plain_pubkeys[i]);\n+        secp256k1_gej_add_ge_var(&A_sum_gej, &A_sum_gej, &addend, NULL);\n+    }\n+    for (i = 0; i < n_xonly_pubkeys; i++) {\n+        secp256k1_xonly_pubkey_load(ctx, &addend, xonly_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": 1581993506,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-05-03T08:12:48Z",
      "updated_at": "2024-05-03T08:12:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588887146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588887146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588887330",
      "pull_request_review_id": 2037628563,
      "id": 1588887330,
      "node_id": "PRRC_kwDOAP4Jqs5etH8i",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as\n+ *  a compressed public key using `secp256k1_silentpayments_public_data_serialize`. The serialization\n+ *  is intended for sending the public input data to light clients. Light clients can use this\n+ *  serialization with `secp256k1_silentpayments_public_data_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[98];\n+} secp256k1_silentpayments_public_data;\n+\n+/** Parse a 33-byte sequence into a silent_payments_public_data object.\n+ *\n+ *  Returns: 1 if the data was able to be parsed.\n+ *           0 if the sequence is invalid (e.g. does not represnt a valid public key).",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 19,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": 1581993393,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-05-03T08:12:58Z",
      "updated_at": "2024-05-03T08:12:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588887330",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588887330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588889660",
      "pull_request_review_id": 2037632371,
      "id": 1588889660,
      "node_id": "PRRC_kwDOAP4Jqs5etIg8",
      "diff_hunk": "@@ -93,6 +93,51 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_sender_c\n     size_t n_plain_seckeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(5);\n \n+/** Create Silent Payment label tweak and label.\n+ *\n+ *  Given a recipient's scan private key b_scan and a label integer m, calculate\n+ *  the corresponding label tweak and label:\n+ *\n+ *  label_tweak = hash(b_scan || m)\n+ *  label = label_tweak * G\n+ *\n+ *  Returns: 1 if label tweak and label creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:           label_tweak: pointer to the resulting label tweak\n+ *   In:  receiver_scan_seckey: pointer to the receiver's scan private key\n+ *                           m: label integer (0 is used for change outputs)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_create_label_tweak(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *label,\n+    unsigned char *label_tweak32,\n+    const unsigned char *receiver_scan_seckey,\n+    unsigned int m\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Create Silent Payment labelled spend public key.\n+ *\n+ *  Given a recipient's spend public key B_spend and a label, calculate\n+ *  the corresponding serialized labelled spend public key:\n+ *\n+ *  B_m = B_spend + label\n+ *\n+ *  The result is used by the recipient to create a Silent Payment address, consisting\n+ *  of the serialized and concatenated scan public key and (labelled) spend public key each.\n+ *\n+ *  Returns: 1 if labelled spend public key creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out: l_addr_spend_pubkey33: pointer to the resulting labelled spend public key",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "aeef18499580e576f2078b20936842b899b05bd3",
      "in_reply_to_id": 1581993106,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added.",
      "created_at": "2024-05-03T08:15:27Z",
      "updated_at": "2024-05-03T08:15:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588889660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588889660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588889968",
      "pull_request_review_id": 2037632929,
      "id": 1588889968,
      "node_id": "PRRC_kwDOAP4Jqs5etIlw",
      "diff_hunk": "@@ -93,6 +93,51 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_sender_c\n     size_t n_plain_seckeys\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(5);\n \n+/** Create Silent Payment label tweak and label.\n+ *\n+ *  Given a recipient's scan private key b_scan and a label integer m, calculate\n+ *  the corresponding label tweak and label:\n+ *\n+ *  label_tweak = hash(b_scan || m)\n+ *  label = label_tweak * G\n+ *\n+ *  Returns: 1 if label tweak and label creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:           label_tweak: pointer to the resulting label tweak\n+ *   In:  receiver_scan_seckey: pointer to the receiver's scan private key\n+ *                           m: label integer (0 is used for change outputs)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_create_label_tweak(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *label,\n+    unsigned char *label_tweak32,\n+    const unsigned char *receiver_scan_seckey,\n+    unsigned int m\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Create Silent Payment labelled spend public key.\n+ *\n+ *  Given a recipient's spend public key B_spend and a label, calculate\n+ *  the corresponding serialized labelled spend public key:\n+ *\n+ *  B_m = B_spend + label\n+ *\n+ *  The result is used by the recipient to create a Silent Payment address, consisting\n+ *  of the serialized and concatenated scan public key and (labelled) spend public key each.\n+ *\n+ *  Returns: 1 if labelled spend public key creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out: l_addr_spend_pubkey33: pointer to the resulting labelled spend public key\n+ *   In: receiver_spend_pubkey: pointer to the receiver's spend pubkey\n+ *                       label: pointer to the the receiver's label\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_create_labelled_spend_pubkey(\n+    const secp256k1_context *ctx,\n+    secp256k1_pubkey *labeled_spend_pubkey,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 44,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "aeef18499580e576f2078b20936842b899b05bd3",
      "in_reply_to_id": 1581993053,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Used `labelled` throughout.",
      "created_at": "2024-05-03T08:15:50Z",
      "updated_at": "2024-05-03T08:15:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588889968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588889968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 134,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588890103",
      "pull_request_review_id": 2037633133,
      "id": 1588890103,
      "node_id": "PRRC_kwDOAP4Jqs5etIn3",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 18,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "50dcc1aeddfc2d522ebe02b9709f8c1c119c6027",
      "in_reply_to_id": 1581992633,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-05-03T08:15:59Z",
      "updated_at": "2024-05-03T08:15:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588890103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588890103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588890267",
      "pull_request_review_id": 2037633411,
      "id": 1588890267,
      "node_id": "PRRC_kwDOAP4Jqs5etIqb",
      "diff_hunk": "@@ -40,6 +40,59 @@ typedef struct {\n     size_t index;\n } secp256k1_silentpayments_recipient;\n \n+/** Create Silent Payment outputs for recipient(s).\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend), a serialized outpoint, and a list of recipients,\n+ * create the taproot outputs:\n+ *\n+ * a_sum = a_1 + a_2 + ... + a_n\n+ * input_hash = hash(outpoint_smallest || (a_sum * G))\n+ * taproot_output = B_spend + hash(a_sum * input_hash * B_scan || k) * G\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they seckeys correspond to x-only outputs or not.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "50dcc1aeddfc2d522ebe02b9709f8c1c119c6027",
      "in_reply_to_id": 1581992596,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-05-03T08:16:10Z",
      "updated_at": "2024-05-03T08:16:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588890267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588890267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588892139",
      "pull_request_review_id": 2037636286,
      "id": 1588892139,
      "node_id": "PRRC_kwDOAP4Jqs5etJHr",
      "diff_hunk": "@@ -173,4 +173,90 @@ int secp256k1_silentpayments_create_output_pubkey(const secp256k1_context *ctx,\n     return 1;\n }\n \n+int secp256k1_silentpayments_sender_create_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_xonly_pubkey **generated_outputs,\n+    const secp256k1_silentpayments_recipient **recipients,\n+    size_t n_recipients,\n+    const unsigned char *outpoint_smallest36,\n+    const secp256k1_keypair * const *taproot_seckeys,\n+    size_t n_taproot_seckeys,\n+    const unsigned char * const *plain_seckeys,\n+    size_t n_plain_seckeys\n+) {\n+    size_t i, k;\n+    secp256k1_scalar a_sum_scalar, addend;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    unsigned char input_hash[32];\n+    unsigned char a_sum[32];\n+    unsigned char shared_secret[33];\n+    secp256k1_silentpayments_recipient last_recipient;\n+\n+    /* Sanity check inputs. */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(recipients != NULL);",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 198,
      "original_position": 26,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "50dcc1aeddfc2d522ebe02b9709f8c1c119c6027",
      "in_reply_to_id": 1581992522,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added. Out of curiosity, I noticed we have `VERIFY_CHECK` and `ARG_CHECK`, do you know when one is preferred over the other? In most cases, I see `VERIFY_CHECK` being used to check the `ctx`, but there were a few places where `VERIFY_CHECK` was also being used to check the arguments.",
      "created_at": "2024-05-03T08:17:35Z",
      "updated_at": "2024-05-03T08:17:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588892139",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588892139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 198,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588892272",
      "pull_request_review_id": 2037636462,
      "id": 1588892272,
      "node_id": "PRRC_kwDOAP4Jqs5etJJw",
      "diff_hunk": "@@ -9,8 +9,36 @@\n #include \"../../../include/secp256k1.h\"\n #include \"../../../include/secp256k1_silentpayments.h\"\n \n-/* TODO: implement functions for sender side. */\n+/** Sort an array of silent payment recipients. This is used to group recipients by scan pubkey to\n+ *  ensure the correct values of k are used when creating multiple outputs for a recipient. */\n+static int secp256k1_silentpayments_recipient_sort_cmp(const void* pk1, const void* pk2, void *cmp_data) {\n+    return secp256k1_ec_pubkey_cmp(\n+        ((secp256k1_ec_pubkey_sort_cmp_data*)cmp_data)->ctx,\n+        &(*(const secp256k1_silentpayments_recipient **)pk1)->scan_pubkey,\n+        &(*(const secp256k1_silentpayments_recipient **)pk2)->scan_pubkey\n+    );\n+}\n \n-/* TODO: implement functions for receiver side. */\n+int secp256k1_silentpayments_recipient_sort(const secp256k1_context* ctx, const secp256k1_silentpayments_recipient **recipients, size_t n_recipients) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 24,
      "original_position": 16,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "97220f7b29b77677e66a527ec933b022ceb2cceb",
      "in_reply_to_id": 1581992289,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-05-03T08:17:42Z",
      "updated_at": "2024-05-03T08:17:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588892272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588892272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588894474",
      "pull_request_review_id": 2037639947,
      "id": 1588894474,
      "node_id": "PRRC_kwDOAP4Jqs5etJsK",
      "diff_hunk": "@@ -9,8 +9,36 @@\n #include \"../../../include/secp256k1.h\"\n #include \"../../../include/secp256k1_silentpayments.h\"\n \n-/* TODO: implement functions for sender side. */\n+/** Sort an array of silent payment recipients. This is used to group recipients by scan pubkey to\n+ *  ensure the correct values of k are used when creating multiple outputs for a recipient. */\n+static int secp256k1_silentpayments_recipient_sort_cmp(const void* pk1, const void* pk2, void *cmp_data) {\n+    return secp256k1_ec_pubkey_cmp(\n+        ((secp256k1_ec_pubkey_sort_cmp_data*)cmp_data)->ctx,\n+        &(*(const secp256k1_silentpayments_recipient **)pk1)->scan_pubkey,\n+        &(*(const secp256k1_silentpayments_recipient **)pk2)->scan_pubkey",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": 20,
      "original_position": 11,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "97220f7b29b77677e66a527ec933b022ceb2cceb",
      "in_reply_to_id": 1581992204,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll admit, I don't fully understand why the double pointers are necessary, but they are: when I removed them, my tests would pass locally but the branch would fail the CI. I noticed the double pointers are also used for the `secp256k1_pubkey_sort` function, so leaving for now.",
      "created_at": "2024-05-03T08:20:03Z",
      "updated_at": "2024-05-03T08:20:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588894474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588894474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": 19,
      "original_start_line": 17,
      "start_side": "RIGHT",
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588895904",
      "pull_request_review_id": 2037642324,
      "id": 1588895904,
      "node_id": "PRRC_kwDOAP4Jqs5etKCg",
      "diff_hunk": "@@ -138,6 +138,90 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const secp256k1_pubkey *label\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Opaque data structure that holds silent payments public input data.\n+ *\n+ *  This structure does not contain secret data. Guaranteed to be 98 bytes in size. It can be safely\n+ *  copied/moved. Created with `secp256k1_silentpayments_compute_public_data`. Can be serialized as\n+ *  a compressed public key using `secp256k1_silentpayments_public_data_serialize`. The serialization\n+ *  is intended for sending the public input data to light clients. Light clients can use this\n+ *  serialization with `secp256k1_silentpayments_public_data_parse`.\n+ */\n+typedef struct {\n+    unsigned char data[98];\n+} secp256k1_silentpayments_public_data;\n+\n+/** Parse a 33-byte sequence into a silent_payments_public_data object.\n+ *\n+ *  Returns: 1 if the data was able to be parsed.\n+ *           0 if the sequence is invalid (e.g. does not represnt a valid public key).\n+ *\n+ *  Args:        ctx: pointer to a context object.\n+ *  Out: public_data: pointer to a silentpayments_public_data object. If 1 is returned, it is set to a\n+ *                    parsed version of input33.\n+ *  In:      input33: pointer to a serialized silentpayments_public_data.\n+ */\n+\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipient_public_data_parse(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_public_data *public_data,\n+    const unsigned char *input33\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a silentpayments_public_data object into a 33-byte sequence.\n+ *\n+ *  Returns: 1 always.\n+ *\n+ *  Args:       ctx: pointer to a context object.\n+ *  Out:   output33: pointer to a 32-byte array to place the serialized key in.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "41cd97dea39f10a9f537b206b8e3b6a6ab015f35",
      "in_reply_to_id": 1581993315,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-05-03T08:21:36Z",
      "updated_at": "2024-05-03T08:21:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588895904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588895904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588905125",
      "pull_request_review_id": 2037657732,
      "id": 1588905125,
      "node_id": "PRRC_kwDOAP4Jqs5etMSl",
      "diff_hunk": "@@ -433,4 +433,137 @@ int secp256k1_silentpayments_recipient_public_data_parse(const secp256k1_context\n     return 1;\n }\n \n+int secp256k1_silentpayments_recipient_scan_outputs(\n+    const secp256k1_context *ctx,\n+    secp256k1_silentpayments_found_output **found_outputs, size_t *n_found_outputs,\n+    const secp256k1_xonly_pubkey * const *tx_outputs, size_t n_tx_outputs,\n+    const unsigned char *scan_key,\n+    const secp256k1_silentpayments_public_data *public_data,\n+    const secp256k1_pubkey *receiver_spend_pubkey,\n+    const secp256k1_silentpayments_label_lookup label_lookup,\n+    const void *label_context\n+) {\n+    secp256k1_scalar t_k_scalar;\n+    secp256k1_ge receiver_spend_pubkey_ge;\n+    secp256k1_xonly_pubkey P_output_xonly;\n+    secp256k1_pubkey A_sum;\n+    unsigned char shared_secret[33];\n+    size_t i, k, n_found;\n+    int found, combined;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(found_outputs != NULL);\n+    ARG_CHECK(tx_outputs != NULL);\n+    ARG_CHECK(scan_key != NULL);\n+    ARG_CHECK(public_data != NULL);\n+    combined = (int)public_data->data[0];\n+    {\n+        unsigned char input_hash[32];\n+        unsigned char *input_hash_ptr;\n+        if (combined) {\n+            input_hash_ptr = NULL;\n+        } else {\n+            memset(input_hash, 0, 32);\n+            input_hash_ptr = input_hash;\n+        }\n+        if (!secp256k1_silentpayments_recipient_public_data_load(ctx, &A_sum, input_hash_ptr, public_data)) {\n+            return 0;\n+        }\n+        secp256k1_pubkey_load(ctx, &receiver_spend_pubkey_ge, receiver_spend_pubkey);\n+        if (!secp256k1_silentpayments_create_shared_secret(ctx, shared_secret, scan_key, &A_sum, input_hash_ptr)) {\n+            return 0;\n+        }\n+    }\n+\n+    n_found = 0;\n+    k = 0;\n+    while (1) {\n+        secp256k1_ge P_output_ge = receiver_spend_pubkey_ge;\n+        /* Calculate t_k = hash(shared_secret || ser_32(k)) */\n+        secp256k1_silentpayments_create_t_k(&t_k_scalar, shared_secret, k);\n+\n+        /* Calculate P_output = B_spend + t_k * G */\n+        if (!secp256k1_eckey_pubkey_tweak_add(&P_output_ge, &t_k_scalar)) {\n+            return 0;\n+        }\n+\n+        /* If the calculated output matches the one from the tx, we have a direct match and can\n+         * return without labels calculation (one of the two would result in point of infinity) */\n+        secp256k1_xonly_pubkey_save(&P_output_xonly, &P_output_ge);\n+        found = 0;\n+        for (i = 0; i < n_tx_outputs; i++) {\n+            if (secp256k1_xonly_pubkey_cmp(ctx, &P_output_xonly, tx_outputs[i]) == 0) {\n+                found_outputs[n_found]->output = *tx_outputs[i];\n+                secp256k1_scalar_get_b32(found_outputs[n_found]->tweak, &t_k_scalar);\n+                found = 1;\n+                n_found++;\n+                k++;\n+                break;\n+            }\n+\n+            /* If desired, also calculate label candidates */\n+            if (label_lookup != NULL) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 74,
      "commit_id": "1a3a00bd0999a89e30d5dc9f927592ead72ab7a3",
      "original_commit_id": "f113564298e8e76813289fdcefa6968462dc3fda",
      "in_reply_to_id": 1575010116,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Coming back to this, I tried a few variations but found with the benchmark that comparing the generated output to the tx outputs as serialized bytes is marginally faster than the alternatives, so there wasn't much opportunity for minimizing conversions. I was able to clean up this code a bit, but will likely take a second pass at it.",
      "created_at": "2024-05-03T08:30:50Z",
      "updated_at": "2024-05-03T08:30:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1519#discussion_r1588905125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1588905125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1519"
        }
      },
      "start_line": null,
      "original_start_line": 505,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    }
  ]
}