{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956",
    "id": 678218766,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Njc4MjE4NzY2",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/956.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/956.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/20abd52c2e107e79391a19d2d2f8845e83858dea",
    "number": 956,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Replace ecmult_context with a generated static array.",
    "user": {
      "login": "roconnor-blockstream",
      "id": 21371712,
      "node_id": "MDQ6VXNlcjIxMzcxNzEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roconnor-blockstream",
      "html_url": "https://github.com/roconnor-blockstream",
      "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
      "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
      "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
      "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
      "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Replace ecmult_context with a static array.",
    "labels": [],
    "created_at": "2021-06-25T22:47:26Z",
    "updated_at": "2021-08-26T10:34:45Z",
    "closed_at": "2021-08-25T18:58:03Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-08-25T18:58:03Z",
    "merge_commit_sha": "9a5a87e0f1276e0284446af1172056ea4693737f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "roconnor-blockstream:static_ecmult_ctx_20210625",
      "ref": "static_ecmult_ctx_20210625",
      "sha": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 137426323,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMzc0MjYzMjM=",
        "name": "secp256k1",
        "full_name": "roconnor-blockstream/secp256k1",
        "owner": {
          "login": "roconnor-blockstream",
          "id": 21371712,
          "node_id": "MDQ6VXNlcjIxMzcxNzEy",
          "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/roconnor-blockstream",
          "html_url": "https://github.com/roconnor-blockstream",
          "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
          "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
          "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
          "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
          "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/roconnor-blockstream/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/roconnor-blockstream/secp256k1",
        "archive_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/events",
        "forks_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/roconnor-blockstream/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:roconnor-blockstream/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/roconnor-blockstream/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/roconnor-blockstream/secp256k1/hooks",
        "svn_url": "https://github.com/roconnor-blockstream/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 9954,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-20T18:12:39Z",
        "created_at": "2018-06-15T01:26:35Z",
        "updated_at": "2022-01-10T21:24:24Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "d7ec49a6893751f068275cc8ddf4993ef7f31756",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 17061,
    "deletions": 461,
    "changed_files": 24,
    "commits": 5,
    "review_comments": 61,
    "comments": 18
  },
  "events": [
    {
      "event": "commented",
      "id": 869134264,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTEzNDI2NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/869134264",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-27T09:48:41Z",
      "updated_at": "2021-06-27T09:48:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Was curious, the binary size on my machine with all modules enabled before this change was: `672K`, in this branch: `1.6M`.",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-869134264",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "commented",
      "id": 869163205,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTE2MzIwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/869163205",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-27T13:32:11Z",
      "updated_at": "2021-06-27T13:34:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "That's expected since the `ecmult_context` is now statically allocated instead of dynamically allocated.  You should find that your runtime memory use is down by about the same amount.\r\n\r\nI'll also add that you can reduce the binary size by reducing the `ECMULT_WINDOW_SIZE` through the configuration parameter.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-869163205",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "commented",
      "id": 869175168,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTE3NTE2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/869175168",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-27T14:45:41Z",
      "updated_at": "2021-06-27T14:45:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "> That's expected since the `ecmult_context` is now statically allocated instead of dynamically allocated. You should find that your runtime memory use is down by about the same amount.\r\n> \r\n> I'll also add that you can reduce the binary size by reducing the `ECMULT_WINDOW_SIZE` through the configuration parameter.\r\n\r\n\r\nYeah I know :) it wasn't a complaint or anything, just wanted to write it here for reference. less than a MB for simplifying the API and simplifying usage is pretty good",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-869175168",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4949804868,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk0OTgwNDg2OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4949804868",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-28T20:51:19Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T08:02:51Z",
      "updated_at": "2021-06-29T08:02:51Z",
      "source": {
        "issue": {
          "id": 856481541,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjE0MDUyODU4",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/919",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/919/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/919/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/919/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/919",
          "number": 919,
          "state": "closed",
          "state_reason": null,
          "title": "Replace gen_context.c with a Python implementation",
          "body": "This removes the need for a separate native toolchain to build `gen_context`, and the issues around compilation options affecting one but not the other.\r\n\r\nAlternative to #918.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/919",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/919",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/919.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/919.patch"
          },
          "closed_at": "2021-11-19T13:45:41Z",
          "created_at": "2021-04-13T01:18:23Z",
          "updated_at": "2021-11-19T13:45:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 870651986,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDY1MTk4Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/870651986",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T14:29:28Z",
      "updated_at": "2021-06-29T14:29:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "@roconnor-blockstream Here's a branch with two fixups commits:\r\n https://github.com/real-or-random/secp256k1/commits/static_ecmult_ctx_20210625 \r\n\r\nThe first commit simply reverts your changes to the build system. \r\n\r\nThe second commit introduces a very simple approach to change the build system: Just have a configure option `--enable-devtools` (default no), which enables building of `gen_pre_g` as a developer tool. The build system will build but never run `gen_pre_g`. This is by far the simplest we can do. Since the precomputed file will be shipped with the tree, only devs need to update the file and can do this manually by running `gen_pre_g`. Building `gen_pre_g` ignores issues of cross-compilation, i.e., if you compile for a foreign target, it will just compile `gen_pre_g` for that foreign target. Who cares, if you need to run `gen_pre_g`, simply don't cross-compile. By doing the same in a later PR for `gen_context` we could get of the entire cumbersome and error-prone machinery of detecting host compilers (`CFLAGS_FOR_BUILD` and friends). \r\n\r\nNit on naming:\r\nMaybe we could call this `gen_ecmult_pre_g` to make it clear from the name that it corresponds to the `ecmult.h` module. Otherwise people (including me) will constantly think that it is for `ecmult_gen.h` due to the `g` in the name. In the other PR we could then rename `gen_context` to `gen_ecmult_gen_context`. This will make things a little bit clearer. Naming is very confusing at the moment with even more issues, e.g., I claim `enable-ecmult-static-precomputation` should have been called `enable-ecmultgen-static-precomputation`.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-870651986",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "mentioned",
      "id": 4954066632,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDk1NDA2NjYzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4954066632",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T14:29:28Z"
    },
    {
      "event": "subscribed",
      "id": 4954066636,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ5NTQwNjY2MzY=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4954066636",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-29T14:29:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4962150938,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk2MjE1MDkzOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4962150938",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-30T21:14:49Z"
    },
    {
      "event": "reviewed",
      "id": 697266791,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3MjY2Nzkx",
      "url": null,
      "actor": null,
      "commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-697266791",
      "submitted_at": "2021-07-01T16:31:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "reviewed",
      "id": 697555015,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3NTU1MDE1",
      "url": null,
      "actor": null,
      "commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-697555015",
      "submitted_at": "2021-07-01T18:59:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "commented",
      "id": 872484099,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjQ4NDA5OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/872484099",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-01T19:06:59Z",
      "updated_at": "2021-07-01T19:06:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "If you want, you could add a `.gitattributes` file with this content: \r\n```\r\nsrc/ecmult_static_pre_g.h linguist-generated\r\n```\r\n\r\nThis will exclude this file from GitHub language statistics (x% C Code, y% bash script, ...), and fold the file by default when showing diffs. But yeah, it's not the most important thing in the world. :P \r\n\r\nhttps://github.com/github/linguist/blob/master/docs/overrides.md",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-872484099",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4971208543,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk3MTIwODU0Mw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4971208543",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T12:31:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4971306548,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk3MTMwNjU0OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4971306548",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T12:53:16Z"
    },
    {
      "event": "renamed",
      "id": 4971934850,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDk3MTkzNDg1MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4971934850",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T14:58:21Z",
      "rename": {
        "from": "Static ecmult ctx 20210625",
        "to": "Replace ecmult_context with a generated static array."
      }
    },
    {
      "event": "ready_for_review",
      "id": 4971938855,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0OTcxOTM4ODU1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4971938855",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T14:59:08Z"
    },
    {
      "event": "reviewed",
      "id": 698282091,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4MjgyMDkx",
      "url": null,
      "actor": null,
      "commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-698282091",
      "submitted_at": "2021-07-02T15:08:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "reviewed",
      "id": 698283153,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4MjgzMTUz",
      "url": null,
      "actor": null,
      "commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-698283153",
      "submitted_at": "2021-07-02T15:09:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "reviewed",
      "id": 698286702,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4Mjg2NzAy",
      "url": null,
      "actor": null,
      "commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-698286702",
      "submitted_at": "2021-07-02T15:13:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "reviewed",
      "id": 698306323,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4MzA2MzIz",
      "url": null,
      "actor": null,
      "commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "should `#include <stdio.h>`",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-698306323",
      "submitted_at": "2021-07-02T15:41:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "reviewed",
      "id": 698413380,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4NDEzMzgw",
      "url": null,
      "actor": null,
      "commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-698413380",
      "submitted_at": "2021-07-02T18:15:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4979281078,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk3OTI4MTA3OA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4979281078",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-05T15:51:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4980155650,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4MDE1NTY1MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4980155650",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-05T21:35:13Z"
    },
    {
      "event": "reviewed",
      "id": 699675438,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk5Njc1NDM4",
      "url": null,
      "actor": null,
      "commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code is good, here are some nits.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-699675438",
      "submitted_at": "2021-07-06T09:18:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "commented",
      "id": 874607474,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDYwNzQ3NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/874607474",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-06T09:27:13Z",
      "updated_at": "2021-07-06T09:27:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "I wonder what we should do with the context now... For example, the `ecdsa_verify` still says that it needs a verification context but that won't be true after this PR. Contexts require some discussion (see for example https://github.com/bitcoin-core/secp256k1/issues/780#issuecomment-670632456) but it should not delay this PR.  Maybe leave this as is now and postpone this until we made ecmult_gen stuff mandatory static?",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-874607474",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4982939707,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4MjkzOTcwNw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4982939707",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-06T12:33:00Z"
    },
    {
      "event": "commented",
      "id": 874721657,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDcyMTY1Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/874721657",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-06T12:36:14Z",
      "updated_at": "2021-07-06T12:36:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "    <sipa> on cortex-A73 (Odroid N2+), the optimal table size seems to be 22...\r\n    <sipa> 196 us at 15, 189 us at 22\r\n    <sipa> for an ecdsa verify\r\n    <sipa> that's a 128 MiB table :s",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-874721657",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4984670476,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk4NDY3MDQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4984670476",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-06T17:44:26Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-14T06:00:30Z",
      "updated_at": "2021-07-14T06:00:30Z",
      "source": {
        "issue": {
          "id": 944070245,
          "node_id": "MDU6SXNzdWU5NDQwNzAyNDU=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22441",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22441/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22441/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22441/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/22441",
          "number": 22441,
          "state": "closed",
          "state_reason": "completed",
          "title": "guix: libsecp256k1 build failure on aarch64 (M1)",
          "body": "Performing a Guix build of master (d8f1e1327f9c2f9fcc804468f6a981580acdf30a), for either `x86_64-linux-gnu` or `x86_64-w64-mingw32` using:\r\n```bash\r\ntime BASE_CACHE=\"/guix/base_cache\" SOURCES_PATH=\"/guix/sources\" SDK_PATH=\"/guix/SDKs\" HOSTS=\"x86_64-linux-gnu\" ./contrib/guix/guix-build\r\n```\r\ninside an Alpine Docker container, running on an mac mini (M1) currently fails with the following:\r\n```bash\r\n=== configuring in src/secp256k1 (/distsrc-base/distsrc-d8f1e1327f9c-x86_64-linux-gnu/src/secp256k1)\r\nconfigure: running /bin/sh ./configure --disable-option-checking '--prefix=/'  '--disable-ccache' '--disable-maintainer-mode' '--disable-dependency-tracking' '--enable-reduce-exports' '--disable-bench' '--disable-gui-tests' '--disable-fuzz-binary' '--disable-threadlocal' 'CFLAGS=-O2 -g -ffile-prefix-map=/bitcoin=.' 'CXXFLAGS=-O2 -g -ffile-prefix-map=/bitcoin=.' 'LDFLAGS=-Wl,--as-needed -Wl,--dynamic-linker=/lib64/ld-linux-x86-64.so.2 -static-libstdc++ -Wl,-O2' 'PKG_CONFIG_PATH=/root/.guix-profile/lib/pkgconfig' 'PYTHONPATH=/root/.guix-profile/lib/python3.8/site-packages' '--disable-shared' '--with-pic' '--enable-benchmark=no' '--enable-module-recovery' '--enable-module-schnorrsig' '--enable-experimental' --cache-file=/dev/null --srcdir=.\r\nconfigure: loading site script /bitcoin/depends/x86_64-linux-gnu/share/config.site\r\nchecking build system type... aarch64-unknown-linux-gnu\r\nchecking host system type... x86_64-pc-linux-gnu\r\nchecking for a BSD-compatible install... /root/.guix-profile/bin/install -c\r\nchecking whether build environment is sane... yes\r\nchecking for x86_64-linux-gnu-strip... x86_64-linux-gnu-strip\r\nchecking for a thread-safe mkdir -p... /root/.guix-profile/bin/mkdir -p\r\nchecking for gawk... gawk\r\nchecking whether make sets $(MAKE)... yes\r\nchecking whether make supports nested variables... yes\r\nchecking how to print strings... printf\r\nchecking whether make supports the include directive... yes (GNU style)\r\nchecking for x86_64-linux-gnu-gcc... x86_64-linux-gnu-gcc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables... \r\nchecking whether we are cross compiling... yes\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether x86_64-linux-gnu-gcc accepts -g... yes\r\nchecking for x86_64-linux-gnu-gcc option to accept ISO C89... none needed\r\nchecking whether x86_64-linux-gnu-gcc understands -c and -o together... yes\r\nchecking dependency style of x86_64-linux-gnu-gcc... none\r\nchecking for a sed that does not truncate output... /root/.guix-profile/bin/sed\r\nchecking for grep that handles long lines and -e... /root/.guix-profile/bin/grep\r\nchecking for egrep... /root/.guix-profile/bin/grep -E\r\nchecking for fgrep... /root/.guix-profile/bin/grep -F\r\nchecking for ld used by x86_64-linux-gnu-gcc... /gnu/store/fzwlmgg54z0iqkhvs74v60zfx64x62gr-gcc-cross-x86_64-linux-gnu-8.4.0/libexec/gcc/x86_64-linux-gnu/ld\r\nchecking if the linker (/gnu/store/fzwlmgg54z0iqkhvs74v60zfx64x62gr-gcc-cross-x86_64-linux-gnu-8.4.0/libexec/gcc/x86_64-linux-gnu/ld) is GNU ld... yes\r\nchecking for BSD- or MS-compatible name lister (nm)... x86_64-linux-gnu-nm\r\nchecking the name lister (x86_64-linux-gnu-nm) interface... BSD nm\r\nchecking whether ln -s works... yes\r\nchecking the maximum length of command line arguments... 1572864\r\nchecking how to convert aarch64-unknown-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop\r\nchecking how to convert aarch64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop\r\nchecking for /gnu/store/fzwlmgg54z0iqkhvs74v60zfx64x62gr-gcc-cross-x86_64-linux-gnu-8.4.0/libexec/gcc/x86_64-linux-gnu/ld option to reload object files... -r\r\nchecking for x86_64-linux-gnu-objdump... x86_64-linux-gnu-objdump\r\nchecking how to recognize dependent libraries... pass_all\r\nchecking for x86_64-linux-gnu-dlltool... no\r\nchecking for dlltool... no\r\nchecking how to associate runtime and link libraries... printf %s\\n\r\nchecking for x86_64-linux-gnu-ar... x86_64-linux-gnu-ar\r\nchecking for archiver @FILE support... @\r\nchecking for x86_64-linux-gnu-strip... (cached) x86_64-linux-gnu-strip\r\nchecking for x86_64-linux-gnu-ranlib... x86_64-linux-gnu-ranlib\r\nchecking command to parse x86_64-linux-gnu-nm output from x86_64-linux-gnu-gcc object... ok\r\nchecking for sysroot... no\r\nchecking for a working dd... /root/.guix-profile/bin/dd\r\nchecking how to truncate binary pipes... /root/.guix-profile/bin/dd bs=4096 count=1\r\nchecking for x86_64-linux-gnu-mt... no\r\nchecking for mt... no\r\nchecking if : is a manifest tool... no\r\nchecking how to run the C preprocessor... x86_64-linux-gnu-gcc -E\r\nchecking for ANSI C header files... yes\r\nchecking for sys/types.h... yes\r\nchecking for sys/stat.h... yes\r\nchecking for stdlib.h... yes\r\nchecking for string.h... yes\r\nchecking for memory.h... yes\r\nchecking for strings.h... yes\r\nchecking for inttypes.h... yes\r\nchecking for stdint.h... yes\r\nchecking for unistd.h... yes\r\nchecking for dlfcn.h... yes\r\nchecking for objdir... .libs\r\nchecking if x86_64-linux-gnu-gcc supports -fno-rtti -fno-exceptions... no\r\nchecking for x86_64-linux-gnu-gcc option to produce PIC... -fPIC -DPIC\r\nchecking if x86_64-linux-gnu-gcc PIC flag -fPIC -DPIC works... yes\r\nchecking if x86_64-linux-gnu-gcc static flag -static works... yes\r\nchecking if x86_64-linux-gnu-gcc supports -c -o file.o... yes\r\nchecking if x86_64-linux-gnu-gcc supports -c -o file.o... (cached) yes\r\nchecking whether the x86_64-linux-gnu-gcc linker (/gnu/store/fzwlmgg54z0iqkhvs74v60zfx64x62gr-gcc-cross-x86_64-linux-gnu-8.4.0/libexec/gcc/x86_64-linux-gnu/ld -m elf_x86_64) supports shared libraries... yes\r\nchecking dynamic linker characteristics... GNU/Linux ld.so\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking whether stripping libraries is possible... yes\r\nchecking if libtool supports shared libraries... yes\r\nchecking whether to build shared libraries... no\r\nchecking whether to build static libraries... yes\r\nchecking whether make supports nested variables... (cached) yes\r\nchecking for x86_64-linux-gnu-pkg-config... /root/.guix-profile/bin/pkg-config --static\r\nchecking pkg-config is at least version 0.9.0... yes\r\nchecking for x86_64-linux-gnu-ar... /root/.guix-profile/bin/x86_64-linux-gnu-ar\r\nchecking for x86_64-linux-gnu-ranlib... /root/.guix-profile/bin/x86_64-linux-gnu-ranlib\r\nchecking for x86_64-linux-gnu-strip... /root/.guix-profile/bin/x86_64-linux-gnu-strip\r\nchecking for x86_64-linux-gnu-gcc option to accept ISO C89... (cached) none needed\r\nchecking dependency style of x86_64-linux-gnu-gcc... none\r\nchecking if x86_64-linux-gnu-gcc supports -std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-unused-function -Wno-long-long -Wno-overlength-strings... yes\r\nchecking if x86_64-linux-gnu-gcc supports -Wconditional-uninitialized... no\r\nchecking if x86_64-linux-gnu-gcc supports -fvisibility=hidden... yes\r\nchecking valgrind/memcheck.h usability... no\r\nchecking valgrind/memcheck.h presence... no\r\nchecking for valgrind/memcheck.h... no\r\nchecking for x86_64 assembly availability... yes\r\nchecking for libcrypto... no\r\nchecking openssl/crypto.h usability... no\r\nchecking openssl/crypto.h presence... no\r\nchecking for openssl/crypto.h... no\r\nchecking for gcc... gcc\r\nchecking whether we are using the GNU C compiler... (cached) yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... (cached) none needed\r\nchecking whether gcc understands -c and -o together... (cached) yes\r\nchecking dependency style of gcc... (cached) none\r\nchecking how to run the C preprocessor... gcc -E\r\nchecking if native gcc supports -Wall -Wextra -Wno-unused-function... yes\r\nchecking for working native compiler: gcc... yes\r\nconfigure: ******\r\nconfigure: WARNING: experimental build\r\nconfigure: Experimental features do not have stable APIs or properties, and may not be safe for production use.\r\nconfigure: Building extrakeys module: yes\r\nconfigure: Building schnorrsig module: yes\r\nconfigure: ******\r\nchecking that generated files are newer than configure... done\r\nconfigure: creating ./config.status\r\nconfig.status: creating Makefile\r\nconfig.status: creating libsecp256k1.pc\r\nconfig.status: creating src/libsecp256k1-config.h\r\nconfig.status: executing depfiles commands\r\nconfig.status: executing libtool commands\r\n\r\nBuild Options:\r\n  with ecmult precomp     = yes\r\n  with external callbacks = no\r\n  with benchmarks         = no\r\n  with tests              = yes\r\n  with openssl tests      = no\r\n  with coverage           = no\r\n  module ecdh             = no\r\n  module recovery         = yes\r\n  module extrakeys        = yes\r\n  module schnorrsig       = yes\r\n\r\n  asm                     = x86_64\r\n  ecmult window size      = 15\r\n  ecmult gen prec. bits   = 4\r\n\r\n  valgrind                = no\r\n  CC                      = x86_64-linux-gnu-gcc\r\n  CFLAGS                  = -O2 -fvisibility=hidden -std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-unused-function -Wno-long-long -Wno-overlength-strings -W -pipe -O2 -O2 -g -ffile-prefix-map=/bitcoin=.\r\n  CPPFLAGS                =  -I/bitcoin/depends/x86_64-linux-gnu/include/ \r\n  LDFLAGS                 = -L/bitcoin/depends/x86_64-linux-gnu/lib -Wl,--as-needed -Wl,--dynamic-linker=/lib64/ld-linux-x86-64.so.2 -static-libstdc++ -Wl,-O2\r\n\r\n  CC_FOR_BUILD            = gcc\r\n  CFLAGS_FOR_BUILD        = -Wall -Wextra -Wno-unused-function -g -O2\r\n  CPPFLAGS_FOR_BUILD      = \r\n  LDFLAGS_FOR_BUILD       = \r\n\r\n# <snip>\r\n\r\nmake[3]: Entering directory '/distsrc-base/distsrc-d8f1e1327f9c-x86_64-linux-gnu/src/secp256k1'\r\ngcc -I. -I./src -Wall -Wextra -Wno-unused-function -g -O2 -c src/gen_context.c -o gen_context.o\r\n  CXX      bitcoin_cli-bitcoin-cli.o\r\nIn file included from src/field_5x52_impl.h:19:0,\r\n                 from src/field_impl.h:17,\r\n                 from src/gen_context.c:19:\r\nsrc/field_5x52_asm_impl.h: In function 'secp256k1_fe_mul_inner':\r\nsrc/field_5x52_asm_impl.h:28:1: error: unknown register name '%rdx' in 'asm'\r\n __asm__ __volatile__(\r\n ^~~~~~~\r\nsrc/field_5x52_asm_impl.h:28:1: error: unknown register name '%rcx' in 'asm'\r\nsrc/field_5x52_asm_impl.h:28:1: error: unknown register name '%rax' in 'asm'\r\nsrc/field_5x52_asm_impl.h:28:1: error: output number 0 not directly addressable\r\nsrc/field_5x52_asm_impl.h:28:1: warning: asm operand 6 probably doesn't match constraints\r\nsrc/field_5x52_asm_impl.h: In function 'secp256k1_fe_sqr_inner':\r\nsrc/field_5x52_asm_impl.h:298:1: error: unknown register name '%rdx' in 'asm'\r\n __asm__ __volatile__(\r\n ^~~~~~~\r\n\r\n# <snip>\r\n\r\nsrc/field_5x52_asm_impl.h:28:1: error: unknown register name '%rcx' in 'asm'\r\nsrc/field_5x52_asm_impl.h:28:1: error: unknown register name '%rax' in 'asm'\r\nsrc/field_5x52_asm_impl.h:28:1: error: output number 0 not directly addressable\r\nsrc/field_5x52_asm_impl.h:28:1: warning: asm operand 6 probably doesn't match constraints\r\nmake[3]: *** [Makefile:1775: gen_context.o] Error 1\r\nmake[3]: Leaving directory '/distsrc-base/distsrc-d8f1e1327f9c-x86_64-linux-gnu/src/secp256k1'\r\nmake[2]: *** [Makefile:17987: secp256k1/libsecp256k1.la] Error 2\r\nmake[2]: *** Waiting for unfinished jobs....\r\n  CXX      lib/libunivalue_la-univalue_write.lo\r\n  CXXLD    libunivalue.la\r\nx86_64-linux-gnu-ar: `u' modifier ignored since `D' is the default (see `U')\r\nmake[3]: Leaving directory '/distsrc-base/distsrc-d8f1e1327f9c-x86_64-linux-gnu/src/univalue'\r\nmake[2]: Leaving directory '/distsrc-base/distsrc-d8f1e1327f9c-x86_64-linux-gnu/src'\r\nmake[1]: *** [Makefile:16160: all-recursive] Error 1\r\nmake[1]: Leaving directory '/distsrc-base/distsrc-d8f1e1327f9c-x86_64-linux-gnu/src'\r\nmake: *** [Makefile:820: all-recursive] Error 1\r\n```\r\n\r\nBuilding libsecp256k1 directly in the Alpine container works as expected, and building when running a `guix environment`, and installing the needed packages (`autoconf automake gcc libtool make pkg-config `) also seems to work ok. So I'm assuming the failure here is due to something we are doing in our Guix environment. \r\n\r\nAdditional build output [here](https://gist.github.com/fanquake/7bafe06adaf00a719c6c28c17d12a61f).\r\n\r\n@real-or-random @jonasnick you might be interested  here.",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 6,
          "closed_at": "2021-08-03T05:15:58Z",
          "created_at": "2021-07-14T05:55:50Z",
          "updated_at": "2022-08-18T18:36:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 706046503,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA2MDQ2NTAz",
      "url": null,
      "actor": null,
      "commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-706046503",
      "submitted_at": "2021-07-14T09:20:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "reviewed",
      "id": 711405234,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzExNDA1MjM0",
      "url": null,
      "actor": null,
      "commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-711405234",
      "submitted_at": "2021-07-21T08:42:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "reviewed",
      "id": 714266105,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjY2MTA1",
      "url": null,
      "actor": null,
      "commit_id": "d58d75ff3dab5113dbe4d5e615e28b72aa9110be",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-714266105",
      "submitted_at": "2021-07-24T23:55:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5075765065,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTA3NTc2NTA2NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5075765065",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-27T17:42:10Z"
    },
    {
      "event": "commented",
      "id": 888425622,
      "node_id": "IC_kwDOAP4Jqs409EyW",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/888425622",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-28T15:56:28Z",
      "updated_at": "2021-07-28T15:56:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK 8e9f75a5888a8ec549fe9026053051c3db7a1282",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-888425622",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "reviewed",
      "id": 725665834,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI1NjY1ODM0",
      "url": null,
      "actor": null,
      "commit_id": "8e9f75a5888a8ec549fe9026053051c3db7a1282",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-725665834",
      "submitted_at": "2021-08-09T18:04:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5132044608,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEzMjA0NDYwOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5132044608",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T21:01:13Z"
    },
    {
      "event": "commented",
      "id": 896095274,
      "node_id": "IC_kwDOAP4Jqs41aVQq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/896095274",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T14:50:03Z",
      "updated_at": "2021-08-10T15:08:11Z",
      "author_association": "MEMBER",
      "body": "Concept and code review ACK 8e9f75a5888a8ec549fe9026053051c3db7a1282\r\nEmbedding the read-only data is useful on embedded systems which have plenty of ROM/FLASH but limited RAM.\r\n\r\nNit: please put an empty line between the commit title and body, this makes it possible for tools that provide one-line summaries (like `git log --pretty=oneline`) to only show the title.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-896095274",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5136516806,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEzNjUxNjgwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5136516806",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T16:51:32Z"
    },
    {
      "event": "commented",
      "id": 896147117,
      "node_id": "IC_kwDOAP4Jqs41ah6t",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/896147117",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T16:52:30Z",
      "updated_at": "2021-08-10T16:52:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reworded the commit messages.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-896147117",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "commented",
      "id": 896153798,
      "node_id": "IC_kwDOAP4Jqs41ajjG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/896153798",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T17:00:51Z",
      "updated_at": "2021-08-10T17:00:51Z",
      "author_association": "MEMBER",
      "body": "Thanks!\r\nre-ACK f4d79009bff8db0d1e53178b39072e504ec49156",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-896153798",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "reviewed",
      "id": 729654407,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI5NjU0NDA3",
      "url": null,
      "actor": null,
      "commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I didn't have trouble to build (and run the tests) with window size 22 on my laptop with 32 GB of memory. It looked like it never used more than 20GB. So concept ACK. For posteriority (and this should probably be documented somewhere):\r\n```\r\nrm src/ecmult_static_pre_g.h\r\n./configure --with-ecmult-window=22\r\nmake gen_ecmult_static_pre_g\r\n./gen_ecmult_static_pre_g\r\n# ecmult_static_pre_g.h is 294 MB\r\nmake -j 1 # make sure to use one job because otherwise it uses even more memory\r\n```",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-729654407",
      "submitted_at": "2021-08-13T14:36:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "commented",
      "id": 898639943,
      "node_id": "IC_kwDOAP4Jqs41kChH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/898639943",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-13T18:18:51Z",
      "updated_at": "2021-08-13T18:18:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonasnick In principle we ought to be able to support upto a window size of 24 if you want to try that as well.",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-898639943",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "mentioned",
      "id": 5157122303,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1NzEyMjMwMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5157122303",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-13T18:18:51Z"
    },
    {
      "event": "subscribed",
      "id": 5157122305,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTcxMjIzMDU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5157122305",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-13T18:18:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5157700546,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE1NzcwMDU0Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5157700546",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-13T21:11:49Z"
    },
    {
      "event": "reviewed",
      "id": 730126477,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwMTI2NDc3",
      "url": null,
      "actor": null,
      "commit_id": "47f6185d622fa77a6dd6420aa667213f8d8b38f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 47f6185d622fa77a6dd6420aa667213f8d8b38f2\r\n\r\nI tested with various ecmult_windows sizes.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-730126477",
      "submitted_at": "2021-08-14T18:55:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "commented",
      "id": 898972570,
      "node_id": "IC_kwDOAP4Jqs41lTua",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/898972570",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-14T23:58:53Z",
      "updated_at": "2021-08-14T23:58:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell You want to try building with the table size set to 24?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-898972570",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "mentioned",
      "id": 5159189840,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1OTE4OTg0MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5159189840",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-14T23:58:54Z"
    },
    {
      "event": "subscribed",
      "id": 5159189841,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTkxODk4NDE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5159189841",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-14T23:58:54Z"
    },
    {
      "event": "reviewed",
      "id": 731122407,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMxMTIyNDA3",
      "url": null,
      "actor": null,
      "commit_id": "47f6185d622fa77a6dd6420aa667213f8d8b38f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-731122407",
      "submitted_at": "2021-08-16T22:09:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5169498876,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE2OTQ5ODg3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5169498876",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T14:52:25Z"
    },
    {
      "event": "reviewed",
      "id": 732260232,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMyMjYwMjMy",
      "url": null,
      "actor": null,
      "commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#pullrequestreview-732260232",
      "submitted_at": "2021-08-17T21:57:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
    },
    {
      "event": "commented",
      "id": 900671241,
      "node_id": "IC_kwDOAP4Jqs41rycJ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/900671241",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T22:24:03Z",
      "updated_at": "2021-08-17T22:24:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "FWIW, I believe @gmaxwell successfully built with window size 24.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-900671241",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "mentioned",
      "id": 5171560945,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE3MTU2MDk0NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5171560945",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T22:24:03Z"
    },
    {
      "event": "subscribed",
      "id": 5171560948,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNzE1NjA5NDg=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5171560948",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T22:24:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5177175899,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE3NzE3NTg5OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5177175899",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-18T21:09:35Z"
    },
    {
      "event": "commented",
      "id": 902733050,
      "node_id": "IC_kwDOAP4Jqs41zpz6",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/902733050",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-20T14:29:36Z",
      "updated_at": "2021-08-20T14:29:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "A trivial rebase on master should fix the CI hiccups.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-902733050",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OGRlMmQ4NmEwNmYwMTRiNjUwY2Q4MWQ4OWEzNzBkMjMyNmM0ZWQ3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8de2d86a06f014b650cd81d89a370d2326c4ed71",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8de2d86a06f014b650cd81d89a370d2326c4ed71",
      "tree": {
        "sha": "765ae916437d04bbec03d25565d355ceef489a10",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/765ae916437d04bbec03d25565d355ceef489a10"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d7ec49a6893751f068275cc8ddf4993ef7f31756",
          "sha": "d7ec49a6893751f068275cc8ddf4993ef7f31756",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d7ec49a6893751f068275cc8ddf4993ef7f31756"
        }
      ],
      "message": "Bump memory limits in advance of making the ecmult context static.",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-08-20T15:11:26Z"
      },
      "author": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-07-06T17:41:21Z"
      },
      "sha": "8de2d86a06f014b650cd81d89a370d2326c4ed71"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MTZhM2NjMDdlODQ1MGJjM2I2OGIxOTI0MGYxYzcyOWU2NzdhMDFjOQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/16a3cc07e8450bc3b68b19240f1c729e677a01c9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/16a3cc07e8450bc3b68b19240f1c729e677a01c9",
      "tree": {
        "sha": "85cf610927b283c4d8a5c5005bbe91401695dc55",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/85cf610927b283c4d8a5c5005bbe91401695dc55"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8de2d86a06f014b650cd81d89a370d2326c4ed71",
          "sha": "8de2d86a06f014b650cd81d89a370d2326c4ed71",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8de2d86a06f014b650cd81d89a370d2326c4ed71"
        }
      ],
      "message": "Generate ecmult_static_pre_g.h\n\nThis header contains a static array that replaces the ecmult_context pre_g and pre_g_128 tables.\nThe gen_ecmult_static_pre_g program generates this header file.",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-08-20T15:11:26Z"
      },
      "author": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-06-28T20:33:03Z"
      },
      "sha": "16a3cc07e8450bc3b68b19240f1c729e677a01c9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZjIwZGNiYmFkMWI4OGI1NjM1Y2UwOTYyNTdjNDA4NDliMWQwMmYzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f20dcbbad1b88b5635ce096257c40849b1d02f32",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f20dcbbad1b88b5635ce096257c40849b1d02f32",
      "tree": {
        "sha": "6be2a393ca589768e3b1bba02bbd34bccaefdd3b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6be2a393ca589768e3b1bba02bbd34bccaefdd3b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/16a3cc07e8450bc3b68b19240f1c729e677a01c9",
          "sha": "16a3cc07e8450bc3b68b19240f1c729e677a01c9",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/16a3cc07e8450bc3b68b19240f1c729e677a01c9"
        }
      ],
      "message": "Correct typo.",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-08-20T15:11:26Z"
      },
      "author": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-08-17T14:47:10Z"
      },
      "sha": "f20dcbbad1b88b5635ce096257c40849b1d02f32"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NjgxNTc2MWNmNTUwMGYxYTYxOTk2NWM1YjRiYmM4OTE4YjMzNGEzNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6815761cf5500f1a619965c5b4bbc8918b334a35",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6815761cf5500f1a619965c5b4bbc8918b334a35",
      "tree": {
        "sha": "04041195f0b90a51478564571b7cff5c075219fd",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/04041195f0b90a51478564571b7cff5c075219fd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f20dcbbad1b88b5635ce096257c40849b1d02f32",
          "sha": "f20dcbbad1b88b5635ce096257c40849b1d02f32",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f20dcbbad1b88b5635ce096257c40849b1d02f32"
        }
      ],
      "message": "Remove ecmult_context.\n\nThese tables stored in this context are now statically available from the generated ecmult_static_pre_g.h file.",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-08-20T15:11:26Z"
      },
      "author": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-06-25T22:46:11Z"
      },
      "sha": "6815761cf5500f1a619965c5b4bbc8918b334a35"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MjBhYmQ1MmMyZTEwN2U3OTM5MWExOWQyZDJmODg0NWU4Mzg1OGRlYQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/20abd52c2e107e79391a19d2d2f8845e83858dea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/20abd52c2e107e79391a19d2d2f8845e83858dea",
      "tree": {
        "sha": "a0b85b2beb18c8a9a75d10d37a5ca66899d59224",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a0b85b2beb18c8a9a75d10d37a5ca66899d59224"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6815761cf5500f1a619965c5b4bbc8918b334a35",
          "sha": "6815761cf5500f1a619965c5b4bbc8918b334a35",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6815761cf5500f1a619965c5b4bbc8918b334a35"
        }
      ],
      "message": "Add tests for pre_g tables.\n\nWe check that the static table entries are all correct.",
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-08-20T15:11:26Z"
      },
      "author": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-06-26T22:32:29Z"
      },
      "sha": "20abd52c2e107e79391a19d2d2f8845e83858dea"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5187389901,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE4NzM4OTkwMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5187389901",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-20T15:15:32Z"
    },
    {
      "event": "commented",
      "id": 905535638,
      "node_id": "IC_kwDOAP4Jqs41-WCW",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/905535638",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T14:10:51Z",
      "updated_at": "2021-08-25T14:10:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 20abd52c2e107e79391a19d2d2f8845e83858dea code inspection and tested some parameters",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-905535638",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T14:48:33Z",
      "updated_at": "2021-08-25T14:48:33Z",
      "source": {
        "issue": {
          "id": 521227598,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5NjQ3NzA5",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/693",
          "number": 693,
          "state": "closed",
          "state_reason": null,
          "title": "Signed-digit multi-comb for ecmult_gen (by peterdettman)",
          "body": "This is a rebase of #546. See the original PR for a full description, but in short, this introduces a new constant-time multiplication algorithm with precomputation, with better speed/size tradeoffs. It is more flexible, allowing both better speeds with the same table size, or smaller table sizes for the same speed. It permits extrmely small tables with still reasonable speeds.\r\n\r\nIn addition to the original PR, this also:\r\n* Removes the old ecmult algorithm entirely\r\n* Makes the tunables configurable through `configure`, and tests a few combinations in Travis.\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 58,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/693",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/693",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/693.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/693.patch"
          },
          "closed_at": "2021-12-29T20:54:56Z",
          "created_at": "2019-11-11T22:41:47Z",
          "updated_at": "2021-12-29T21:00:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 905778639,
      "node_id": "IC_kwDOAP4Jqs41_RXP",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/905778639",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T18:36:50Z",
      "updated_at": "2021-08-25T18:37:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK 20abd52c2e107e79391a19d2d2f8845e83858dea (reviewed diff with earlier reviewed commit 8e9f75a5888a8ec549fe9026053051c3db7a1282)",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-905778639",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "merged",
      "id": 5208776825,
      "node_id": "MDExOk1lcmdlZEV2ZW50NTIwODc3NjgyNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5208776825",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9a5a87e0f1276e0284446af1172056ea4693737f",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/9a5a87e0f1276e0284446af1172056ea4693737f",
      "created_at": "2021-08-25T18:58:03Z"
    },
    {
      "event": "closed",
      "id": 5208776842,
      "node_id": "MDExOkNsb3NlZEV2ZW50NTIwODc3Njg0Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5208776842",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T18:58:03Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 5209010827,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ1MjA5MDEwODI3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5209010827",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T19:52:27Z"
    },
    {
      "event": "commented",
      "id": 906288229,
      "node_id": "IC_kwDOAP4Jqs42BNxl",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/906288229",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-26T10:34:45Z",
      "updated_at": "2021-08-26T10:34:45Z",
      "author_association": "MEMBER",
      "body": "Post-merge re-ACK 20abd52c2e107e79391a19d2d2f8845e83858dea",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#issuecomment-906288229",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/956"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-15T19:49:16Z",
      "updated_at": "2021-09-15T19:49:16Z",
      "source": {
        "issue": {
          "id": 997451345,
          "node_id": "PR_kwDOAjZbZs4rzS1b",
          "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/144",
          "repository_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp",
          "labels_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/144/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/144/comments",
          "events_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/144/events",
          "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/144",
          "number": 144,
          "state": "closed",
          "state_reason": null,
          "title": "Upstream PRs 969, 956, 783, 976",
          "body": "[bitcoin-core/secp256k1#969]: ci: Fixes after Debian release\r\n[bitcoin-core/secp256k1#956]: Replace ecmult_context with a generated static array.\r\n[bitcoin-core/secp256k1#783]: Make the public API docs more consistent and explicit\r\n[bitcoin-core/secp256k1#976]: `secp256k1_schnorrsig_sign_internal` should be static\r\n\r\nThis PR can be recreated  with `./sync-upstream.sh range 2a3a97c665475bc00d5d60f2f04830202983a631`.",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/pulls/144",
            "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/144",
            "diff_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/144.diff",
            "patch_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/144.patch"
          },
          "closed_at": "2021-10-15T13:20:46Z",
          "created_at": "2021-09-15T19:49:16Z",
          "updated_at": "2022-01-04T09:50:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5378999453,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFAnQSd",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5378999453",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ff458a7b78fccd7455c1c78e875f42f6118f7d82",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/ff458a7b78fccd7455c1c78e875f42f6118f7d82",
      "created_at": "2021-09-29T08:31:05Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-08T13:37:31Z",
      "updated_at": "2021-10-08T13:37:31Z",
      "source": {
        "issue": {
          "id": 1021107982,
          "node_id": "PR_kwDOAP4Jqs4s8eHX",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/988",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/988/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/988/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/988/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/988",
          "number": 988,
          "state": "closed",
          "state_reason": null,
          "title": "Make signing table fully static",
          "body": "This resolves #893,  resolves #692 (and also resolves bitcoin/bitcoin#22854).\r\n\r\n- [x] Extract table generation to separate function in separate file (to be used by generation script and exhaustive tests)\r\n- [x] Tidy up \r\n  - [x] Remove code that deals with non-static tables\r\n  - [x] Make functions that need ecmult_gen not depend on signing context\r\n  - [x] Rename stuff to make it fit the new structure and consistent with how we hande verification tables (#956)\r\n- [x] Fix exhaustive tests\r\n  - [x] Make table generation function take generator as input\r\n  - [x] Overwrite the static tables with a table with custom generator in exhaustive tests\r\n- [x] Overhaul script that generates table files\r\n  - [x] Make table generation function take PREC_BITS as input (I have some code already, just not yet in this branch) \r\n  - [x] Change generation script to generate three tables (for all three values of ECMULT_GEN_PREC_BITS) \r\n- [x] Ship pre-built tables\r\n  - [x] Add pregenerated table file to repo\r\n  - [x] Remove generation of table file from build process (like in #956)\r\n  - [x] Remove left-over stuff (e.g., detecting a compiler running on the build machine) from build system\r\n- [x] Final cleanups (copyright headers, commit, messages, etc.)\r\n- [ ] (separate PR:) Make sure link-time optimization remove corresponding static tables (and code) when no signing/verifcation function is called\r\n- [ ] (separate PR:) Compile precomputation as a separate object file and link it (https://github.com/bitcoin-core/secp256k1/pull/988#issuecomment-977813538)\r\n- [ ] (separate PR:) Document the backwards-compatible API changes made in this PR and in #956. \r\n  - [ ] Maybe deprecate the static context\r\n",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/988",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/988",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/988.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/988.patch"
          },
          "closed_at": "2021-12-15T10:07:02Z",
          "created_at": "2021-10-08T13:37:31Z",
          "updated_at": "2021-12-15T10:07:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5469806822,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFGBqDm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5469806822",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7812feb89646f4d36641c58a593294ddc924a25f",
      "commit_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/commits/7812feb89646f4d36641c58a593294ddc924a25f",
      "created_at": "2021-10-15T13:20:46Z"
    },
    {
      "event": "referenced",
      "id": 5488839841,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFHKQyh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5488839841",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f5cd5e8937b34e5de0147b959afbc2dc99b049e",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/8f5cd5e8937b34e5de0147b959afbc2dc99b049e",
      "created_at": "2021-10-20T02:11:10Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-20T03:06:49Z",
      "updated_at": "2021-10-20T03:06:49Z",
      "source": {
        "issue": {
          "id": 1030906235,
          "node_id": "PR_kwDOABII584tahAa",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23314",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23314/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23314/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23314/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23314",
          "number": 23314,
          "state": "closed",
          "state_reason": null,
          "title": "build: explicitly disable libsecp256k1 openssl based tests",
          "body": "These tests are failing when run against OpenSSL 3, and have been\r\nremoved upstream, bitcoin-core/secp256k1#983, so\r\ndisabled them for now to avoid `make check` failures.\r\n\r\nNote that this will also remove warning output from our build, due to\r\nthe use of deprecated OpenSSL API functions. See bitcoin#23048.",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 159815356,
              "node_id": "MDU6TGFiZWwxNTk4MTUzNTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Upstream",
              "name": "Upstream",
              "color": "bfd4f2",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23314",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23314",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23314.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23314.patch"
          },
          "closed_at": "2021-10-20T14:33:18Z",
          "created_at": "2021-10-20T02:20:31Z",
          "updated_at": "2022-10-30T19:07:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5535808468,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFJ9bvU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5535808468",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f727914d7ebeb80df7fb5e9e77813c92fe6307a4",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/f727914d7ebeb80df7fb5e9e77813c92fe6307a4",
      "created_at": "2021-10-28T17:52:25Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T18:03:18Z",
      "updated_at": "2021-10-28T18:03:18Z",
      "source": {
        "issue": {
          "id": 1038792074,
          "node_id": "PR_kwDOABII584tz6gz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23383",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23383/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23383/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23383/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23383",
          "number": 23383,
          "state": "closed",
          "state_reason": null,
          "title": "Update libsecp256k1 subtree to current master",
          "body": "The motivation for this bump is getting rid of a cast in `CKey::SignSchnorr`; the `aux_rand` argument isn't modified by the `secp256k1_schnorrsig_sign` function, but was marked as non-`const` anyway. This is fixed now (bitcoin-core/secp256k1#966), and the cast is removed in this PR.\r\n\r\nThere are a few other relevant changes:\r\n* (bitcoin-core/secp256k1#956): replaces a runtime-computed table with a precomputed one; this adds arouns 1 MiB to the binary size, but is a step towards significantly simplifying the API. If 1 MiB is too much, it can be reduced by 2 or 4 (or more) for a slight verification performance reduction.\r\n* (bitcoin-core/secp256k1#983): removes (test/bench only) OpenSSL support entirely, removing the need to pass `--disable-openssl-tests` (see #23314).\r\n* (bitcoin-core/secp256k1#810): mild performance increase for 64-bit non-x86 platforms.\r\n* (bitcoin-core/secp256k1#1002): Make aux_rnd32==NULL behave identical to 0x0000..00 (which impacts BIP341/BIP342 signing in Bitcoin Core, making it more strictly BIP340 compliant, though not in a manner that affects security).",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 159815356,
              "node_id": "MDU6TGFiZWwxNTk4MTUzNTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Upstream",
              "name": "Upstream",
              "color": "bfd4f2",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23383",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23383",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23383.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23383.patch"
          },
          "closed_at": "2021-12-18T06:48:33Z",
          "created_at": "2021-10-28T18:03:17Z",
          "updated_at": "2022-12-18T10:03:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5545480076,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFKiU-M",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5545480076",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "440f7ec80eff1f4f5b2139d66b89cc6f33053c80",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/440f7ec80eff1f4f5b2139d66b89cc6f33053c80",
      "created_at": "2021-10-31T17:07:47Z"
    },
    {
      "event": "referenced",
      "id": 5558415348,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFLTq_0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5558415348",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "395e1155b960ab72b68a71e9316a966a134c237e",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin/commits/395e1155b960ab72b68a71e9316a966a134c237e",
      "created_at": "2021-11-02T21:45:56Z"
    },
    {
      "event": "referenced",
      "id": 5558444052,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFLTyAU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5558444052",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "184e1fac177a4af7284df283cd75a8a4da17161d",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin/commits/184e1fac177a4af7284df283cd75a8a4da17161d",
      "created_at": "2021-11-02T21:54:11Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-26T08:47:32Z",
      "updated_at": "2021-11-26T08:47:32Z",
      "source": {
        "issue": {
          "id": 1063918098,
          "node_id": "I_kwDOAVzY0c4_ahoS",
          "url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/343",
          "repository_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1",
          "labels_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/343/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/343/comments",
          "events_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/343/events",
          "html_url": "https://github.com/rust-bitcoin/rust-secp256k1/issues/343",
          "number": 343,
          "state": "open",
          "state_reason": null,
          "title": "Reducing context arguments in taproot-related functions",
          "body": "Introduction of Taproot in rust-bitcoin has polluted a lot of existing APIs with a need to provide Secp context objects all around, mostly because of key tweaking. Upstream to rust-bitcoin it becomes even more painful; everything gets contaminated with these context generic parameters.\n\nI am willing to work on a PR here to get rid of these context parameters wherever possible - first for all key tweaking functions and xonlypubley from seckey generation. But I do not understand the logic where we need verify, sign or static context. Where I get get an insight on this matter?",
          "user": {
            "login": "dr-orlovsky",
            "id": 372034,
            "node_id": "MDQ6VXNlcjM3MjAzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dr-orlovsky",
            "html_url": "https://github.com/dr-orlovsky",
            "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
            "following_url": "https://api.github.com/users/dr-orlovsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dr-orlovsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dr-orlovsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
            "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
            "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
            "events_url": "https://api.github.com/users/dr-orlovsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 10,
          "created_at": "2021-11-25T21:03:50Z",
          "updated_at": "2022-01-13T18:17:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5707466545,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFUMQcx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5707466545",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d057eae556f5487b3ac21a524b87ab6b87aab368",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/d057eae556f5487b3ac21a524b87ab6b87aab368",
      "created_at": "2021-12-02T17:35:37Z"
    },
    {
      "event": "referenced",
      "id": 5710565913,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFUYFIZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5710565913",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c4a1e09a8c91f8e124e6559b1e9514fc153e8231",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/c4a1e09a8c91f8e124e6559b1e9514fc153e8231",
      "created_at": "2021-12-03T08:17:38Z"
    },
    {
      "event": "referenced",
      "id": 5770177192,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFX7eqo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5770177192",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0559fc6e41b65af6e52c32eb9b1286494412a162",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/0559fc6e41b65af6e52c32eb9b1286494412a162",
      "created_at": "2021-12-15T10:07:02Z"
    },
    {
      "event": "referenced",
      "id": 5771735191,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFYBbCX",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5771735191",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "86dbc4d075decb82fbba837aaa283cf0561897ad",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/86dbc4d075decb82fbba837aaa283cf0561897ad",
      "created_at": "2021-12-15T14:26:27Z"
    },
    {
      "event": "referenced",
      "id": 5787727585,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAFY-bbh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5787727585",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c06cda3e48e9826043ebc5790a7bb505bfbf368c",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/c06cda3e48e9826043ebc5790a7bb505bfbf368c",
      "created_at": "2021-12-18T06:48:09Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-18T21:17:03Z",
      "updated_at": "2021-12-18T21:17:03Z",
      "source": {
        "issue": {
          "id": 1083566278,
          "node_id": "PR_kwDOAP4Jqs4wBP-_",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1042",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1042/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1042/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1042/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1042",
          "number": 1042,
          "state": "closed",
          "state_reason": null,
          "title": "Follow-ups to making all tables fully static",
          "body": "This PR implements a number of changes to follow up after merging #988:\r\n\r\n* Naming consistency:\r\n  * All precomputed table files now have name `precomputed_*.*`\r\n  * All source files related to the creation of the precomputed table files have name `precompute_*.*`.\r\n  * All source files related to the computation of tables (whether they go in precomputed files or not) have name `*_compute_table.*`.\r\n* Make the tables for exhaustive tests be computed at runtime rather than compile time (this was already the case for ecmult_gen, but not ecmult). This is a preparation for the next point, as the alternative would be to have separate precomputed libraries for the exhaustive tests and other binaries.\r\n* Moves the actual tables to separate `precomputed_*.c` files, which are compiled only once as part of a new `libsecp256k1_precomputed.la`, included where relevant. The corresponding `precomputed_*.h` file are normal source files.\r\n\r\nRetry of #1041.\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1042",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1042",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1042.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1042.patch"
          },
          "closed_at": "2021-12-20T10:44:07Z",
          "created_at": "2021-12-17T19:42:23Z",
          "updated_at": "2023-03-26T04:49:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-26T14:16:31Z",
      "updated_at": "2021-12-26T14:16:31Z",
      "source": {
        "issue": {
          "id": 474335703,
          "node_id": "MDU6SXNzdWU0NzQzMzU3MDM=",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/653",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/653/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/653/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/653/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/653",
          "number": 653,
          "state": "closed",
          "state_reason": "completed",
          "title": "Suggestions on adding precomputes for verification",
          "body": "Hi there,\r\n\r\nRight now secp256k1 has a `ecmult-static-precomputation` module which allows us to trade space for speed. However the precomputation is only activated in secp256k1_ecmult_gen_context used in signing part. In our case we want to enable the precomputation in secp256k1_ecmult_context used in verification part as well.\r\n\r\nWe do have a patch that is mostly working [here](https://github.com/nervosnetwork/secp256k1/commit/3ffde18a060aaf4df5b81e7d88355f1e99874650), and we are interested in submitting it to upstream. However, the result here, is that a 512KB code size increase(actually 1MB if endomorphism is also enabled). So before wasting everyone's time, we want to first check the best possible way going forward here. Should we put it in a second flag so we can disable it by default and enable it on demand? Or is it good enough to share the same precomputation flag?\r\n\r\nMany thanks!",
          "user": {
            "login": "xxuejie",
            "id": 340446,
            "node_id": "MDQ6VXNlcjM0MDQ0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/340446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xxuejie",
            "html_url": "https://github.com/xxuejie",
            "followers_url": "https://api.github.com/users/xxuejie/followers",
            "following_url": "https://api.github.com/users/xxuejie/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/xxuejie/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/xxuejie/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/xxuejie/subscriptions",
            "organizations_url": "https://api.github.com/users/xxuejie/orgs",
            "repos_url": "https://api.github.com/users/xxuejie/repos",
            "events_url": "https://api.github.com/users/xxuejie/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/xxuejie/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 2,
          "closed_at": "2021-12-26T14:15:50Z",
          "created_at": "2019-07-30T02:13:29Z",
          "updated_at": "2022-01-01T16:14:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-17T18:13:15Z",
      "updated_at": "2022-01-17T18:13:15Z",
      "source": {
        "issue": {
          "id": 1106143605,
          "node_id": "I_kwDOAP4Jqs5B7ml1",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1065",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1065/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1065/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1065/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1065",
          "number": 1065,
          "state": "open",
          "state_reason": null,
          "title": "Further changes after making tables static",
          "body": "More things to improve after #988:\r\n\r\n- [x] Compile precomputation as a separate object file and link it (solved by #1042)\r\n- [x] Speed up `secp256k1_ecmult_gen_context_build` at context creation. It currently computes fixed values which could be made static (open PR: https://github.com/bitcoin-core/secp256k1/pull/1120)\r\n- [ ] Document (or set by default) build options to remove unused static tables (and code) when no signing/verification function is called (something like `--disable-shared CFLAGS=\"-fdata-sections -ffunction-sections -O2 -g\" LDFLAGS=\"-Wl,--gc-sections\"`)\r\n- [x] Document the backwards-compatible API changes made in #988 and in #956: All contexts except the `no_precomp` context are now effectively signing contexts. The `no_precomp` context is effectively a verification context., and name is misleading as no context uses dynamic precompuation now. The reason why `no_precomp` is different is that it's impossible to re-randomize it.\r\n- [x] Decide what to do with the `no_precomp` context: Possibilities include: renaming it, deprecating it (its main user rust-secp256k1 won't like this), and/or promote it a full signing context, maybe with a verbose name such as \"global-context-less-secure\" in the spirit of what rust-secp256k1 is doing.   \r\n   ",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 165020207,
              "node_id": "MDU6TGFiZWwxNjUwMjAyMDc=",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/documentation",
              "name": "documentation",
              "description": "",
              "color": "C5DEF5",
              "default": true
            },
            {
              "id": 4975362431,
              "node_id": "LA_kwDOAP4Jqs8AAAABKI4Bfw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/build",
              "name": "build",
              "description": "",
              "color": "2F66C4",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones/1",
            "html_url": "https://github.com/bitcoin-core/secp256k1/milestone/1",
            "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones/1/labels",
            "id": 1276306,
            "node_id": "MDk6TWlsZXN0b25lMTI3NjMwNg==",
            "number": 1,
            "state": "open",
            "title": "stable release (1.0.0-rc.1)",
            "description": "Motivation: libsecp is already widely used today, but often in a terribly outdated version. It's likely that a release process would help with that. Moreover, it simplifies using libsecp which may prevent developers from using less well tested alternatives. Lastly, without releases it's difficult to update the library in an organized fashion and communicate these updates.\r\n\r\nRelease Goals:\r\n\r\n- Stabilize API and documentation for functionality that exist today.\r\n- Fix a few known bugs.\r\n- Make ECDH non-experimental.\r\n\r\nThis milestone can be discussed in issue https://github.com/bitcoin-core/secp256k1/issues/286.",
            "creator": {
              "login": "gmaxwell",
              "id": 858454,
              "node_id": "MDQ6VXNlcjg1ODQ1NA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/gmaxwell",
              "html_url": "https://github.com/gmaxwell",
              "followers_url": "https://api.github.com/users/gmaxwell/followers",
              "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
              "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
              "repos_url": "https://api.github.com/users/gmaxwell/repos",
              "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 12,
            "closed_issues": 26,
            "created_at": "2015-08-27T18:21:31Z",
            "updated_at": "2023-04-10T15:36:41Z"
          },
          "locked": false,
          "comments": 2,
          "created_at": "2022-01-17T18:13:15Z",
          "updated_at": "2023-03-08T22:27:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 6681498981,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAGOP5Vl",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6681498981",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "35d6112a72ef419af9cb1ee3ffd9e28ad0df04a0",
      "commit_url": "https://api.github.com/repos/gwillen/elements/commits/35d6112a72ef419af9cb1ee3ffd9e28ad0df04a0",
      "created_at": "2022-05-25T22:22:23Z"
    },
    {
      "event": "referenced",
      "id": 6964668825,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAGfIGmZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6964668825",
      "actor": {
        "login": "janus",
        "id": 6726,
        "node_id": "MDQ6VXNlcjY3MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6726?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janus",
        "html_url": "https://github.com/janus",
        "followers_url": "https://api.github.com/users/janus/followers",
        "following_url": "https://api.github.com/users/janus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janus/subscriptions",
        "organizations_url": "https://api.github.com/users/janus/orgs",
        "repos_url": "https://api.github.com/users/janus/repos",
        "events_url": "https://api.github.com/users/janus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "879a9a27b98cba59ddf771ce357d95c8ef9358d3",
      "commit_url": "https://api.github.com/repos/BitgesellOfficial/bitgesell/commits/879a9a27b98cba59ddf771ce357d95c8ef9358d3",
      "created_at": "2022-07-10T06:06:42Z"
    },
    {
      "event": "referenced",
      "id": 7059808472,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAGkzCDY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7059808472",
      "actor": {
        "login": "patricklodder",
        "id": 1410115,
        "node_id": "MDQ6VXNlcjE0MTAxMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1410115?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patricklodder",
        "html_url": "https://github.com/patricklodder",
        "followers_url": "https://api.github.com/users/patricklodder/followers",
        "following_url": "https://api.github.com/users/patricklodder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/patricklodder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/patricklodder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/patricklodder/subscriptions",
        "organizations_url": "https://api.github.com/users/patricklodder/orgs",
        "repos_url": "https://api.github.com/users/patricklodder/repos",
        "events_url": "https://api.github.com/users/patricklodder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/patricklodder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21badcf9d23f51d831a2069a3d61ad320de417ea",
      "commit_url": "https://api.github.com/repos/patricklodder/dogecoin/commits/21badcf9d23f51d831a2069a3d61ad320de417ea",
      "created_at": "2022-07-25T21:21:05Z"
    },
    {
      "event": "referenced",
      "id": 7083242803,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAGmMbUz",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7083242803",
      "actor": {
        "login": "patricklodder",
        "id": 1410115,
        "node_id": "MDQ6VXNlcjE0MTAxMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1410115?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patricklodder",
        "html_url": "https://github.com/patricklodder",
        "followers_url": "https://api.github.com/users/patricklodder/followers",
        "following_url": "https://api.github.com/users/patricklodder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/patricklodder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/patricklodder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/patricklodder/subscriptions",
        "organizations_url": "https://api.github.com/users/patricklodder/orgs",
        "repos_url": "https://api.github.com/users/patricklodder/repos",
        "events_url": "https://api.github.com/users/patricklodder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/patricklodder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "03002a9013ffb5efdccfbae3f3510f4a44c0da20",
      "commit_url": "https://api.github.com/repos/patricklodder/dogecoin/commits/03002a9013ffb5efdccfbae3f3510f4a44c0da20",
      "created_at": "2022-07-28T16:53:47Z"
    },
    {
      "event": "referenced",
      "id": 8252107611,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAHr3Stb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8252107611",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "77186f4a04bd2b9b1e799daeb569b638faa00202",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/77186f4a04bd2b9b1e799daeb569b638faa00202",
      "created_at": "2023-01-18T04:41:23Z"
    },
    {
      "event": "referenced",
      "id": 9068914411,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAIcjKbr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9068914411",
      "actor": {
        "login": "str4d",
        "id": 4993799,
        "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/str4d",
        "html_url": "https://github.com/str4d",
        "followers_url": "https://api.github.com/users/str4d/followers",
        "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
        "organizations_url": "https://api.github.com/users/str4d/orgs",
        "repos_url": "https://api.github.com/users/str4d/repos",
        "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/str4d/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6de4698bf9ac87c6f8d7884e6e60e10ebdef01c9",
      "commit_url": "https://api.github.com/repos/str4d/zcash/commits/6de4698bf9ac87c6f8d7884e6e60e10ebdef01c9",
      "created_at": "2023-04-21T15:40:10Z"
    },
    {
      "event": "referenced",
      "id": 9425177983,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAIxyM1_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9425177983",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "created_at": "2023-06-04T15:42:13Z"
    },
    {
      "event": "referenced",
      "id": 9696153082,
      "node_id": "REFE_lADOAP4Jqs43dwQazwAAAAJB7436",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9696153082",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f03457eede9abfd1d7a0d26abc379a710e16755",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/8f03457eede9abfd1d7a0d26abc379a710e16755",
      "created_at": "2023-07-01T12:32:57Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T12:35:27Z",
      "updated_at": "2023-07-12T12:35:27Z",
      "source": {
        "issue": {
          "id": 1799891341,
          "node_id": "I_kwDOAP4Jqs5rSCmN",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1376",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1376/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1376/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1376/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1376",
          "number": 1376,
          "state": "open",
          "state_reason": null,
          "title": "group: ge(j) should have as invariant that the curve equation holds",
          "body": "I was surprised to see that this may be violated in `secp256k1_eckey_pubkey_parse`:\r\nhttps://github.com/bitcoin-core/secp256k1/blob/cc557575522c4cf11e5bcde1fea9637339cea21f/src/eckey_impl.h#L26-L31\r\n\r\nI claim\r\n - `ge(j)` objects should always represent valid points on the curve. \r\n - This invariant should be checked in VERIFY mode, in `secp256k1_ge(j)_verify` or at least in `secp256k1_ge_set_xy`\r\n - There should be a separate function `secp256k1_ge_try_set_xy` which checks if (x,y) is on the curve, and only if yes, returns 1 and outputs a `ge`. That function can be used to implement `secp256k1_eckey_pubkey_parse`.\r\n - `secp256k1_ge_is_valid_var` should be removed (or repurposed to `secp256k1_ge_verify_on_curve_var` without return value, as mentioned above). ",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 165017692,
              "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
              "name": "assurance",
              "description": "",
              "color": "A6DF3D",
              "default": false
            },
            {
              "id": 5492448291,
              "node_id": "LA_kwDOAP4Jqs8AAAABR2AcIw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/refactor/smell",
              "name": "refactor/smell",
              "description": "",
              "color": "FBCA04",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "created_at": "2023-07-11T23:12:37Z",
          "updated_at": "2023-07-12T12:35:27Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/662305352",
      "pull_request_review_id": 697266791,
      "id": 662305352,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjMwNTM1Mg==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 7,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ECMULT_WINDOW_SIZE",
      "created_at": "2021-07-01T13:47:48Z",
      "updated_at": "2021-07-01T16:31:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r662305352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/662305352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/662517344",
      "pull_request_review_id": 697555015,
      "id": 662517344,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjUxNzM0NA==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int withConditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (withConditionals) {\n+            fprintf(fp,\"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp,\",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (withConditionals) {\n+            fprintf(fp,\"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void printTwoTables(FILE* fp, int window_g, secp256k1_gej * gj, int withConditionals) {\n+    int i;\n+\n+    printTable(fp, \"secp256k1_pre_g\", window_g, gj, withConditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    printTable(fp, \"secp256k1_pre_g_128\", window_g, gj, withConditionals);\n+}\n+\n+int main(int argc, char **argv) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+    (void)argc;\n+    (void)argv;",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 200,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FWIW, `int main(void)` is valid C and simpler",
      "created_at": "2021-07-01T18:43:24Z",
      "updated_at": "2021-07-01T18:59:07Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r662517344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/662517344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": 199,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/662517733",
      "pull_request_review_id": 697555015,
      "id": 662517733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjUxNzczMw==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int withConditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (withConditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 167,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we'd prefer snake_case. :P ",
      "created_at": "2021-07-01T18:44:07Z",
      "updated_at": "2021-07-01T18:59:07Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r662517733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/662517733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663073468",
      "pull_request_review_id": 698270256,
      "id": 663073468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzA3MzQ2OA==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 7,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "in_reply_to_id": 662305352,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-07-02T14:56:44Z",
      "updated_at": "2021-07-02T14:56:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663073468",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663073468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663073589",
      "pull_request_review_id": 698270413,
      "id": 663073589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzA3MzU4OQ==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int withConditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (withConditionals) {\n+            fprintf(fp,\"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp,\",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (withConditionals) {\n+            fprintf(fp,\"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void printTwoTables(FILE* fp, int window_g, secp256k1_gej * gj, int withConditionals) {\n+    int i;\n+\n+    printTable(fp, \"secp256k1_pre_g\", window_g, gj, withConditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    printTable(fp, \"secp256k1_pre_g_128\", window_g, gj, withConditionals);\n+}\n+\n+int main(int argc, char **argv) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+    (void)argc;\n+    (void)argv;",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 200,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "in_reply_to_id": 662517344,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-07-02T14:56:55Z",
      "updated_at": "2021-07-02T14:56:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663073589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663073589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": 199,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663073717",
      "pull_request_review_id": 698270603,
      "id": 663073717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzA3MzcxNw==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int withConditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (withConditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 167,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "aa900435c75d0dabdf1937b3a200d5340031e708",
      "in_reply_to_id": 662517733,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-07-02T14:57:06Z",
      "updated_at": "2021-07-02T14:57:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663073717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663073717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663081385",
      "pull_request_review_id": 698282091,
      "id": 663081385,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzA4MTM4NQ==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 25,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could be better to put this array inside `printTable`, though we would still want to keep it static because we wouldn't want to allocate it on the stack.",
      "created_at": "2021-07-02T15:08:17Z",
      "updated_at": "2021-07-02T15:08:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663081385",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663081385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663082232",
      "pull_request_review_id": 698283153,
      "id": 663082232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzA4MjIzMg==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp,\"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp,\",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp,\"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void printTwoTables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    printTable(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    printTable(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 214,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe break up this string across two lines.",
      "created_at": "2021-07-02T15:09:36Z",
      "updated_at": "2021-07-02T15:09:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663082232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663082232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663084981",
      "pull_request_review_id": 698286702,
      "id": 663084981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzA4NDk4MQ==",
      "diff_hunk": "@@ -3384,6 +3384,72 @@ void run_group_decompress(void) {\n \n /***** ECMULT TESTS *****/\n \n+void test_pre_g_table(const secp256k1_ge_storage * pre_g, size_t n) {\n+    secp256k1_gej g2;\n+    secp256k1_ge p, q, gg;\n+    secp256k1_fe dpx, dpy, dqx, dqy;\n+    size_t i;\n+\n+    CHECK(0 < n);\n+    secp256k1_ge_from_storage(&p, &pre_g[0]);\n+    secp256k1_gej_set_ge(&g2, &p);\n+    secp256k1_gej_double_var(&g2, &g2, NULL);\n+    secp256k1_ge_set_gej_var(&gg, &g2);\n+    secp256k1_fe_verify(&p.x);",
      "path": "src/tests.c",
      "position": 76,
      "original_position": 68,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Move these there verification lines up to immediately after the `ge_from_storage`.",
      "created_at": "2021-07-02T15:13:46Z",
      "updated_at": "2021-07-02T15:13:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663084981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663084981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3438,
      "original_line": 3438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663099512",
      "pull_request_review_id": 698306323,
      "id": 663099512,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzA5OTUxMg==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp,\"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp,\",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp,\"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void printTwoTables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 181,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "here also snake case and also in `printTwoTables`",
      "created_at": "2021-07-02T15:37:04Z",
      "updated_at": "2021-07-02T15:41:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663099512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663099512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663180118",
      "pull_request_review_id": 698413380,
      "id": 663180118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE4MDExOA==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 158,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "snake_case this function.",
      "created_at": "2021-07-02T18:15:11Z",
      "updated_at": "2021-07-02T18:15:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r663180118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/663180118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024039",
      "pull_request_review_id": 699299113,
      "id": 664024039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDAyNDAzOQ==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 158,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": 663180118,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed.",
      "created_at": "2021-07-05T15:52:08Z",
      "updated_at": "2021-07-05T15:52:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664024039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024156",
      "pull_request_review_id": 699299277,
      "id": 664024156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDAyNDE1Ng==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp,\"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp,\",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp,\"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void printTwoTables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 181,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": 663099512,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-07-05T15:52:23Z",
      "updated_at": "2021-07-05T15:52:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664024156",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024283",
      "pull_request_review_id": 699299422,
      "id": 664024283,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDAyNDI4Mw==",
      "diff_hunk": "@@ -3384,6 +3384,72 @@ void run_group_decompress(void) {\n \n /***** ECMULT TESTS *****/\n \n+void test_pre_g_table(const secp256k1_ge_storage * pre_g, size_t n) {\n+    secp256k1_gej g2;\n+    secp256k1_ge p, q, gg;\n+    secp256k1_fe dpx, dpy, dqx, dqy;\n+    size_t i;\n+\n+    CHECK(0 < n);\n+    secp256k1_ge_from_storage(&p, &pre_g[0]);\n+    secp256k1_gej_set_ge(&g2, &p);\n+    secp256k1_gej_double_var(&g2, &g2, NULL);\n+    secp256k1_ge_set_gej_var(&gg, &g2);\n+    secp256k1_fe_verify(&p.x);",
      "path": "src/tests.c",
      "position": 76,
      "original_position": 68,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": 663084981,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed.\r\n",
      "created_at": "2021-07-05T15:52:37Z",
      "updated_at": "2021-07-05T15:52:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664024283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3438,
      "original_line": 3438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024367",
      "pull_request_review_id": 699299527,
      "id": 664024367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDAyNDM2Nw==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                              ? ECMULT_TABLE_SIZE(8)\n+                              : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void printTable(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp,\" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp,\"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp,\",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp,\"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void printTwoTables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    printTable(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    printTable(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 214,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": 663082232,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed.\r\n",
      "created_at": "2021-07-05T15:52:45Z",
      "updated_at": "2021-07-05T15:52:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664024367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024444",
      "pull_request_review_id": 699299630,
      "id": 664024444,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDAyNDQ0NA==",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 25,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "4378cdbd5caa522161d7ab20c0a808b1838cc06a",
      "in_reply_to_id": 663081385,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-07-05T15:52:55Z",
      "updated_at": "2021-07-05T15:52:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664024444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664024444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664345540",
      "pull_request_review_id": 699675438,
      "id": 664345540,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDM0NTU0MA==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    print_table(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 211,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`src/` should be dropped. (At least since #925, we don't want to require that the project root is in the include path. I assume somehow should submit a PR that tests this on CI...)",
      "created_at": "2021-07-06T08:27:23Z",
      "updated_at": "2021-07-06T09:18:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664345540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664345540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664348025",
      "pull_request_review_id": 699675438,
      "id": 664348025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDM0ODAyNQ==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    print_table(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#if defined(EXHAUSTIVE_TEST_ORDER)\\n\");\n+    fprintf(fp, \"#if EXHAUSTIVE_TEST_ORDER == 13\\n\");\n+    fprintf(fp, \"#define WINDOW_G %d\\n\", window_g_13);\n+\n+    secp256k1_gej_set_ge(&gj, &g_13);",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 225,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe do these inside `print_two_tables`. (Less duplication and the line that calls `print_two_tables` will be self-containing.)",
      "created_at": "2021-07-06T08:30:29Z",
      "updated_at": "2021-07-06T09:18:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664348025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664348025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664353608",
      "pull_request_review_id": 699675438,
      "id": 664353608,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDM1MzYwOA==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    print_table(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#if defined(EXHAUSTIVE_TEST_ORDER)\\n\");\n+    fprintf(fp, \"#if EXHAUSTIVE_TEST_ORDER == 13\\n\");\n+    fprintf(fp, \"#define WINDOW_G %d\\n\", window_g_13);\n+\n+    secp256k1_gej_set_ge(&gj, &g_13);\n+    print_two_tables(fp, window_g_13, &gj, 0);\n+\n+    fprintf(fp, \"#elif EXHAUSTIVE_TEST_ORDER == 199\\n\");\n+    fprintf(fp, \"#define WINDOW_G %d\\n\", window_g_199);\n+\n+    secp256k1_gej_set_ge(&gj, &g_199);\n+    print_two_tables(fp, window_g_199, &gj, 0);\n+\n+    fprintf(fp, \"#else\\n\");\n+    fprintf(fp, \"   #error No known generator for the specified exhaustive test group order.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#else\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 237,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add `/* !defined(EXHAUSTIVE_TEST_ORDER) */`. But yeah, I guess readability of the generated file is anyway not a reasonable goal here. :)",
      "created_at": "2021-07-06T08:38:03Z",
      "updated_at": "2021-07-06T09:18:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664353608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664353608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664363480",
      "pull_request_review_id": 699675438,
      "id": 664363480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDM2MzQ4MA==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 53,
      "original_position": 172,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a reason why `j = 1` is not defined here?",
      "created_at": "2021-07-06T08:50:10Z",
      "updated_at": "2021-07-06T09:18:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664363480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664363480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664365659",
      "pull_request_review_id": 699675438,
      "id": 664365659,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDM2NTY1OQ==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 183,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: spacing around `*`",
      "created_at": "2021-07-06T08:52:54Z",
      "updated_at": "2021-07-06T09:18:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664365659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664365659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664374786",
      "pull_request_review_id": 699675438,
      "id": 664374786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDM3NDc4Ng==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 173,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think these should be `%lx` (or `PRIu32N`) because `unsigned long` is guaranteed to be 32 bits but `unsigned int` isn't. ",
      "created_at": "2021-07-06T09:04:52Z",
      "updated_at": "2021-07-06T09:18:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664374786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664374786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664383377",
      "pull_request_review_id": 699675438,
      "id": 664383377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDM4MzM3Nw==",
      "diff_hunk": "@@ -3416,6 +3416,74 @@ void run_group_decompress(void) {\n \n /***** ECMULT TESTS *****/\n \n+void test_pre_g_table(const secp256k1_ge_storage * pre_g, size_t n) {",
      "path": "src/tests.c",
      "position": 57,
      "original_position": 4,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8e8d0e41baa3b72cbc613fb5d76f684f92e4118e",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "spacing around `*`",
      "created_at": "2021-07-06T09:16:27Z",
      "updated_at": "2021-07-06T09:18:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664383377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664383377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3419,
      "original_line": 3419,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664484916",
      "pull_request_review_id": 699858560,
      "id": 664484916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDQ4NDkxNg==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 53,
      "original_position": 172,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": 664363480,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`j` is not reset each time this inner loop is executed. `ECMULT_TABLE_SIZE(i)` gets larger as `i` increases and `j` continues from where it left off.",
      "created_at": "2021-07-06T11:51:49Z",
      "updated_at": "2021-07-06T11:52:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664484916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664484916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512414",
      "pull_request_review_id": 699895017,
      "id": 664512414,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDUxMjQxNA==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    print_table(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 211,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": 664345540,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-07-06T12:33:15Z",
      "updated_at": "2021-07-06T12:33:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664512414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512490",
      "pull_request_review_id": 699895156,
      "id": 664512490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDUxMjQ5MA==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    print_table(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#if defined(EXHAUSTIVE_TEST_ORDER)\\n\");\n+    fprintf(fp, \"#if EXHAUSTIVE_TEST_ORDER == 13\\n\");\n+    fprintf(fp, \"#define WINDOW_G %d\\n\", window_g_13);\n+\n+    secp256k1_gej_set_ge(&gj, &g_13);",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 225,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": 664348025,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-07-06T12:33:24Z",
      "updated_at": "2021-07-06T12:33:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664512490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512595",
      "pull_request_review_id": 699895293,
      "id": 664512595,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDUxMjU5NQ==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {\n+    int i;\n+\n+    print_table(fp, \"secp256k1_pre_g\", window_g, gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(gj, gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+    secp256k1_gej gj;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#if defined(EXHAUSTIVE_TEST_ORDER)\\n\");\n+    fprintf(fp, \"#if EXHAUSTIVE_TEST_ORDER == 13\\n\");\n+    fprintf(fp, \"#define WINDOW_G %d\\n\", window_g_13);\n+\n+    secp256k1_gej_set_ge(&gj, &g_13);\n+    print_two_tables(fp, window_g_13, &gj, 0);\n+\n+    fprintf(fp, \"#elif EXHAUSTIVE_TEST_ORDER == 199\\n\");\n+    fprintf(fp, \"#define WINDOW_G %d\\n\", window_g_199);\n+\n+    secp256k1_gej_set_ge(&gj, &g_199);\n+    print_two_tables(fp, window_g_199, &gj, 0);\n+\n+    fprintf(fp, \"#else\\n\");\n+    fprintf(fp, \"   #error No known generator for the specified exhaustive test group order.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#else\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 237,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": 664353608,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-07-06T12:33:32Z",
      "updated_at": "2021-07-06T12:33:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664512595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512719",
      "pull_request_review_id": 699895458,
      "id": 664512719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDUxMjcxOQ==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+\n+}\n+\n+void print_two_tables(FILE* fp, int window_g, secp256k1_gej * gj, int with_conditionals) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 183,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": 664365659,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-07-06T12:33:43Z",
      "updated_at": "2021-07-06T12:33:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664512719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512837",
      "pull_request_review_id": 699895633,
      "id": 664512837,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDUxMjgzNw==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            fprintf(fp, \",S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[j]));",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 173,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": 664374786,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-07-06T12:33:55Z",
      "updated_at": "2021-07-06T12:33:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664512837",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512930",
      "pull_request_review_id": 699895767,
      "id": 664512930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDUxMjkzMA==",
      "diff_hunk": "@@ -3416,6 +3416,74 @@ void run_group_decompress(void) {\n \n /***** ECMULT TESTS *****/\n \n+void test_pre_g_table(const secp256k1_ge_storage * pre_g, size_t n) {",
      "path": "src/tests.c",
      "position": 57,
      "original_position": 4,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8e8d0e41baa3b72cbc613fb5d76f684f92e4118e",
      "in_reply_to_id": 664383377,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-07-06T12:34:04Z",
      "updated_at": "2021-07-06T12:34:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664512930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664512930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3419,
      "original_line": 3419,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664654126",
      "pull_request_review_id": 700087476,
      "id": 664654126,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDY1NDEyNg==",
      "diff_hunk": "@@ -0,0 +1,249 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE* fp, const char * name, int window_g, const secp256k1_gej * gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */\n+    static secp256k1_ge_storage pre[ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) < ECMULT_TABLE_SIZE(8)\n+                                  ? ECMULT_TABLE_SIZE(8)\n+                                  : ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE)];\n+    int j;\n+    int i;\n+\n+    secp256k1_ecmult_odd_multiples_table_storage(ECMULT_TABLE_SIZE(window_g), pre, gj);\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x)\\n\", SECP256K1_GE_STORAGE_CONST_GET(pre[0]));\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 53,
      "original_position": 172,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "fb68494060a84977c0c914e5d346388e98966ad4",
      "in_reply_to_id": 664363480,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh sure!",
      "created_at": "2021-07-06T15:20:31Z",
      "updated_at": "2021-07-06T15:20:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r664654126",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/664654126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/669441717",
      "pull_request_review_id": 706046503,
      "id": 669441717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQ0MTcxNw==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 19,
      "original_position": 19,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this code is taken from `gen_context.c`, it should be updated if https://github.com/bitcoin-core/secp256k1/pull/965 is merged before this PR.",
      "created_at": "2021-07-14T09:20:20Z",
      "updated_at": "2021-07-14T09:20:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r669441717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/669441717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/673779018",
      "pull_request_review_id": 711405234,
      "id": 673779018,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mzc3OTAxOA==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 158,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "small nit, since this is a binary and not a library you can use malloc if you have concerns about sizes",
      "created_at": "2021-07-21T08:42:30Z",
      "updated_at": "2021-07-21T08:42:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r673779018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/673779018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/673923552",
      "pull_request_review_id": 711589867,
      "id": 673923552,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzkyMzU1Mg==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 158,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "in_reply_to_id": 673779018,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do think it is somewhat better as a static array, but if other people also prefer a dynamic array, I can change it.\r\n\r\nPerhaps even better is to eliminate the allocation entirely and rewrite `secp256k1_ecmult_odd_multiples_table_storage` to be a simpler and more direct computation.  Since we have to call `ge_normalize` on every output anyways, there is little point in getting fancy.  `secp256k1_ecmult_odd_multiples_table_storage` is only the way it is because I have moved it from `ecmult_impl`.",
      "created_at": "2021-07-21T12:23:11Z",
      "updated_at": "2021-07-21T12:23:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r673923552",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/673923552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/676057603",
      "pull_request_review_id": 714266105,
      "id": 676057603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjA1NzYwMw==",
      "diff_hunk": "@@ -44,28 +44,14 @@\n #  define WINDOW_G ECMULT_WINDOW_SIZE\n #endif\n \n-/* Noone will ever need more than a window size of 24. The code might\n- * be correct for larger values of ECMULT_WINDOW_SIZE but this is not\n- * not tested.\n- *\n- * The following limitations are known, and there are probably more:\n- * If WINDOW_G > 27 and size_t has 32 bits, then the code is incorrect\n- * because the size of the memory object that we allocate (in bytes)\n- * will not fit in a size_t.\n- * If WINDOW_G > 31 and int has 32 bits, then the code is incorrect\n- * because certain expressions will overflow.\n- */\n-#if ECMULT_WINDOW_SIZE < 2 || ECMULT_WINDOW_SIZE > 24\n-#  error Set ECMULT_WINDOW_SIZE to an integer in range [2..24].\n+#if ECMULT_WINDOW_SIZE < WINDOW_G\n+#  error ECMULT_WINDOW_SIZE to small for WINDOW_G.",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 18,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "d58d75ff3dab5113dbe4d5e615e28b72aa9110be",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/to/too/",
      "created_at": "2021-07-24T23:36:18Z",
      "updated_at": "2021-07-24T23:55:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r676057603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/676057603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/676058707",
      "pull_request_review_id": 714266105,
      "id": 676058707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjA1ODcwNw==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 19,
      "original_position": 19,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "in_reply_to_id": 669441717,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#965 was in fact merged before this PR; what needs to be done?",
      "created_at": "2021-07-24T23:49:44Z",
      "updated_at": "2021-07-24T23:55:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r676058707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/676058707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/676058844",
      "pull_request_review_id": 714266105,
      "id": 676058844,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjA1ODg0NA==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 158,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "in_reply_to_id": 673779018,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's slightly strange to use a global object just because the size is too large; using the heap would be more natural I'd say. But also, the current code seems to work fine, no need to change it.",
      "created_at": "2021-07-24T23:51:45Z",
      "updated_at": "2021-07-24T23:55:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r676058844",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/676058844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/677667079",
      "pull_request_review_id": 716203659,
      "id": 677667079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzY2NzA3OQ==",
      "diff_hunk": "@@ -44,28 +44,14 @@\n #  define WINDOW_G ECMULT_WINDOW_SIZE\n #endif\n \n-/* Noone will ever need more than a window size of 24. The code might\n- * be correct for larger values of ECMULT_WINDOW_SIZE but this is not\n- * not tested.\n- *\n- * The following limitations are known, and there are probably more:\n- * If WINDOW_G > 27 and size_t has 32 bits, then the code is incorrect\n- * because the size of the memory object that we allocate (in bytes)\n- * will not fit in a size_t.\n- * If WINDOW_G > 31 and int has 32 bits, then the code is incorrect\n- * because certain expressions will overflow.\n- */\n-#if ECMULT_WINDOW_SIZE < 2 || ECMULT_WINDOW_SIZE > 24\n-#  error Set ECMULT_WINDOW_SIZE to an integer in range [2..24].\n+#if ECMULT_WINDOW_SIZE < WINDOW_G\n+#  error ECMULT_WINDOW_SIZE to small for WINDOW_G.",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 18,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "d58d75ff3dab5113dbe4d5e615e28b72aa9110be",
      "in_reply_to_id": 676057603,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-07-27T17:42:43Z",
      "updated_at": "2021-07-27T17:42:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r677667079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/677667079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/677667908",
      "pull_request_review_id": 716204743,
      "id": 677667908,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzY2NzkwOA==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 19,
      "original_position": 19,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "in_reply_to_id": 669441717,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've cargo-cult-copied #965.",
      "created_at": "2021-07-27T17:43:56Z",
      "updated_at": "2021-07-27T17:43:57Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r677667908",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/677667908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/677668159",
      "pull_request_review_id": 716205114,
      "id": 677668159,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzY2ODE1OQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use external ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the external ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+static void secp256k1_ecmult_odd_multiples_table_storage(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge d_ge, p_ge;\n+    secp256k1_gej pj;\n+    secp256k1_fe zi;\n+    secp256k1_fe zr;\n+    secp256k1_fe dx_over_dz_squared;\n+    int i;\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /* First, we perform all the additions in an isomorphic curve obtained by multiplying\n+     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use\n+     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store\n+     * the resulting y-coordinate and the z-ratio, since we only have enough memory to\n+     * store two field elements. These are sufficient to efficiently undo the isomorphism\n+     * and recompute all the `x`s.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);\n+    pj.x = p_ge.x;\n+    pj.y = p_ge.y;\n+    pj.z = a->z;\n+    pj.infinity = 0;\n+\n+    for (i = 0; i < (n - 1); i++) {\n+        secp256k1_fe_normalize_var(&pj.y);\n+        secp256k1_fe_to_storage(&pre[i].y, &pj.y);\n+        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);\n+        secp256k1_fe_normalize_var(&zr);\n+        secp256k1_fe_to_storage(&pre[i].x, &zr);\n+    }\n+\n+    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */\n+    secp256k1_fe_mul(&zi, &pj.z, &d.z);\n+    secp256k1_fe_inv_var(&zi, &zi);\n+\n+    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so\n+     * that we can combine it with the saved z-ratios to compute the other zs\n+     * without any more inversions. */\n+    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);\n+    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);\n+\n+    /* Compute the actual x-coordinate of D, which will be needed below. */\n+    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */\n+    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);\n+    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);\n+\n+    /* Going into the second loop, we have set `pre[n-1]` to its final affine\n+     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We\n+     * have `zi = (p.z * d.z)^-1`, where\n+     *\n+     *     `p.z` is the z-coordinate of the point on the isomorphic curve\n+     *           which was ultimately assigned to `pre[n-1]`.\n+     *     `d.z` is the multiplier that must be applied to all z-coordinates\n+     *           to move from our isomorphic curve back to secp256k1; so the\n+     *           product `p.z * d.z` is the z-coordinate of the secp256k1\n+     *           point assigned to `pre[n-1]`.\n+     *\n+     * All subsequent inverse-z-coordinates can be obtained by multiplying this\n+     * factor by successive z-ratios, which is much more efficient than directly\n+     * computing each one.\n+     *\n+     * Importantly, these inverse-zs will be coordinates of points on secp256k1,\n+     * while our other stored values come from computations on the isomorphic\n+     * curve. So in the below loop, we will take care not to actually use `zi`\n+     * or any derived values until we're back on secp256k1.\n+     */\n+    i = n - 1;\n+    while (i > 0) {\n+        secp256k1_fe zi2, zi3;\n+        const secp256k1_fe *rzr;\n+        i--;\n+\n+        secp256k1_ge_from_storage(&p_ge, &pre[i]);\n+\n+        /* For each remaining point, we extract the z-ratio from the stored\n+         * x-coordinate, compute its z^-1 from that, and compute the full\n+         * point from that. */\n+        rzr = &p_ge.x;\n+        secp256k1_fe_mul(&zi, &zi, rzr);\n+        secp256k1_fe_sqr(&zi2, &zi);\n+        secp256k1_fe_mul(&zi3, &zi2, &zi);\n+        /* To compute the actual x-coordinate, we use the stored z ratio and\n+         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`\n+         * in the loop above, as well as the inverse of the square of its\n+         * z-coordinate. We store the latter in the `zi2` variable, which is\n+         * computed iteratively starting from the overall Z inverse then\n+         * multiplying by each z-ratio in turn.\n+         *\n+         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`\n+         * from the inside of the above `gej_add_ge_var` call. This satisfies\n+         *\n+         *    rzr = d_x * z^2 - x * d_z^2\n+         *\n+         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`\n+         * are Jacobian coordinates of our desired point -- except both are on\n+         * the isomorphic curve that we were using when we called `gej_add_ge_var`.\n+         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or\n+         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes\n+         *\n+         *    rzr = d_x * z^2 / d_z^2 - x\n+         *\n+         * (The left-hand-side, being a ratio of z-coordinates, is unaffected\n+         * by the isomorphism.)\n+         *\n+         * Rearranging to solve for `x`, we have\n+         *\n+         *     x = d_x * z^2 / d_z^2 - rzr\n+         *\n+         * But what we actually want is the affine coordinate `X = x/z^2`,\n+         * which will satisfy\n+         *\n+         *     X = d_x / d_z^2 - rzr / z^2\n+         *       = dx_over_dz_squared - rzr * zi2\n+         */\n+        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);\n+        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);\n+        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);\n+        /* y is stored_y/z^3, as we expect */\n+        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);\n+        /* Store */\n+        secp256k1_ge_to_storage(&pre[i], &p_ge);\n+    }\n+}\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gj, int with_conditionals) {\n+    /* This array is only static because it may be unreasonably large to place on the stack. */",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": null,
      "original_position": 158,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8de62e3673cd7fb7f1dd16b638affd651949fab9",
      "in_reply_to_id": 673779018,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The array has been nuked.",
      "created_at": "2021-07-27T17:44:20Z",
      "updated_at": "2021-07-27T17:44:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r677668159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/677668159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/685410135",
      "pull_request_review_id": 725665834,
      "id": 685410135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTQxMDEzNQ==",
      "diff_hunk": "@@ -142,137 +121,6 @@ static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *p\n     secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A), pre, globalz, prej, zr);\n }\n \n-static void secp256k1_ecmult_odd_multiples_table_storage_var(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {",
      "path": "src/ecmult_impl.h",
      "position": 82,
      "original_position": 58,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8e9f75a5888a8ec549fe9026053051c3db7a1282",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The comment 20ish lines above here is out of date.",
      "created_at": "2021-08-09T18:04:28Z",
      "updated_at": "2021-08-09T18:04:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r685410135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/685410135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/685518134",
      "pull_request_review_id": 725806730,
      "id": 685518134,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTUxODEzNA==",
      "diff_hunk": "@@ -142,137 +121,6 @@ static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *p\n     secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A), pre, globalz, prej, zr);\n }\n \n-static void secp256k1_ecmult_odd_multiples_table_storage_var(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {",
      "path": "src/ecmult_impl.h",
      "position": 82,
      "original_position": 58,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "8e9f75a5888a8ec549fe9026053051c3db7a1282",
      "in_reply_to_id": 685410135,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Resolved.",
      "created_at": "2021-08-09T21:01:22Z",
      "updated_at": "2021-08-09T21:01:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r685518134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/685518134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688541379",
      "pull_request_review_id": 729654407,
      "id": 688541379,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODU0MTM3OQ==",
      "diff_hunk": "@@ -544,11 +318,12 @@ static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, c\n             }\n         }\n         if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {\n-            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);\n+            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, secp256k1_pre_g, n, WINDOW_G);\n             secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);\n         }\n         if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {\n-            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);\n+            VERIFY_CHECK(secp256k1_pre_g_128 != NULL);",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 310,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What does this VERIFY_CHECK do? Isn't `secp256k1_pre_g_128` an array?",
      "created_at": "2021-08-13T14:05:55Z",
      "updated_at": "2021-08-13T14:36:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688541379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688541379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688549737",
      "pull_request_review_id": 729654407,
      "id": 688549737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODU0OTczNw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+#undef USE_ASM_X86_64\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gen, int with_conditionals) {\n+    static secp256k1_gej gj;\n+    static secp256k1_ge ge, dgen;\n+    static secp256k1_ge_storage ges;\n+    int j;\n+    int i;\n+\n+    gj = *gen;\n+    secp256k1_ge_set_gej_var(&ge, &gj);\n+    secp256k1_ge_to_storage(&ges, &ge);\n+\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                  \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                SECP256K1_GE_STORAGE_CONST_GET(ges));\n+\n+    secp256k1_gej_double_var(&gj, gen, NULL);\n+    secp256k1_ge_set_gej_var(&dgen, &gj);\n+\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            secp256k1_gej_set_ge(&gj, &ge);\n+            secp256k1_gej_add_ge_var(&gj, &gj, &dgen, NULL);\n+            secp256k1_ge_set_gej_var(&ge, &gj);\n+            secp256k1_ge_to_storage(&ges, &ge);\n+\n+            fprintf(fp, \",S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                          \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                        SECP256K1_GE_STORAGE_CONST_GET(ges));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+}\n+\n+void print_two_tables(FILE *fp, int window_g, const secp256k1_ge *g, int with_conditionals) {\n+    secp256k1_gej gj;\n+    int i;\n+\n+    secp256k1_gej_set_ge(&gj, g);\n+    print_table(fp, \"secp256k1_pre_g\", window_g, &gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(&gj, &gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, &gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 96,
      "original_position": 96,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we removed the comment that documented what the tables actually contain. How about adding something like\r\n```\r\n/* This file contains an array secp256k1_pre_g with odd multiples of the base point G and an array secp256k1_pre_g_128 with odd multiples of 2^128*G */\r\n```",
      "created_at": "2021-08-13T14:17:19Z",
      "updated_at": "2021-08-13T14:36:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688549737",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688549737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688563081",
      "pull_request_review_id": 729654407,
      "id": 688563081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODU2MzA4MQ==",
      "diff_hunk": "@@ -3416,6 +3416,74 @@ void run_group_decompress(void) {\n \n /***** ECMULT TESTS *****/\n \n+void test_pre_g_table(const secp256k1_ge_storage * pre_g, size_t n) {",
      "path": "src/tests.c",
      "position": 57,
      "original_position": 57,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Took me embarassingly long to understand what is going on here. Perhaps worth adding an explanation like:\r\n```\r\nFor all i in [0, n), p = pre_g[i], q = pre_g[i+1], gg = 2*pre_g[0] we have p + gg = q. Instead of more costly group operations, we check that the 3 points p, gg and -q are distinct, on the curve and on the same line.\r\n```",
      "created_at": "2021-08-13T14:35:37Z",
      "updated_at": "2021-08-13T14:36:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688563081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688563081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3419,
      "original_line": 3419,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688702546",
      "pull_request_review_id": 729869887,
      "id": 688702546,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODcwMjU0Ng==",
      "diff_hunk": "@@ -544,11 +318,12 @@ static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, c\n             }\n         }\n         if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {\n-            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);\n+            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, secp256k1_pre_g, n, WINDOW_G);\n             secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);\n         }\n         if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {\n-            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);\n+            VERIFY_CHECK(secp256k1_pre_g_128 != NULL);",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 310,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": 688541379,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is outdated and needs to be removed.\r\nI used to have `secp256k1_pre_g_128` equal to `NULL` for `EXHAUSTIVE_TEST_ORDER`, but later I rewrote it to define it even in that case, even though it is not used at the moment.",
      "created_at": "2021-08-13T18:23:18Z",
      "updated_at": "2021-08-13T18:23:19Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688702546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688702546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688783296",
      "pull_request_review_id": 729973585,
      "id": 688783296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODc4MzI5Ng==",
      "diff_hunk": "@@ -544,11 +318,12 @@ static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, c\n             }\n         }\n         if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {\n-            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);\n+            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, secp256k1_pre_g, n, WINDOW_G);\n             secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);\n         }\n         if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {\n-            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);\n+            VERIFY_CHECK(secp256k1_pre_g_128 != NULL);",
      "path": "src/ecmult_impl.h",
      "position": null,
      "original_position": 310,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": 688541379,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-08-13T21:12:06Z",
      "updated_at": "2021-08-13T21:12:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688783296",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688783296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688783408",
      "pull_request_review_id": 729973749,
      "id": 688783408,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODc4MzQwOA==",
      "diff_hunk": "@@ -3416,6 +3416,74 @@ void run_group_decompress(void) {\n \n /***** ECMULT TESTS *****/\n \n+void test_pre_g_table(const secp256k1_ge_storage * pre_g, size_t n) {",
      "path": "src/tests.c",
      "position": 57,
      "original_position": 57,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": 688563081,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added some more docs.",
      "created_at": "2021-08-13T21:12:26Z",
      "updated_at": "2021-08-13T21:12:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688783408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688783408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3419,
      "original_line": 3419,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688783545",
      "pull_request_review_id": 729973909,
      "id": 688783545,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODc4MzU0NQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+#undef USE_ASM_X86_64\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gen, int with_conditionals) {\n+    static secp256k1_gej gj;\n+    static secp256k1_ge ge, dgen;\n+    static secp256k1_ge_storage ges;\n+    int j;\n+    int i;\n+\n+    gj = *gen;\n+    secp256k1_ge_set_gej_var(&ge, &gj);\n+    secp256k1_ge_to_storage(&ges, &ge);\n+\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                  \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                SECP256K1_GE_STORAGE_CONST_GET(ges));\n+\n+    secp256k1_gej_double_var(&gj, gen, NULL);\n+    secp256k1_ge_set_gej_var(&dgen, &gj);\n+\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            secp256k1_gej_set_ge(&gj, &ge);\n+            secp256k1_gej_add_ge_var(&gj, &gj, &dgen, NULL);\n+            secp256k1_ge_set_gej_var(&ge, &gj);\n+            secp256k1_ge_to_storage(&ges, &ge);\n+\n+            fprintf(fp, \",S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                          \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                        SECP256K1_GE_STORAGE_CONST_GET(ges));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+}\n+\n+void print_two_tables(FILE *fp, int window_g, const secp256k1_ge *g, int with_conditionals) {\n+    secp256k1_gej gj;\n+    int i;\n+\n+    secp256k1_gej_set_ge(&gj, g);\n+    print_table(fp, \"secp256k1_pre_g\", window_g, &gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(&gj, &gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, &gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 96,
      "original_position": 96,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": 688549737,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2021-08-13T21:12:47Z",
      "updated_at": "2021-08-13T21:12:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688783545",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688783545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688980224",
      "pull_request_review_id": 730126508,
      "id": 688980224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODk4MDIyNA==",
      "diff_hunk": "@@ -3416,6 +3416,74 @@ void run_group_decompress(void) {\n \n /***** ECMULT TESTS *****/\n \n+void test_pre_g_table(const secp256k1_ge_storage * pre_g, size_t n) {",
      "path": "src/tests.c",
      "position": 57,
      "original_position": 57,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "f4d79009bff8db0d1e53178b39072e504ec49156",
      "in_reply_to_id": 688563081,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks!",
      "created_at": "2021-08-14T18:55:55Z",
      "updated_at": "2021-08-14T18:55:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r688980224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/688980224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3419,
      "original_line": 3419,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/689850402",
      "pull_request_review_id": 731122407,
      "id": 689850402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTg1MDQwMg==",
      "diff_hunk": "@@ -11,20 +11,26 @@\n #include \"scalar.h\"\n #include \"scratch.h\"\n \n-typedef struct {\n-    /* For accelerating the computation of a*P + b*G: */\n-    secp256k1_ge_storage (*pre_g)[];    /* odd multiples of the generator */\n-    secp256k1_ge_storage (*pre_g_128)[]; /* odd multiples of 2^128*generator */\n-} secp256k1_ecmult_context;\n-\n-static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx);\n-static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, void **prealloc);\n-static void secp256k1_ecmult_context_finalize_memcpy(secp256k1_ecmult_context *dst, const secp256k1_ecmult_context *src);\n-static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx);\n-static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx);\n+/* Noone will ever need more than a window size of 24. The code might\n+ * be correct for larger values of ECMULT_WINDOW_SIZE but this is not",
      "path": "src/ecmult.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "47f6185d622fa77a6dd6420aa667213f8d8b38f2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not introduced in this PR, so feel free to ignore if you want to keep this move-only, but: `not` is repeated here.",
      "created_at": "2021-08-16T20:50:14Z",
      "updated_at": "2021-08-16T22:09:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r689850402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/689850402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690450162",
      "pull_request_review_id": 731873102,
      "id": 690450162,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDQ1MDE2Mg==",
      "diff_hunk": "@@ -11,20 +11,26 @@\n #include \"scalar.h\"\n #include \"scratch.h\"\n \n-typedef struct {\n-    /* For accelerating the computation of a*P + b*G: */\n-    secp256k1_ge_storage (*pre_g)[];    /* odd multiples of the generator */\n-    secp256k1_ge_storage (*pre_g_128)[]; /* odd multiples of 2^128*generator */\n-} secp256k1_ecmult_context;\n-\n-static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx);\n-static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, void **prealloc);\n-static void secp256k1_ecmult_context_finalize_memcpy(secp256k1_ecmult_context *dst, const secp256k1_ecmult_context *src);\n-static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx);\n-static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx);\n+/* Noone will ever need more than a window size of 24. The code might\n+ * be correct for larger values of ECMULT_WINDOW_SIZE but this is not",
      "path": "src/ecmult.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "47f6185d622fa77a6dd6420aa667213f8d8b38f2",
      "in_reply_to_id": 689850402,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-08-17T14:52:37Z",
      "updated_at": "2021-08-17T14:52:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r690450162",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690450162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690750927",
      "pull_request_review_id": 732260232,
      "id": 690750927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDc1MDkyNw==",
      "diff_hunk": "@@ -176,6 +176,7 @@ AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|arm|no|auto],\n AC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE|auto],\n [window size for ecmult precomputation for verification, specified as integer in range [2..24].]\n [Larger values result in possibly better performance at the cost of an exponentially larger precomputed table.]\n+[For very large window sizes, use \"make -j 1\" to reduce memory use during compilation.]\n [The table will store 2^(SIZE-1) * 64 bytes of data but can be larger in memory due to platform-specific padding and alignment.]\n [\"auto\" is a reasonable setting for desktop machines (currently 15). [default=auto]]",
      "path": "configure.ac",
      "position": 6,
      "original_position": 6,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it would be good to explain here that setting a value larger than 15 will require regeneration of ecmult_static_pre_g.h (and maybe instructions on how to do that).\r\n\r\nPing @gmaxwell.",
      "created_at": "2021-08-17T21:56:29Z",
      "updated_at": "2021-08-17T21:57:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r690750927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690750927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 182,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690751307",
      "pull_request_review_id": 732260232,
      "id": 690751307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDc1MTMwNw==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+#undef USE_ASM_X86_64\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gen, int with_conditionals) {\n+    static secp256k1_gej gj;\n+    static secp256k1_ge ge, dgen;\n+    static secp256k1_ge_storage ges;\n+    int j;\n+    int i;\n+\n+    gj = *gen;\n+    secp256k1_ge_set_gej_var(&ge, &gj);\n+    secp256k1_ge_to_storage(&ges, &ge);\n+\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                  \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                SECP256K1_GE_STORAGE_CONST_GET(ges));\n+\n+    secp256k1_gej_double_var(&gj, gen, NULL);\n+    secp256k1_ge_set_gej_var(&dgen, &gj);\n+\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            secp256k1_gej_set_ge(&gj, &ge);\n+            secp256k1_gej_add_ge_var(&gj, &gj, &dgen, NULL);\n+            secp256k1_ge_set_gej_var(&ge, &gj);\n+            secp256k1_ge_to_storage(&ges, &ge);\n+\n+            fprintf(fp, \",S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                          \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                        SECP256K1_GE_STORAGE_CONST_GET(ges));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+}\n+\n+void print_two_tables(FILE *fp, int window_g, const secp256k1_ge *g, int with_conditionals) {\n+    secp256k1_gej gj;\n+    int i;\n+\n+    secp256k1_gej_set_ge(&gj, g);\n+    print_table(fp, \"secp256k1_pre_g\", window_g, &gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(&gj, &gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, &gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"/* This file contains an array secp256k1_pre_g with odd multiples of the base point G and\\n\");\n+    fprintf(fp, \" * an array secp256k1_pre_g_128 with odd multiples of 2^128*G for accelerating the computation of a*P + b*G.\\n\");\n+    fprintf(fp, \" */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 110,
      "original_position": 110,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps here too; just deleting isn't enough; it also needs a \"make src/ecmult_static_pre_g.h\" step.",
      "created_at": "2021-08-17T21:57:17Z",
      "updated_at": "2021-08-17T21:57:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r690751307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690751307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690771298",
      "pull_request_review_id": 732284757,
      "id": 690771298,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDc3MTI5OA==",
      "diff_hunk": "@@ -176,6 +176,7 @@ AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|arm|no|auto],\n AC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE|auto],\n [window size for ecmult precomputation for verification, specified as integer in range [2..24].]\n [Larger values result in possibly better performance at the cost of an exponentially larger precomputed table.]\n+[For very large window sizes, use \"make -j 1\" to reduce memory use during compilation.]\n [The table will store 2^(SIZE-1) * 64 bytes of data but can be larger in memory due to platform-specific padding and alignment.]\n [\"auto\" is a reasonable setting for desktop machines (currently 15). [default=auto]]",
      "path": "configure.ac",
      "position": 6,
      "original_position": 6,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": 690750927,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be ship a file with values up to 16 or 17 even though 15 is the default?",
      "created_at": "2021-08-17T22:40:59Z",
      "updated_at": "2021-08-17T22:40:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r690771298",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/690771298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 182,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691289270",
      "pull_request_review_id": 732934773,
      "id": 691289270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTI4OTI3MA==",
      "diff_hunk": "@@ -176,6 +176,7 @@ AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|arm|no|auto],\n AC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE|auto],\n [window size for ecmult precomputation for verification, specified as integer in range [2..24].]\n [Larger values result in possibly better performance at the cost of an exponentially larger precomputed table.]\n+[For very large window sizes, use \"make -j 1\" to reduce memory use during compilation.]\n [The table will store 2^(SIZE-1) * 64 bytes of data but can be larger in memory due to platform-specific padding and alignment.]\n [\"auto\" is a reasonable setting for desktop machines (currently 15). [default=auto]]",
      "path": "configure.ac",
      "position": 6,
      "original_position": 6,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": 690750927,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I personally think it is better to stick with 15.",
      "created_at": "2021-08-18T14:23:42Z",
      "updated_at": "2021-08-18T14:23:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r691289270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691289270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 182,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691295662",
      "pull_request_review_id": 732943577,
      "id": 691295662,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTI5NTY2Mg==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+#undef USE_ASM_X86_64\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gen, int with_conditionals) {\n+    static secp256k1_gej gj;\n+    static secp256k1_ge ge, dgen;\n+    static secp256k1_ge_storage ges;\n+    int j;\n+    int i;\n+\n+    gj = *gen;\n+    secp256k1_ge_set_gej_var(&ge, &gj);\n+    secp256k1_ge_to_storage(&ges, &ge);\n+\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                  \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                SECP256K1_GE_STORAGE_CONST_GET(ges));\n+\n+    secp256k1_gej_double_var(&gj, gen, NULL);\n+    secp256k1_ge_set_gej_var(&dgen, &gj);\n+\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            secp256k1_gej_set_ge(&gj, &ge);\n+            secp256k1_gej_add_ge_var(&gj, &gj, &dgen, NULL);\n+            secp256k1_ge_set_gej_var(&ge, &gj);\n+            secp256k1_ge_to_storage(&ges, &ge);\n+\n+            fprintf(fp, \",S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                          \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                        SECP256K1_GE_STORAGE_CONST_GET(ges));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+}\n+\n+void print_two_tables(FILE *fp, int window_g, const secp256k1_ge *g, int with_conditionals) {\n+    secp256k1_gej gj;\n+    int i;\n+\n+    secp256k1_gej_set_ge(&gj, g);\n+    print_table(fp, \"secp256k1_pre_g\", window_g, &gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(&gj, &gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, &gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"/* This file contains an array secp256k1_pre_g with odd multiples of the base point G and\\n\");\n+    fprintf(fp, \" * an array secp256k1_pre_g_128 with odd multiples of 2^128*G for accelerating the computation of a*P + b*G.\\n\");\n+    fprintf(fp, \" */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 110,
      "original_position": 110,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": 690751307,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Deleting `src/ecmult_static_pre_g.h` seems to cause it to be rebuilt.\r\n\r\nMy limited experiments suggests that reconfiguring causes `gen_ecmult_static_pre_g` to be rebuilt.\r\n\r\nIs there some particular problem you are observing?",
      "created_at": "2021-08-18T14:30:31Z",
      "updated_at": "2021-08-18T14:30:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r691295662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691295662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691538544",
      "pull_request_review_id": 733267107,
      "id": 691538544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTUzODU0NA==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+#undef USE_ASM_X86_64\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gen, int with_conditionals) {\n+    static secp256k1_gej gj;\n+    static secp256k1_ge ge, dgen;\n+    static secp256k1_ge_storage ges;\n+    int j;\n+    int i;\n+\n+    gj = *gen;\n+    secp256k1_ge_set_gej_var(&ge, &gj);\n+    secp256k1_ge_to_storage(&ges, &ge);\n+\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                  \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                SECP256K1_GE_STORAGE_CONST_GET(ges));\n+\n+    secp256k1_gej_double_var(&gj, gen, NULL);\n+    secp256k1_ge_set_gej_var(&dgen, &gj);\n+\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            secp256k1_gej_set_ge(&gj, &ge);\n+            secp256k1_gej_add_ge_var(&gj, &gj, &dgen, NULL);\n+            secp256k1_ge_set_gej_var(&ge, &gj);\n+            secp256k1_ge_to_storage(&ges, &ge);\n+\n+            fprintf(fp, \",S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                          \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                        SECP256K1_GE_STORAGE_CONST_GET(ges));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+}\n+\n+void print_two_tables(FILE *fp, int window_g, const secp256k1_ge *g, int with_conditionals) {\n+    secp256k1_gej gj;\n+    int i;\n+\n+    secp256k1_gej_set_ge(&gj, g);\n+    print_table(fp, \"secp256k1_pre_g\", window_g, &gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(&gj, &gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, &gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"/* This file contains an array secp256k1_pre_g with odd multiples of the base point G and\\n\");\n+    fprintf(fp, \" * an array secp256k1_pre_g_128 with odd multiples of 2^128*G for accelerating the computation of a*P + b*G.\\n\");\n+    fprintf(fp, \" */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 110,
      "original_position": 110,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": 690751307,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, I'm unsure why I thought differently. I built from a clean checkout with the default first, then reconfigured with window size 20, rebuilt, got this error, deleted the `src/ecmult_static_pre_g.h` file, rebuilt again, and it worked.",
      "created_at": "2021-08-18T19:20:45Z",
      "updated_at": "2021-08-18T19:20:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r691538544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691538544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691538742",
      "pull_request_review_id": 733267382,
      "id": 691538742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTUzODc0Mg==",
      "diff_hunk": "@@ -176,6 +176,7 @@ AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|arm|no|auto],\n AC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE|auto],\n [window size for ecmult precomputation for verification, specified as integer in range [2..24].]\n [Larger values result in possibly better performance at the cost of an exponentially larger precomputed table.]\n+[For very large window sizes, use \"make -j 1\" to reduce memory use during compilation.]\n [The table will store 2^(SIZE-1) * 64 bytes of data but can be larger in memory due to platform-specific padding and alignment.]\n [\"auto\" is a reasonable setting for desktop machines (currently 15). [default=auto]]",
      "path": "configure.ac",
      "position": 6,
      "original_position": 6,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": 690750927,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think shipping with 15 is sufficient as long as the default is 15.",
      "created_at": "2021-08-18T19:21:07Z",
      "updated_at": "2021-08-18T19:21:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r691538742",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691538742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 182,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691601342",
      "pull_request_review_id": 733348999,
      "id": 691601342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTYwMTM0Mg==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+/*****************************************************************************************************\n+ * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *\n+ * Distributed under the MIT software license, see the accompanying                                  *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *\n+ *****************************************************************************************************/\n+\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_WINDOW_SIZE is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n+#if !defined(ECMULT_WINDOW_SIZE)\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+/* In principle we could use ASM, but this yields only a minor speedup in\n+   build time and it's very complicated. In particular when cross-compiling, we'd\n+   need to build the ASM for the build and the host machine. */\n+#undef USE_EXTERNAL_ASM\n+#undef USE_ASM_X86_64\n+\n+#include \"../include/secp256k1.h\"\n+#include \"assumptions.h\"\n+#include \"util.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult.h\"\n+\n+void print_table(FILE *fp, const char *name, int window_g, const secp256k1_gej *gen, int with_conditionals) {\n+    static secp256k1_gej gj;\n+    static secp256k1_ge ge, dgen;\n+    static secp256k1_ge_storage ges;\n+    int j;\n+    int i;\n+\n+    gj = *gen;\n+    secp256k1_ge_set_gej_var(&ge, &gj);\n+    secp256k1_ge_to_storage(&ges, &ge);\n+\n+    fprintf(fp, \"static const secp256k1_ge_storage %s[ECMULT_TABLE_SIZE(WINDOW_G)] = {\\n\", name);\n+    fprintf(fp, \" S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                  \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                SECP256K1_GE_STORAGE_CONST_GET(ges));\n+\n+    secp256k1_gej_double_var(&gj, gen, NULL);\n+    secp256k1_ge_set_gej_var(&dgen, &gj);\n+\n+    j = 1;\n+    for(i = 3; i <= window_g; ++i) {\n+        if (with_conditionals) {\n+            fprintf(fp, \"#if ECMULT_TABLE_SIZE(WINDOW_G) > %ld\\n\", ECMULT_TABLE_SIZE(i-1));\n+        }\n+        for(;j < ECMULT_TABLE_SIZE(i); ++j) {\n+            secp256k1_gej_set_ge(&gj, &ge);\n+            secp256k1_gej_add_ge_var(&gj, &gj, &dgen, NULL);\n+            secp256k1_ge_set_gej_var(&ge, &gj);\n+            secp256k1_ge_to_storage(&ges, &ge);\n+\n+            fprintf(fp, \",S(%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\n+                          \",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\",%\"PRIx32\")\\n\",\n+                        SECP256K1_GE_STORAGE_CONST_GET(ges));\n+        }\n+        if (with_conditionals) {\n+            fprintf(fp, \"#endif\\n\");\n+        }\n+    }\n+    fprintf(fp, \"};\\n\");\n+}\n+\n+void print_two_tables(FILE *fp, int window_g, const secp256k1_ge *g, int with_conditionals) {\n+    secp256k1_gej gj;\n+    int i;\n+\n+    secp256k1_gej_set_ge(&gj, g);\n+    print_table(fp, \"secp256k1_pre_g\", window_g, &gj, with_conditionals);\n+    for (i = 0; i < 128; ++i) {\n+        secp256k1_gej_double_var(&gj, &gj, NULL);\n+    }\n+    print_table(fp, \"secp256k1_pre_g_128\", window_g, &gj, with_conditionals);\n+}\n+\n+int main(void) {\n+    const secp256k1_ge g = SECP256K1_G;\n+    const secp256k1_ge g_13 = SECP256K1_G_ORDER_13;\n+    const secp256k1_ge g_199 = SECP256K1_G_ORDER_199;\n+    const int window_g_13 = 4;\n+    const int window_g_199 = 8;\n+    FILE* fp;\n+\n+    fp = fopen(\"src/ecmult_static_pre_g.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_pre_g.h for writing!\\n\");\n+        return -1;\n+    }\n+\n+    fprintf(fp, \"/* This file was automatically generated by gen_ecmult_static_pre_g. */\\n\");\n+    fprintf(fp, \"/* This file contains an array secp256k1_pre_g with odd multiples of the base point G and\\n\");\n+    fprintf(fp, \" * an array secp256k1_pre_g_128 with odd multiples of 2^128*G for accelerating the computation of a*P + b*G.\\n\");\n+    fprintf(fp, \" */\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_PRE_G_H\\n\");\n+    fprintf(fp, \"#include \\\"group.h\\\"\\n\");\n+    fprintf(fp, \"#ifdef S\\n\");\n+    fprintf(fp, \"   #error macro identifier S already in use.\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) \"\n+                \"SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,\"\n+                \"0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n+    fprintf(fp, \"#if ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE) > %ld\\n\", ECMULT_TABLE_SIZE(ECMULT_WINDOW_SIZE));\n+    fprintf(fp, \"   #error configuration mismatch, invalid ECMULT_WINDOW_SIZE. Try deleting ecmult_static_pre_g.h before the build.\\n\");",
      "path": "src/gen_ecmult_static_pre_g.c",
      "position": 110,
      "original_position": 110,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": 690751307,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't ship with `gen_ecmult_static_pre_g` binaries, so you might need to try to reconfigure after creating that binary, but when I tested that situation it still worked for me.",
      "created_at": "2021-08-18T21:02:51Z",
      "updated_at": "2021-08-18T21:02:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r691601342",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691601342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691605743",
      "pull_request_review_id": 733354529,
      "id": 691605743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTYwNTc0Mw==",
      "diff_hunk": "@@ -176,6 +176,7 @@ AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|arm|no|auto],\n AC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE|auto],\n [window size for ecmult precomputation for verification, specified as integer in range [2..24].]\n [Larger values result in possibly better performance at the cost of an exponentially larger precomputed table.]\n+[For very large window sizes, use \"make -j 1\" to reduce memory use during compilation.]\n [The table will store 2^(SIZE-1) * 64 bytes of data but can be larger in memory due to platform-specific padding and alignment.]\n [\"auto\" is a reasonable setting for desktop machines (currently 15). [default=auto]]",
      "path": "configure.ac",
      "position": 6,
      "original_position": 6,
      "commit_id": "20abd52c2e107e79391a19d2d2f8845e83858dea",
      "original_commit_id": "54ada05ef961d3f5c0383dfe35faa8187fee4816",
      "in_reply_to_id": 690750927,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Further elaborated instructions.",
      "created_at": "2021-08-18T21:10:02Z",
      "updated_at": "2021-08-18T21:10:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/956#discussion_r691605743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/691605743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/956"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 182,
      "original_line": 182,
      "side": "RIGHT"
    }
  ]
}