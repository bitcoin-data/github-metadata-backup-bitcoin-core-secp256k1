{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651",
    "id": 2313278616,
    "node_id": "PR_kwDOAP4Jqs6J4dSY",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1651.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1651.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/ed1094896e359fdaa99595250cf1612e9a111c0d",
    "number": 1651,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "add DLEQ proof based on BIP374 and use it for silent payments",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "built on top of c4942d36.\r\n\r\n> BIP352 requires senders to compute output scripts using ECDH shared secrets from the same secret keys used to sign the inputs. Generating an incorrect signature will produce an invalid transaction that will be rejected by consensus. An incorrectly generated output script can still be consensus-valid, meaning funds may be lost if it gets broadcast. By producing a DLEQ proof for the generated ECDH shared secrets, the signing entity can prove to other entities that the output scripts have been generated correctly without revealing the private keys.\r\n\r\n(from [BIP 374](https://github.com/bitcoin/bips/blob/master/bip-0374.mediawiki))\r\n\r\nThis PR:\r\n\r\n- adds support for DLEQ proof generation and verification using `secp256k1_dleq_prove`, `secp256k1_dleq_verify` based on implementation in [secp256k1-zkp](https://github.com/BlockstreamResearch/secp256k1-zkp/blob/master/src/modules/ecdsa_adaptor/dleq_impl.h)\r\n- introduces a new structure for storing proofs in silent payment module - `secp256k1_silentpayments_dleq_data` which stores the shared secret computed using ECDH, DLEQ proof and also the index of which recipient in the [original unsorted recipient array](https://github.com/bitcoin-core/secp256k1/blob/f42e0dde59943ad0c9247c61f7af521b70838e8f/include/secp256k1_silentpayments.h#L43)  the proof refers to.\r\n- adds 4 new APIs in silent payments module to create, verify, serialize and parse proof\r\n    1. sender can create proof using `secp256k1_silentpayments_sender_create_outputs_with_proof`\r\n        - in the existing `secp256k1_silentpayments_sender_create_outputs` API, output pubkey is created by iterating over all the recipients and computing ECDH for each unique recipient.\r\n        - since creating the proof also requites iterating over all recipients and computing ECDH for each unique recipient, compute both proof(s) and output pubkey(s) in a new function - `secp256k1_silentpayments_sender_create_outputs_with_proof`.\r\n        - `secp256k1_silentpayments_sender_create_outputs` can use `secp256k1_silentpayments_sender_create_outputs_with_proof`internally.\r\n    2.  both sender and receiver can verify proof using `secp256k1_silentpayments_verify_proof`\r\n    3. Serialisation function (`secp256k1_silentpayments_dleq_data_serialize`) serialises  `secp256k1_silentpayments_dleq_data` structure into bytes. `secp256k1_silentpayments_dleq_data_parse` parses the bytes back into `secp256k1_silentpayments_dleq_data` structure.\r\n        1. useful if proof creation is done on 1 sender side device (ex: hardware wallet) and proof verification is done on another sender side device (ex: software wallet). `secp256k1_silentpayments_dleq_data` structure can be serialised into bytes using `secp256k1_silentpayments_dleq_data_serialize` and then the bytes can be sent from 1 device to another.\r\n        2. `secp256k1_silentpayments_dleq_data_parse` can reconstruct the bytes back into `secp256k1_silentpayments_dleq_data` structure which can then be used for proof verification.\r\n\r\nopen questions:\r\n\r\n1. is the API design ok?\r\n    1. see `examples/silentpayments.c` for 2 scenarios in which proof verification could be useful. (Alice sends bitcoins to Bob and Carol in 1 silent payment transaction)\r\n        1. useful situation - On Alice’s side\r\n            1. Alice’s hardware wallet creates proof\r\n            2. Alice’s hardware wallet sends proof to Alice’s software wallet\r\n            3. Alice’s software wallet verifies proof and makes sure ECDH shared secrets for generating SP output is computed correctly. Alice can get additional safety guarantee about computed SP output before sending funds.\r\n        2. not sure if this situation is useful - On Bob’s/Carol’s side\r\n            1. Alice’s software wallet sends proof to Bob’s/Carol’s  software wallet\r\n            2. Bob’s/Carol’s software wallet verifies proof and makes sure ECDH shared secrets for generating SP output is computed correctly.\r\n2. should this be shipped with SP module or separately? only problem with separate release would be redundant APIs like `secp256k1_silentpayments_sender_create_outputs` and `secp256k1_silentpayments_sender_create_outputs_with_proof` for backward compatibility. \r\n\r\nHuge thanks to @ theStack for brainstorming and discussing this with me! ❤️",
    "labels": [
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      }
    ],
    "created_at": "2025-02-03T17:32:28Z",
    "updated_at": "2025-10-09T16:33:24Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "68912ed79a2105a24f3bb74c451d87f51d20614a",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "stratospher:dleq-sp",
      "ref": "dleq-sp",
      "sha": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 519443361,
        "node_id": "R_kgDOHvYToQ",
        "name": "secp256k1",
        "full_name": "stratospher/secp256k1",
        "owner": {
          "login": "stratospher",
          "id": 44024636,
          "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stratospher",
          "html_url": "https://github.com/stratospher",
          "followers_url": "https://api.github.com/users/stratospher/followers",
          "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
          "organizations_url": "https://api.github.com/users/stratospher/orgs",
          "repos_url": "https://api.github.com/users/stratospher/repos",
          "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stratospher/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/stratospher/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/stratospher/secp256k1",
        "archive_url": "https://api.github.com/repos/stratospher/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stratospher/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stratospher/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stratospher/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stratospher/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stratospher/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stratospher/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stratospher/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stratospher/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stratospher/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/stratospher/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/stratospher/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/stratospher/secp256k1/events",
        "forks_url": "https://api.github.com/repos/stratospher/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/stratospher/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stratospher/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stratospher/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stratospher/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/stratospher/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stratospher/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stratospher/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stratospher/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stratospher/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stratospher/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/stratospher/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/stratospher/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stratospher/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stratospher/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stratospher/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:stratospher/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/stratospher/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/stratospher/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stratospher/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/stratospher/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/stratospher/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/stratospher/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/stratospher/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stratospher/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/stratospher/secp256k1/hooks",
        "svn_url": "https://github.com/stratospher/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 12811,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-29T13:57:20Z",
        "created_at": "2022-07-30T06:55:56Z",
        "updated_at": "2025-09-09T13:08:38Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "baa265429fa8f1686138380e52a75c25b0344719",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 1092,
        "stargazers_count": 2316,
        "watchers_count": 2316,
        "size": 12690,
        "default_branch": "master",
        "open_issues_count": 157,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-24T18:49:48Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2025-10-09T12:49:11Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 9380,
    "deletions": 35,
    "changed_files": 26,
    "commits": 18,
    "review_comments": 20,
    "comments": 4
  },
  "events": [
    {
      "event": "reviewed",
      "id": 2604132450,
      "node_id": "PRR_kwDOAP4Jqs6bN-hi",
      "url": null,
      "actor": null,
      "commit_id": "ea9236a6b7c9bfec60fa3fb2dda94d8b164edc55",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-09T07:53:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, nice! Left some initial comments for the BIP374-only parts (first two commits).",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#pullrequestreview-2604132450",
      "submitted_at": "2025-02-09T07:53:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16259695555,
      "node_id": "HRFPE_lADOAP4Jqs6okbW9zwAAAAPJJ0PD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16259695555",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "44bf41dfb4bb59a0b38c6cb48ce6228c192bf195",
      "commit_url": "https://api.github.com/repos/stratospher/secp256k1/commits/44bf41dfb4bb59a0b38c6cb48ce6228c192bf195",
      "created_at": "2025-02-11T07:38:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16268774100,
      "node_id": "HRFPE_lADOAP4Jqs6okbW9zwAAAAPJscrU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16268774100",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "commit_url": "https://api.github.com/repos/stratospher/secp256k1/commits/41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "created_at": "2025-02-11T17:43:12Z"
    },
    {
      "event": "commented",
      "id": 2688913408,
      "node_id": "IC_kwDOAP4Jqs6gRZAA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2688913408",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-27T19:29:03Z",
      "updated_at": "2025-02-27T19:29:03Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#issuecomment-2688913408",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651"
    },
    {
      "event": "labeled",
      "id": 16731258556,
      "node_id": "LE_lADOAP4Jqs6okbW9zwAAAAPlQr68",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16731258556",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T10:04:34Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    },
    {
      "event": "commented",
      "id": 2721922904,
      "node_id": "IC_kwDOAP4Jqs6iPT9Y",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2721922904",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T16:36:21Z",
      "updated_at": "2025-03-13T16:36:21Z",
      "author_association": "CONTRIBUTOR",
      "body": ">     2. should this be shipped with SP module or separately? only problem with separate release would be redundant APIs like `secp256k1_silentpayments_sender_create_outputs` and `secp256k1_silentpayments_sender_create_outputs_with_proof` for backward compatibility.\r\n\r\n@josibake Do you have an opinion on this?",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#issuecomment-2721922904",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651"
    },
    {
      "event": "mentioned",
      "id": 16744382264,
      "node_id": "MEE_lADOAP4Jqs6okbW9zwAAAAPmCv84",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16744382264",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T16:36:23Z"
    },
    {
      "event": "subscribed",
      "id": 16744382294,
      "node_id": "SE_lADOAP4Jqs6okbW9zwAAAAPmCv9W",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16744382294",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T16:36:23Z"
    },
    {
      "event": "commented",
      "id": 2750779615,
      "node_id": "IC_kwDOAP4Jqs6j9ZDf",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2750779615",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T10:22:13Z",
      "updated_at": "2025-03-25T10:22:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > ```\r\n> > 2. should this be shipped with SP module or separately? only problem with separate release would be redundant APIs like `secp256k1_silentpayments_sender_create_outputs` and `secp256k1_silentpayments_sender_create_outputs_with_proof` for backward compatibility.\r\n> > ```\r\n> \r\n> @josibake Do you have an opinion on this?\r\n\r\nfriendly ping :)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#issuecomment-2750779615",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651"
    },
    {
      "event": "mentioned",
      "id": 16971720554,
      "node_id": "MEE_lADOAP4Jqs6okbW9zwAAAAPzl-dq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16971720554",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T10:22:14Z"
    },
    {
      "event": "subscribed",
      "id": 16971720577,
      "node_id": "SE_lADOAP4Jqs6okbW9zwAAAAPzl-eB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16971720577",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T10:22:14Z"
    },
    {
      "event": "commented",
      "id": 2765921325,
      "node_id": "IC_kwDOAP4Jqs6k3Jwt",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2765921325",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T11:16:22Z",
      "updated_at": "2025-03-31T11:16:22Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\n> > > ```\r\n> > > 2. should this be shipped with SP module or separately? only problem with separate release would be redundant APIs like `secp256k1_silentpayments_sender_create_outputs` and `secp256k1_silentpayments_sender_create_outputs_with_proof` for backward compatibility.\r\n> > > ```\r\n> > \r\n> > \r\n> > @josibake Do you have an opinion on this?\r\n> \r\n> friendly ping :)\r\n\r\nAyo, late to the party here 😅 First off, thanks for picking this up @stratospher ! I only briefly looked at the module, so all commentary here is very high level. Regarding shipping with the silent payments module, I don't see any reason to couple the two. Rather, I would consider the silent payments module a client of the DLEQ module.\r\n\r\n> only problem with separate release would be redundant APIs like `secp256k1_silentpayments_sender_create_outputs` and `secp256k1_silentpayments_sender_create_outputs_with_proof`\r\n\r\nI don't see this as a problem. An alternative to this would be to extend `create_outputs` with an unused out param in anticipation of the proof, but I much prefer what you have here with `create_outputs_with_proof`. There will also still be use cases where computing the proof is unnecessary (e.g., single party sender where sender has full access to the private keys) and I think two separate functions in the API is clearer than a single function with an optional output parameter.\r\n\r\n> not sure if this situation is useful - On Bob’s/Carol’s side\r\nAlice’s software wallet sends proof to Bob’s/Carol’s software wallet\r\nBob’s/Carol’s software wallet verifies proof and makes sure ECDH shared secrets for generating SP output is computed correctly.\r\n\r\nI haven't thought this all the way through, but I believe this could function as a proof of payment. Imagine Alice has paid Bob and wants to prove this to a 3rd party. Alice could compute the DLEQ proof and then pass this with the along with the shared secret to the 3rd party, who can then verify the DLEQ proof and use the shared secret to verify that the the SP output is present in the transaction. All this to say, I think having an example of this would be helpful! \r\n",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#issuecomment-2765921325",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651"
    },
    {
      "event": "mentioned",
      "id": 17055481683,
      "node_id": "MEE_lADOAP4Jqs6okbW9zwAAAAP4lf9T",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/17055481683",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T11:16:24Z"
    },
    {
      "event": "subscribed",
      "id": 17055481703,
      "node_id": "SE_lADOAP4Jqs6okbW9zwAAAAP4lf9n",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/17055481703",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T11:16:24Z"
    },
    {
      "event": "mentioned",
      "id": 17055481728,
      "node_id": "MEE_lADOAP4Jqs6okbW9zwAAAAP4lf-A",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/17055481728",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T11:16:24Z"
    },
    {
      "event": "subscribed",
      "id": 17055481742,
      "node_id": "SE_lADOAP4Jqs6okbW9zwAAAAP4lf-O",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/17055481742",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T11:16:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGY2ZWZmMTIxYTY3MjQ3OGYxYWNjMDE3YmJmY2M4NjlhYWUxY2U1M2Y",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f6eff121a672478f1acc017bbfcc869aae1ce53f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f6eff121a672478f1acc017bbfcc869aae1ce53f",
      "tree": {
        "sha": "0ad7242847509438813f97e1346a34abc9bf7031",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0ad7242847509438813f97e1346a34abc9bf7031"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0ad7242847509438813f97e1346a34abc9bf7031\nparent b4756543028065b3ae6f30e9e6d7f1ecf2bb08c6\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1695828134 +0200\ncommitter josibake <josibake@protonmail.com> 1757931619 +0100\n\nbuild: add skeleton for new silentpayments (BIP352) module\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjH6GMACgkQity1WMTz\nPWW6ww//a9gULsL9ZX8owWvUsP1IC6nRUQOAiuCWIwnGrUn3Qojm43B8/8EGq1t1\nzCNd7W0phw0MubhBdmvjdBRP/+KXRLhLbRw+rGt9Pc0AwLfCs/I2elBnC2R0B7UX\nnLOeggAZXoMGd9tqQiyqBUm7VGzvMpyJSHKA5Tmh5jkRrlp7WK4Mw8ibZy0ZVQg6\nXxlgcSLM+4OTMzuNMW1wjXudT/zgq0Dk83utDg2Bim6i7q0grp0hwnDwnp5Po7Tg\noyRjLe26nUzCdHIXsmBW/kv9wppOSkilE3r7viGJ12kHKsWyoyv9H5E2mHoGWwRR\nD4mGHyo9J5qtyyveuNQq+EgzcFnCGGivxgoPKO/E+Dl8tXwm1RFmY3xND3YzQsY6\nfDKPWqwPug6Ha8w7DY/aacesk4Q1Yzbw2BwAk/wLPF8ZS06phip/kBveCpy03KsC\nT3zXKmh0Mpe+tTEqz3oaDqcVTZRdiJrkP5RXdYYfPxS3ElKGERx4+S5a4fJkuIc0\nTBaqRZ3r5rVscMcTHJMGDFdaaVuwLqEoiyMsc0osy3BcdO/Ef9HFgCrpyxgSSJ2J\n6YbGnVht4FtthLNgrN34RoqGXi0txvSYQ8s3Ck52IEANn1b0vcxL1Zgu2ZRfbuuf\nZ5HkHo3wdMSR70BT1n4IXunA0wMMeuiB/GTJyIo/FjRkUHKkIms=\n=+gAP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b4756543028065b3ae6f30e9e6d7f1ecf2bb08c6",
          "sha": "b4756543028065b3ae6f30e9e6d7f1ecf2bb08c6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b4756543028065b3ae6f30e9e6d7f1ecf2bb08c6"
        }
      ],
      "message": "build: add skeleton for new silentpayments (BIP352) module",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-15T10:20:19Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-09-27T15:22:14Z"
      },
      "sha": "f6eff121a672478f1acc017bbfcc869aae1ce53f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGJkOWYzMTBiNWU2ZDk5ZWJiOWRkMmQ2NTA2ZmU0ODcxOGFlNjQxMmU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bd9f310b5e6d99ebb9dd2d6506fe48718ae6412e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bd9f310b5e6d99ebb9dd2d6506fe48718ae6412e",
      "tree": {
        "sha": "e7273404910be0967ebaad51d0d9ac46bd8fb018",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e7273404910be0967ebaad51d0d9ac46bd8fb018"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e7273404910be0967ebaad51d0d9ac46bd8fb018\nparent f6eff121a672478f1acc017bbfcc869aae1ce53f\nauthor josibake <josibake@protonmail.com> 1711383817 +0100\ncommitter josibake <josibake@protonmail.com> 1758728228 +0100\n\nsilentpayments: sending\n\nAdd a routine for the entire sending flow which takes a set of private keys,\nthe smallest outpoint, and list of recipients and returns a list of\nx-only public keys by performing the following steps:\n\n1. Sum up the private keys\n2. Calculate the input_hash\n3. For each recipient group:\n    3a. Calculate a shared secret\n    3b. Create the requested number of outputs\n\nThis function assumes a single sender context in that it requires the\nsender to have access to all of the private keys. In the future, this\nAPI may be expanded to allow for a multiple senders or for a single\nsender who does not have access to all private keys at any given time,\nbut for now these modes are considered out of scope / unsafe.\n\nInternal to the library, add:\n\n1. A function for creating shared secrets (i.e., a*B or b*A)\n2. A function for generating the \"SharedSecret\" tagged hash\n3. A function for creating a single output public key\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUECUACgkQity1WMTz\nPWVdwg//cUsEBqdfb3iUfUxvRaSa/EIOulQS1QNaai+x7QQM686KfBln+WXqfnGR\npp9f5u5KJIbNnJTOGlM1UjRzcGIP+jb8EkegEpgRI+fr2q8qiaWwJVh4g1ILITkd\nQBFx+Wx/hJBXBUEsP1DDqz0V20HRsHr3mBquJ6TIWzDFADO8JFwow4AWswgSlOyn\nxVYj0b8W4sQQq74jdJTpmcmo6QsAYsmTUnzmdLiz/oZWu+qAc3SiBBoMYZ705ewC\n++7kilkjOdY8Ii1IVldFtQWZUUpwZhH1EG75UfDmXTsM9q/yVlqLnnBcI0jFqmC1\nSz+hBqdPPdOeyoxzNR8RMfLir9KaXSK5NleiGVXtFHO0aQDFB4Cdg2l5wnMhSrpF\nWvXRVixtOaAJ6rEJUTpZbJU/ik7I2pnr+d8ZB2tgpJNI2uyiH7IEIVBqkEN25edQ\nntAI33VTHfNttFzjK1RHRcDzJ2dkKw+/mxPHDb+JwZagBSWtxOiD0fjL3hFtaaHF\nhmsbzODlqHizt0Mm5kKU14fhnYbD8x8fG6uwdwvRVy1TQMc44Mfz98YdWT+GdEbL\nphlizCcXhUQSHMe9+i2RzoAlNN4QAWmgd0WyrJee4b6iivJbH+peJgT+6ZnwkeeK\n3RovWXnR2gUPrtBZZlV+2pf80K3Vorun0cycz9wY9quP5cD80hc=\n=Mk/o\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f6eff121a672478f1acc017bbfcc869aae1ce53f",
          "sha": "f6eff121a672478f1acc017bbfcc869aae1ce53f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f6eff121a672478f1acc017bbfcc869aae1ce53f"
        }
      ],
      "message": "silentpayments: sending\n\nAdd a routine for the entire sending flow which takes a set of private keys,\nthe smallest outpoint, and list of recipients and returns a list of\nx-only public keys by performing the following steps:\n\n1. Sum up the private keys\n2. Calculate the input_hash\n3. For each recipient group:\n    3a. Calculate a shared secret\n    3b. Create the requested number of outputs\n\nThis function assumes a single sender context in that it requires the\nsender to have access to all of the private keys. In the future, this\nAPI may be expanded to allow for a multiple senders or for a single\nsender who does not have access to all private keys at any given time,\nbut for now these modes are considered out of scope / unsafe.\n\nInternal to the library, add:\n\n1. A function for creating shared secrets (i.e., a*B or b*A)\n2. A function for generating the \"SharedSecret\" tagged hash\n3. A function for creating a single output public key",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:08Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-03-25T16:23:37Z"
      },
      "sha": "bd9f310b5e6d99ebb9dd2d6506fe48718ae6412e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDdjNWIxNjg5YTNhZGY2ZThhMTgwMjdkMGU1ZDk0YTdlNjI5YjQ4NTI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7c5b1689a3adf6e8a18027d0e5d94a7e629b4852",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7c5b1689a3adf6e8a18027d0e5d94a7e629b4852",
      "tree": {
        "sha": "9b9f05c18e8426b457196ab2efc75f298bb16cf9",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9b9f05c18e8426b457196ab2efc75f298bb16cf9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9b9f05c18e8426b457196ab2efc75f298bb16cf9\nparent bd9f310b5e6d99ebb9dd2d6506fe48718ae6412e\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1705946165 +0100\ncommitter josibake <josibake@protonmail.com> 1758728230 +0100\n\nsilentpayments: recipient label support\n\nAdd function for creating a label tweak. This requires a tagged hash\nfunction for labels. This function is used by the receiver for creating\nlabels to be used for a) creating labeled addresses and b) to populate\na labels cache when scanning.\n\nAdd function for creating a labeled spend pubkey. This involves taking\na label tweak, turning it into a public key and adding it to the spend\npublic key. This function is used by the receiver to create a labeled\nsilent payment address.\n\nAdd tests for the label API.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUECcACgkQity1WMTz\nPWWWShAAu7Oh7A7bgjVtOh6zOhX1f/4rRa486RadL99LgSaF0MvCgfNkEPyaFmyO\n0+mCEE+POQTMrPZe0Ukv3O+K7obMc3fQNsdnO+VX33629WE6nqZEN4jUlMw5OFZ5\nq9tlqOLKF4SnEi4vxkm+C01zPtjQWGHM8sUvqsoyJ+wvS9aeAz+JkDX4IBk9QS73\nk/Is3czImS9DyDCeWAVp8cmroIg/cZRGS9UAazfzauUfHSiF48I+aMqTXm/DO7HK\nuHRd6VyckWcS9i1l9JIUlCg6eMA+COy647WmaI60GgY1zTdnnq5VXTAcGLfvof5b\nI0vwLBL5fgKpNwZo3lid6+yFh9uSNoCsJoIBiGiFF28Jz3Rfm8Y3rp/KQ+LY+F/b\nVw7VmXPv8jRWZeaVBs9rto4LoOU270u30vOPY08H7bLy+379pZbWlMFeO/Dfg/o+\nRIBUsYIDsatW3nVM5DwblWHBKDnD5slwy2vbeHmb0NzwuLZdj52OFNVyFa/EjPpd\nUJuwBtBLToZVoMxI8kE0ka2ILzql/axWEjaNKErpNqDMH2w6U9c//J95piJAX7Qx\nvBQGbRmcRWtZyAdfzGhm4VYpgUizA6uSkp2sjZJ59yN2G1hsEL8EzBYRNfC86kU1\n5trus3flWEQf9aYghTpxdlfOvZfHU9TFQ16l5twDg2+92jg+m/8=\n=4BaY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/bd9f310b5e6d99ebb9dd2d6506fe48718ae6412e",
          "sha": "bd9f310b5e6d99ebb9dd2d6506fe48718ae6412e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/bd9f310b5e6d99ebb9dd2d6506fe48718ae6412e"
        }
      ],
      "message": "silentpayments: recipient label support\n\nAdd function for creating a label tweak. This requires a tagged hash\nfunction for labels. This function is used by the receiver for creating\nlabels to be used for a) creating labeled addresses and b) to populate\na labels cache when scanning.\n\nAdd function for creating a labeled spend pubkey. This involves taking\na label tweak, turning it into a public key and adding it to the spend\npublic key. This function is used by the receiver to create a labeled\nsilent payment address.\n\nAdd tests for the label API.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:10Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-01-22T17:56:05Z"
      },
      "sha": "7c5b1689a3adf6e8a18027d0e5d94a7e629b4852"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRhMzEyMGU5YjczZjJiMTU0OGVhZTVkMDdjYWFjYzRjYjgxZTE5ZjA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/da3120e9b73f2b1548eae5d07caacc4cb81e19f0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/da3120e9b73f2b1548eae5d07caacc4cb81e19f0",
      "tree": {
        "sha": "7b8d019151c356eec9f359280129829fff627c40",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7b8d019151c356eec9f359280129829fff627c40"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7b8d019151c356eec9f359280129829fff627c40\nparent 7c5b1689a3adf6e8a18027d0e5d94a7e629b4852\nauthor josibake <josibake@protonmail.com> 1719660810 +0200\ncommitter josibake <josibake@protonmail.com> 1758728234 +0100\n\nsilentpayments: receiving\n\nAdd routine for scanning a transaction and returning the necessary\nspending data for any found outputs. This function works with labels via\na lookup callback and requires access to the transaction outputs.\nRequiring access to the transaction outputs is not suitable for light\nclients, but light client support is enabled by exposing the\n`_create_shared_secret` and `_create_output_pubkey` functions in the\nAPI. This means the light client will need to manage their own scanning\nstate, so wherever possible it is preferrable to use the\n`_recipient_scan_ouputs` function.\n\nAdd an opaque data type for passing around the prevout public key sum\nand the input hash tweak (input_hash). This data is passed to the scanner\nbefore the ECDH step as two separate elements so that the scanner can\nmultiply the scan_key * input_hash before doing ECDH.\n\nAdd functions for deserializing / serializing a prevouts_summary object to\nand from a public key. When serializing a prevouts_summary object, the\ninput_hash is multplied into the prevout public key sum. This is so the\nobject can be stored as public key for wallet rescanning later, or to send\nto light clients. For the light client, a `_parse` function is added which\nparses the compressed public key serialization into a `prevouts_summary`\nobject.\n\nFinally, add test coverage for the receiving API.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUECoACgkQity1WMTz\nPWXiBA/7B0pGeHG1sIqLMbDBtdEiD4mQGWIQoxInxtx13Tq5HgcLgaySq/54p0kp\nC6BBeQkxhgYB2yAnYr2Sc2v72kKP8BfRAJiyekYkmlU6yDzFwQZ7MnP59g+yZd5s\nZQ7d9utfeT9YNsddR52OBO7ducYvygcQc7BRvWMOuCuIAVi5UjpBhFUCLUeuF9jz\nzpMIRPfTwl8K6JL3W6QDR4AEozHOnCNBbaCOKCSvi3deIpBw3A7z108yD7bNXT//\n8EHYeBpt4tkmHaCZqrs+eQvQKk8QXe7PFpaLObGFFfqyDjT8yU4X+Ne/d+SbxDYQ\nzi8g3j27Sal9AkmmvrSClCcbmAou4z/gbFEURg8GRbRIGtEt8e/4c90FB+JaNgWD\nJ9Tpv05hvIGRohbu8RPPyhlcE/r8NjJdIQZq4YCkqihQZ47o85KGruo6x4IyxKWo\ny1+TpTU1d4bXspI5ezqxH/QHzz3kf8PmO/7A0wFXwJP/EjFjhoVTWK8UoLKD+x6C\n7KNviAybkMW9F6MJsCrKjsVRM1++2P1rcWynsfG/daAtckWyH/R8I2A1b1E2Hkxz\nnz7JJJTDSmoX7YgSJaVF97lAxBsu8Bh+oA4e3OLdfirla+UbvLkZPemng4KzRfVC\n3yR1I9myQoHQuxaicKl5oVibs2DN066XocEa5SYo1Tel8Nqxt+c=\n=cCfb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/7c5b1689a3adf6e8a18027d0e5d94a7e629b4852",
          "sha": "7c5b1689a3adf6e8a18027d0e5d94a7e629b4852",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/7c5b1689a3adf6e8a18027d0e5d94a7e629b4852"
        }
      ],
      "message": "silentpayments: receiving\n\nAdd routine for scanning a transaction and returning the necessary\nspending data for any found outputs. This function works with labels via\na lookup callback and requires access to the transaction outputs.\nRequiring access to the transaction outputs is not suitable for light\nclients, but light client support is enabled by exposing the\n`_create_shared_secret` and `_create_output_pubkey` functions in the\nAPI. This means the light client will need to manage their own scanning\nstate, so wherever possible it is preferrable to use the\n`_recipient_scan_ouputs` function.\n\nAdd an opaque data type for passing around the prevout public key sum\nand the input hash tweak (input_hash). This data is passed to the scanner\nbefore the ECDH step as two separate elements so that the scanner can\nmultiply the scan_key * input_hash before doing ECDH.\n\nAdd functions for deserializing / serializing a prevouts_summary object to\nand from a public key. When serializing a prevouts_summary object, the\ninput_hash is multplied into the prevout public key sum. This is so the\nobject can be stored as public key for wallet rescanning later, or to send\nto light clients. For the light client, a `_parse` function is added which\nparses the compressed public key serialization into a `prevouts_summary`\nobject.\n\nFinally, add test coverage for the receiving API.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:14Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-06-29T11:33:30Z"
      },
      "sha": "da3120e9b73f2b1548eae5d07caacc4cb81e19f0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDBlOTRmMmRkMDUzNjk4ZTAzNjhjZWQ2NDlmMWYwNmQ2ZmI5ZWQyMTY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0e94f2dd053698e0368ced649f1f06d6fb9ed216",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0e94f2dd053698e0368ced649f1f06d6fb9ed216",
      "tree": {
        "sha": "8aff2960d2a827e396ca60f1f473c5a32f9c4ff4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/8aff2960d2a827e396ca60f1f473c5a32f9c4ff4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8aff2960d2a827e396ca60f1f473c5a32f9c4ff4\nparent da3120e9b73f2b1548eae5d07caacc4cb81e19f0\nauthor josibake <josibake@protonmail.com> 1713202589 +0200\ncommitter josibake <josibake@protonmail.com> 1758728235 +0100\n\nsilentpayments: add examples/silentpayments.c\n\nDemonstrate sending, scanning, and light client scanning.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUECsACgkQity1WMTz\nPWXlwxAAjdAUBbNW/LjM55agYRAnV2iBCv1RWtFUrj3Ng2xTmqz4MBKSk9mPNu8A\nvp51iVqcbJLlTevzqmmUDXmiAEBtiAF7uVXFZRSRXRLkEL7xhRO9rvC7yAS/c6fA\nYx+Bai/4486Hl4YwqhcXKHFliSeCYJnnBIo/SrzVzuyHGQ+bIeQkN+suWBx7yLmI\nTI5x1gzKZw87IHC27d9HyfEql98//IFfdWCOFezIPq7JBMUx5F+EUkO6JHXEV+XT\nRE7UN+UYKdOqlq/xQkgLkjQmmZxKMtzcqk7YH8hngyx6D53cBW6zqEvqjfzd2j7B\nvRwrIBiAGAV6yoPGGmO90Xn9GpqMMhPwPvhC2fc0677RGwzWuVZ/1lea7SHsuLl5\nqBAvcMGiZBooIG4Ze121fnwdl/yeofBKA53cFijVJitP3s5TTU19NZLfL+aec9TR\n4DSANUdKdcsVmzWom1DiUk8jimcsH8Lf6pLlc1qg5zANKm131CNgH0S1AJST9rWh\n/SGs+loUxbtphkBBaw40cI53BfUjY4kqsq0HvzfD021aTo5V+7H79tLAMbcb1EEQ\nhUAF7LqRFWmtkQvSAA8/TU9vd9GurbYJcNMhBTZXZKMGcpRBAw7CQn5CKoo0Kbh9\nPGVE0DfNIOtt/8jE2usALwKubPLXnZamgCbIw7qr2/F1ydHrJbw=\n=DiKU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/da3120e9b73f2b1548eae5d07caacc4cb81e19f0",
          "sha": "da3120e9b73f2b1548eae5d07caacc4cb81e19f0",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/da3120e9b73f2b1548eae5d07caacc4cb81e19f0"
        }
      ],
      "message": "silentpayments: add examples/silentpayments.c\n\nDemonstrate sending, scanning, and light client scanning.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:15Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-15T17:36:29Z"
      },
      "sha": "0e94f2dd053698e0368ced649f1f06d6fb9ed216"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGE0NzAzNzI0MmQ3M2NlYTU3YTljYWJlOTA2MTVkMGY0NzUwMjQ2NzE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a47037242d73cea57a9cabe90615d0f475024671",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a47037242d73cea57a9cabe90615d0f475024671",
      "tree": {
        "sha": "fec71f66cef0fb97554f710262e1cdfca1edfdd4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/fec71f66cef0fb97554f710262e1cdfca1edfdd4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fec71f66cef0fb97554f710262e1cdfca1edfdd4\nparent 0e94f2dd053698e0368ced649f1f06d6fb9ed216\nauthor josibake <josibake@protonmail.com> 1714066415 +0200\ncommitter josibake <josibake@protonmail.com> 1758728236 +0100\n\nsilentpayments: add benchmarks for scanning\n\nAdd a benchmark for a full transaction scan and for scanning a single\noutput. Only benchmarks for scanning are added as this is the most\nperformance critical portion of the protocol.\n\nCo-authored-by: Sebastian Falbesoner <91535+thestack@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUECwACgkQity1WMTz\nPWUE5w/+NlVXMxKq2Wk4BNl6YM8u8TvL3SABI074u/ciHblLOAQfx1dX24oHj89d\nSgxYxYbjo/MJdLm7iazo5SaZwTiKMc6me1kp1IssHFq5/cVbJy18kaJlI6a2G6yV\ntOBeyZZoq07PSBtlzOupyteBQyydBjjmloVtS2xyw95Ha+FhZw2W9DsBWibzGTtS\nfH2GK9RnytwsURsny9UvpNEVQIK3156qP66mrMt1XjXPWNQYgAACqTwOrpYbw9Bx\n5tabNnZcVk7A1FkZdsBjCF2jAt2NCy+aBVAPPnUTbGVAyiaQzfdtyJDvmrensL4h\nGLl3IzdAvjrrI53PrG28AFJiuwYhlGwFgth4wyNKtfTsvZaWPad07lZ9otavRkoq\ncL4fP6cPfmnKNRfiL+Q4YB+x3MJPk5OIoh2JRuZl9+HYnyBybgF9DImPRO1Xh9SX\njrYdYPKseVRbsLvOapvytXT/ECvHe9XwN0AUDcURZhhmrFBbjI1DQIdPpijPhgsm\n/BGNwi/JBtbg53/B9Qbl6dxqgQKnJdHJXAwTRWa2fgXt7icS22Yczb5VdvvH/7ff\nvYBIDL9ualsI10d3uAHtAh53+Y+muWU+dWrtZpXM9s/RFJck0tKFOBy844UGntf4\nUyM3WF+TgOHcEO0zjYwn5UXVtGOfoKRXgf3lJL/d3IzUNy2F3bc=\n=pPo/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0e94f2dd053698e0368ced649f1f06d6fb9ed216",
          "sha": "0e94f2dd053698e0368ced649f1f06d6fb9ed216",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0e94f2dd053698e0368ced649f1f06d6fb9ed216"
        }
      ],
      "message": "silentpayments: add benchmarks for scanning\n\nAdd a benchmark for a full transaction scan and for scanning a single\noutput. Only benchmarks for scanning are added as this is the most\nperformance critical portion of the protocol.\n\nCo-authored-by: Sebastian Falbesoner <91535+thestack@users.noreply.github.com>",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:16Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-25T17:33:35Z"
      },
      "sha": "a47037242d73cea57a9cabe90615d0f475024671"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDYwZjIwOWNjMjM4ZTVlNDQ1ZTNhZGI4MTJmZGVjYWExNmIyODU2OTg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/60f209cc238e5e445e3adb812fdecaa16b285698",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/60f209cc238e5e445e3adb812fdecaa16b285698",
      "tree": {
        "sha": "c1e122e800d13bd8d758f3a868b6498d21ba5ba1",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c1e122e800d13bd8d758f3a868b6498d21ba5ba1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c1e122e800d13bd8d758f3a868b6498d21ba5ba1\nparent a47037242d73cea57a9cabe90615d0f475024671\nauthor josibake <josibake@protonmail.com> 1719942343 +0200\ncommitter josibake <josibake@protonmail.com> 1758728237 +0100\n\ntests: add BIP-352 test vectors\n\nAdd the BIP-352 test vectors. The vectors are generated with a Python script\nthat converts the .json file from the BIP to C code:\n\n$ ./tools/tests_silentpayments_generate.py test_vectors.json > ./src/modules/silentpayments/vectors.h\n\nCo-authored-by: Ron <4712150+macgyver13@users.noreply.github.com>\nCo-authored-by: Sebastian Falbesoner <91535+thestack@users.noreply.github.com>\nCo-authored-by: Tim Ruffing <1071625+real-or-random@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUEC0ACgkQity1WMTz\nPWXK3hAAlWuMkyACn7+CyAvd8FnkwaW92A1ePZ/hZDbx45E8U+AYRZEeo+c6oPNr\n0yuDasj+Isr6FhbSMm62SS7UMfhEQJpBCfxVFU3UuHpU/bkgSpS6EitmHjD9XfXH\nl2P1Sw46kiSXAvM/MV0M7eBmOuqDBBIhx0gdHHKCWPRClHjYTyWhDkd2+O2Vb93u\nzHBJwbIFMPCpSYTk3AOKTkJCwjserM+Tirvv3HJaYP7f4roddpVzClu0GQMHk5Y3\nIHskGnGs2m34Q1iJwBAa/oZ4H0rD1r2szrttCDjYsUuYRbaBMduRbEZzb7s+moKe\nPDT4TdLCS7dWrdu3yxZS71vD1qO4Q7JcT2LipohLT8GsuEcXvcMuK/AmWt2lEtPo\nOjJqET0V2IOLdVdO/4b1uNkmWqKcSddxz6/5nzAGdOVqbxZjUU+y528FFdIqO9qr\nG/KUFedjwHCr0yvylGpxfaVvYs14pMOlQ5rQ/jS/AUnjPCiUuiW+EYKvVXvO6JVp\nqQy62ktF2Gle2na+UhfwMxwn9XshHxPt0SqH+MzKSOHFbj0xfz+gHWLBuTpW75J9\nUEBHURoSZgfgajBwjVZGpKYWVLmAS1+0N4H/n3BUWKdbe+58mphRwnOgEw5J9w/S\nKu8KUsmXPtu/gEkmYqCUBEdzL6SvCmhCtODsetMipO2PIKCcess=\n=z7Zf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a47037242d73cea57a9cabe90615d0f475024671",
          "sha": "a47037242d73cea57a9cabe90615d0f475024671",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a47037242d73cea57a9cabe90615d0f475024671"
        }
      ],
      "message": "tests: add BIP-352 test vectors\n\nAdd the BIP-352 test vectors. The vectors are generated with a Python script\nthat converts the .json file from the BIP to C code:\n\n$ ./tools/tests_silentpayments_generate.py test_vectors.json > ./src/modules/silentpayments/vectors.h\n\nCo-authored-by: Ron <4712150+macgyver13@users.noreply.github.com>\nCo-authored-by: Sebastian Falbesoner <91535+thestack@users.noreply.github.com>\nCo-authored-by: Tim Ruffing <1071625+real-or-random@users.noreply.github.com>",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:17Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-02T17:45:43Z"
      },
      "sha": "60f209cc238e5e445e3adb812fdecaa16b285698"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGViYTc5MmE1YmU2NDA3NDYxZDg2YmRjYTExNzIzZGQ1M2Q4OGQwMTM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/eba792a5be6407461d86bdca11723dd53d88d013",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/eba792a5be6407461d86bdca11723dd53d88d013",
      "tree": {
        "sha": "f77171ef198e3671fb17b7ac635aa890de94a8d9",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/f77171ef198e3671fb17b7ac635aa890de94a8d9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f77171ef198e3671fb17b7ac635aa890de94a8d9\nparent 60f209cc238e5e445e3adb812fdecaa16b285698\nauthor josibake <josibake@protonmail.com> 1730981939 +0100\ncommitter josibake <josibake@protonmail.com> 1758728238 +0100\n\ntests: add constant time tests\n\nCo-authored-by: Jonas Nick <2582071+jonasnick@users.noreply.github.com>\nCo-authored-by: Sebastian Falbesoner <91535+thestack@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUEC4ACgkQity1WMTz\nPWWb9A//TG1fIjiQ7rU3Ec8N6NKYQtl2jJ74X3ks7hOFFC87TX3BA8jUcnESYWlb\nqHtrfx0WECaK7nwVzMMeWRaeai8olvuNktAfXeHKaB9Ta3KVd7U7SmbexpAdU6tj\neJ4GYn8IwaUi6Peu/7FYDL0YBCx6HFNstTLbNFPlSZrTsv00P9bqbj9QflLafhl1\nV0C7ZiAhFdB7u/MFvsp9UMy5pqOoviXSRWL4O6uWLdWcG/K8BrJcb2fgqQC+sSd2\nobx2rzrlsCZUXjz/n7yA1JjbLr0Yt8NOUVZq17MXkbC0+fmYjnT7e2xS8WVm5+nG\niXkIaZEuSHH2PyNKMfelpQIZ+IVRZLCvwUQiPx/pdV8bKhfERjyubuHVk16OmmF3\nq6/s4rL70VoVMkXtkVasy+C1N820Z9uq+V1NKBDRN0msfwd5gojshkYU6HmpMs1/\n7gEJ9w7pzeOTpZjnBDqaHNp/lbGg5krRZdB9+s/bNqiHAXFztiE0EGTKmraljp1s\naXy6gTAjQZ5cLlmr3T+YohuGgod4geQCoVRt/7RTN9dhkMGNT91Bt00MeaEJp6q4\nBDsMa+R5a8qbkXRKofZjj1Uan06ufCY8YpZoTUJIaDdR4OSy2rUA5QnSABNhCoPS\ngbcMoS7rKu+qiqD880M042crnwm4pnvsE2ljpWVvTbfkXpig0kU=\n=8yZG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/60f209cc238e5e445e3adb812fdecaa16b285698",
          "sha": "60f209cc238e5e445e3adb812fdecaa16b285698",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/60f209cc238e5e445e3adb812fdecaa16b285698"
        }
      ],
      "message": "tests: add constant time tests\n\nCo-authored-by: Jonas Nick <2582071+jonasnick@users.noreply.github.com>\nCo-authored-by: Sebastian Falbesoner <91535+thestack@users.noreply.github.com>",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:18Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-11-07T12:18:59Z"
      },
      "sha": "eba792a5be6407461d86bdca11723dd53d88d013"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGY1Yzg2MTYxMGRhZmMxZjI1NmU5MjhiOTM4N2M5OWRmM2Y3ZjU1NjI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f5c861610dafc1f256e928b9387c99df3f7f5562",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f5c861610dafc1f256e928b9387c99df3f7f5562",
      "tree": {
        "sha": "32da9eda5e467886baebcb457c06bea8cb2d7da3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/32da9eda5e467886baebcb457c06bea8cb2d7da3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 32da9eda5e467886baebcb457c06bea8cb2d7da3\nparent eba792a5be6407461d86bdca11723dd53d88d013\nauthor josibake <josibake@protonmail.com> 1755247606 +0100\ncommitter josibake <josibake@protonmail.com> 1758728239 +0100\n\ntests: add sha256 tag test\n\nTest midstate tags used in silent payments.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUEDAACgkQity1WMTz\nPWVgqBAAswjVx6zRhHP9TZrkg5m1PlKIVA4p8Yb9ZCJTYe69a+NimiwjfaUHGzYV\nNu7CLfUYFJd63HbUIPSOZ9Tsc++1Bdn7p76kJaode3d5FPeHFqdH2EBKdTM7HWa3\nlXJCWbv0rW1t6j35vQwvRl7Q6OD352VYx63EKmte8zK8zD1XpmqxU8SgGQ2rc0HR\nkptxC6uEO4q3gLL/82BdKBOMH6SmyD8F7r33X+5t/6W4heIqtTYmNC1myzvmlZJD\nDQIG6at5HTuV3ikWKYdE/fsfKk8Hxgd7jU7Aa1ZgqMOLfbhjQNgmZJI+aWMMah6r\nT3hu1mAeaBezKxGXxNVWDhcRYX/RzTFn+tNZSLHgBbPrdEKXzvsNIWK28J58tbyD\n1l5mcuHBzjuuxTvDT47sdKJESsdkPEUWnVTz6JwZ9x8pqBaHTELB9Zz2VATqW1pj\ncSauZQY3rnH3Ey57zpAfyUip7ui4YeVg1o/GDQR+iEEunUL7m7+u2JF50XtOvBjb\nJWYx7Gh6pUfiDf1hdKBD9HJjsyTcyKrfO2bNJ7TSvU4CcER4AdOEF7ACZA4Ne6yU\ngcCsWJZInWbz/gY7neKMrCfFYdyV3k3jk/Po+pyfoYv6WWZ15aZV1laJYyEOSn2o\n8TK+aLB8srAvs4dV1giQZsDL9CcNSw9qJ14/n8hdUtjzGon2/P8=\n=/Nqf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/eba792a5be6407461d86bdca11723dd53d88d013",
          "sha": "eba792a5be6407461d86bdca11723dd53d88d013",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/eba792a5be6407461d86bdca11723dd53d88d013"
        }
      ],
      "message": "tests: add sha256 tag test\n\nTest midstate tags used in silent payments.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:19Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T08:46:46Z"
      },
      "sha": "f5c861610dafc1f256e928b9387c99df3f7f5562"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQzMDFjZGNjNmI1NzExMTI5YzFmOTE4MmY2YWY4MDQ1ZWUxODBhOGI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4301cdcc6b5711129c1f9182f6af8045ee180a8b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4301cdcc6b5711129c1f9182f6af8045ee180a8b",
      "tree": {
        "sha": "df4521ddc05d35c6d593e4668705d327c7024fa3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/df4521ddc05d35c6d593e4668705d327c7024fa3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree df4521ddc05d35c6d593e4668705d327c7024fa3\nparent f5c861610dafc1f256e928b9387c99df3f7f5562\nauthor Sebastian Falbesoner <sebastian.falbesoner@gmail.com> 1708644341 +0100\ncommitter josibake <josibake@protonmail.com> 1758728240 +0100\n\nci: enable silentpayments module\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUEDEACgkQity1WMTz\nPWVZ+A/9HeK2gppT2+eDKHVXD+ZzMYznJbb42lmLtGZB0t/GByUsX3KtWLCkcRRN\ngueHXbWo0VSLzDw5H1mfndTkJ+EK0ynLFaq3nESqopOQFKjZbC6Hb3toj89JWmOw\n+eHO8+/gXAXAYpZ0JoGb2GIPuf9h3l6Z6CTsoOBb9fq8EW0t1mC5AZYd2pTeUAzv\nh+r7QrTuL2dmm/uISbZShOkzxS/3oaVFokPLBGqAghTsgppUfhFcknA0DFBr9GSI\n8Ps9qf/uaMS0QRkErky+FeTZOijr9XUhv7d6K9ozTkn7Vlhz+k3sfwJWfqTCfj/J\ndm4bjDA2NwyVl30SnBOQJfiDXrFL83UHNE4dwYSpx/ps6P0UdrHYLfRX+ykZrXuo\nT9vJ3HyXFhgItodaOo0nmGxfNpGWnQ47li1caLgRb5SIoodmuJq72XOQZs+sPzOC\nsgyvi1oC6M7cNokz49h06dmUQmPjYQTJP8uTWOSyGBzUIcq1A4azbMRKg96gpxDA\nsoD6GB+0U7CU4tCS5WWuhecMizDO38FEEJwOPVsJVM4cUrUOFtSdL5WJY7d1BUf6\nylHBPePs9xKcvxKPeNGWhjuizxygrrqMR+UpdpOn0EJDvkpfJwsNWqOBNHqpA94h\n1w+rsr/UDyD7Vo+9+LbnScnlWC8Oi6WGQNI2HqOcxz7PleIssdE=\n=m7eV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f5c861610dafc1f256e928b9387c99df3f7f5562",
          "sha": "f5c861610dafc1f256e928b9387c99df3f7f5562",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f5c861610dafc1f256e928b9387c99df3f7f5562"
        }
      ],
      "message": "ci: enable silentpayments module",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:20Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-22T23:25:41Z"
      },
      "sha": "4301cdcc6b5711129c1f9182f6af8045ee180a8b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM0OTQyZDM2NDZhNThiYjlmZDhhNTFlNjBkZWZlMTU3MWY4ZWU1OTU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c4942d3646a58bb9fd8a51e60defe1571f8ee595",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c4942d3646a58bb9fd8a51e60defe1571f8ee595",
      "tree": {
        "sha": "bb272b51e6e1d2207ad736d9728576fcca7ee377",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/bb272b51e6e1d2207ad736d9728576fcca7ee377"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bb272b51e6e1d2207ad736d9728576fcca7ee377\nparent 4301cdcc6b5711129c1f9182f6af8045ee180a8b\nauthor josibake <josibake@protonmail.com> 1720789074 +0200\ncommitter josibake <josibake@protonmail.com> 1758728241 +0100\n\ndocs: update README\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmjUEDIACgkQity1WMTz\nPWXW9g//ds42t1LXMf+aFHxSA/D5GZ116+PUUD7ZUssm1GKaKhdBveQXpJ9hD7Vd\nT3OMAntulbArvsF2THmJ9yTHE+aWPrB2nMpAlSK96EDduTFCGY2rGT6TLt5w8cLj\nhq5oNjx5cNE7YnioJreHXGi6ljuiGVzQEBK9t8BwbL5eNTy63+8hxSaCMLgbDzv2\nQgoKL1CkvMwn7Muz8evVGf1b3l/p2t02np9oSiVdo3p4/csEkgGJ2NXCLZgaIgZF\nYLyQIGgXXKhq7IufEx33v4sjwHDpBb0i9ZQEAuJndSqFxc8n2XgyIizho3CiCmz7\nshCGAi352YpOj7w3Fn3O93rqz4oM+o/T33hLDq0jY9iR4NE2BcAlxTi3PliYTco9\nbITVK0QSjaUgXfFVcH311kNKXwq7qi9Nwc5QjlYzZfrS1WMwgNfchMysnR5eAkzg\nDTbl31YWZBSMSlpeFWW6K4bAIrA1XfFaNG5+5ceBpzGlY3AXuaJbb7mHBKA2fVej\nCQ2s0C9tyPIzirbow3JcfVIAJ0Cu3Jbvk0JEK+K0p66Y9er1DkpYLnNnyjZ8mS3n\nAOzfndn5Ofg+i/62ccgV34DKudCScKsPpbhs+7R0OF8GaPxLHL0Agz/bzmEzHf/E\nUCfMa1ft18rgl4vYU7euUqRvwypHn7cBe3wHpy1dpnPfA5sb5Tg=\n=VoMh\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4301cdcc6b5711129c1f9182f6af8045ee180a8b",
          "sha": "4301cdcc6b5711129c1f9182f6af8045ee180a8b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4301cdcc6b5711129c1f9182f6af8045ee180a8b"
        }
      ],
      "message": "docs: update README",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-09-24T15:37:21Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-12T12:57:54Z"
      },
      "sha": "c4942d3646a58bb9fd8a51e60defe1571f8ee595"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDkwNjMwZmIyODQ0N2UwMjBlZWUxMDE5ODQ3MDM0YmVjMDExOTI3M2Q",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/90630fb28447e020eee1019847034bec0119273d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/90630fb28447e020eee1019847034bec0119273d",
      "tree": {
        "sha": "7c625e1de5c21a454aa4c62bc52825c9a7df22a9",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7c625e1de5c21a454aa4c62bc52825c9a7df22a9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c4942d3646a58bb9fd8a51e60defe1571f8ee595",
          "sha": "c4942d3646a58bb9fd8a51e60defe1571f8ee595",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c4942d3646a58bb9fd8a51e60defe1571f8ee595"
        }
      ],
      "message": "add dleq implementation\n\n- modify secp256k1-zkp's dleq implementation to be consistent with\n  BIP 374.\n- use BIP374 notations.\n- add DLEQ tests",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-09-28T08:51:29Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T07:33:52Z"
      },
      "sha": "90630fb28447e020eee1019847034bec0119273d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDUxOGM0NTlhNDFkNDNkNzhlYzk2NjVmNTliMDc0YTI4MDg0YTQzNWQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/518c459a41d43d78ec9665f59b074a28084a435d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/518c459a41d43d78ec9665f59b074a28084a435d",
      "tree": {
        "sha": "62c30a80ac9164e0f9ae829e7512cd35abcc17bf",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/62c30a80ac9164e0f9ae829e7512cd35abcc17bf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/90630fb28447e020eee1019847034bec0119273d",
          "sha": "90630fb28447e020eee1019847034bec0119273d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/90630fb28447e020eee1019847034bec0119273d"
        }
      ],
      "message": "add BIP374 test vectors\n\nAdd BIP374 test vectors. The vectors are generated with a Python script\nthat converts the 2 csv files from the BIP - test_vectors_generate_proof.csv\nand test_vectors_verify_proof.csv to C code:\n\n$ ./tools/test_vectors_dleq_generate.py bips/bip-0374 > ./src/modules/silentpayments/dleq_vectors.h",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-09-28T13:33:05Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-01-28T07:55:21Z"
      },
      "sha": "518c459a41d43d78ec9665f59b074a28084a435d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDFmNDI3ODRjNTg5NzdmMDRhZDUzZTgwN2JmOGUzODY0YTU0ZGE2N2I",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1f42784c58977f04ad53e807bf8e3864a54da67b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1f42784c58977f04ad53e807bf8e3864a54da67b",
      "tree": {
        "sha": "9b191507bf55e254c0308fb73ce3b6992f005d89",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9b191507bf55e254c0308fb73ce3b6992f005d89"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/518c459a41d43d78ec9665f59b074a28084a435d",
          "sha": "518c459a41d43d78ec9665f59b074a28084a435d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/518c459a41d43d78ec9665f59b074a28084a435d"
        }
      ],
      "message": "add secp256k1_silentpayments_create_shared_secret_with_proof\n\n- add new internal function which returns both DLEQ proof and\n  shared secret.\n- the existing secp256k1_silentpayments_create_shared_secret API\nis refactored to use\nsecp256k1_silentpayments_create_shared_secret_with_proof.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-09-29T08:15:52Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T12:03:52Z"
      },
      "sha": "1f42784c58977f04ad53e807bf8e3864a54da67b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGZiMWZkNGUwNjVhNmViMGMyZGU5ZDgxMGI0NDFkZGNhMjMyZGQxNGE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/fb1fd4e065a6eb0c2de9d810b441ddca232dd14a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/fb1fd4e065a6eb0c2de9d810b441ddca232dd14a",
      "tree": {
        "sha": "2d77562a9b477050d05b58dc5c460923c62569d7",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/2d77562a9b477050d05b58dc5c460923c62569d7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1f42784c58977f04ad53e807bf8e3864a54da67b",
          "sha": "1f42784c58977f04ad53e807bf8e3864a54da67b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1f42784c58977f04ad53e807bf8e3864a54da67b"
        }
      ],
      "message": "introduce struct to hold DLEQ proof related data for silent payments\n\n- structure contains 33-byte shared secret point + 64-byte DLEQ proof\n  + index of recipient in original unsorted array of silent payment\n    recipients\n- add functions to serialise and parse the structure to/from bytes",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-09-29T08:16:02Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T08:41:59Z"
      },
      "sha": "fb1fd4e065a6eb0c2de9d810b441ddca232dd14a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM1ZGI5MjIyYjM4YWEwZWMwN2VhNTJkNTdlNTZmY2E1N2EzZTBiYmU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c5db9222b38aa0ec07ea52d57e56fca57a3e0bbe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c5db9222b38aa0ec07ea52d57e56fca57a3e0bbe",
      "tree": {
        "sha": "3e8ea736ce0580f09651935731a45e597afd6e1f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3e8ea736ce0580f09651935731a45e597afd6e1f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/fb1fd4e065a6eb0c2de9d810b441ddca232dd14a",
          "sha": "fb1fd4e065a6eb0c2de9d810b441ddca232dd14a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/fb1fd4e065a6eb0c2de9d810b441ddca232dd14a"
        }
      ],
      "message": "add secp256k1_silentpayments_sender_create_outputs_with_proof\n\n- add new API which returns DLEQ proofs along with outputs for recipients\n- the existing API secp256k1_silentpayments_sender_create_outputs simply\n  calls secp256k1_silentpayments_sender_create_outputs_with_proof\n  internally.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-09-29T08:16:02Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T12:35:45Z"
      },
      "sha": "c5db9222b38aa0ec07ea52d57e56fca57a3e0bbe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM3MGQwZTVhMzg0Mjk4ZWI5YWJkZGRhNjk3MWE2ZjU1ZmFhNzYwZjA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c70d0e5a384298eb9abddda6971a6f55faa760f0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c70d0e5a384298eb9abddda6971a6f55faa760f0",
      "tree": {
        "sha": "392c75da7aeb04d3904707fc9a39da4be7b62196",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/392c75da7aeb04d3904707fc9a39da4be7b62196"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c5db9222b38aa0ec07ea52d57e56fca57a3e0bbe",
          "sha": "c5db9222b38aa0ec07ea52d57e56fca57a3e0bbe",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c5db9222b38aa0ec07ea52d57e56fca57a3e0bbe"
        }
      ],
      "message": "add secp256k1_silentpayments_verify_proof",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-09-29T08:16:02Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T12:46:01Z"
      },
      "sha": "c70d0e5a384298eb9abddda6971a6f55faa760f0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGVkMTA5NDg5NmUzNTlmZGFhOTk1OTUyNTBjZjE2MTJlOWExMTFjMGQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ed1094896e359fdaa99595250cf1612e9a111c0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ed1094896e359fdaa99595250cf1612e9a111c0d",
      "tree": {
        "sha": "4f5e6db7f6fb58c5d45cfe6bcfcf2c11d2b9591f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4f5e6db7f6fb58c5d45cfe6bcfcf2c11d2b9591f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c70d0e5a384298eb9abddda6971a6f55faa760f0",
          "sha": "c70d0e5a384298eb9abddda6971a6f55faa760f0",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c70d0e5a384298eb9abddda6971a6f55faa760f0"
        }
      ],
      "message": "add tests for creating and verifying proofs\n\n- in examples/silentpayments.c\n    - sender now generates outputs with proof and verifies the proof\n    - proof can be serialised to bytes and sent to recipient\n    - bytes can be parsed back to proof by recipient as well\n    - recipient can verify proof\n- in tests_recipients_helper, run_silentpayments_test_vector_send\n    - along with output checks, generate DLEQ proofs and verify them",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-09-29T08:16:02Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T08:44:06Z"
      },
      "sha": "ed1094896e359fdaa99595250cf1612e9a111c0d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19985103309,
      "node_id": "HRFPE_lADOAP4Jqs6okbW9zwAAAASnNHnN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/19985103309",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "commit_url": "https://api.github.com/repos/stratospher/secp256k1/commits/ed1094896e359fdaa99595250cf1612e9a111c0d",
      "created_at": "2025-09-29T13:57:22Z"
    },
    {
      "event": "reviewed",
      "id": 3319710413,
      "node_id": "PRR_kwDOAP4Jqs7F3sLN",
      "url": null,
      "actor": null,
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-09T16:33:24Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#pullrequestreview-3319710413",
      "submitted_at": "2025-10-09T16:33:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021543",
      "pull_request_review_id": 2604132450,
      "id": 1948021543,
      "node_id": "PRRC_kwDOAP4Jqs50HHMn",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could use `testutil_random_scalar_order` from `testutil.h` instead",
      "created_at": "2025-02-09T06:49:25Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948021543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 602,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 606,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021729",
      "pull_request_review_id": 2604132450,
      "id": 1948021729,
      "node_id": "PRRC_kwDOAP4Jqs50HHPh",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}\n+\n+static void rand_point(secp256k1_ge *point) {\n+    secp256k1_scalar x;\n+    secp256k1_gej pointj;\n+    rand_scalar(&x);\n+\n+    secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pointj, &x);\n+    secp256k1_ge_set_gej(point, &pointj);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could use `testutil_random_ge_test` from `testutil.h` instead",
      "created_at": "2025-02-09T06:50:39Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948021729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 608,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 615,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023074",
      "pull_request_review_id": 2604132450,
      "id": 1948023074,
      "node_id": "PRRC_kwDOAP4Jqs50HHki",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 57,
      "original_position": 60,
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "pubkey serialization should always succeed here (as it would only fail if `p` is point at inifinity), so could VERIFY_CHECK that instead, like e.g. https://github.com/bitcoin-core/secp256k1/blob/00774d0723af1974e2a113db4adc479bfc47e20f/src/modules/musig/keyagg_impl.h#L131-L138",
      "created_at": "2025-02-09T07:01:09Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948023074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": 55,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023826",
      "pull_request_review_id": 2604132450,
      "id": 1948023826,
      "node_id": "PRRC_kwDOAP4Jqs50HHwS",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 71,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is the `xonly_pk32` parameter actually needed or can it be dropped?",
      "created_at": "2025-02-09T07:06:52Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948023826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026446",
      "pull_request_review_id": 2604132450,
      "id": 1948026446,
      "node_id": "PRRC_kwDOAP4Jqs50HIZO",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 97,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we need to support creating nonces with other tags than \"BIP0374/nonce\"? currently the else-path is not reachable, as far as I can see",
      "created_at": "2025-02-09T07:25:36Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948026446",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026774",
      "pull_request_review_id": 2604132450,
      "id": 1948026774,
      "node_id": "PRRC_kwDOAP4Jqs50HIeW",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 118,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, sizeof(dleq_algo), ndata)) {\r\n```",
      "created_at": "2025-02-09T07:28:10Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948026774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948027339",
      "pull_request_review_id": 2604132450,
      "id": 1948027339,
      "node_id": "PRRC_kwDOAP4Jqs50HInL",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(k, nonce, NULL);\n+    if (secp256k1_scalar_is_zero(k)) {\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Generates a challenge as defined in BIP0374 */\n+static void secp256k1_dleq_challenge(secp256k1_scalar *e, secp256k1_ge *B, secp256k1_ge *R1, secp256k1_ge *R2, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *m) {\n+    unsigned char buf[32];\n+    secp256k1_sha256 sha;\n+    secp256k1_ge generator_point = secp256k1_ge_const_g;\n+\n+    secp256k1_dleq_sha256_tagged(&sha);\n+    secp256k1_dleq_hash_point(&sha, A);\n+    secp256k1_dleq_hash_point(&sha, B);\n+    secp256k1_dleq_hash_point(&sha, C);\n+    secp256k1_dleq_hash_point(&sha, &generator_point);\n+    secp256k1_dleq_hash_point(&sha, R1);\n+    secp256k1_dleq_hash_point(&sha, R2);\n+    if (m) secp256k1_sha256_write(&sha, m, 32);\n+    secp256k1_sha256_finalize(&sha, buf);\n+\n+    secp256k1_scalar_set_b32(e, buf, NULL);\n+}\n+\n+/* Generate points from scalar a such that A = a*G and C = a*B */\n+static void secp256k1_dleq_pair(const secp256k1_ecmult_gen_context *ecmult_gen_ctx, secp256k1_ge *A, secp256k1_ge *C, const secp256k1_scalar *a, const secp256k1_ge *B) {\n+    secp256k1_gej Aj, Cj;\n+\n+    secp256k1_ecmult_gen(ecmult_gen_ctx, &Aj, a);\n+    secp256k1_ge_set_gej(A, &Aj);\n+    secp256k1_ecmult_const(&Cj, B, a);\n+    secp256k1_ge_set_gej(C, &Cj);\n+}\n+\n+/* DLEQ Proof Generation\n+ *\n+ * For given elliptic curve points A, B, C, and G, the prover generates a proof to prove knowledge of a scalar a such\n+ * that A = a⋅G and C = a⋅B without revealing anything about a.\n+ *\n+ *  Returns: 1 if proof creation was successful. 0 if an error occurred.\n+ *  Out:       scalar e: part of proof = bytes(32, e) || bytes(32, s).\n+ *             scalar s: other part of proof = bytes(32, e) || bytes(32, s).\n+ *  In:     a : scalar a to be proven that both A and C were generated from\n+ *          B : point on the curve\n+ *          A : point on the curve(a⋅G) generated from a\n+ *          C : point on the curve(a⋅B) generated from a\n+ *    noncefp : pointer to a nonce generation function. If NULL, secp256k1_nonce_function_dleq is used.\n+ *      ndata : pointer to arbitrary data used by the nonce generation function (can be NULL). If it is non-NULL and",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 172,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "outdated parameters, at these positions are now `aux_rand32` and `m`",
      "created_at": "2025-02-09T07:32:48Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948027339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948027339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948030122",
      "pull_request_review_id": 2604132450,
      "id": 1948030122,
      "node_id": "PRRC_kwDOAP4Jqs50HJSq",
      "diff_hunk": "@@ -721,13 +721,187 @@ static void dleq_tests(void) {\n     CHECK(secp256k1_dleq_nonce(&k, a32, A_33, C_33, NULL, NULL) == 1);\n }\n \n+/* Test vectors according to BIP-374 (\"Discrete Log Equality Proofs\"). See\n+ * https://github.com/bitcoin/bips/blob/master/bip-0374/test_vectors_(generate|verify)_proof.csv.\n+ * Contains 32 bytes a + 33 bytes B + 32 bytes auxrand + 32 bytes optional msg + 64 bytes proof\n+ * */\n+\n+static const unsigned char a_bytes[6][32] = {",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "9948bf1beebf68d4c42b35100c47f5a0b4dbab86",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ideally, the test vector data is created from a script that is included as well (see e.g. https://github.com/bitcoin-core/secp256k1/blob/master/tools/test_vectors_musig2_generate.py for musig2)",
      "created_at": "2025-02-09T07:52:11Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948030122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948030122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 724,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 758,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950254757",
      "pull_request_review_id": 2607719876,
      "id": 1950254757,
      "node_id": "PRRC_kwDOAP4Jqs50Poal",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 57,
      "original_position": 60,
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948023074,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "hmm true. but since input to this function is `secp256k1_ge` and not `secp256k1_pubkey`, unsure if it makes sense to restrict possible values of `secp256k1_ge` here? (in the musig example, input to the function is `secp256k1_pubkey`)",
      "created_at": "2025-02-11T05:33:34Z",
      "updated_at": "2025-02-13T06:48:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950254757",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950254757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": 55,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950290941",
      "pull_request_review_id": 2607719876,
      "id": 1950290941,
      "node_id": "PRRC_kwDOAP4Jqs50PxP9",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 71,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948023826,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ah good point. I've dropped it. was following the approach in schnorr module but it's not needed.",
      "created_at": "2025-02-11T06:30:31Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950290941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950290941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950347701",
      "pull_request_review_id": 2607719876,
      "id": 1950347701,
      "node_id": "PRRC_kwDOAP4Jqs50P_G1",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 97,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948026446,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh true, I've removed it.",
      "created_at": "2025-02-11T07:19:52Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950347701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950347701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348702",
      "pull_request_review_id": 2607719876,
      "id": 1950348702,
      "node_id": "PRRC_kwDOAP4Jqs50P_We",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 118,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948026774,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "removed it to call `secp256k1_nonce_function_dleq` directly.",
      "created_at": "2025-02-11T07:21:05Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950348702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348922",
      "pull_request_review_id": 2607719876,
      "id": 1950348922,
      "node_id": "PRRC_kwDOAP4Jqs50P_Z6",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(k, nonce, NULL);\n+    if (secp256k1_scalar_is_zero(k)) {\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Generates a challenge as defined in BIP0374 */\n+static void secp256k1_dleq_challenge(secp256k1_scalar *e, secp256k1_ge *B, secp256k1_ge *R1, secp256k1_ge *R2, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *m) {\n+    unsigned char buf[32];\n+    secp256k1_sha256 sha;\n+    secp256k1_ge generator_point = secp256k1_ge_const_g;\n+\n+    secp256k1_dleq_sha256_tagged(&sha);\n+    secp256k1_dleq_hash_point(&sha, A);\n+    secp256k1_dleq_hash_point(&sha, B);\n+    secp256k1_dleq_hash_point(&sha, C);\n+    secp256k1_dleq_hash_point(&sha, &generator_point);\n+    secp256k1_dleq_hash_point(&sha, R1);\n+    secp256k1_dleq_hash_point(&sha, R2);\n+    if (m) secp256k1_sha256_write(&sha, m, 32);\n+    secp256k1_sha256_finalize(&sha, buf);\n+\n+    secp256k1_scalar_set_b32(e, buf, NULL);\n+}\n+\n+/* Generate points from scalar a such that A = a*G and C = a*B */\n+static void secp256k1_dleq_pair(const secp256k1_ecmult_gen_context *ecmult_gen_ctx, secp256k1_ge *A, secp256k1_ge *C, const secp256k1_scalar *a, const secp256k1_ge *B) {\n+    secp256k1_gej Aj, Cj;\n+\n+    secp256k1_ecmult_gen(ecmult_gen_ctx, &Aj, a);\n+    secp256k1_ge_set_gej(A, &Aj);\n+    secp256k1_ecmult_const(&Cj, B, a);\n+    secp256k1_ge_set_gej(C, &Cj);\n+}\n+\n+/* DLEQ Proof Generation\n+ *\n+ * For given elliptic curve points A, B, C, and G, the prover generates a proof to prove knowledge of a scalar a such\n+ * that A = a⋅G and C = a⋅B without revealing anything about a.\n+ *\n+ *  Returns: 1 if proof creation was successful. 0 if an error occurred.\n+ *  Out:       scalar e: part of proof = bytes(32, e) || bytes(32, s).\n+ *             scalar s: other part of proof = bytes(32, e) || bytes(32, s).\n+ *  In:     a : scalar a to be proven that both A and C were generated from\n+ *          B : point on the curve\n+ *          A : point on the curve(a⋅G) generated from a\n+ *          C : point on the curve(a⋅B) generated from a\n+ *    noncefp : pointer to a nonce generation function. If NULL, secp256k1_nonce_function_dleq is used.\n+ *      ndata : pointer to arbitrary data used by the nonce generation function (can be NULL). If it is non-NULL and",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 1,
      "original_position": 172,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948027339,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "updated.",
      "created_at": "2025-02-11T07:21:19Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950348922",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349094",
      "pull_request_review_id": 2607719876,
      "id": 1950349094,
      "node_id": "PRRC_kwDOAP4Jqs50P_cm",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948021543,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh nice! done.",
      "created_at": "2025-02-11T07:21:33Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950349094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 602,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 606,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349316",
      "pull_request_review_id": 2607719876,
      "id": 1950349316,
      "node_id": "PRRC_kwDOAP4Jqs50P_gE",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}\n+\n+static void rand_point(secp256k1_ge *point) {\n+    secp256k1_scalar x;\n+    secp256k1_gej pointj;\n+    rand_scalar(&x);\n+\n+    secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pointj, &x);\n+    secp256k1_ge_set_gej(point, &pointj);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948021729,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2025-02-11T07:21:46Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950349316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 608,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 615,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1951312018",
      "pull_request_review_id": 2609538271,
      "id": 1951312018,
      "node_id": "PRRC_kwDOAP4Jqs50TqiS",
      "diff_hunk": "@@ -721,13 +721,187 @@ static void dleq_tests(void) {\n     CHECK(secp256k1_dleq_nonce(&k, a32, A_33, C_33, NULL, NULL) == 1);\n }\n \n+/* Test vectors according to BIP-374 (\"Discrete Log Equality Proofs\"). See\n+ * https://github.com/bitcoin/bips/blob/master/bip-0374/test_vectors_(generate|verify)_proof.csv.\n+ * Contains 32 bytes a + 33 bytes B + 32 bytes auxrand + 32 bytes optional msg + 64 bytes proof\n+ * */\n+\n+static const unsigned char a_bytes[6][32] = {",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "9948bf1beebf68d4c42b35100c47f5a0b4dbab86",
      "in_reply_to_id": 1948030122,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "good point! done in 208352b.",
      "created_at": "2025-02-11T17:45:53Z",
      "updated_at": "2025-02-11T17:45:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1951312018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1951312018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 724,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 758,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417300085",
      "pull_request_review_id": 3319710413,
      "id": 2417300085,
      "node_id": "PRRC_kwDOAP4Jqs6QFRJ1",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static void secp256k1_nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *aux_rand32) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+\n+    if (aux_rand32 != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, aux_rand32, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+}\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, const unsigned char *aux_rand32) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    secp256k1_nonce_function_dleq(nonce, buf, 66, a32, aux_rand32);\n+\n+    secp256k1_scalar_set_b32(k, nonce, NULL);\n+    if (secp256k1_scalar_is_zero(k)) {\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Generates a challenge as defined in BIP0374 */\n+static void secp256k1_dleq_challenge(secp256k1_scalar *e, secp256k1_ge *B, secp256k1_ge *R1, secp256k1_ge *R2, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *m) {\n+    unsigned char buf[32];\n+    secp256k1_sha256 sha;\n+    secp256k1_ge generator_point = secp256k1_ge_const_g;\n+\n+    secp256k1_dleq_sha256_tagged(&sha);\n+    secp256k1_dleq_hash_point(&sha, A);\n+    secp256k1_dleq_hash_point(&sha, B);\n+    secp256k1_dleq_hash_point(&sha, C);\n+    secp256k1_dleq_hash_point(&sha, &generator_point);\n+    secp256k1_dleq_hash_point(&sha, R1);\n+    secp256k1_dleq_hash_point(&sha, R2);\n+    if (m) secp256k1_sha256_write(&sha, m, 32);\n+    secp256k1_sha256_finalize(&sha, buf);\n+\n+    secp256k1_scalar_set_b32(e, buf, NULL);\n+}\n+\n+/* Generate points from scalar a such that A = a*G and C = a*B */\n+static void secp256k1_dleq_pair(const secp256k1_ecmult_gen_context *ecmult_gen_ctx, secp256k1_ge *A, secp256k1_ge *C, const secp256k1_scalar *a, const secp256k1_ge *B) {\n+    secp256k1_gej Aj, Cj;\n+\n+    secp256k1_ecmult_gen(ecmult_gen_ctx, &Aj, a);\n+    secp256k1_ge_set_gej(A, &Aj);\n+    secp256k1_ecmult_const(&Cj, B, a);\n+    secp256k1_ge_set_gej(C, &Cj);\n+}\n+\n+/* DLEQ Proof Generation\n+ *\n+ * For given elliptic curve points A, B, C, and G, the prover generates a proof to prove knowledge of a scalar a such\n+ * that A = a⋅G and C = a⋅B without revealing anything about a.\n+ *\n+ *  Returns: 1 if proof creation was successful. 0 if an error occurred.\n+ *  Out:       scalar e: part of proof = bytes(32, e) || bytes(32, s).\n+ *             scalar s: other part of proof = bytes(32, e) || bytes(32, s).\n+ *  In:     a : scalar a to be proven that both A and C were generated from\n+ *          B : point on the curve\n+ *          A : point on the curve(a⋅G) generated from a\n+ *          C : point on the curve(a⋅B) generated from a\n+ * aux_rand32 : pointer to 32-byte auxiliary randomness used to generate the nonce in secp256k1_nonce_function_dleq.\n+ *          m : an optional message\n+ * */\n+static int secp256k1_dleq_prove(const secp256k1_context *ctx, secp256k1_scalar *s, secp256k1_scalar *e, const secp256k1_scalar *a, secp256k1_ge *B, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *aux_rand32, const unsigned char *m) {\n+    secp256k1_ge R1, R2;\n+    secp256k1_scalar k = { 0 };\n+    unsigned char a32[32];\n+    unsigned char A_33[33];\n+    unsigned char B_33[33];\n+    unsigned char C_33[33];\n+    int ret = 1;\n+    size_t pubkey_size = 33;\n+\n+    secp256k1_scalar_get_b32(a32, a);\n+    if (!secp256k1_eckey_pubkey_serialize(B, B_33, &pubkey_size, 1)) {\n+        return 0;\n+    }\n+    if (!secp256k1_eckey_pubkey_serialize(A, A_33, &pubkey_size, 1)) {\n+        return 0;\n+    }\n+    if (!secp256k1_eckey_pubkey_serialize(C, C_33, &pubkey_size, 1)) {\n+        return 0;\n+    }\n+    ret &= secp256k1_dleq_nonce(&k, a32, A_33, C_33, aux_rand32);",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 175,
      "original_position": 175,
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "original_commit_id": "90630fb28447e020eee1019847034bec0119273d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "as per the latest version of the BIP (0.2.0), the nonce should also include the message, see https://github.com/bitcoin/bips/blob/3d0bab3cc211be9d40c0029f62c7e4eebd27ea21/bip-0374.mediawiki?plain=1#L77, I guess the test vectors are outdated and would fail if re-generated with the latest .csv file",
      "created_at": "2025-10-09T16:18:14Z",
      "updated_at": "2025-10-09T16:33:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r2417300085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417300085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417307901",
      "pull_request_review_id": 3319710413,
      "id": 2417307901,
      "node_id": "PRRC_kwDOAP4Jqs6QFTD9",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static void secp256k1_nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *aux_rand32) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+\n+    if (aux_rand32 != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, aux_rand32, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "original_commit_id": "90630fb28447e020eee1019847034bec0119273d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should memclear the `sha` and `masked_key` instances here (as also done in the [BIP340 nonce function](https://github.com/bitcoin-core/secp256k1/blob/baa265429fa8f1686138380e52a75c25b0344719/src/modules/schnorrsig/main_impl.h#L96))",
      "created_at": "2025-10-09T16:21:23Z",
      "updated_at": "2025-10-09T16:33:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r2417307901",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417307901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417310623",
      "pull_request_review_id": 3319710413,
      "id": 2417310623,
      "node_id": "PRRC_kwDOAP4Jqs6QFTuf",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static void secp256k1_nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *aux_rand32) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+\n+    if (aux_rand32 != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, aux_rand32, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+}\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, const unsigned char *aux_rand32) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    secp256k1_nonce_function_dleq(nonce, buf, 66, a32, aux_rand32);\n+\n+    secp256k1_scalar_set_b32(k, nonce, NULL);\n+    if (secp256k1_scalar_is_zero(k)) {\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Generates a challenge as defined in BIP0374 */\n+static void secp256k1_dleq_challenge(secp256k1_scalar *e, secp256k1_ge *B, secp256k1_ge *R1, secp256k1_ge *R2, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *m) {\n+    unsigned char buf[32];\n+    secp256k1_sha256 sha;\n+    secp256k1_ge generator_point = secp256k1_ge_const_g;\n+\n+    secp256k1_dleq_sha256_tagged(&sha);\n+    secp256k1_dleq_hash_point(&sha, A);\n+    secp256k1_dleq_hash_point(&sha, B);\n+    secp256k1_dleq_hash_point(&sha, C);\n+    secp256k1_dleq_hash_point(&sha, &generator_point);\n+    secp256k1_dleq_hash_point(&sha, R1);\n+    secp256k1_dleq_hash_point(&sha, R2);\n+    if (m) secp256k1_sha256_write(&sha, m, 32);\n+    secp256k1_sha256_finalize(&sha, buf);\n+\n+    secp256k1_scalar_set_b32(e, buf, NULL);\n+}\n+\n+/* Generate points from scalar a such that A = a*G and C = a*B */\n+static void secp256k1_dleq_pair(const secp256k1_ecmult_gen_context *ecmult_gen_ctx, secp256k1_ge *A, secp256k1_ge *C, const secp256k1_scalar *a, const secp256k1_ge *B) {\n+    secp256k1_gej Aj, Cj;\n+\n+    secp256k1_ecmult_gen(ecmult_gen_ctx, &Aj, a);\n+    secp256k1_ge_set_gej(A, &Aj);\n+    secp256k1_ecmult_const(&Cj, B, a);\n+    secp256k1_ge_set_gej(C, &Cj);\n+}\n+\n+/* DLEQ Proof Generation\n+ *\n+ * For given elliptic curve points A, B, C, and G, the prover generates a proof to prove knowledge of a scalar a such\n+ * that A = a⋅G and C = a⋅B without revealing anything about a.\n+ *\n+ *  Returns: 1 if proof creation was successful. 0 if an error occurred.\n+ *  Out:       scalar e: part of proof = bytes(32, e) || bytes(32, s).\n+ *             scalar s: other part of proof = bytes(32, e) || bytes(32, s).\n+ *  In:     a : scalar a to be proven that both A and C were generated from\n+ *          B : point on the curve\n+ *          A : point on the curve(a⋅G) generated from a\n+ *          C : point on the curve(a⋅B) generated from a\n+ * aux_rand32 : pointer to 32-byte auxiliary randomness used to generate the nonce in secp256k1_nonce_function_dleq.\n+ *          m : an optional message\n+ * */\n+static int secp256k1_dleq_prove(const secp256k1_context *ctx, secp256k1_scalar *s, secp256k1_scalar *e, const secp256k1_scalar *a, secp256k1_ge *B, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *aux_rand32, const unsigned char *m) {\n+    secp256k1_ge R1, R2;\n+    secp256k1_scalar k = { 0 };\n+    unsigned char a32[32];\n+    unsigned char A_33[33];\n+    unsigned char B_33[33];\n+    unsigned char C_33[33];\n+    int ret = 1;\n+    size_t pubkey_size = 33;\n+\n+    secp256k1_scalar_get_b32(a32, a);\n+    if (!secp256k1_eckey_pubkey_serialize(B, B_33, &pubkey_size, 1)) {\n+        return 0;\n+    }\n+    if (!secp256k1_eckey_pubkey_serialize(A, A_33, &pubkey_size, 1)) {\n+        return 0;\n+    }\n+    if (!secp256k1_eckey_pubkey_serialize(C, C_33, &pubkey_size, 1)) {\n+        return 0;\n+    }\n+    ret &= secp256k1_dleq_nonce(&k, a32, A_33, C_33, aux_rand32);\n+\n+    /* R1 = k*G, R2 = k*B */\n+    secp256k1_dleq_pair(&ctx->ecmult_gen_ctx, &R1, &R2, &k, B);\n+    /* We declassify the non-secret values R1 and R2 to allow using them as\n+     * branch points. */\n+    secp256k1_declassify(ctx, &R1, sizeof(R1));\n+    secp256k1_declassify(ctx, &R2, sizeof(R2));\n+\n+    /* e = tagged hash(A, B, C, R1, R2) */\n+    /* s = k + e * a */\n+    secp256k1_dleq_challenge(e, B, &R1, &R2, A, C, m);\n+    secp256k1_scalar_mul(s, e, a);\n+    secp256k1_scalar_add(s, s, &k);\n+\n+    secp256k1_scalar_clear(&k);",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 190,
      "original_position": 190,
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "original_commit_id": "90630fb28447e020eee1019847034bec0119273d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should also clear out the secret key serialization `a32` here",
      "created_at": "2025-10-09T16:22:25Z",
      "updated_at": "2025-10-09T16:33:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r2417310623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417310623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417319688",
      "pull_request_review_id": 3319710413,
      "id": 2417319688,
      "node_id": "PRRC_kwDOAP4Jqs6QFV8I",
      "diff_hunk": "@@ -444,6 +457,30 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_recipien\n     const uint32_t k\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Serialize a secp256k1_silentpayments_dleq_data object into a 101-byte sequence.\n+ *  101-byte sequence = 33 bytes shared secret + 64 bytes proof + 4 bytes index\n+ *                      where index is position in an array of pointers to silent payment recipients\n+ *\n+ *  Out:       output: pointer to a 101-byte array to place the serialized `secp256k1_silentpayments_dleq_data` in\n+ *  In:    dleq_data: pointer to an initialized secp256k1_silentpayments_dleq_data object\n+ */\n+SECP256K1_API void secp256k1_silentpayments_dleq_data_serialize(\n+    unsigned char *output33,",
      "path": "include/secp256k1_silentpayments.h",
      "position": 521,
      "original_position": 32,
      "commit_id": "ed1094896e359fdaa99595250cf1612e9a111c0d",
      "original_commit_id": "fb1fd4e065a6eb0c2de9d810b441ddca232dd14a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    unsigned char *output101,\r\n```",
      "created_at": "2025-10-09T16:25:59Z",
      "updated_at": "2025-10-09T16:33:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r2417319688",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/2417319688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 521,
      "original_line": 468,
      "side": "RIGHT"
    }
  ]
}