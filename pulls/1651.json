{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651",
    "id": 2313278616,
    "node_id": "PR_kwDOAP4Jqs6J4dSY",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1651.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1651.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/41ee3e82881d741db9fa5378f6959e9888e18c5e",
    "number": 1651,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "add DLEQ proof based on BIP374 and use it for silent payments",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "built on top of f42e0dde59943ad0c9247c61f7af521b70838e8f.\r\n\r\n> BIP352 requires senders to compute output scripts using ECDH shared secrets from the same secret keys used to sign the inputs. Generating an incorrect signature will produce an invalid transaction that will be rejected by consensus. An incorrectly generated output script can still be consensus-valid, meaning funds may be lost if it gets broadcast. By producing a DLEQ proof for the generated ECDH shared secrets, the signing entity can prove to other entities that the output scripts have been generated correctly without revealing the private keys.\r\n\r\n(from [BIP 374](https://github.com/bitcoin/bips/blob/master/bip-0374.mediawiki))\r\n\r\nThis PR:\r\n\r\n- adds support for DLEQ proof generation and verification using `secp256k1_dleq_prove`, `secp256k1_dleq_verify` based on implementation in [secp256k1-zkp](https://github.com/BlockstreamResearch/secp256k1-zkp/blob/master/src/modules/ecdsa_adaptor/dleq_impl.h)\r\n- introduces a new structure for storing proofs in silent payment module - `secp256k1_silentpayments_dleq_data` which stores the shared secret computed using ECDH, DLEQ proof and also the index of which recipient in the [original unsorted recipient array](https://github.com/bitcoin-core/secp256k1/blob/f42e0dde59943ad0c9247c61f7af521b70838e8f/include/secp256k1_silentpayments.h#L43)  the proof refers to.\r\n- adds 4 new APIs in silent payments module to create, verify, serialize and parse proof\r\n    1. sender can create proof using `secp256k1_silentpayments_sender_create_outputs_with_proof`\r\n        - in the existing `secp256k1_silentpayments_sender_create_outputs` API, output pubkey is created by iterating over all the recipients and computing ECDH for each unique recipient.\r\n        - since creating the proof also requites iterating over all recipients and computing ECDH for each unique recipient, compute both proof(s) and output pubkey(s) in a new function - `secp256k1_silentpayments_sender_create_outputs_with_proof`.\r\n        - `secp256k1_silentpayments_sender_create_outputs` can use `secp256k1_silentpayments_sender_create_outputs_with_proof`internally.\r\n    2.  both sender and receiver can verify proof using `secp256k1_silentpayments_verify_proof`\r\n    3. Serialisation function (`secp256k1_silentpayments_dleq_data_serialize`) serialises  `secp256k1_silentpayments_dleq_data` structure into bytes. `secp256k1_silentpayments_dleq_data_parse` parses the bytes back into `secp256k1_silentpayments_dleq_data` structure.\r\n        1. useful if proof creation is done on 1 sender side device (ex: hardware wallet) and proof verification is done on another sender side device (ex: software wallet). `secp256k1_silentpayments_dleq_data` structure can be serialised into bytes using `secp256k1_silentpayments_dleq_data_serialize` and then the bytes can be sent from 1 device to another.\r\n        2. `secp256k1_silentpayments_dleq_data_parse` can reconstruct the bytes back into `secp256k1_silentpayments_dleq_data` structure which can then be used for proof verification.\r\n\r\nopen questions:\r\n\r\n1. is the API design ok?\r\n    1. see `examples/silentpayments.c` for 2 scenarios in which proof verification could be useful. (Alice sends bitcoins to Bob and Carol in 1 silent payment transaction)\r\n        1. useful situation - On Alice’s side\r\n            1. Alice’s hardware wallet creates proof\r\n            2. Alice’s hardware wallet sends proof to Alice’s software wallet\r\n            3. Alice’s software wallet verifies proof and makes sure ECDH shared secrets for generating SP output is computed correctly. Alice can get additional safety guarantee about computed SP output before sending funds.\r\n        2. not sure if this situation is useful - On Bob’s/Carol’s side\r\n            1. Alice’s software wallet sends proof to Bob’s/Carol’s  software wallet\r\n            2. Bob’s/Carol’s software wallet verifies proof and makes sure ECDH shared secrets for generating SP output is computed correctly.\r\n2. should this be shipped with SP module or separately? only problem with separate release would be redundant APIs like `secp256k1_silentpayments_sender_create_outputs` and `secp256k1_silentpayments_sender_create_outputs_with_proof` for backward compatibility. \r\n\r\nHuge thanks to @ theStack for brainstorming and discussing this with me! ❤️",
    "labels": [
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      }
    ],
    "created_at": "2025-02-03T17:32:28Z",
    "updated_at": "2025-03-13T10:04:34Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "stratospher:dleq-sp",
      "ref": "dleq-sp",
      "sha": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 519443361,
        "node_id": "R_kgDOHvYToQ",
        "name": "secp256k1",
        "full_name": "stratospher/secp256k1",
        "owner": {
          "login": "stratospher",
          "id": 44024636,
          "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stratospher",
          "html_url": "https://github.com/stratospher",
          "followers_url": "https://api.github.com/users/stratospher/followers",
          "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
          "organizations_url": "https://api.github.com/users/stratospher/orgs",
          "repos_url": "https://api.github.com/users/stratospher/repos",
          "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stratospher/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/stratospher/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/stratospher/secp256k1",
        "archive_url": "https://api.github.com/repos/stratospher/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stratospher/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stratospher/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stratospher/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stratospher/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stratospher/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stratospher/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stratospher/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stratospher/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stratospher/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/stratospher/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/stratospher/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/stratospher/secp256k1/events",
        "forks_url": "https://api.github.com/repos/stratospher/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/stratospher/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stratospher/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stratospher/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stratospher/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/stratospher/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stratospher/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stratospher/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stratospher/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stratospher/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stratospher/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/stratospher/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/stratospher/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stratospher/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stratospher/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stratospher/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:stratospher/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/stratospher/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/stratospher/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stratospher/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/stratospher/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/stratospher/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/stratospher/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/stratospher/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stratospher/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/stratospher/secp256k1/hooks",
        "svn_url": "https://github.com/stratospher/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 12346,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-10T14:43:08Z",
        "created_at": "2022-07-30T06:55:56Z",
        "updated_at": "2025-03-10T14:43:13Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "2e3bf136532e48a88baec544d485e54f7bd29db8",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 1042,
        "stargazers_count": 2181,
        "watchers_count": 2181,
        "size": 12342,
        "default_branch": "master",
        "open_issues_count": 142,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-13T09:07:24Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2025-03-13T09:16:44Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 10602,
    "deletions": 12,
    "changed_files": 25,
    "commits": 16,
    "review_comments": 16,
    "comments": 1
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGFhNjVmNDhhYTI3ZTMzNGQ2NTYxMWIyNzEzYzhmNDA3N2NlODYwYTI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/aa65f48aa27e334d65611b2713c8f4077ce860a2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/aa65f48aa27e334d65611b2713c8f4077ce860a2",
      "tree": {
        "sha": "b55ff733eb9a91a3a6a7df9002c5a55a059190a9",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b55ff733eb9a91a3a6a7df9002c5a55a059190a9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/00774d0723af1974e2a113db4adc479bfc47e20f",
          "sha": "00774d0723af1974e2a113db4adc479bfc47e20f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/00774d0723af1974e2a113db4adc479bfc47e20f"
        }
      ],
      "message": "build: add skeleton for new silentpayments (BIP352) module",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T15:44:30Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-09-27T15:22:14Z"
      },
      "sha": "aa65f48aa27e334d65611b2713c8f4077ce860a2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM1NDYyNThiMjUwYmI0YTQ3N2IwMTYyZDhkNWMyMzY1OTljMzBkZjc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c546258b250bb4a477b0162d8d5c236599c30df7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c546258b250bb4a477b0162d8d5c236599c30df7",
      "tree": {
        "sha": "fcb8f0899ef492ef2e40c84027ffa39c701e29bf",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/fcb8f0899ef492ef2e40c84027ffa39c701e29bf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/aa65f48aa27e334d65611b2713c8f4077ce860a2",
          "sha": "aa65f48aa27e334d65611b2713c8f4077ce860a2",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/aa65f48aa27e334d65611b2713c8f4077ce860a2"
        }
      ],
      "message": "silentpayments: sending\n\nAdd a routine for the entire sending flow which takes a set of private keys,\nthe smallest outpoint, and list of recipients and returns a list of\nx-only public keys by performing the following steps:\n\n1. Sum up the private keys\n2. Calculate the input_hash\n3. For each recipient group:\n    3a. Calculate a shared secret\n    3b. Create the requested number of outputs\n\nThis function assumes a single sender context in that it requires the\nsender to have access to all of the private keys. In the future, this\nAPI may be expanded to allow for a multiple senders or for a single\nsender who does not have access to all private keys at any given time,\nbut for now these modes are considered out of scope / unsafe.\n\nInternal to the library, add:\n\n1. A function for creating shared secrets (i.e., a*B or b*A)\n2. A function for generating the \"SharedSecret\" tagged hash\n3. A function for creating a single output public key\n\nFinally, add tests for the sender API.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T15:44:30Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-03-25T16:23:37Z"
      },
      "sha": "c546258b250bb4a477b0162d8d5c236599c30df7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGFiZThjNWFhNmMzMTU4NzIzYTFkNzk4MzVjNDI5MjY5YWM3ZmQ1ZTE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/abe8c5aa6c3158723a1d79835c429269ac7fd5e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/abe8c5aa6c3158723a1d79835c429269ac7fd5e1",
      "tree": {
        "sha": "c20801855d6455ab3b0ba8bd115f30254bc1a3c5",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c20801855d6455ab3b0ba8bd115f30254bc1a3c5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c546258b250bb4a477b0162d8d5c236599c30df7",
          "sha": "c546258b250bb4a477b0162d8d5c236599c30df7",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c546258b250bb4a477b0162d8d5c236599c30df7"
        }
      ],
      "message": "silentpayments: recipient label support\n\nAdd function for creating a label tweak. This requires a tagged hash\nfunction for labels. This function is used by the receiver for creating\nlabels to be used for a) creating labelled addresses and b) to populate\na labels cache when scanning.\n\nAdd function for creating a labelled spend pubkey. This involves taking\na label tweak, turning it into a public key and adding it to the spend\npublic key. This function is used by the receiver to create a labelled\nsilent payment address.\n\nAdd tests for the label API.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T15:44:30Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-01-22T17:56:05Z"
      },
      "sha": "abe8c5aa6c3158723a1d79835c429269ac7fd5e1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDRlMGU1OGZlMzIyMTllMmJlMGFhYTMzOWUxNDIzYWY2Y2Q0ZDcwNGY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4e0e58fe32219e2be0aaa339e1423af6cd4d704f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4e0e58fe32219e2be0aaa339e1423af6cd4d704f",
      "tree": {
        "sha": "ed07320eea56e26584df7f6c261807d61c04ef36",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ed07320eea56e26584df7f6c261807d61c04ef36"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/abe8c5aa6c3158723a1d79835c429269ac7fd5e1",
          "sha": "abe8c5aa6c3158723a1d79835c429269ac7fd5e1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/abe8c5aa6c3158723a1d79835c429269ac7fd5e1"
        }
      ],
      "message": "silentpayments: receiving\n\nAdd routine for scanning a transaction and returning the necessary\nspending data for any found outputs. This function works with labels via\na lookup callback and requires access to the transaction outputs.\nRequiring access to the transaction outputs is not suitable for light\nclients, but light client support is enabled by exposing the\n`_create_shared_secret` and `_create_output_pubkey` functions in the\nAPI. This means the light client will need to manage their own scanning\nstate, so wherever possible it is preferrable to use the\n`_recipient_scan_ouputs` function.\n\nAdd an opaque data type for passing around the summed input public key (A_sum)\nand the input hash tweak (input_hash). This data is passed to the scanner\nbefore the ECDH step as two separate elements so that the scanner can\nmultiply b_scan * input_hash before doing ECDH.\n\nAdd functions for deserializing / serializing a public_data object to\nand from a public key. When serializing a public_data object, the\ninput_hash is multplied into A_sum. This is so the object can be stored\nas public key for wallet rescanning later, or to vend to light clients.\nFor the light client, a `_parse` function is added which parses the\ncompressed public key serialization into a `public_data` object.\n\nFinally, add test coverage for the recieiving API.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T15:44:30Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-06-29T11:33:30Z"
      },
      "sha": "4e0e58fe32219e2be0aaa339e1423af6cd4d704f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRmZWJhMDJkOGY3YmI4MjA3OTM2ZWJhNTEzNjk4OWU1Nzc4ZWY4NmM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dfeba02d8f7bb8207936eba5136989e5778ef86c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dfeba02d8f7bb8207936eba5136989e5778ef86c",
      "tree": {
        "sha": "c3846b4c4836dbe829fa76c89fe766d70887e8f5",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c3846b4c4836dbe829fa76c89fe766d70887e8f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4e0e58fe32219e2be0aaa339e1423af6cd4d704f",
          "sha": "4e0e58fe32219e2be0aaa339e1423af6cd4d704f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4e0e58fe32219e2be0aaa339e1423af6cd4d704f"
        }
      ],
      "message": "silentpayments: add examples/silentpayments.c\n\nDemonstrate sending, scanning, and light client scanning.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T15:47:03Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-15T17:36:29Z"
      },
      "sha": "dfeba02d8f7bb8207936eba5136989e5778ef86c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDU1ZjZiZGZhNzQ1MGJiMzI2ODExYjU1OGUwMzg2OTVjYTZlMWIwN2Q",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/55f6bdfa7450bb326811b558e038695ca6e1b07d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/55f6bdfa7450bb326811b558e038695ca6e1b07d",
      "tree": {
        "sha": "8315d3b17b79da6573430830f3acb7cb33d57bf8",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/8315d3b17b79da6573430830f3acb7cb33d57bf8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dfeba02d8f7bb8207936eba5136989e5778ef86c",
          "sha": "dfeba02d8f7bb8207936eba5136989e5778ef86c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dfeba02d8f7bb8207936eba5136989e5778ef86c"
        }
      ],
      "message": "silentpayments: add benchmarks for scanning\n\nAdd a benchmark for a full transaction scan and for scanning a single\noutput. Only benchmarks for scanning are added as this is the most\nperformance critical portion of the protocol.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T15:47:05Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-04-25T17:33:35Z"
      },
      "sha": "55f6bdfa7450bb326811b558e038695ca6e1b07d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGE3OTRkMjNlOWE4MzFhZjkyYTYyODYzZGQ0ZGFmNTQxMjJjMGY0Zjg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a794d23e9a831af92a62863dd4daf54122c0f4f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a794d23e9a831af92a62863dd4daf54122c0f4f8",
      "tree": {
        "sha": "9e4251834be0dd2c3995d7fc78a48f983d3f36f9",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9e4251834be0dd2c3995d7fc78a48f983d3f36f9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/55f6bdfa7450bb326811b558e038695ca6e1b07d",
          "sha": "55f6bdfa7450bb326811b558e038695ca6e1b07d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/55f6bdfa7450bb326811b558e038695ca6e1b07d"
        }
      ],
      "message": "tests: add BIP-352 test vectors\n\nAdd the BIP-352 test vectors. The vectors are generated with a Python script\nthat converts the .json file from the BIP to C code:\n\n$ ./tools/tests_silentpayments_generate.py test_vectors.json > ./src/modules/silentpayments/vectors.h",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T15:47:05Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-02T17:45:43Z"
      },
      "sha": "a794d23e9a831af92a62863dd4daf54122c0f4f8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDc0NmFiZmI3OWRmNTQ5ZDVjYzA3YzhjNThjNmJmZWRmNmRlZjU4NGU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/746abfb79df549d5cc07c8c58c6bfedf6def584e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/746abfb79df549d5cc07c8c58c6bfedf6def584e",
      "tree": {
        "sha": "422544ecdb9129841ea162499ed7c7e1a7b0fc08",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/422544ecdb9129841ea162499ed7c7e1a7b0fc08"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a794d23e9a831af92a62863dd4daf54122c0f4f8",
          "sha": "a794d23e9a831af92a62863dd4daf54122c0f4f8",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a794d23e9a831af92a62863dd4daf54122c0f4f8"
        }
      ],
      "message": "ci: enable silentpayments module",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T16:01:46Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-22T23:25:41Z"
      },
      "sha": "746abfb79df549d5cc07c8c58c6bfedf6def584e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDg2ZDg1MDc2ZTBmZGVlZjFjZTFlNzBhMWY1NTdiY2I4ZWVlNDcxMjg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/86d85076e0fdeef1ce1e70a1f557bcb8eee47128",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/86d85076e0fdeef1ce1e70a1f557bcb8eee47128",
      "tree": {
        "sha": "79d9b7e7c212243f810a12e2c0a1d44ec01d383d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/79d9b7e7c212243f810a12e2c0a1d44ec01d383d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/746abfb79df549d5cc07c8c58c6bfedf6def584e",
          "sha": "746abfb79df549d5cc07c8c58c6bfedf6def584e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/746abfb79df549d5cc07c8c58c6bfedf6def584e"
        }
      ],
      "message": "docs: update README",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T16:02:20Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-12T12:57:54Z"
      },
      "sha": "86d85076e0fdeef1ce1e70a1f557bcb8eee47128"
    },
    {
      "event": "reviewed",
      "id": 2604132450,
      "node_id": "PRR_kwDOAP4Jqs6bN-hi",
      "url": null,
      "actor": null,
      "commit_id": "ea9236a6b7c9bfec60fa3fb2dda94d8b164edc55",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, nice! Left some initial comments for the BIP374-only parts (first two commits).",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#pullrequestreview-2604132450",
      "submitted_at": "2025-02-09T07:53:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDVmN2E3MTZmYTJhYjhhYTZiNDc1ZWNiYzU4ZTcyM2EwZTNlM2Y4ODI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5f7a716fa2ab8aa6b475ecbc58e723a0e3e3f882",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5f7a716fa2ab8aa6b475ecbc58e723a0e3e3f882",
      "tree": {
        "sha": "97f4083310a391e72fefa2de205be69386b9fcd2",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/97f4083310a391e72fefa2de205be69386b9fcd2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/86d85076e0fdeef1ce1e70a1f557bcb8eee47128",
          "sha": "86d85076e0fdeef1ce1e70a1f557bcb8eee47128",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/86d85076e0fdeef1ce1e70a1f557bcb8eee47128"
        }
      ],
      "message": "add dleq implementation\n\n- modify secp256k1-zkp's dleq implementation to be consistent with\n  BIP 374.\n- use BIP374 notations.\n- add DLEQ tests",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-11T07:01:23Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T07:33:52Z"
      },
      "sha": "5f7a716fa2ab8aa6b475ecbc58e723a0e3e3f882"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16259695555,
      "node_id": "HRFPE_lADOAP4Jqs6okbW9zwAAAAPJJ0PD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16259695555",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "44bf41dfb4bb59a0b38c6cb48ce6228c192bf195",
      "commit_url": "https://api.github.com/repos/stratospher/secp256k1/commits/44bf41dfb4bb59a0b38c6cb48ce6228c192bf195",
      "created_at": "2025-02-11T07:38:07Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDIwODM1MmJiOTc2N2U1ZTQ4NGNiYzZkNWMzM2RjMDQ5N2Q0ZjRlYjc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/208352bb9767e5e484cbc6d5c33dc0497d4f4eb7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/208352bb9767e5e484cbc6d5c33dc0497d4f4eb7",
      "tree": {
        "sha": "81ef01a1d309e9830164172827358d63f05f67ac",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/81ef01a1d309e9830164172827358d63f05f67ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/5f7a716fa2ab8aa6b475ecbc58e723a0e3e3f882",
          "sha": "5f7a716fa2ab8aa6b475ecbc58e723a0e3e3f882",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/5f7a716fa2ab8aa6b475ecbc58e723a0e3e3f882"
        }
      ],
      "message": "add BIP374 test vectors\n\nAdd BIP374 test vectors. The vectors are generated with a Python script\nthat converts the 2 csv files from the BIP - test_vectors_generate_proof.csv\nand test_vectors_verify_proof.csv to C code:\n\n$ ./tools/test_vectors_dleq_generate.py bips/bip-0374 > ./src/modules/silentpayments/dleq_vectors.h",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-11T17:38:53Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-01-28T07:55:21Z"
      },
      "sha": "208352bb9767e5e484cbc6d5c33dc0497d4f4eb7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDZjZGY2OGJhZTAwOTA2YzgyNWRlNGIzMjQ4MDgxZjk2MjQ4NDI4YzE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6cdf68bae00906c825de4b3248081f96248428c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6cdf68bae00906c825de4b3248081f96248428c1",
      "tree": {
        "sha": "ca1d5b0eec8517d840f5054ea28c712c1cab7c4b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ca1d5b0eec8517d840f5054ea28c712c1cab7c4b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/208352bb9767e5e484cbc6d5c33dc0497d4f4eb7",
          "sha": "208352bb9767e5e484cbc6d5c33dc0497d4f4eb7",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/208352bb9767e5e484cbc6d5c33dc0497d4f4eb7"
        }
      ],
      "message": "add secp256k1_silentpayments_create_shared_secret_with_proof\n\n- add new internal function which returns both DLEQ proof and\n  shared secret.\n- the existing secp256k1_silentpayments_create_shared_secret API\nis refactored to use\nsecp256k1_silentpayments_create_shared_secret_with_proof.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-11T17:39:34Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T12:03:52Z"
      },
      "sha": "6cdf68bae00906c825de4b3248081f96248428c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDhjMDA2MTg4Njg4YzkxYTA2YjJlMTI0MTJlNGUwMjQ5MDM2NDI4OGU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8c006188688c91a06b2e12412e4e02490364288e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8c006188688c91a06b2e12412e4e02490364288e",
      "tree": {
        "sha": "e34ae9f6b302e9bfc2244aae966ab664eaf7fe27",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e34ae9f6b302e9bfc2244aae966ab664eaf7fe27"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6cdf68bae00906c825de4b3248081f96248428c1",
          "sha": "6cdf68bae00906c825de4b3248081f96248428c1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6cdf68bae00906c825de4b3248081f96248428c1"
        }
      ],
      "message": "introduce struct to hold DLEQ proof related data for silent payments\n\n- structure contains 33-byte shared secret point + 64-byte DLEQ proof\n  + index of recipient in original unsorted array of silent payment\n    recipients\n- add functions to serialise and parse the structure to/from bytes",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-11T17:39:34Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T08:41:59Z"
      },
      "sha": "8c006188688c91a06b2e12412e4e02490364288e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGIyNDk3NTg3YmVjMTIzOGQ4ZTA4NTZmMWVkNjU3OTI1OGRmNDUwYjE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b2497587bec1238d8e0856f1ed6579258df450b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b2497587bec1238d8e0856f1ed6579258df450b1",
      "tree": {
        "sha": "504b243e95b6a68fb914ffe2b379f5129b3d3c7c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/504b243e95b6a68fb914ffe2b379f5129b3d3c7c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8c006188688c91a06b2e12412e4e02490364288e",
          "sha": "8c006188688c91a06b2e12412e4e02490364288e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8c006188688c91a06b2e12412e4e02490364288e"
        }
      ],
      "message": "add secp256k1_silentpayments_sender_create_outputs_with_proof\n\n- add new API which returns DLEQ proofs along with outputs for recipients\n- the existing API secp256k1_silentpayments_sender_create_outputs simply\n  calls secp256k1_silentpayments_sender_create_outputs_with_proof\n  internally.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-11T17:39:34Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T12:35:45Z"
      },
      "sha": "b2497587bec1238d8e0856f1ed6579258df450b1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDkxYWE4YzM4MGNjOTU3ODlhNjc5ZTYzMGUwZDRiMDFjMmJkNGFkN2I",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/91aa8c380cc95789a679e630e0d4b01c2bd4ad7b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/91aa8c380cc95789a679e630e0d4b01c2bd4ad7b",
      "tree": {
        "sha": "c7509e538d3f9d863b48401c61e286732fca3271",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c7509e538d3f9d863b48401c61e286732fca3271"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b2497587bec1238d8e0856f1ed6579258df450b1",
          "sha": "b2497587bec1238d8e0856f1ed6579258df450b1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b2497587bec1238d8e0856f1ed6579258df450b1"
        }
      ],
      "message": "add secp256k1_silentpayments_verify_proof",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-11T17:39:34Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-11-22T12:46:01Z"
      },
      "sha": "91aa8c380cc95789a679e630e0d4b01c2bd4ad7b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQxZWUzZTgyODgxZDc0MWRiOWZhNTM3OGY2OTU5ZTk4ODhlMThjNWU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "tree": {
        "sha": "f43ecd4197eac5c42cea803c435cba752947c04b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/f43ecd4197eac5c42cea803c435cba752947c04b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/91aa8c380cc95789a679e630e0d4b01c2bd4ad7b",
          "sha": "91aa8c380cc95789a679e630e0d4b01c2bd4ad7b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/91aa8c380cc95789a679e630e0d4b01c2bd4ad7b"
        }
      ],
      "message": "add tests for creating and verifying proofs\n\n- in examples/silentpayments.c\n    - sender now generates outputs with proof and verifies the proof\n    - proof can be serialised to bytes and sent to recipient\n    - bytes can be parsed back to proof by recipient as well\n    - recipient can verify proof\n- in tests_recipients_helper, run_silentpayments_test_vector_send\n    - along with output checks, generate DLEQ proofs and verify them\n\nadd detailed examples showing parsing/serialisation",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-11T17:39:34Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-02-03T08:44:06Z"
      },
      "sha": "41ee3e82881d741db9fa5378f6959e9888e18c5e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16268774100,
      "node_id": "HRFPE_lADOAP4Jqs6okbW9zwAAAAPJscrU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16268774100",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "commit_url": "https://api.github.com/repos/stratospher/secp256k1/commits/41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "created_at": "2025-02-11T17:43:12Z"
    },
    {
      "event": "commented",
      "id": 2688913408,
      "node_id": "IC_kwDOAP4Jqs6gRZAA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2688913408",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-27T19:29:03Z",
      "updated_at": "2025-02-27T19:29:03Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#issuecomment-2688913408",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1651"
    },
    {
      "event": "labeled",
      "id": 16731258556,
      "node_id": "LE_lADOAP4Jqs6okbW9zwAAAAPlQr68",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/16731258556",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T10:04:34Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021543",
      "pull_request_review_id": 2604132450,
      "id": 1948021543,
      "node_id": "PRRC_kwDOAP4Jqs50HHMn",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 16,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could use `testutil_random_scalar_order` from `testutil.h` instead",
      "created_at": "2025-02-09T06:49:25Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948021543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 602,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 606,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021729",
      "pull_request_review_id": 2604132450,
      "id": 1948021729,
      "node_id": "PRRC_kwDOAP4Jqs50HHPh",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}\n+\n+static void rand_point(secp256k1_ge *point) {\n+    secp256k1_scalar x;\n+    secp256k1_gej pointj;\n+    rand_scalar(&x);\n+\n+    secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pointj, &x);\n+    secp256k1_ge_set_gej(point, &pointj);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 25,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could use `testutil_random_ge_test` from `testutil.h` instead",
      "created_at": "2025-02-09T06:50:39Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948021729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948021729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 608,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 615,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023074",
      "pull_request_review_id": 2604132450,
      "id": 1948023074,
      "node_id": "PRRC_kwDOAP4Jqs50HHki",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 57,
      "original_position": 60,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "pubkey serialization should always succeed here (as it would only fail if `p` is point at inifinity), so could VERIFY_CHECK that instead, like e.g. https://github.com/bitcoin-core/secp256k1/blob/00774d0723af1974e2a113db4adc479bfc47e20f/src/modules/musig/keyagg_impl.h#L131-L138",
      "created_at": "2025-02-09T07:01:09Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948023074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": 55,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023826",
      "pull_request_review_id": 2604132450,
      "id": 1948023826,
      "node_id": "PRRC_kwDOAP4Jqs50HHwS",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 71,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is the `xonly_pk32` parameter actually needed or can it be dropped?",
      "created_at": "2025-02-09T07:06:52Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948023826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948023826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026446",
      "pull_request_review_id": 2604132450,
      "id": 1948026446,
      "node_id": "PRRC_kwDOAP4Jqs50HIZO",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 97,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we need to support creating nonces with other tags than \"BIP0374/nonce\"? currently the else-path is not reachable, as far as I can see",
      "created_at": "2025-02-09T07:25:36Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948026446",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026774",
      "pull_request_review_id": 2604132450,
      "id": 1948026774,
      "node_id": "PRRC_kwDOAP4Jqs50HIeW",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 118,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, sizeof(dleq_algo), ndata)) {\r\n```",
      "created_at": "2025-02-09T07:28:10Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948026774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948026774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948027339",
      "pull_request_review_id": 2604132450,
      "id": 1948027339,
      "node_id": "PRRC_kwDOAP4Jqs50HInL",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(k, nonce, NULL);\n+    if (secp256k1_scalar_is_zero(k)) {\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Generates a challenge as defined in BIP0374 */\n+static void secp256k1_dleq_challenge(secp256k1_scalar *e, secp256k1_ge *B, secp256k1_ge *R1, secp256k1_ge *R2, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *m) {\n+    unsigned char buf[32];\n+    secp256k1_sha256 sha;\n+    secp256k1_ge generator_point = secp256k1_ge_const_g;\n+\n+    secp256k1_dleq_sha256_tagged(&sha);\n+    secp256k1_dleq_hash_point(&sha, A);\n+    secp256k1_dleq_hash_point(&sha, B);\n+    secp256k1_dleq_hash_point(&sha, C);\n+    secp256k1_dleq_hash_point(&sha, &generator_point);\n+    secp256k1_dleq_hash_point(&sha, R1);\n+    secp256k1_dleq_hash_point(&sha, R2);\n+    if (m) secp256k1_sha256_write(&sha, m, 32);\n+    secp256k1_sha256_finalize(&sha, buf);\n+\n+    secp256k1_scalar_set_b32(e, buf, NULL);\n+}\n+\n+/* Generate points from scalar a such that A = a*G and C = a*B */\n+static void secp256k1_dleq_pair(const secp256k1_ecmult_gen_context *ecmult_gen_ctx, secp256k1_ge *A, secp256k1_ge *C, const secp256k1_scalar *a, const secp256k1_ge *B) {\n+    secp256k1_gej Aj, Cj;\n+\n+    secp256k1_ecmult_gen(ecmult_gen_ctx, &Aj, a);\n+    secp256k1_ge_set_gej(A, &Aj);\n+    secp256k1_ecmult_const(&Cj, B, a);\n+    secp256k1_ge_set_gej(C, &Cj);\n+}\n+\n+/* DLEQ Proof Generation\n+ *\n+ * For given elliptic curve points A, B, C, and G, the prover generates a proof to prove knowledge of a scalar a such\n+ * that A = a⋅G and C = a⋅B without revealing anything about a.\n+ *\n+ *  Returns: 1 if proof creation was successful. 0 if an error occurred.\n+ *  Out:       scalar e: part of proof = bytes(32, e) || bytes(32, s).\n+ *             scalar s: other part of proof = bytes(32, e) || bytes(32, s).\n+ *  In:     a : scalar a to be proven that both A and C were generated from\n+ *          B : point on the curve\n+ *          A : point on the curve(a⋅G) generated from a\n+ *          C : point on the curve(a⋅B) generated from a\n+ *    noncefp : pointer to a nonce generation function. If NULL, secp256k1_nonce_function_dleq is used.\n+ *      ndata : pointer to arbitrary data used by the nonce generation function (can be NULL). If it is non-NULL and",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 172,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "outdated parameters, at these positions are now `aux_rand32` and `m`",
      "created_at": "2025-02-09T07:32:48Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948027339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948027339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948030122",
      "pull_request_review_id": 2604132450,
      "id": 1948030122,
      "node_id": "PRRC_kwDOAP4Jqs50HJSq",
      "diff_hunk": "@@ -721,13 +721,187 @@ static void dleq_tests(void) {\n     CHECK(secp256k1_dleq_nonce(&k, a32, A_33, C_33, NULL, NULL) == 1);\n }\n \n+/* Test vectors according to BIP-374 (\"Discrete Log Equality Proofs\"). See\n+ * https://github.com/bitcoin/bips/blob/master/bip-0374/test_vectors_(generate|verify)_proof.csv.\n+ * Contains 32 bytes a + 33 bytes B + 32 bytes auxrand + 32 bytes optional msg + 64 bytes proof\n+ * */\n+\n+static const unsigned char a_bytes[6][32] = {",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 9,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "9948bf1beebf68d4c42b35100c47f5a0b4dbab86",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ideally, the test vector data is created from a script that is included as well (see e.g. https://github.com/bitcoin-core/secp256k1/blob/master/tools/test_vectors_musig2_generate.py for musig2)",
      "created_at": "2025-02-09T07:52:11Z",
      "updated_at": "2025-02-09T07:53:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1948030122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1948030122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 724,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 758,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950254757",
      "pull_request_review_id": 2607719876,
      "id": 1950254757,
      "node_id": "PRRC_kwDOAP4Jqs50Poal",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": 57,
      "original_position": 60,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948023074,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "hmm true. but since input to this function is `secp256k1_ge` and not `secp256k1_pubkey`, unsure if it makes sense to restrict possible values of `secp256k1_ge` here? (in the musig example, input to the function is `secp256k1_pubkey`)",
      "created_at": "2025-02-11T05:33:34Z",
      "updated_at": "2025-02-13T06:48:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950254757",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950254757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": 55,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950290941",
      "pull_request_review_id": 2607719876,
      "id": 1950290941,
      "node_id": "PRRC_kwDOAP4Jqs50PxP9",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 71,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948023826,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ah good point. I've dropped it. was following the approach in schnorr module but it's not needed.",
      "created_at": "2025-02-11T06:30:31Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950290941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950290941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950347701",
      "pull_request_review_id": 2607719876,
      "id": 1950347701,
      "node_id": "PRRC_kwDOAP4Jqs50P_G1",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 97,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948026446,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh true, I've removed it.",
      "created_at": "2025-02-11T07:19:52Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950347701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950347701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348702",
      "pull_request_review_id": 2607719876,
      "id": 1950348702,
      "node_id": "PRRC_kwDOAP4Jqs50P_We",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 118,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948026774,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "removed it to call `secp256k1_nonce_function_dleq` directly.",
      "created_at": "2025-02-11T07:21:05Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950348702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348922",
      "pull_request_review_id": 2607719876,
      "id": 1950348922,
      "node_id": "PRRC_kwDOAP4Jqs50P_Z6",
      "diff_hunk": "@@ -0,0 +1,255 @@\n+#ifndef SECP256K1_DLEQ_IMPL_H\n+#define SECP256K1_DLEQ_IMPL_H\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/aux\")||SHA256(\"BIP0374/aux\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x48479343ul;\n+    sha->s[1] = 0xa9eb648cul;\n+    sha->s[2] = 0x58952fe4ul;\n+    sha->s[3] = 0x4772d3b2ul;\n+    sha->s[4] = 0x977ab0a0ul;\n+    sha->s[5] = 0xcb8e2740ul;\n+    sha->s[6] = 0x60bb4b81ul;\n+    sha->s[7] = 0x68a41b66ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/nonce\")||SHA256(\"BIP0374/nonce\"). */\n+static void secp256k1_nonce_function_bip374_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa810fc87ul;\n+    sha->s[1] = 0x3b4a4d2aul;\n+    sha->s[2] = 0xe302cfb4ul;\n+    sha->s[3] = 0x322df1a0ul;\n+    sha->s[4] = 0xd2e7fb82ul;\n+    sha->s[5] = 0x7808570dul;\n+    sha->s[6] = 0x9c33e0cdul;\n+    sha->s[7] = 0x2dfbf7f6ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP0374/challenge\")||SHA256(\"BIP0374/challenge\"). */\n+static void secp256k1_dleq_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x24f1c9c7ul;\n+    sha->s[1] = 0xd1538c75ul;\n+    sha->s[2] = 0xc9874ae8ul;\n+    sha->s[3] = 0x6566de76ul;\n+    sha->s[4] = 0x487843c9ul;\n+    sha->s[5] = 0xc13d8026ul;\n+    sha->s[6] = 0x39a2f3eful;\n+    sha->s[7] = 0x2ad0fcb3ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo argument for nonce_function_dleq to derive the nonce using a tagged hash function. */\n+static const unsigned char dleq_algo[] = {'D', 'L', 'E', 'Q'};\n+\n+static int secp256k1_dleq_hash_point(secp256k1_sha256 *sha, secp256k1_ge *p) {\n+    unsigned char buf[33];\n+    size_t size = 33;\n+    if (!secp256k1_eckey_pubkey_serialize(p, buf, &size, 1)) {\n+        return 0;\n+    }\n+    secp256k1_sha256_write(sha, buf, size);\n+    return 1;\n+}\n+\n+static int nonce_function_dleq(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+    if (xonly_pk32 != NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip374_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    } else {\n+        /* Precomputed TaggedHash(\"BIP0374/aux\", 0x0000...00); */\n+        static const unsigned char ZERO_MASK[32] = {\n+            38, 255, 199, 133, 21, 94, 75, 99,\n+            18, 166, 0, 53, 197, 146, 253, 84,\n+            197, 228, 235, 145, 124, 59, 203, 21,\n+            66, 88, 250, 253, 207, 123, 43, 55\n+        };\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] = key32[i] ^ ZERO_MASK[i];\n+        }\n+    }\n+\n+    if (algolen == sizeof(dleq_algo) && secp256k1_memcmp_var(algo, dleq_algo, algolen) == 0) {\n+        secp256k1_nonce_function_bip374_sha256_tagged(&sha);\n+    } else {\n+        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);\n+    }\n+\n+    /* Hash masked-key||msg using the tagged hash as per the spec */\n+    secp256k1_sha256_write(&sha, masked_key, 32);\n+    secp256k1_sha256_write(&sha, msg, msglen);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_dleq = nonce_function_dleq;\n+\n+/* Generates a nonce as defined in BIP0374 */\n+static int secp256k1_dleq_nonce(secp256k1_scalar *k, const unsigned char *a32, const unsigned char *A_33, const unsigned char *C_33, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    unsigned char buf[66];\n+    unsigned char nonce[32];\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_dleq;\n+    }\n+    memcpy(buf, A_33, 33);\n+    memcpy(buf + 33, C_33, 33);\n+    if (!noncefp(nonce, buf, 66, a32, NULL, dleq_algo, 4, ndata)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_set_b32(k, nonce, NULL);\n+    if (secp256k1_scalar_is_zero(k)) {\n+        return 0;\n+    }\n+\n+    return 1;\n+}\n+\n+/* Generates a challenge as defined in BIP0374 */\n+static void secp256k1_dleq_challenge(secp256k1_scalar *e, secp256k1_ge *B, secp256k1_ge *R1, secp256k1_ge *R2, secp256k1_ge *A, secp256k1_ge *C, const unsigned char *m) {\n+    unsigned char buf[32];\n+    secp256k1_sha256 sha;\n+    secp256k1_ge generator_point = secp256k1_ge_const_g;\n+\n+    secp256k1_dleq_sha256_tagged(&sha);\n+    secp256k1_dleq_hash_point(&sha, A);\n+    secp256k1_dleq_hash_point(&sha, B);\n+    secp256k1_dleq_hash_point(&sha, C);\n+    secp256k1_dleq_hash_point(&sha, &generator_point);\n+    secp256k1_dleq_hash_point(&sha, R1);\n+    secp256k1_dleq_hash_point(&sha, R2);\n+    if (m) secp256k1_sha256_write(&sha, m, 32);\n+    secp256k1_sha256_finalize(&sha, buf);\n+\n+    secp256k1_scalar_set_b32(e, buf, NULL);\n+}\n+\n+/* Generate points from scalar a such that A = a*G and C = a*B */\n+static void secp256k1_dleq_pair(const secp256k1_ecmult_gen_context *ecmult_gen_ctx, secp256k1_ge *A, secp256k1_ge *C, const secp256k1_scalar *a, const secp256k1_ge *B) {\n+    secp256k1_gej Aj, Cj;\n+\n+    secp256k1_ecmult_gen(ecmult_gen_ctx, &Aj, a);\n+    secp256k1_ge_set_gej(A, &Aj);\n+    secp256k1_ecmult_const(&Cj, B, a);\n+    secp256k1_ge_set_gej(C, &Cj);\n+}\n+\n+/* DLEQ Proof Generation\n+ *\n+ * For given elliptic curve points A, B, C, and G, the prover generates a proof to prove knowledge of a scalar a such\n+ * that A = a⋅G and C = a⋅B without revealing anything about a.\n+ *\n+ *  Returns: 1 if proof creation was successful. 0 if an error occurred.\n+ *  Out:       scalar e: part of proof = bytes(32, e) || bytes(32, s).\n+ *             scalar s: other part of proof = bytes(32, e) || bytes(32, s).\n+ *  In:     a : scalar a to be proven that both A and C were generated from\n+ *          B : point on the curve\n+ *          A : point on the curve(a⋅G) generated from a\n+ *          C : point on the curve(a⋅B) generated from a\n+ *    noncefp : pointer to a nonce generation function. If NULL, secp256k1_nonce_function_dleq is used.\n+ *      ndata : pointer to arbitrary data used by the nonce generation function (can be NULL). If it is non-NULL and",
      "path": "src/modules/silentpayments/dleq_impl.h",
      "position": null,
      "original_position": 172,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948027339,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "updated.",
      "created_at": "2025-02-11T07:21:19Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950348922",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950348922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349094",
      "pull_request_review_id": 2607719876,
      "id": 1950349094,
      "node_id": "PRRC_kwDOAP4Jqs50P_cm",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 16,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948021543,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh nice! done.",
      "created_at": "2025-02-11T07:21:33Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950349094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 602,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 606,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349316",
      "pull_request_review_id": 2607719876,
      "id": 1950349316,
      "node_id": "PRRC_kwDOAP4Jqs50P_gE",
      "diff_hunk": "@@ -598,12 +599,135 @@ void run_silentpayments_test_vectors(void) {\n     }\n }\n \n+static void rand_scalar(secp256k1_scalar *scalar) {\n+    unsigned char buf32[32];\n+    testrand256(buf32);\n+    secp256k1_scalar_set_b32(scalar, buf32, NULL);\n+}\n+\n+static void rand_point(secp256k1_ge *point) {\n+    secp256k1_scalar x;\n+    secp256k1_gej pointj;\n+    rand_scalar(&x);\n+\n+    secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pointj, &x);\n+    secp256k1_ge_set_gej(point, &pointj);\n+}",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 25,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "cec4d3553add5e8666a7055354d280c4297a8862",
      "in_reply_to_id": 1948021729,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2025-02-11T07:21:46Z",
      "updated_at": "2025-02-11T07:41:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1950349316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1950349316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 608,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 615,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1951312018",
      "pull_request_review_id": 2609538271,
      "id": 1951312018,
      "node_id": "PRRC_kwDOAP4Jqs50TqiS",
      "diff_hunk": "@@ -721,13 +721,187 @@ static void dleq_tests(void) {\n     CHECK(secp256k1_dleq_nonce(&k, a32, A_33, C_33, NULL, NULL) == 1);\n }\n \n+/* Test vectors according to BIP-374 (\"Discrete Log Equality Proofs\"). See\n+ * https://github.com/bitcoin/bips/blob/master/bip-0374/test_vectors_(generate|verify)_proof.csv.\n+ * Contains 32 bytes a + 33 bytes B + 32 bytes auxrand + 32 bytes optional msg + 64 bytes proof\n+ * */\n+\n+static const unsigned char a_bytes[6][32] = {",
      "path": "src/modules/silentpayments/tests_impl.h",
      "position": null,
      "original_position": 9,
      "commit_id": "41ee3e82881d741db9fa5378f6959e9888e18c5e",
      "original_commit_id": "9948bf1beebf68d4c42b35100c47f5a0b4dbab86",
      "in_reply_to_id": 1948030122,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "good point! done in 208352b.",
      "created_at": "2025-02-11T17:45:53Z",
      "updated_at": "2025-02-11T17:45:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1651#discussion_r1951312018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1951312018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1651"
        }
      },
      "start_line": null,
      "original_start_line": 724,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 758,
      "side": "RIGHT"
    }
  ]
}