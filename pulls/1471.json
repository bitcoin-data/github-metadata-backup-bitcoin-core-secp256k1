{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471",
    "id": 1655919555,
    "node_id": "PR_kwDOAP4Jqs5is1PD",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1471.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1471.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/c541071488c8132e5897e3eb74b010fc80a74b85",
    "number": 1471,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "[DRAFT] Add silentpayments (BIP352) module",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR adds a new Silent Payments ([BIP352](https://github.com/bitcoin/bips/pull/1458)) module to secp256k1. At this early stage, this is meant primarily for demo purposes and to hopefully spark the scope/interface discussion started in #1427 with a more practical approach. The actual module is quite small with about ~600 LOC, a good part of it is API documentation.\r\n\r\nThe following routines are provided ($a_i$ are input private keys, $A_i$ are input public keys, $b$ and $B$ denote recipient privkeys/pubkeys that would be encoded in silent payment addresses, $d$ and $P$ the keypair for the actual transaction taproot x-only output):\r\n\r\n| Side     | Function                        | Inputs                           | Outputs                                                                   |\r\n|----------|---------------------------------|----------------------------------|---------------------------------------------------------------------------|\r\n|  Sender  | `_create_private_tweak_data`    | $a_1...a_n$, $outpoint_L$        | $a_{sum} = (a_1 + a_2 + ... + a_n)$<br>$inputhash =  hash_I(outpoint_L \\|\\| (a_{sum} * G))$ |\r\n| Receiver | `_create_public_tweak_data`     | $A_1...A_n$, $outpoint_L$        | $A_{sum} = (A_1 + A_2 + ... + A_n)$<br>$inputhash = hash_I(outpoint_L \\|\\| A_{sum})$ |\r\n|  Both  | `_create_shared_secret`    | $Pub$, $sec$, $inputhash$<br>(Sender: $B_{scan}, a_{sum}$<br>Receiver: $A_{sum}, b_{scan}$)        | $SS = (inputhash * sec) * Pub$ (ECDH)                                      |\r\n| Receiver | `_create_label_tweak`           | $b_{scan}, m$                    | $labeltweak = hash_L(b_{scan} \\|\\| m)$<br>$label = labeltweak * G$                                    |\r\n| Receiver | `_create_address_spend_pubkey`  | $B_{spend}, label$          | $B_m = B_{spend} + label$                                        |\r\n| Sender   | `_sender_create_output_pubkey`         | $SS, B_m, k$ | $P_{xonly} = B_m + hash_S(SS \\|\\| k) * G$        |\r\n| Receiver | `_receiver_create_scanning_data`               | $SS, B_m, k, tx_{output}$        | $t_k = hash_S(SS \\|\\| k)$<br>$P_{xonly} = t_k * G$<br>$label1 = tx_{output} - P$<br>$label2 = -tx_{output} - P$\r\n| Receiver | `_create_output_seckey`         | $b_{spend}, t_k, (labeltweak)$ | $d = (b_{spend} + labeltweak) + t_k$                        |\r\n\r\nwhere\r\n* $hash_I$ denotes a SHA256 tagged hash with tag \"BIP0352/Inputs\"\r\n* $hash_L$ denotes a SHA256 tagged hash with tag \"BIP0352/Label\"\r\n* $hash_S$ denotes a SHA256 tagged hash with tag \"BIP0352/SharedSecret\"\r\n\r\nFor ending up with output key material used for sending to / scanning for / spending from, both sides would follow the chain of `tweak_data -> shared_secret -> output key`. The public tweak data can be useful for faster scanning of output transactions by storing them in an index, see e.g. Bitcoin Core PR https://github.com/bitcoin/bitcoin/pull/28241. Private tweak data is arguably less useful, so in theory one could collapse the tweak data and shared secret creation functions into a single one, but IMHO it's nicer if the API is symmetric.\r\n\r\nAs discussed in https://github.com/bitcoin-core/secp256k1/issues/1427#issuecomment-1757675172, the approach of passing in two separate key pairs for taproot and non-taproot inputs is followed here. This may seem a bit confusing at first, but has the advantage that the caller doesn't have to deal with enforcing even y-parity for key material manually (e.g. negating private keys of taproot outputs if they would end up in an odd point), which seems error-prone.\r\n\r\nThe last commit includes a small test suite written in Python that runs the BIP352 test vectors by calling into the secp256k1 shared library using [ctypes](https://docs.python.org/3/library/ctypes.html). All sending tests and the non-labels receiving tests currently pass.\r\n```\r\n$ ./configure --enable-module-silentpayments\r\n$ make\r\n$ cd bip352-testsuite\r\n$ ./run_bip352_tests.py\r\n```\r\n\r\nThis test suite is not meant to be actually included in the repo, but it hopefully shouldn't be too much effort to automatically generate the test code for `tests_impl.h`.\r\n\r\nHappy to receive comments, even if it's only bike-shedding ones (I'm fully aware that the current naming kind of sucks). Next step is to open a Bitcoin Core PR which uses this module in [#28122](https://github.com/bitcoin/bitcoin/pull/28122), which should be ready within the next days.",
    "labels": [
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      }
    ],
    "created_at": "2023-12-23T17:39:21Z",
    "updated_at": "2024-02-14T23:37:04Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "d98235467397fdaec1d724b9dc6568fe678c3700",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "theStack:silentpayments-module-demo",
      "ref": "silentpayments-module-demo",
      "sha": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 452762907,
        "node_id": "R_kgDOGvydGw",
        "name": "secp256k1",
        "full_name": "theStack/secp256k1",
        "owner": {
          "login": "theStack",
          "id": 91535,
          "node_id": "MDQ6VXNlcjkxNTM1",
          "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/theStack",
          "html_url": "https://github.com/theStack",
          "followers_url": "https://api.github.com/users/theStack/followers",
          "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
          "organizations_url": "https://api.github.com/users/theStack/orgs",
          "repos_url": "https://api.github.com/users/theStack/repos",
          "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/theStack/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/theStack/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/theStack/secp256k1",
        "archive_url": "https://api.github.com/repos/theStack/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/theStack/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/theStack/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/theStack/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/theStack/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/theStack/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/theStack/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/theStack/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/theStack/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/theStack/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/theStack/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/theStack/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/theStack/secp256k1/events",
        "forks_url": "https://api.github.com/repos/theStack/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/theStack/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/theStack/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/theStack/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/theStack/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/theStack/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/theStack/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/theStack/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/theStack/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/theStack/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/theStack/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/theStack/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/theStack/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/theStack/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/theStack/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/theStack/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:theStack/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/theStack/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/theStack/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/theStack/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/theStack/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/theStack/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/theStack/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/theStack/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/theStack/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/theStack/secp256k1/hooks",
        "svn_url": "https://github.com/theStack/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 10775,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-02-13T17:35:01Z",
        "created_at": "2022-01-27T16:42:12Z",
        "updated_at": "2024-01-31T23:58:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "0653a25d50f67c68bd2d196ecc7eddab067d95ef",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 1068,
        "stargazers_count": 1920,
        "watchers_count": 1920,
        "size": 10717,
        "default_branch": "master",
        "open_issues_count": 140,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-02-13T17:35:03Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2024-02-14T07:39:10Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 3781,
    "deletions": 0,
    "changed_files": 14,
    "commits": 12,
    "review_comments": 39,
    "comments": 16
  },
  "events": [
    {
      "event": "convert_to_draft",
      "id": 11331240515,
      "node_id": "CTDE_lADOAP4Jqs56epE0zwAAAAKjZQJD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11331240515",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-23T17:39:49Z"
    },
    {
      "event": "unsubscribed",
      "id": 11331272579,
      "node_id": "UE_lADOAP4Jqs56epE0zwAAAAKjZX-D",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11331272579",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-23T18:09:49Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T23:24:31Z",
      "updated_at": "2024-01-08T23:24:31Z",
      "source": {
        "issue": {
          "id": 2070952169,
          "node_id": "I_kwDOHi0ngs57cDjp",
          "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17",
          "repository_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org",
          "labels_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17/comments",
          "events_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/17/events",
          "html_url": "https://github.com/saopaulobitdevs/saopaulobitdevs.org/issues/17",
          "number": 17,
          "state": "closed",
          "state_reason": "completed",
          "title": "Topicos Janeiro",
          "body": null,
          "user": {
            "login": "lorenzolfm",
            "id": 38786333,
            "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lorenzolfm",
            "html_url": "https://github.com/lorenzolfm",
            "followers_url": "https://api.github.com/users/lorenzolfm/followers",
            "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
            "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
            "repos_url": "https://api.github.com/users/lorenzolfm/repos",
            "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5694222796,
              "node_id": "LA_kwDOHi0ngs8AAAABU2bxzA",
              "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/labels/discussion",
              "name": "discussion",
              "description": "",
              "color": "E9652D",
              "default": false
            }
          ],
          "assignee": {
            "login": "jaonoctus",
            "id": 7918067,
            "node_id": "MDQ6VXNlcjc5MTgwNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jaonoctus",
            "html_url": "https://github.com/jaonoctus",
            "followers_url": "https://api.github.com/users/jaonoctus/followers",
            "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
            "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
            "repos_url": "https://api.github.com/users/jaonoctus/repos",
            "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "jaonoctus",
              "id": 7918067,
              "node_id": "MDQ6VXNlcjc5MTgwNjc=",
              "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/jaonoctus",
              "html_url": "https://github.com/jaonoctus",
              "followers_url": "https://api.github.com/users/jaonoctus/followers",
              "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
              "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
              "repos_url": "https://api.github.com/users/jaonoctus/repos",
              "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "brunoerg",
              "id": 19480819,
              "node_id": "MDQ6VXNlcjE5NDgwODE5",
              "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/brunoerg",
              "html_url": "https://github.com/brunoerg",
              "followers_url": "https://api.github.com/users/brunoerg/followers",
              "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
              "organizations_url": "https://api.github.com/users/brunoerg/orgs",
              "repos_url": "https://api.github.com/users/brunoerg/repos",
              "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/brunoerg/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lorenzolfm",
              "id": 38786333,
              "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
              "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lorenzolfm",
              "html_url": "https://github.com/lorenzolfm",
              "followers_url": "https://api.github.com/users/lorenzolfm/followers",
              "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
              "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
              "repos_url": "https://api.github.com/users/lorenzolfm/repos",
              "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lucasdcf",
              "id": 68931156,
              "node_id": "MDQ6VXNlcjY4OTMxMTU2",
              "avatar_url": "https://avatars.githubusercontent.com/u/68931156?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lucasdcf",
              "html_url": "https://github.com/lucasdcf",
              "followers_url": "https://api.github.com/users/lucasdcf/followers",
              "following_url": "https://api.github.com/users/lucasdcf/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lucasdcf/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lucasdcf/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lucasdcf/subscriptions",
              "organizations_url": "https://api.github.com/users/lucasdcf/orgs",
              "repos_url": "https://api.github.com/users/lucasdcf/repos",
              "events_url": "https://api.github.com/users/lucasdcf/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lucasdcf/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 10,
          "closed_at": "2024-02-01T14:33:24Z",
          "created_at": "2024-01-08T17:49:22Z",
          "updated_at": "2024-02-01T14:33:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-10T21:52:03Z",
      "updated_at": "2024-01-10T21:52:03Z",
      "source": {
        "issue": {
          "id": 1913356976,
          "node_id": "I_kwDOABII585yC4Kw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/28536",
          "number": 28536,
          "state": "open",
          "state_reason": null,
          "title": "BIP352 tracking issue",
          "body": "This issue will be updated to reflect the current state of [BIP352](https://github.com/bitcoin/bips/pull/1458) integration.\r\n\r\nPRs ready for review:\r\n\r\n* https://github.com/bitcoin/bips/pull/1458\r\n* https://github.com/bitcoin-core/secp256k1/pull/1471\r\n\r\nTesting:\r\n* For a wallet with send and receive support, compile https://github.com/bitcoin/bitcoin/pull/28453\r\n* Post your signet / testnet silent payment address in the comments!\r\n\r\nOverall plan:\r\n\r\n* Send and receive support in the Bitcoin Core wallet:\r\n  - [x] Code cleanup / refactor: https://github.com/bitcoin/bitcoin/pull/28244\r\n  - [x] Dependency: https://github.com/bitcoin/bitcoin/pull/28246\r\n  - [x] Dependency: https://github.com/bitcoin/bitcoin/pull/25273\r\n  - [x] Dependency: https://github.com/bitcoin/bitcoin/pull/28560\r\n  - [ ] Implement silent payments as a `libsecp` module: https://github.com/bitcoin-core/secp256k1/pull/1471\r\n  - [ ] Base protocol: https://github.com/bitcoin/bitcoin/pull/28122\r\n  - [ ] Sending (depends on 28122, 25273, 28560): https://github.com/bitcoin/bitcoin/pull/28201\r\n  - [ ] Receiving (depends on 28122, 28201): https://github.com/bitcoin/bitcoin/pull/28453\r\n  - [ ] Send and receive functional tests (depends on 28453) (not started)\r\n\r\n* Light client support:\r\n  - [ ] Index for silent payment tweaks (depends on 28122): https://github.com/bitcoin/bitcoin/pull/28241\r\n  - [ ] New BIP157 filter type for tweak data (not started)\r\n  - [ ] Serve new filter type (not started)\r\n\r\n* Long-term\r\n  - [ ] Move base protocol to `libsecp` as a module (Discussion): https://github.com/bitcoin-core/secp256k1/issues/1427\r\n  - [ ] Refactor Core to use silent payments `libsecp` module directly (not started)\r\n\r\n<details>\r\n  <summary>Older stuff</summary>\r\n\r\n\r\n  <ul>\r\n  <li>Closed / Superseded:\r\n     <ul>\r\n     <li>Tracking PR (superseded by this issue): #27827</li>\r\n     <li>Receiving (superseded by 28453): #28202</li>\r\n      <li>Original draft implementation: #24897</li>\r\n      </ul>\r\n  </li>\r\n  </ul>\r\n</details>\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "created_at": "2023-09-26T11:59:59Z",
          "updated_at": "2024-02-08T13:34:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1885861017,
      "node_id": "IC_kwDOAP4Jqs5wZ_SZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1885861017",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-10T22:42:22Z",
      "updated_at": "2024-01-10T22:42:22Z",
      "author_association": "MEMBER",
      "body": "Thanks for starting this! Will review. Just wanted to comment that I've made a round of edits to the BIP and it is now updated with the new hashing method (along with the tests).\r\n\r\n> The PR assumes that the outpoint hash is provided by the caller, but this could change in the future if its calculation involves elliptic-curve operations that would be a good fit for being done within the module as well.\r\n\r\nThe hash is calculated as *hash(outpoint<sub>L</sub> || A<sub>sum</sub>)*. Since it commits to the sum of input public keys used, seems like it might make sense to move it into the module? Otherwise, we'd have to do something like calculate the sum of the public keys, return that to the caller so that they can calculate an input hash and then send it back to us.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1885861017",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "labeled",
      "id": 11458132991,
      "node_id": "LE_lADOAP4Jqs56epE0zwAAAAKq9Tv_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11458132991",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:25:15Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    },
    {
      "event": "commented",
      "id": 1888958275,
      "node_id": "IC_kwDOAP4Jqs5wlzdD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1888958275",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T11:48:56Z",
      "updated_at": "2024-01-12T11:48:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Thanks for starting this! Will review. Just wanted to comment that I've made a round of edits to the BIP and it is now updated with the new hashing method (along with the tests).\r\n\r\n👍 \r\n \r\n> > The PR assumes that the outpoint hash is provided by the caller, but this could change in the future if its calculation involves elliptic-curve operations that would be a good fit for being done within the module as well.\r\n> \r\n> The hash is calculated as _hash(outpointL || Asum)_. Since it commits to the sum of input public keys used, seems like it might make sense to move it into the module? \r\n\r\nYes, I agree. A naive solution based on the current PR state would be to provide another function for calculating the input hash and leave the others as they are, but then we would need to pass the input pubkeys and calculate the pubkey sum twice (once for the input hash, and once for the pubkey tweak data), which should be avoided. I guess we want to introduce a function for calculating $A_{sum}$ to reuse that result. Will try to figure out an interface. Suggestions would be greatly appreciated :)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1888958275",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "commented",
      "id": 1894159047,
      "node_id": "IC_kwDOAP4Jqs5w5pLH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1894159047",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-16T17:07:01Z",
      "updated_at": "2024-01-16T17:07:01Z",
      "author_association": "MEMBER",
      "body": "> but then we would need to pass the input pubkeys and calculate the pubkey sum twice\r\n\r\n(I need to actually review your implementation, but..) I don't think we need to do it twice? On the sender side, you pass in the private keys, add those up (call it `priv_key_sum`) and then you can generate the pubkey sum from the private keys (e.g. `priv_key_sum.GetPubKey()`. On the receiving side, you pass in the pubkeys, sum them, use them in the hash and then use them in the shared secret derivation.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1894159047",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "commented",
      "id": 1896430880,
      "node_id": "IC_kwDOAP4Jqs5xCT0g",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1896430880",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-17T18:43:54Z",
      "updated_at": "2024-01-17T18:46:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > but then we would need to pass the input pubkeys and calculate the pubkey sum twice\r\n> \r\n> (I need to actually review your implementation, but..) I don't think we need to do it twice? On the sender side, you pass in the private keys, add those up (call it `priv_key_sum`) and then you can generate the pubkey sum from the private keys (e.g. `priv_key_sum.GetPubKey()`. On the receiving side, you pass in the pubkeys, sum them, use them in the hash and then use them in the shared secret derivation.\r\n\r\nOh indeed, I missed that after calculating the sum of private keys, summing up the pubkeys is not necessary anymore.  \r\n\r\nSo if I'm not overlooking something, the interface change should be as simple as replacing the \"outpointhash\" parameter in the tweak functions with an \"outpoint_L\" parameter. Will tackle that in a bit.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1896430880",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11587201473,
      "node_id": "HRFPE_lADOAP4Jqs56epE0zwAAAAKypqnB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11587201473",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-24T17:04:54Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGE5YTVmZThlMjhmMmY0ZGQ1M2ZkZmI0Y2U3OTdiMjNiNDQ1MmYwYTY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a9a5fe8e28f2f4dd53fdfb4ce797b23b4452f0a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a9a5fe8e28f2f4dd53fdfb4ce797b23b4452f0a6",
      "tree": {
        "sha": "60e78d2dbc314906707641ebdae950574a943d38",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/60e78d2dbc314906707641ebdae950574a943d38"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/248362729929892f4a1da286429fc266c50bce2c",
          "sha": "248362729929892f4a1da286429fc266c50bce2c",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/248362729929892f4a1da286429fc266c50bce2c"
        }
      ],
      "message": "build: add skeleton for new silentpayments (BIP352) module",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-01-24T17:05:59Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-09-27T15:22:14Z"
      },
      "sha": "a9a5fe8e28f2f4dd53fdfb4ce797b23b4452f0a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDZlM2VkMmQ1ZGYxNzEzZjc3NGVkNzk3MGExZDFjNzdmZjUzYTZhYjc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6e3ed2d5df1713f774ed7970a1d1c77ff53a6ab7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6e3ed2d5df1713f774ed7970a1d1c77ff53a6ab7",
      "tree": {
        "sha": "ccf1f761495eabe2d79b364b46930e5be2fbe12e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ccf1f761495eabe2d79b364b46930e5be2fbe12e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a9a5fe8e28f2f4dd53fdfb4ce797b23b4452f0a6",
          "sha": "a9a5fe8e28f2f4dd53fdfb4ce797b23b4452f0a6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a9a5fe8e28f2f4dd53fdfb4ce797b23b4452f0a6"
        }
      ],
      "message": "doc: add module description for secp256k1-silentpayments",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-01-24T17:05:59Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-12-23T15:28:18Z"
      },
      "sha": "6e3ed2d5df1713f774ed7970a1d1c77ff53a6ab7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11587215563,
      "node_id": "HRFPE_lADOAP4Jqs56epE0zwAAAAKypuDL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11587215563",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-24T17:06:12Z"
    },
    {
      "event": "commented",
      "id": 1908582848,
      "node_id": "IC_kwDOAP4Jqs5xwqnA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1908582848",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-24T17:17:32Z",
      "updated_at": "2024-01-24T17:17:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've force-pushed with a version that is now up to date with the latest state of the BIP, and updated the PR description accordingly. Labels support is also included, and all the test vectors from the BIP pass. The tests are still run from a Python script that directly interacts with the shared library via ctypes, I'll hopefully have something ready soon to create the actual tests in tests_impl.h from that automatically. The code was changed in many places to operate internal data types and functions in the routines (e.g. secp256k1_ge instead of secp256k1_pubkey, secp256k1_scalar instead of uchar-pointers to 32-byte chunks), which seems to make more sense and have less overhead.\r\n\r\n(The previous version of the PR is still available here: https://github.com/theStack/secp256k1/tree/silentpayments-module-demo_old)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1908582848",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "reviewed",
      "id": 1846116671,
      "node_id": "PRR_kwDOAP4Jqs5uCYE_",
      "url": null,
      "actor": null,
      "commit_id": "c9e94c1d7327116b6529a9e9f905f4bee20973df",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks great! Did a quick pass, mostly spelling and wording nits.\r\n\r\nAnother thought I had (need to actually re-review more carefully to confirm) is we might be able to minimize the de-serializations of keys (moving from bytes -> point). From my understanding, this is one of the \"expensive\" operations as it involves calculating the y value. This would mean either combining things into larger routines, or having the functions return points instead of serialized pubkeys. Curious what you think @theStack ",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#pullrequestreview-1846116671",
      "submitted_at": "2024-01-26T17:21:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
    },
    {
      "event": "commented",
      "id": 1912484233,
      "node_id": "IC_kwDOAP4Jqs5x_jGJ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1912484233",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-26T18:14:31Z",
      "updated_at": "2024-01-27T01:31:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@josibake: Thanks for the initial review, very much appreciated!\r\n\r\n> Another thought I had (need to actually re-review more carefully to confirm) is we might be able to minimize the de-serializations of keys (moving from bytes -> point). From my understanding, this is one of the \"expensive\" operations as it involves calculating the y value. This would mean either combining things into larger routines, or having the functions return points instead of serialized pubkeys. Curious what you think @theStack\r\n\r\nGood point, that's also something I've been asking myself. I think the expensive part of calculating the y-value only applies for loading `secp256k1_xonly_pubkey` objects though (not for regular `secp256k1_pubkey`s), and since those are not used for any intermediate results, it (hopefully) shouldn't be too bad. Directly using the group element type is not possible I think, as that datatype (`secp265k1_ge`) is internal and not exposed by the API. Would be great to get input from experienced long-term contributors in that subject.\r\n// EDIT: oh, you probably meant the raw 33-byte results of the ~~shared secret creation and~~ public tweak data. Maybe those should be changed to `secp256k1_pubkey` instead.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1912484233",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "mentioned",
      "id": 11611831097,
      "node_id": "MEE_lADOAP4Jqs56epE0zwAAAAK0Hns5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11611831097",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-26T18:14:31Z"
    },
    {
      "event": "subscribed",
      "id": 11611831115,
      "node_id": "SE_lADOAP4Jqs56epE0zwAAAAK0HntL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11611831115",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-26T18:14:31Z"
    },
    {
      "event": "mentioned",
      "id": 11611831129,
      "node_id": "MEE_lADOAP4Jqs56epE0zwAAAAK0HntZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11611831129",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-26T18:14:31Z"
    },
    {
      "event": "subscribed",
      "id": 11611831140,
      "node_id": "SE_lADOAP4Jqs56epE0zwAAAAK0Hntk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11611831140",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-26T18:14:31Z"
    },
    {
      "event": "commented",
      "id": 1912935466,
      "node_id": "IC_kwDOAP4Jqs5yBRQq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1912935466",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-27T03:07:47Z",
      "updated_at": "2024-01-27T03:15:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed with the following [changes](https://github.com/bitcoin-core/secp256k1/compare/c9e94c1d7327116b6529a9e9f905f4bee20973df..fa96a4a33de4729a975ecce31ad5d2fae10c514e):\r\n* parameter naming: s/outpoint_lowest/outpoint_smallest/, s/tweak_data32/private_tweak_data32/, s/tweak_data33/public_tweak_data/ (the data type for the last one was changed, see below)\r\n* API description: s/for each input/for each silent payment eligible input/\r\n* changed the result type of the public tweak data routine to `secp256k1_pubkey` to avoid expensive deserialization after in the shared secret creation routine (in light of comment https://github.com/bitcoin-core/secp256k1/pull/1471#pullrequestreview-1846116671); AFAICT, this was the only deserialization of public keys that happened for intermediate results?\r\n* removed unnecessary parity handling of x-only-pubkeys, as they always have an even y (https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467904182) and adapted the API description accordingly\r\n* added explicit checks for invalid sum results in the tweak creation routines (zero for the private keys sum, point of infinity for public keys sum) with an open TODO whether we want to have a special return code in this case. IIUC, for the public keys sum case, this case could occur during scanning if someone crafted a transaction where the input pubkeys cancel each other out (trivially reachable with two pubkeys P and -P). It might make sense to have a return code signalling \"ignore this tx, it's not suitable for silent payments\" to differentiate it from an actual error that happened.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1912935466",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11614816945,
      "node_id": "HRFPE_lADOAP4Jqs56epE0zwAAAAK0TAqx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11614816945",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-27T03:09:24Z"
    },
    {
      "event": "commented",
      "id": 1913102369,
      "node_id": "IC_kwDOAP4Jqs5yB6Ah",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1913102369",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-27T10:01:31Z",
      "updated_at": "2024-01-27T10:01:31Z",
      "author_association": "MEMBER",
      "body": "> EDIT: oh, you probably meant the raw 33-byte results of the shared secret creation and public tweak data. Maybe those should be changed to secp256k1_pubkey instead.\r\n\r\nYep! Sorry, my original comment wasn't very clear. But to be precise, what I'm referring to is anytime we have to de-serialize a public key encoding into a point (be it compressed or x-only), we need to calculate a `sqrt` to get the y-value, which is the \"expensive\" part. So if we only de-serialize once (taking the inputs from the user) and then for the rest of the process use points (i.e. (x, y) pairs) until the final step where we return the generated x-only pubkeys to the user, this should save us some work!\r\n\r\nAt a quick glance, it looks like you addressed this in your most recent push! ",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1913102369",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "commented",
      "id": 1913112388,
      "node_id": "IC_kwDOAP4Jqs5yB8dE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1913112388",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-27T10:46:44Z",
      "updated_at": "2024-01-27T10:46:44Z",
      "author_association": "MEMBER",
      "body": ">  It might make sense to have a return code signalling \"ignore this tx, it's not suitable for silent payments\" to differentiate it from an actual error that happened.\r\n\r\nThinking about this a bit more, the errors that can happen are:\r\n\r\n1. De-serialization errors: I pass some bytes that cannot be de-serialized into a valid public key\r\n2. Hash returns something greater than the curve order: extremely unlikely to *ever* happen\r\n3. Pubkey / private key sum is point at infinity / 0: extremely unlikely or malicious\r\n\r\nI think in all cases the expected user behavior is to move on. For the sender, if they run into any of these errors they would need to pick a different set of inputs (i.e. make a new transaction). For the receiver, their only recourse is to skip the transaction.\r\n\r\nI'm not sure what the added value to the user is here if we return different error codes.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1913112388",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "reviewed",
      "id": 1847514647,
      "node_id": "PRR_kwDOAP4Jqs5uHtYX",
      "url": null,
      "actor": null,
      "commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#pullrequestreview-1847514647",
      "submitted_at": "2024-01-28T11:52:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
    },
    {
      "event": "commented",
      "id": 1913683879,
      "node_id": "IC_kwDOAP4Jqs5yEH-n",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1913683879",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-28T18:30:45Z",
      "updated_at": "2024-01-28T18:34:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > It might make sense to have a return code signalling \"ignore this tx, it's not suitable for silent payments\" to differentiate it from an actual error that happened.\r\n> \r\n> Thinking about this a bit more, the errors that can happen are:\r\n> \r\n> 1. De-serialization errors: I pass some bytes that cannot be de-serialized into a valid public key\r\n> 2. Hash returns something greater than the curve order: extremely unlikely to _ever_ happen\r\n> 3. Pubkey / private key sum is point at infinity / 0: extremely unlikely or malicious\r\n\r\nLeaving 2. aside (from what I understand, it's fine to just ignore those unlikely hash-not-within-curve-order cases), I think the difference between 1. and 3. is that the first suggests that the user is using the API in a wrong way (i.e. shouldn't ever happen in a correct implementation), while 3. can be triggered externally for the pubkey sum case, see below.\r\n\r\n> \r\n> I think in all cases the expected user behavior is to move on. For the sender, if they run into any of these errors they would need to pick a different set of inputs (i.e. make a new transaction). For the receiver, their only recourse is to skip the transaction.\r\n> \r\n> I'm not sure what the added value to the user is here if we return different error codes.\r\n\r\nYeah, I tend to agree. The rationale behind introducing those TODOs was to consider differentiating between the cases \"invalid input data is passed\", indicating that the user did something wrong (case 1 above) and \"the individual input data passed is fine, but we still can't continue\" (case 3 above). Since the transactions appearing in the mempool / block chain are not in the control of the user, such a \"point of infinity\" case could be triggered externally in the course of scanning for silent payments.\r\n\r\nIn Bitcoin Core, at some places we call secp256k1 functions with an additional `assert(ret)`, as we are confident that the input data passed is fine and the function always succeeds, e.g. several times in `CKey::SignCompact`: https://github.com/bitcoin/bitcoin/blob/5fbcc8f0560cce36abafb8467339276b7c0d62b6/src/key.cpp#L255\r\n\r\nIn case of the pubkey tweak data creation routine, that would be a mistake as an external transaction could make a node crash in the course of e.g. the silent payment index creation. I guess we can avoid this though by just properly documenting in the API that the return code 0 also could mean \"tx is not eligible for silent payments\"? Maybe I'm overthinking here and users would hopefully always check for return values for more complex routines.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1913683879",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "commented",
      "id": 1913695251,
      "node_id": "IC_kwDOAP4Jqs5yEKwT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1913695251",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-28T19:17:26Z",
      "updated_at": "2024-01-28T19:17:26Z",
      "author_association": "MEMBER",
      "body": "> \"invalid input data is passed\", indicating that the user did something wrong (case 1 above) and \"the individual input data passed is fine, but we still can't continue\" (case 3 above)\r\n\r\nThis is a good point. In theory, a user could recover from case 1, which at that point I'd agree we need two error codes: one to indicate that the user needs to do something different _with_ the current transaction in order to proceed, and another to indicated the can't do anything with the current transaction and it needs to be skipped.\r\n\r\nIn practice, I don't think case 1 is likely to happen often since the inputs already exist in validated transactions, it's just a matter of correctly extracting them. That being said, I am slightly leaning towards two error codes but I'd also prefer to be consistent with the other modules if we need a tie breaker. I'm curious if there is a general pattern in the library that we can take inspiration from.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1913695251",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "referenced",
      "id": 11662994663,
      "node_id": "REFE_lADOAP4Jqs56epE0zwAAAAK3Kyzn",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11662994663",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b702461a8ddd45c6edcf45627200e52e78985947",
      "commit_url": "https://api.github.com/repos/theStack/secp256k1/commits/b702461a8ddd45c6edcf45627200e52e78985947",
      "created_at": "2024-02-01T00:47:55Z"
    },
    {
      "event": "reviewed",
      "id": 1857403212,
      "node_id": "PRR_kwDOAP4Jqs5utblM",
      "url": null,
      "actor": null,
      "commit_id": "d7250503aca9d0cfc0c2df12d3f98c02945bcf33",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#pullrequestreview-1857403212",
      "submitted_at": "2024-02-01T19:21:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
    },
    {
      "event": "referenced",
      "id": 11676721440,
      "node_id": "REFE_lADOAP4Jqs56epE0zwAAAAK3_KEg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11676721440",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5f73bf36ec81c1ddc50bf029bb62617bd1b26ceb",
      "commit_url": "https://api.github.com/repos/theStack/bitcoin/commits/5f73bf36ec81c1ddc50bf029bb62617bd1b26ceb",
      "created_at": "2024-02-01T22:40:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11696664536,
      "node_id": "HRFPE_lADOAP4Jqs56epE0zwAAAAK5LO_Y",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11696664536",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-04T21:51:34Z"
    },
    {
      "event": "commented",
      "id": 1925935693,
      "node_id": "IC_kwDOAP4Jqs5yy3JN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1925935693",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-04T21:57:09Z",
      "updated_at": "2024-02-04T22:24:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Changed the tweak data creation interfaces to take lists of _pointers_ to seckeys/pubkeys (instead of expecting the data to come in concatenated form), as suggested in the discussion https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1475018645. Took me a bit to figure out how to properly create the array of pointers with ctypes in the secp256k1 glue module for the Python test-suite, but now everything passes again.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1925935693",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "reviewed",
      "id": 1872806854,
      "node_id": "PRR_kwDOAP4Jqs5voMPG",
      "url": null,
      "actor": null,
      "commit_id": "3deeebd1b5d7f3684e6425be749c643504f7c471",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Working on using this branch in [#28122](https://github.com/bitcoin/bitcoin/pull/28122) and had some thoughts regarding labels",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#pullrequestreview-1872806854",
      "submitted_at": "2024-02-09T16:54:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDgxZDEzMDM4ZDUxZmJhYjQwMGNjMjQ3NTEyZmJhZjkzOWRiMDhkNDk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/81d13038d51fbab400cc247512fbaf939db08d49",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/81d13038d51fbab400cc247512fbaf939db08d49",
      "tree": {
        "sha": "e8c4e5906657ebb2d57138fddf6d811f8a9c0678",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/e8c4e5906657ebb2d57138fddf6d811f8a9c0678"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6e3ed2d5df1713f774ed7970a1d1c77ff53a6ab7",
          "sha": "6e3ed2d5df1713f774ed7970a1d1c77ff53a6ab7",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6e3ed2d5df1713f774ed7970a1d1c77ff53a6ab7"
        }
      ],
      "message": "silentpayments: add private tweak data creation routine",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-10T22:23:32Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-12-22T12:40:09Z"
      },
      "sha": "81d13038d51fbab400cc247512fbaf939db08d49"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDk4ZjViYTRhYTY5ZTJiODZkMzJmYWI2NDllNjU3MzBhMGE5OThhMTI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/98f5ba4aa69e2b86d32fab649e65730a0a998a12",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/98f5ba4aa69e2b86d32fab649e65730a0a998a12",
      "tree": {
        "sha": "b01939f548e002a6910b4e4cdfdfd6d32da85fb8",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b01939f548e002a6910b4e4cdfdfd6d32da85fb8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/81d13038d51fbab400cc247512fbaf939db08d49",
          "sha": "81d13038d51fbab400cc247512fbaf939db08d49",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/81d13038d51fbab400cc247512fbaf939db08d49"
        }
      ],
      "message": "silentpayments: add public tweak data creation routine",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-10T22:23:40Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-12-18T16:46:11Z"
      },
      "sha": "98f5ba4aa69e2b86d32fab649e65730a0a998a12"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDI2NzE0YTliNDAxNjRkMTVmNTM5NjdlNDc4MmNlODkwNTZmMmQ2NGU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/26714a9b40164d15f53967e4782ce89056f2d64e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/26714a9b40164d15f53967e4782ce89056f2d64e",
      "tree": {
        "sha": "3e7bb1abe99e004b9a7f629ec8f6650d3aff6375",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3e7bb1abe99e004b9a7f629ec8f6650d3aff6375"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/98f5ba4aa69e2b86d32fab649e65730a0a998a12",
          "sha": "98f5ba4aa69e2b86d32fab649e65730a0a998a12",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/98f5ba4aa69e2b86d32fab649e65730a0a998a12"
        }
      ],
      "message": "silentpayments: add shared secret creation routine (a*B == A*b)",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-10T22:23:40Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-10-05T01:14:00Z"
      },
      "sha": "26714a9b40164d15f53967e4782ce89056f2d64e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11765810513,
      "node_id": "HRFPE_lADOAP4Jqs56epE0zwAAAAK9TAVR",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11765810513",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T22:56:34Z"
    },
    {
      "event": "commented",
      "id": 1937343720,
      "node_id": "IC_kwDOAP4Jqs5zeYTo",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1937343720",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T22:56:42Z",
      "updated_at": "2024-02-10T22:56:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed with interface changes in the tweak data and shared secret creation routines, following the latest suggestion in https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1478572607 / https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1480186475. The tweak data creation routines now return both the key sums and input hash, without doing any tweaks yet, in order to avoid extra point multiplication for the full node receiver case (see discussion https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1468836824). Also, there is now only one shared secret creation routine left, with the parameters named `public_component`, `private_component` and `input_hash`. I tried documenting in the API description on what has to be passed depending on the scenario; unsure if this is sufficient yet, maybe there is a better, more clear way of presenting the expected parameters to the user (e.g. summarizing it in a table).\r\n\r\nOne open question is if we really need a dedicated routine to calculate `A_tweaked = input_hash * A_sum` (for light clients / silent payment indexes...). That routine would essentially be a copy of `secp256k1_ec_pubkey_tweak_mul`. Is it okay for the user to demand calling this routine, if it's properly documented, or do we still want do have a dedicated routine `secp256k1_silentpayments_create_tweaked_pubkey` that does the same, making it clear in the API what has to be passed?\r\n\r\nThanks for your review comments regarding labels and your POC branch @josibake, I will look at this closer in a bit.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1937343720",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "mentioned",
      "id": 11765810895,
      "node_id": "MEE_lADOAP4Jqs56epE0zwAAAAK9TAbP",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11765810895",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T22:56:43Z"
    },
    {
      "event": "subscribed",
      "id": 11765810898,
      "node_id": "SE_lADOAP4Jqs56epE0zwAAAAK9TAbS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11765810898",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T22:56:43Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDcxOGQwMjZlNTBjYTkwODljYTZkYjc3NGQzMzA1ZTcyNzcwNmQxNGI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/718d026e50ca9089ca6db774d3305e727706d14b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/718d026e50ca9089ca6db774d3305e727706d14b",
      "tree": {
        "sha": "724fef8764eced3c8443271c6eafba6716ae2483",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/724fef8764eced3c8443271c6eafba6716ae2483"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/26714a9b40164d15f53967e4782ce89056f2d64e",
          "sha": "26714a9b40164d15f53967e4782ce89056f2d64e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/26714a9b40164d15f53967e4782ce89056f2d64e"
        }
      ],
      "message": "silentpayments: add label tweak calculation routine",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-13T01:16:44Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-01-22T17:56:05Z"
      },
      "sha": "718d026e50ca9089ca6db774d3305e727706d14b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11782740939,
      "node_id": "HRFPE_lADOAP4Jqs56epE0zwAAAAK-TlvL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11782740939",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-13T03:05:17Z"
    },
    {
      "event": "commented",
      "id": 1941333889,
      "node_id": "IC_kwDOAP4Jqs5ztmeB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1941333889",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-13T11:52:31Z",
      "updated_at": "2024-02-13T11:52:31Z",
      "author_association": "MEMBER",
      "body": "> One open question is if we really need a dedicated routine to calculate A_tweaked = input_hash * A_sum (for light clients / silent payment indexes...). That routine would essentially be a copy of secp256k1_ec_pubkey_tweak_mul. Is it okay for the user to demand calling this routine, if it's properly documented, or do we still want do have a dedicated routine secp256k1_silentpayments_create_tweaked_pubkey that does the same, making it clear in the API what has to be passed?\r\n\r\nI have a slight preference for wrapping `secp256k1_ec_pubkey_tweak_mul` in a dedicated `secp256k1_silentpayments_created_tweaked_pubkeys` routine. This way, you can do everything you need to do with just the silent payments module and don't really need to worry about the rest of `libsecp256k1`. In general, I think the goal for `libsecp256k1` is to further restrict the API and stop exposing routines for low level operations, so always wrapping in our own silent payments specific routines seems better.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1941333889",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDY1NWEwNTIzYWVkOGVkOTZhNTE2NzY0YzJmNGJmM2YzYmQxNzdjYmU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/655a0523aed8ed96a516764c2f4bf3f3bd177cbe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/655a0523aed8ed96a516764c2f4bf3f3bd177cbe",
      "tree": {
        "sha": "150375225b113720d32f1f474628ada7225be10e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/150375225b113720d32f1f474628ada7225be10e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/718d026e50ca9089ca6db774d3305e727706d14b",
          "sha": "718d026e50ca9089ca6db774d3305e727706d14b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/718d026e50ca9089ca6db774d3305e727706d14b"
        }
      ],
      "message": "silentpayments: add routine for creating labelled spend pubkeys (for addresses)",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-13T17:29:10Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-01-23T17:43:06Z"
      },
      "sha": "655a0523aed8ed96a516764c2f4bf3f3bd177cbe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDIwMWQyYTk4NDY0YzE5NTVjOWY1YzdmMjgwNTJhZmMwNGVmYWFiNzI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/201d2a98464c1955c9f5c7f28052afc04efaab72",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/201d2a98464c1955c9f5c7f28052afc04efaab72",
      "tree": {
        "sha": "6d804c365f9ecb38ba3ce2d4e54873172b34d3b3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6d804c365f9ecb38ba3ce2d4e54873172b34d3b3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/655a0523aed8ed96a516764c2f4bf3f3bd177cbe",
          "sha": "655a0523aed8ed96a516764c2f4bf3f3bd177cbe",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/655a0523aed8ed96a516764c2f4bf3f3bd177cbe"
        }
      ],
      "message": "silentpayments: implement output pubkey creation (for sender)",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-13T17:29:13Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-09-27T22:30:20Z"
      },
      "sha": "201d2a98464c1955c9f5c7f28052afc04efaab72"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDhlNDk4OTE5YjA5NDY1MDI4YTY2ZGI4NzQ1NjA4MzFkMmVlODUzZmI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8e498919b09465028a66db874560831d2ee853fb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8e498919b09465028a66db874560831d2ee853fb",
      "tree": {
        "sha": "d7a2224d89c51f7b53102fd8cbe8dc7cb6435ae3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/d7a2224d89c51f7b53102fd8cbe8dc7cb6435ae3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/201d2a98464c1955c9f5c7f28052afc04efaab72",
          "sha": "201d2a98464c1955c9f5c7f28052afc04efaab72",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/201d2a98464c1955c9f5c7f28052afc04efaab72"
        }
      ],
      "message": "silentpayments: add routine for creating scanning data (for receiver)\n\nCo-authored-by: josibake <josibake@protonmail.com>",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-13T17:29:13Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-12T16:43:11Z"
      },
      "sha": "8e498919b09465028a66db874560831d2ee853fb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRmZWJlZDE0OTczM2JmOTExYWVlN2QwMjFkOWUyYWM4OTY1OTE2MjI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dfebed149733bf911aee7d021d9e2ac896591622",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dfebed149733bf911aee7d021d9e2ac896591622",
      "tree": {
        "sha": "b84f5f267ee0361957438d252eb7b729d895b648",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b84f5f267ee0361957438d252eb7b729d895b648"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8e498919b09465028a66db874560831d2ee853fb",
          "sha": "8e498919b09465028a66db874560831d2ee853fb",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8e498919b09465028a66db874560831d2ee853fb"
        }
      ],
      "message": "silentpayments: implement output spending privkey creation (for receiver)",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-13T17:29:13Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-12-20T22:01:58Z"
      },
      "sha": "dfebed149733bf911aee7d021d9e2ac896591622"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQzYmRmYzM4YjY5ODc3ZDc5OWRiYTdlOGZlODM2N2M0ZDRhNGQ5MmE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/43bdfc38b69877d799dba7e8fe8367c4d4a4d92a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/43bdfc38b69877d799dba7e8fe8367c4d4a4d92a",
      "tree": {
        "sha": "46c6bcd69eddb37d0aaa6efbded425bb4782959f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/46c6bcd69eddb37d0aaa6efbded425bb4782959f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dfebed149733bf911aee7d021d9e2ac896591622",
          "sha": "dfebed149733bf911aee7d021d9e2ac896591622",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dfebed149733bf911aee7d021d9e2ac896591622"
        }
      ],
      "message": "test: add simple BIP-352 test with mixed plain/taproot inputs",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-13T17:29:13Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-12-21T17:16:21Z"
      },
      "sha": "43bdfc38b69877d799dba7e8fe8367c4d4a4d92a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGM1NDEwNzE0ODhjODEzMmU1ODk3ZTNlYjc0YjAxMGZjODBhNzRiODU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/c541071488c8132e5897e3eb74b010fc80a74b85",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/c541071488c8132e5897e3eb74b010fc80a74b85",
      "tree": {
        "sha": "c49c8bc16ae6deea47d4cb89e847e66472fdd960",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c49c8bc16ae6deea47d4cb89e847e66472fdd960"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/43bdfc38b69877d799dba7e8fe8367c4d4a4d92a",
          "sha": "43bdfc38b69877d799dba7e8fe8367c4d4a4d92a",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/43bdfc38b69877d799dba7e8fe8367c4d4a4d92a"
        }
      ],
      "message": "[DEMO-ONLY] add bip352 test vectors running suite using python and ctypes\n\nInstructions:\n\n$ ./configure --enable-module-silentpayments\n$ make\n$ cd bip352-testsuite\n$ ./run_bip352_tests.py\n\nAll sending tests and the non-labels receiving tests should pass.",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-02-13T17:31:26Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2023-12-23T16:17:42Z"
      },
      "sha": "c541071488c8132e5897e3eb74b010fc80a74b85"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11792088604,
      "node_id": "HRFPE_lADOAP4Jqs56epE0zwAAAAK-3P4c",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11792088604",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-13T17:35:03Z"
    },
    {
      "event": "commented",
      "id": 1944342841,
      "node_id": "IC_kwDOAP4Jqs5z5FE5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1944342841",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T18:07:35Z",
      "updated_at": "2024-02-14T18:07:35Z",
      "author_association": "MEMBER",
      "body": "I've rewritten [#28122](https://github.com/bitcoin/bitcoin/pull/28122) to use this module here: https://github.com/josibake/bitcoin/tree/implement-bip352-secp256k1-module. So far, so good! I'll take a fresh look here tomorrow with some feedback, and then update #28122 once I've cleaned up the branch a bit and we are ready to move this PR out of draft. @theStack can you remind me what your criteria for considering this PR \"not a draft\" were?",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1944342841",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "mentioned",
      "id": 11805319858,
      "node_id": "MEE_lADOAP4Jqs56epE0zwAAAAK_puKy",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11805319858",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T18:07:36Z"
    },
    {
      "event": "subscribed",
      "id": 11805319867,
      "node_id": "SE_lADOAP4Jqs56epE0zwAAAAK_puK7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11805319867",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T18:07:37Z"
    },
    {
      "event": "commented",
      "id": 1945025961,
      "node_id": "IC_kwDOAP4Jqs5z7r2p",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1945025961",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T23:37:02Z",
      "updated_at": "2024-02-14T23:37:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I've rewritten [#28122](https://github.com/bitcoin/bitcoin/pull/28122) to use this module here: https://github.com/josibake/bitcoin/tree/implement-bip352-secp256k1-module. So far, so good! I'll take a fresh look here tomorrow with some feedback, and then update #28122 once I've cleaned up the branch a bit and we are ready to move this PR out of draft. @theStack can you remind me what your criteria for considering this PR \"not a draft\" were?\r\n\r\nNice, only skimmed over the branch so far but it's good to see the module in full action. As for the out-of-draft criteria, I think we are pretty close, in my view the only two points missing are:\r\n- add another routine for creating $A_{tweaked}$, as needed for light clients / indexes (trivial, as it's basically a wrapper around `secp256k1_ec_pubkey_tweak_mul`), https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1941333889\r\n- having more test coverage in plain C, I think every routine should at least be called once (ideally all test vectors are converted to C code by the Python script, like e.g. done for MuSig2: https://github.com/jonasnick/secp256k1/blob/musig2-module/tools/test_vectors_musig2_generate.py)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#issuecomment-1945025961",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1471"
    },
    {
      "event": "mentioned",
      "id": 11808166583,
      "node_id": "MEE_lADOAP4Jqs56epE0zwAAAAK_0lK3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11808166583",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T23:37:04Z"
    },
    {
      "event": "subscribed",
      "id": 11808166592,
      "node_id": "SE_lADOAP4Jqs56epE0zwAAAAK_0lLA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11808166592",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T23:37:04Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467882044",
      "pull_request_review_id": 1846116671,
      "id": 1467882044,
      "node_id": "PRRC_kwDOAP4Jqs5Xfho8",
      "diff_hunk": "@@ -28,7 +28,41 @@ extern \"C\" {\n  * operations.\n  */\n \n-/* TODO: add function API for sender side. */\n+/** Create Silent Payment tweak data from input private keys.\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each input to spend)",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 7,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0b3ecd8f83ec589e5342dd0c769e6c419a7c583b",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's more correct to say something like:\r\n\r\n```suggestion\r\n * Given a list of n private keys a_1...a_n (one for each silent payment eligible input to spend)\r\n```\r\n\r\nsince these are only the private keys of inputs that meet the silent payments inputs criteria.",
      "created_at": "2024-01-26T16:43:52Z",
      "updated_at": "2024-01-26T17:21:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467882044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467882044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467883284",
      "pull_request_review_id": 1846116671,
      "id": 1467883284,
      "node_id": "PRRC_kwDOAP4Jqs5Xfh8U",
      "diff_hunk": "@@ -28,7 +28,41 @@ extern \"C\" {\n  * operations.\n  */\n \n-/* TODO: add function API for sender side. */\n+/** Create Silent Payment tweak data from input private keys.\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each input to spend)\n+ * and a serialized outpoint_lowest, compute the corresponding input",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 8,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0b3ecd8f83ec589e5342dd0c769e6c419a7c583b",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * and a serialized outpoint_smallest, compute the corresponding input\r\nComment\r\n",
      "created_at": "2024-01-26T16:45:08Z",
      "updated_at": "2024-01-26T17:21:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467883284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467883284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467885247",
      "pull_request_review_id": 1846116671,
      "id": 1467885247,
      "node_id": "PRRC_kwDOAP4Jqs5Xfia_",
      "diff_hunk": "@@ -28,7 +28,41 @@ extern \"C\" {\n  * operations.\n  */\n \n-/* TODO: add function API for sender side. */\n+/** Create Silent Payment tweak data from input private keys.\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each input to spend)\n+ * and a serialized outpoint_lowest, compute the corresponding input\n+ * private keys tweak data:\n+ *\n+ * a_tweaked = (a_1 + a_2 + ... + a_n) * hash(outpoint_lowest || A)\n+ *\n+ * (where A = A_1 + A_2 + ... + A_n)\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the sender side.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:          tweak_data32: pointer to the resulting 32-byte tweak data\n+ *  In:          plain_seckeys: pointer to an array of 32-byte private keys of non-taproot inputs\n+ *                              (can be NULL if no private keys of non-taproot inputs are used)\n+ *             n_plain_seckeys: the number of sender's non-taproot input private keys\n+ *             taproot_seckeys: pointer to an array of 32-byte private keys of taproot inputs\n+ *                              (can be NULL if no private keys of taproot inputs are used)\n+ *           n_taproot_seckeys: the number of sender's taproot input private keys\n+ *           outpoint_lowest36: serialized lowest outpoint",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0b3ecd8f83ec589e5342dd0c769e6c419a7c583b",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n *           outpoint_smallest36: serialized smallest outpoint",
      "created_at": "2024-01-26T16:47:04Z",
      "updated_at": "2024-01-26T17:21:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467885247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467885247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467895779",
      "pull_request_review_id": 1846116671,
      "id": 1467895779,
      "node_id": "PRRC_kwDOAP4Jqs5Xfk_j",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each input to spend)",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 7,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * Given a list of n public keys A_1...A_n (one for each silent payment eligible input to spend)\r\n```",
      "created_at": "2024-01-26T16:57:05Z",
      "updated_at": "2024-01-26T17:21:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467895779",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467895779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467896480",
      "pull_request_review_id": 1846116671,
      "id": 1467896480,
      "node_id": "PRRC_kwDOAP4Jqs5XflKg",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each input to spend)\n+ * and a serialized outpoint_lowest, compute the corresponding input",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 8,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * and a serialized outpoint_smallest, compute the corresponding input\r\n```",
      "created_at": "2024-01-26T16:57:45Z",
      "updated_at": "2024-01-26T17:21:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467896480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467896480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467897125",
      "pull_request_review_id": 1846116671,
      "id": 1467897125,
      "node_id": "PRRC_kwDOAP4Jqs5XflUl",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each input to spend)\n+ * and a serialized outpoint_lowest, compute the corresponding input\n+ * public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 11,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_smallest || A)\r\n```",
      "created_at": "2024-01-26T16:58:23Z",
      "updated_at": "2024-01-26T17:21:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467897125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467897125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467904182",
      "pull_request_review_id": 1846116671,
      "id": 1467904182,
      "node_id": "PRRC_kwDOAP4Jqs5XfnC2",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each input to spend)\n+ * and a serialized outpoint_lowest, compute the corresponding input\n+ * public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * If necessary, the public keys are negated to enforce the right y-parity.\n+ * For that reason, the public keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the receiver's side.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need this? By definition, taproot public keys have even y-parity. My understanding is that this only an issue when dealing with private keys, since for a given x-only public key there are two possible private keys (*d*, and *n - d* and we need to make sure we pick the correct private key (the one that produces a point with even parity).\r\n\r\nWe could just have the caller pass in one list of public keys (which means they would have already converted them to compressed keys by prefixing them with `0x02`.",
      "created_at": "2024-01-26T17:05:24Z",
      "updated_at": "2024-01-26T17:21:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467904182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467904182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467907062",
      "pull_request_review_id": 1846116671,
      "id": 1467907062,
      "node_id": "PRRC_kwDOAP4Jqs5Xfnv2",
      "diff_hunk": "@@ -141,6 +141,60 @@ int secp256k1_silentpayments_send_create_shared_secret(const secp256k1_context *\n     return 1;\n }\n \n+int secp256k1_silentpayments_create_public_tweak_data(const secp256k1_context *ctx, unsigned char *tweak_data33, const secp256k1_pubkey *plain_pubkeys, size_t n_plain_pubkeys, const secp256k1_xonly_pubkey *xonly_pubkeys, size_t n_xonly_pubkeys, const unsigned char *outpoint_lowest36) {\n+    size_t i;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    secp256k1_scalar input_hash_scalar;\n+    size_t ser_size;\n+    int ser_ret;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(tweak_data33 != NULL);\n+    memset(tweak_data33, 0, 33);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_lowest36 != NULL);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_ge addend;\n+        secp256k1_pubkey_load(ctx, &addend, &plain_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);\n+    }\n+\n+    /* X-only public keys have to be converted to regular public keys (assuming even parity) */\n+    for (i = 0; i < n_xonly_pubkeys; i++) {\n+        secp256k1_ge addend;\n+        secp256k1_xonly_pubkey_load(ctx, &addend, &xonly_pubkeys[i]);\n+        if (secp256k1_fe_is_odd(&addend.y)) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I might be missing something here, but I think this will always be true, right? AFAIU, when we \"load\" an x-only pubkey, we *choose* the even y point.",
      "created_at": "2024-01-26T17:08:39Z",
      "updated_at": "2024-01-26T17:21:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467907062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467907062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467911909",
      "pull_request_review_id": 1846116671,
      "id": 1467911909,
      "node_id": "PRRC_kwDOAP4Jqs5Xfo7l",
      "diff_hunk": "@@ -167,6 +167,29 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_l\n     unsigned int m\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Create Silent Payment labelled spend public key.\n+ *\n+ *  Given a recipient's spend public key B_spend and a label_tweak, calculate\n+ *  the corresponding serialized labelled spend public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *\n+ *  The result is used by the receiver to create a Silent Payment address, consisting\n+ *  of the serialized and concatenated scan public key and (labelled) spend public key each.\n+ *\n+ *  Returns: 1 if labellend spend public key creation was successful. 0 if an error occured.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 14,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "ac0f2b3387a5f473190489bdff8f06ff4f136da2",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion \r\n *  Returns: 1 if labelled spend public key creation was successful. 0 if an error occurred.\r\n```\r\n\r\n",
      "created_at": "2024-01-26T17:13:25Z",
      "updated_at": "2024-01-26T17:21:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467911909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467911909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467967482",
      "pull_request_review_id": 1846255745,
      "id": 1467967482,
      "node_id": "PRRC_kwDOAP4Jqs5Xf2f6",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each input to spend)\n+ * and a serialized outpoint_lowest, compute the corresponding input\n+ * public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * If necessary, the public keys are negated to enforce the right y-parity.\n+ * For that reason, the public keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the receiver's side.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": 1467904182,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, you're totally right! Not sure what I was thinking when writing this (\"Lord forgive them, for they do not know what they are doing\"...) 🙈 that's actually good news, as it results in less complex code.\r\n\r\n> We could just have the caller pass in one list of public keys (which means they would have already converted them to compressed keys by prefixing them with 0x02.\r\n\r\nNot sure about that part. For the module it would simplify the interface a lot, but do we want users needing to fiddle around manually with pubkey data (even if its only prepending a single byte)? See also the discussion in https://github.com/bitcoin-core/secp256k1/issues/1427#issue-1920495384 \r\n\r\n> In contrast to private keys which are always just 32-bytes long for our purposes, public keys come in different sizes (33, 65 and 32 bytes) and formats (\"full\", x-only). The question arises how a user would pass in those different types in a single function call. Should we\r\n> \r\n> 1. Pass in two lists, one of the type secp256k1_pubkey, another one of the type secp256k1_xonly_pubkey? (The user would need to call the corresponding parse functions before, obviously)\r\n> 2. Provide a function that let's the user convert xonly-pubkeys to pubkeys first (in this context, this should be simple by just prepending a 0x02 byte, IIUC) and then only take a single list of secp256k1_pubkey elements?\r\n> 3. Something else?\r\n\r\nand @jonasnick's answer below:\r\n\r\n> Passing two lists seems like an okay approach. Conversion functions may just lead to additional confusion. Without them, we maintain this relatively straightforward model:\r\n> ```\r\n> xonly pubkey encoding -> use xonly_parse -> use in functions that accept xonly_pubkeys\r\n> compressed pubkey encoding -> use ec_pubkey_parse -> use in functions that accept ec_pubkeys\r\n> ```",
      "created_at": "2024-01-26T18:02:56Z",
      "updated_at": "2024-01-26T18:02:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467967482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467967482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467968212",
      "pull_request_review_id": 1846256998,
      "id": 1467968212,
      "node_id": "PRRC_kwDOAP4Jqs5Xf2rU",
      "diff_hunk": "@@ -141,6 +141,60 @@ int secp256k1_silentpayments_send_create_shared_secret(const secp256k1_context *\n     return 1;\n }\n \n+int secp256k1_silentpayments_create_public_tweak_data(const secp256k1_context *ctx, unsigned char *tweak_data33, const secp256k1_pubkey *plain_pubkeys, size_t n_plain_pubkeys, const secp256k1_xonly_pubkey *xonly_pubkeys, size_t n_xonly_pubkeys, const unsigned char *outpoint_lowest36) {\n+    size_t i;\n+    secp256k1_ge A_sum_ge;\n+    secp256k1_gej A_sum_gej;\n+    secp256k1_scalar input_hash_scalar;\n+    size_t ser_size;\n+    int ser_ret;\n+\n+    /* Sanity check inputs */\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(tweak_data33 != NULL);\n+    memset(tweak_data33, 0, 33);\n+    ARG_CHECK(plain_pubkeys == NULL || n_plain_pubkeys >= 1);\n+    ARG_CHECK(xonly_pubkeys == NULL || n_xonly_pubkeys >= 1);\n+    ARG_CHECK((plain_pubkeys != NULL) || (xonly_pubkeys != NULL));\n+    ARG_CHECK((n_plain_pubkeys + n_xonly_pubkeys) >= 1);\n+    ARG_CHECK(outpoint_lowest36 != NULL);\n+\n+    /* Compute input public keys sum: A_sum = A_1 + A_2 + ... + A_n */\n+    secp256k1_gej_set_infinity(&A_sum_gej);\n+    for (i = 0; i < n_plain_pubkeys; i++) {\n+        secp256k1_ge addend;\n+        secp256k1_pubkey_load(ctx, &addend, &plain_pubkeys[i]);\n+        secp256k1_gej_add_ge(&A_sum_gej, &A_sum_gej, &addend);\n+    }\n+\n+    /* X-only public keys have to be converted to regular public keys (assuming even parity) */\n+    for (i = 0; i < n_xonly_pubkeys; i++) {\n+        secp256k1_ge addend;\n+        secp256k1_xonly_pubkey_load(ctx, &addend, &xonly_pubkeys[i]);\n+        if (secp256k1_fe_is_odd(&addend.y)) {",
      "path": "src/modules/silentpayments/main_impl.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": 1467907062,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it's the other way round: as x-only-pubkeys always have an even y-value, the condition is never true, hence the negation in the body is dead code. Will adapt in a bit and remove the corresponding text in the API comments.",
      "created_at": "2024-01-26T18:03:22Z",
      "updated_at": "2024-01-26T18:03:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1467968212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1467968212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468433593",
      "pull_request_review_id": 1847047050,
      "id": 1468433593,
      "node_id": "PRRC_kwDOAP4Jqs5XhoS5",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each input to spend)\n+ * and a serialized outpoint_lowest, compute the corresponding input\n+ * public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * If necessary, the public keys are negated to enforce the right y-parity.\n+ * For that reason, the public keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the receiver's side.",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "0acde7b47044a2c944420394e3627293113e9ef4",
      "in_reply_to_id": 1467904182,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the link to the discussion! Reading through that again, I agree it's probably better to just have two lists: one for public keys and another for x-only public keys. Despite a more complicated API, it does make the module more user friendly in that users can pass arguments directly without needing to do any preprocessing.",
      "created_at": "2024-01-27T09:52:15Z",
      "updated_at": "2024-01-27T09:52:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1468433593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468433593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468836824",
      "pull_request_review_id": 1847514647,
      "id": 1468836824,
      "node_id": "PRRC_kwDOAP4Jqs5XjKvY",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in https://github.com/bitcoin-core/secp256k1/pull/1471/commits/2290e80067b9127ca7931ed4677f688070ec3c5a:\r\n\r\nThis function covers a very important use case: preparing *public* transaction input data so that it can be served to a light client (a light client in this scenario is any client that does not have access to the blockchain but does have access to their `b_scan` private key).\r\n\r\nHowever, if used by a full node client, this function would cause the receiver to do two ECC multiplications:\r\n\r\n1. `A_sum * input_hash_scalar`\r\n2. `(A_sum * input_hash_Scalar) * b_scan`\r\n\r\nIn https://github.com/bitcoin-core/secp256k1/pull/1471/commits/d7250503aca9d0cfc0c2df12d3f98c02945bcf33 the sender only does one ECC multiplication by first doing the less expensive scalar multiplication of `a_sum * input_hash_scalar`. \r\n\r\nWhat if we had a single function that is used by both the sender and receiver, e.g.`silentpayments_create_shared_secret`, which takes the `input_hash_scalar` as an input and a private key (can be `b_scan` or `a_sum`) as inputs along with a public key (can be `A_sum` or `B_scan`). This function would multiply the private key and scalar and then do the ECDH step. We would then need *separate* function for the light client receiver only which takes `b_scan` and `A_tweaked` and does the ECDH step.\r\n\r\nJust brainstorming, open to other suggestions! Also might be prematurely optimizing but from what I understand ECC Multiplication is expensive, so keeping it to one for both sender and receiver seems worth it even at this stage.",
      "created_at": "2024-01-28T11:52:02Z",
      "updated_at": "2024-01-28T11:52:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1468836824",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468836824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468918444",
      "pull_request_review_id": 1847612605,
      "id": 1468918444,
      "node_id": "PRRC_kwDOAP4Jqs5Xjeqs",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": 1468836824,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! I assumed that full node clients using silent payments would usually also be interested in the public tweak data to maintain a tweak index (like e.g. https://github.com/bitcoin/bitcoin/pull/28241), both for the purpose of serving the data to light clients and for faster silent payment rescans, but didn't consider that this might not be the case for _all_ full nodes.\r\n\r\n> What if we had a single function that is used by both the sender and receiver, e.g.silentpayments_create_shared_secret, which takes the input_hash_scalar as an input and a private key (can be b_scan or a_sum) as inputs along with a public key (can be A_sum or B_scan). This function would multiply the private key and scalar and then do the ECDH step. We would then need separate function for the light client receiver only which takes b_scan and A_tweaked and does the ECDH step.\r\n\r\nSeems reasonable, though currently we don't expose `input_hash_scalar`, so we'd need extra routines to also calculate that. Have to think more about it, open for all suggestions. Glad that the interface discussion is unleashed!\r\n\r\n> Just brainstorming, open to other suggestions! Also might be prematurely optimizing but from what I understand ECC Multiplication is expensive, so keeping it to one for both sender and receiver seems worth it even at this stage.\r\n\r\nAgree that we should avoid these extra multiplications if possible.",
      "created_at": "2024-01-28T18:48:21Z",
      "updated_at": "2024-01-28T18:48:21Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1468918444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468918444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468920927",
      "pull_request_review_id": 1847614747,
      "id": 1468920927,
      "node_id": "PRRC_kwDOAP4Jqs5XjfRf",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": 1468836824,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Have to think more about it, open for all suggestions. Glad that the interface discussion is unleashed!\r\n\r\nYeah, what I suggested is pretty half baked! I'll also give this a more thorough think and share my thoughts. Happy to keep the discussion here (easier to reference things concretely), or we can move it to the linked issue if you prefer.",
      "created_at": "2024-01-28T19:05:31Z",
      "updated_at": "2024-01-28T19:05:31Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1468920927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1468920927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1471612676",
      "pull_request_review_id": 1851862975,
      "id": 1471612676,
      "node_id": "PRRC_kwDOAP4Jqs5XtwcE",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": 1468836824,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > Have to think more about it, open for all suggestions. Glad that the interface discussion is unleashed!\r\n> \r\n> Yeah, what I suggested is pretty half baked! I'll also give this a more thorough think and share my thoughts. Happy to keep the discussion here (easier to reference things concretely), or we can move it to the linked issue if you prefer.\r\n\r\nNo strong preference for issue or PR as discussion platform either, it's fine to keep it here for me as well!\r\n\r\nI still haven't come up with something concrete yet, but am planning to study BIP327 and it's secp256k1 module PR (https://github.com/bitcoin-core/secp256k1/pull/1479), as it might give some ideas, both regarding interface and concrete implementation. Haven't looked deeper, but I see that a dedicated caching data type is introduced there to avoid recomputations, maybe something like that could be useful for a BIP352 interface too.",
      "created_at": "2024-01-30T16:57:18Z",
      "updated_at": "2024-01-30T16:57:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1471612676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1471612676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475018645",
      "pull_request_review_id": 1857403212,
      "id": 1475018645,
      "node_id": "PRRC_kwDOAP4Jqs5X6v-V",
      "diff_hunk": "@@ -28,7 +28,41 @@ extern \"C\" {\n  * operations.\n  */\n \n-/* TODO: add function API for sender side. */\n+/** Create Silent Payment tweak data from input private keys.\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input private keys tweak data:\n+ *\n+ * a_tweaked = (a_1 + a_2 + ... + a_n) * hash(outpoint_smallest || A)\n+ *\n+ * (where A = A_1 + A_2 + ... + A_n)\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the sender side.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:  private_tweak_data32: pointer to the resulting 32-byte private tweak data\n+ *  In:          plain_seckeys: pointer to an array of 32-byte private keys of non-taproot inputs\n+ *                              (can be NULL if no private keys of non-taproot inputs are used)\n+ *             n_plain_seckeys: the number of sender's non-taproot input private keys\n+ *             taproot_seckeys: pointer to an array of 32-byte private keys of taproot inputs\n+ *                              (can be NULL if no private keys of taproot inputs are used)\n+ *           n_taproot_seckeys: the number of sender's taproot input private keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_private_tweak_data(\n+    const secp256k1_context *ctx,\n+    unsigned char *private_tweak_data32,\n+    const unsigned char *plain_seckeys,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "d7250503aca9d0cfc0c2df12d3f98c02945bcf33",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Started trying to use the module in #28122 and noticed this is an array of concatenated bytes, where `n` determines the number of items in the \"list.\" Any particular reason for choosing this method of passing lists of pubkey/seckeys? Is this a convention in `libsecp`? ",
      "created_at": "2024-02-01T19:21:47Z",
      "updated_at": "2024-02-01T19:21:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1475018645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475018645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": 59,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475303392",
      "pull_request_review_id": 1857903313,
      "id": 1475303392,
      "node_id": "PRRC_kwDOAP4Jqs5X71fg",
      "diff_hunk": "@@ -28,7 +28,41 @@ extern \"C\" {\n  * operations.\n  */\n \n-/* TODO: add function API for sender side. */\n+/** Create Silent Payment tweak data from input private keys.\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input private keys tweak data:\n+ *\n+ * a_tweaked = (a_1 + a_2 + ... + a_n) * hash(outpoint_smallest || A)\n+ *\n+ * (where A = A_1 + A_2 + ... + A_n)\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the sender side.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:  private_tweak_data32: pointer to the resulting 32-byte private tweak data\n+ *  In:          plain_seckeys: pointer to an array of 32-byte private keys of non-taproot inputs\n+ *                              (can be NULL if no private keys of non-taproot inputs are used)\n+ *             n_plain_seckeys: the number of sender's non-taproot input private keys\n+ *             taproot_seckeys: pointer to an array of 32-byte private keys of taproot inputs\n+ *                              (can be NULL if no private keys of taproot inputs are used)\n+ *           n_taproot_seckeys: the number of sender's taproot input private keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_private_tweak_data(\n+    const secp256k1_context *ctx,\n+    unsigned char *private_tweak_data32,\n+    const unsigned char *plain_seckeys,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "d7250503aca9d0cfc0c2df12d3f98c02945bcf33",
      "in_reply_to_id": 1475018645,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's actually also one of the interface questions where I'm not sure what's the right way to do it. As we don't have a fancy dynamic list type in C (like e.g. `std::vector` in C++), we will anyhow have to pass two arguments per list: one pointing to the data, the other one for the number of elements, but the question is how to structure the data. I chose flat-concatenated-bytes/pubkey-objects in a contiguous memory area, but on a second thought it's a pretty bad idea to demand from the user to concatenate all the keys before calling, involving a lot of copying. It seems a list of _pointers_ (ending up in a double-pointer) makes more sense?\r\n\r\nThat's also how other public secp256k1 routines do it, e.g. `secp256k1_ec_pubkey_combine`, where a list of pubkeys is passed in:\r\n```\r\n    const secp256k1_pubkey * const *ins,\r\n    size_t n\r\n```\r\n\r\nFor a list of private keys, I presume this would look like\r\n```\r\n    const unsigned char * const *ins,\r\n    size_t,\r\n```\r\n\r\n(note that there is no dedicated \"seckey\" data type in the secp256k1 API, it's just an `unsigned char` pointer to memory location where the 32 bytes key data is expected).\r\n\r\nI think the users would then use that somehow like this in C++ (untested):\r\n```\r\nvoid foobar(const std::vector<CKey>& keys)\r\n{    \r\n    std::vector<unsigned char*> privkey_pointers;\r\n    for (auto& key : keys) privkey_pointers.push_back(key.data());\r\n    secp256k1_create_private_tweak_data(..., ..., privkey_pointers.data(), privkey_pointers.size(), ...);\r\n}\r\n```\r\nShould I change the interface to list of pointers? That seems strictly better than the current interface. Or is there another method of passing in key lists that you could think of?",
      "created_at": "2024-02-01T23:32:22Z",
      "updated_at": "2024-02-01T23:32:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1475303392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475303392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": 59,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475314253",
      "pull_request_review_id": 1857919119,
      "id": 1475314253,
      "node_id": "PRRC_kwDOAP4Jqs5X74JN",
      "diff_hunk": "@@ -28,7 +28,41 @@ extern \"C\" {\n  * operations.\n  */\n \n-/* TODO: add function API for sender side. */\n+/** Create Silent Payment tweak data from input private keys.\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input private keys tweak data:\n+ *\n+ * a_tweaked = (a_1 + a_2 + ... + a_n) * hash(outpoint_smallest || A)\n+ *\n+ * (where A = A_1 + A_2 + ... + A_n)\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the sender side.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:  private_tweak_data32: pointer to the resulting 32-byte private tweak data\n+ *  In:          plain_seckeys: pointer to an array of 32-byte private keys of non-taproot inputs\n+ *                              (can be NULL if no private keys of non-taproot inputs are used)\n+ *             n_plain_seckeys: the number of sender's non-taproot input private keys\n+ *             taproot_seckeys: pointer to an array of 32-byte private keys of taproot inputs\n+ *                              (can be NULL if no private keys of taproot inputs are used)\n+ *           n_taproot_seckeys: the number of sender's taproot input private keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_private_tweak_data(\n+    const secp256k1_context *ctx,\n+    unsigned char *private_tweak_data32,\n+    const unsigned char *plain_seckeys,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "d7250503aca9d0cfc0c2df12d3f98c02945bcf33",
      "in_reply_to_id": 1475018645,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh btw, I found an old Bitcoin Core branch from December where I already tried to use this module in #28122. It felt too early back then to publish it, as it was based on a not-even-draft module and I didn't want to trigger another interface discussion on top of an interface discussion, but it might be helpful for giving an idea how the module is used: https://github.com/theStack/bitcoin/tree/pr28122_using_secp256k1-silentpayments-outdated (obviously, it's outdated and the interface has changed a bit now).",
      "created_at": "2024-02-01T23:38:50Z",
      "updated_at": "2024-02-01T23:38:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1475314253",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475314253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": 59,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475793982",
      "pull_request_review_id": 1858775463,
      "id": 1475793982,
      "node_id": "PRRC_kwDOAP4Jqs5X9tQ-",
      "diff_hunk": "@@ -28,7 +28,41 @@ extern \"C\" {\n  * operations.\n  */\n \n-/* TODO: add function API for sender side. */\n+/** Create Silent Payment tweak data from input private keys.\n+ *\n+ * Given a list of n private keys a_1...a_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input private keys tweak data:\n+ *\n+ * a_tweaked = (a_1 + a_2 + ... + a_n) * hash(outpoint_smallest || A)\n+ *\n+ * (where A = A_1 + A_2 + ... + A_n)\n+ *\n+ * If necessary, the private keys are negated to enforce the right y-parity.\n+ * For that reason, the private keys have to be passed in via two different parameter\n+ * pairs, depending on whether they were used for creating taproot outputs or not.\n+ * The resulting data is needed to create a shared secret for the sender side.\n+ *\n+ *  Returns: 1 if shared secret creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:  private_tweak_data32: pointer to the resulting 32-byte private tweak data\n+ *  In:          plain_seckeys: pointer to an array of 32-byte private keys of non-taproot inputs\n+ *                              (can be NULL if no private keys of non-taproot inputs are used)\n+ *             n_plain_seckeys: the number of sender's non-taproot input private keys\n+ *             taproot_seckeys: pointer to an array of 32-byte private keys of taproot inputs\n+ *                              (can be NULL if no private keys of taproot inputs are used)\n+ *           n_taproot_seckeys: the number of sender's taproot input private keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_private_tweak_data(\n+    const secp256k1_context *ctx,\n+    unsigned char *private_tweak_data32,\n+    const unsigned char *plain_seckeys,",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 34,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "d7250503aca9d0cfc0c2df12d3f98c02945bcf33",
      "in_reply_to_id": 1475018645,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It seems a list of pointers (ending up in a double-pointer) makes more sense?\r\n\r\nThis makes more sense to me. If we have to concatenate the bytes for the secret keys, it seems like we would have to copy them out of secure memory just to pass them in to the function, whereas if we have a list of pointers the keys can be read directly from their secure memory.\r\n\r\n> Should I change the interface to list of pointers? That seems strictly better than the current interface. Or is there another method of passing in key lists that you could think of?\r\n\r\nlist of pointers was going to be my suggestion :smile: \r\n\r\n> Oh btw, I found an old Bitcoin Core branch from December\r\n\r\nAwesome, I'll take a look!",
      "created_at": "2024-02-02T09:32:00Z",
      "updated_at": "2024-02-02T09:32:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1475793982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1475793982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": 59,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1477540377",
      "pull_request_review_id": 1861687289,
      "id": 1477540377,
      "node_id": "PRRC_kwDOAP4Jqs5YEXoZ",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": 1468836824,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One easy possibility to avoid the extra point multiplication on the receiver side for full node clients:\r\n- change `_create_public_tweak_data` to only calculate and return a tuple (A_sum, input_hash), without doing the multiplication. E.g. with a new struct data type:\r\n```\r\ntypedef struct {\r\n    secp256k1_pubkey pubkey_sum;\r\n    unsigned char input_hash[32];\r\n} secp256k1_silentpayments_pubkey_tweak_data;\r\n```\r\n- change `_receive_create_shared_secret` to take an instance of this struct (instead of $A_{tweaked}$) accordingly, e.g.:\r\n```\r\nint secp256k1_silentpayments_receive_create_shared_secret(\r\n    const secp256k1_context *ctx,\r\n    unsigned char *shared_secret33,\r\n    const secp256k1_silentpayments_pubkey_tweak_data *public_tweak_data,\r\n    const unsigned char *receiver_scan_seckey\r\n)\r\n```\r\nIn that function, the shared secret would then be calculated via $SS = (b_{scan} * inputhash) * A_{sum}$\r\n\r\nThat would be a straightforward change. The only thing needed then for light clients (or nodes that want to create a silent payments tweak index) is an additional routine to calculate $A_{tweaked} = inputhash * A_{sum}$, given a `_pubkey_tweak_data` instance, and a possibility to calculate the shared secret from that $A_{tweaked}$. Should we have an extra shared secret creation routine for the receiver side that takes $A_{tweaked}$ (instead of the `pubkey_tweak_data` instance) and $b_{scan}$ (basically exactly what we have right now in the current PR state), or somehow abuse the `pubkey_tweak_data` structure to be also able to calculate and hold $A_{tweaked}$ already, e.g. with a flag (0=pubkey is sum, 1=pubkey is already tweaked with hash)?\r\n\r\nJust some ideas and mostly thinking out loud, happy to receive further input.",
      "created_at": "2024-02-05T01:12:57Z",
      "updated_at": "2024-02-05T01:12:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1477540377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1477540377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1478101807",
      "pull_request_review_id": 1862578967,
      "id": 1478101807,
      "node_id": "PRRC_kwDOAP4Jqs5YGgsv",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": 1468836824,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> change _create_public_tweak_data to only calculate and return a tuple (A_sum, input_hash)\r\n\r\nThis is how I did it in [#28122](https://github.com/bitcoin/bitcoin/pull/28122) and this seemed to work well. This would also allow us to simplify things a bit and use a single routine for shared secret creation for both sender and receiver:\r\n\r\n```\r\ntypedef struct {\r\n    secp256k1_pubkey pubkey;\r\n    unsigned char input_hash[32];\r\n} secp256k1_silentpayments_pubkey_tweak_data;\r\n\r\nint secp256k1_silentpayments_create_shared_secret(\r\n    const secp256k1_context *ctx,\r\n    unsigned char *shared_secret33,\r\n    const secp256k1_silentpayments_pubkey_tweak_data *public_tweak_data,\r\n    const unsigned char *seckey\r\n)\r\n```\r\n\r\nwhere `pubkey` represents either the pubkey sum or the receivers scan public key and `seckey` represents either the senders secret key sum or the receivers scan private key. I think this would require modifying your `_sender` routines a bit, e.g. have the sender routine first sum the secret keys and then call the shared routine `_silentpayments_create_shared_secret`.\r\n\r\n---\r\n\r\nFor the receiver, yes, I think we would need the two routines you mentioned:\r\n\r\n* one for creating $A_{tweaked}$ (i.e. $A_{tweaked} = inputhash * A_{sum}$)\r\n* one for creating a shared secret from $A_{tweaked}$ (i.e. $SS = b_{scan} * A_{tweaked}$)\r\n\r\nThese could also be the same routine since they are essentially doing the same thing ($d * P$) and both return `unsigned char data[33]`, either to be written to an index/sent to light clients or hashed with $k$ to create an output. What do you think?",
      "created_at": "2024-02-05T12:07:58Z",
      "updated_at": "2024-02-05T12:07:58Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1478101807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1478101807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1478572607",
      "pull_request_review_id": 1863317814,
      "id": 1478572607,
      "node_id": "PRRC_kwDOAP4Jqs5YITo_",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": 1468836824,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This is how I did it in https://github.com/bitcoin/bitcoin/pull/28122 and this seemed to work well. This would also allow us to simplify things a bit and use a single routine for shared secret creation for both sender and receiver:\r\n> ...\r\n\r\nConsolidating the API to a single shared secret creation function for both directions would be nice indeed. One drawback could be though that it is likely more confusing for the user and it's a bit easier to use it wrong; since the paramters can't be named exactly after what is expected anymore (e.g. `receiver_scan_pubkey`), they have to have more generic names (e.g. `pubkey_part`, `privkey_part` or sth alike), as it now depends on the direction. But that can (hopefully) be compensated by good API documentation? Not sure yet, but I think we should give it a try.\r\n\r\nEven the shared secret creation for light clients (passing $A_{tweaked}$) case could be done by that same routine, by making one parameter optional (i.e. if `input_hash` is NULL, that signals that the tweak is already included in the passed pubkey). Another suggestions based on that, where the newly introduced `struct` from the previous comment doesn't exist anymore:\r\n```\r\nTweak data creation:\r\n  _create_private_tweak_data -> returns (a_sum, input_hash)\r\n  _create_public_tweak_data  -> returns (A_sum, input_hash)\r\n\r\nShared secret creation:\r\n  Sender:                  _create_shared_secret(..., ..., B_scan, a_sum, input_hash)\r\n  Receiver (Full node):    _create_shared_secret(..., ..., A_sum, b_scan, input_hash)\r\n  Receiver (Light client): _create_shared_secret(..., ..., A_tweaked, b_scan, NULL)\r\n```\r\n\r\n> For the receiver, yes, I think we would need the two routines you mentioned:\r\n> \r\n> * one for creating Atweaked (i.e. Atweaked=inputhash∗Asum)\r\n> * one for creating a shared secret from Atweaked (i.e. SS=bscan∗Atweaked)\r\n> \r\n> These could also be the same routine since they are essentially doing the same thing (d∗P) and both return `unsigned char data[33]`, either to be written to an index/sent to light clients or hashed with k to create an output. What do you think?\r\n\r\nThose two calculations are different in the sense that the shared secret creation one does a full ECDH including the call of the ECDH hash function, while the other one is just a normal point multiplication (less critical, as there is no secret key material involved, IIUC). So I think a dedicated routine for creating `A_tweaked` from `(input_hash, A_sum)` is still needed. For that one, it probably makes sense to include the serialization to the 33-bytes already, as the user would need to do that for storing it in an index or sending it to the light client anyway.",
      "created_at": "2024-02-05T16:50:59Z",
      "updated_at": "2024-02-05T16:50:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1478572607",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1478572607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1480186475",
      "pull_request_review_id": 1865791930,
      "id": 1480186475,
      "node_id": "PRRC_kwDOAP4Jqs5YOdpr",
      "diff_hunk": "@@ -89,7 +89,39 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_send_cre\n     const secp256k1_pubkey *receiver_scan_pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/* TODO: add function API for receiver side. */\n+/** Create Silent Payment tweak data from input public keys.\n+ *\n+ * Given a list of n public keys A_1...A_n (one for each silent payment\n+ * eligible input to spend) and a serialized outpoint_smallest, compute\n+ * the corresponding input public keys tweak data:\n+ *\n+ * A_tweaked = (A_1 + A_2 + ... + A_n) * hash(outpoint_lowest || A)\n+ *\n+ * The public keys have to be passed in via two different parameter pairs,\n+ * one for regular and one for x-only public keys, in order to avoid the need\n+ * of users converting to a common pubkey format before calling this function.\n+ * The resulting data is needed to create a shared secret for the receiver's side.\n+ *\n+ *  Returns: 1 if tweak data creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:     public_tweak_data: pointer to the resulting public keys tweak data\n+ *  In:          plain_pubkeys: pointer to an array of non-taproot public keys\n+ *                              (can be NULL if no non-taproot inputs are used)\n+ *             n_plain_pubkeys: the number of non-taproot input public keys\n+ *               xonly_pubkeys: pointer to an array of taproot x-only public keys\n+ *                              (can be NULL if no taproot input public keys are used)\n+ *             n_xonly_pubkeys: the number of taproot input public keys\n+ *         outpoint_smallest36: serialized smallest outpoint\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_public_tweak_data(",
      "path": "include/secp256k1_silentpayments.h",
      "position": 97,
      "original_position": 29,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "2290e80067b9127ca7931ed4677f688070ec3c5a",
      "in_reply_to_id": 1468836824,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> One drawback could be though that it is likely more confusing for the user and it's a bit easier to use it wrong; since the paramters can't be named exactly after what is expected anymore\r\n\r\nTrue, but as you said, I think we can address this with good documentation. Another for using the same routine for both sender and receiver is we ensure that sender and receiver will arrive at the same shared secret (provided they give correct inputs), since they are using the same routine. If we use separate routines, there is a small chance of introducing a bug in one of the routines that would cause the sender and receiver to arrive at different shared secrets despite giving the correct inputs.\r\n\r\n> Even the shared secret creation for light clients (passing ) case could be done by that same routine, by making one parameter optional (i.e. if input_hash is NULL, that signals that the tweak is already included in the passed pubkey)\r\n\r\nAlso not a bad idea! I'd say we can go with this for now and always revert to multiple routines if there are objections.\r\n\r\n> Those two calculations are different in the sense that the shared secret creation one does a full ECDH including the call of the ECDH hash function, while the other one is just a normal point multiplication\r\n\r\nGood point, I forgot about that. I think the main difference here is that ECDH is done in constant time whereas point multiplication is not. Regardless, you're correct that these should remain separate routines and I agree we should just return the 33 byte serialized pubkey for the routine creating the light client/index data.",
      "created_at": "2024-02-06T16:33:44Z",
      "updated_at": "2024-02-06T16:33:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1480186475",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1480186475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1484563895",
      "pull_request_review_id": 1872806854,
      "id": 1484563895,
      "node_id": "PRRC_kwDOAP4Jqs5YfKW3",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"silentpayments: implement output pubkey creation (both sender and receiver)\" (https://github.com/bitcoin-core/secp256k1/pull/1471/commits/e8cb4e74ff586d332eb023e157b69e38660668ce):\r\n\r\nI think we will need sender and receiver specific routines for creating outputs. For the sender, what you have here is perfect. For the receiver, [GetTxOutputTweaks](https://github.com/bitcoin/bitcoin/blob/de7dd3aaf64bc9812ac4c30994ee6fbb5695e953/src/wallet/silentpayments.cpp#L162) (from #28122) returns `t_k` instead of the full output, which allows the wallet to scan without ever needing the private key `b_spend`. The idea here is `t_k` can be stored in the wallet and then added to `b_spend` at signing time. Additionally, the receiver needs to perform the following steps when scanning for labels:\r\n\r\n* calculate `tx_output - P_k`\r\n* calculate `- tx_output - P_k`\r\n\r\nWhat if we renamed `_create_output_pubkey` to `_sender_create_output_pubkey` and added a new function for the receiver, something like:\r\n\r\n```\r\ntypedef struct {\r\n    unsigned char t_k[32];\r\n    secp256k1_xonly_pubkey xonly_output;\r\n    secp256k1_pubkey label;\r\n    secp256k1_pubkey label_negated;\r\n} secp256k1_silentpayments_scanning_data;\r\n\r\nint secp256k1_silentpayments_receiver_create_scanning_data(\r\n    const secp256k1_context *ctx,\r\n    secp256k1_silentpayments_scanning_data *scanning_data,\r\n    const unsigned char *shared_secret33,\r\n    const secp256k1_pubkey *receiver_spend_pubkey,\r\n    unsigned int k\r\n)\r\n```\r\n\r\nWhere `_receiver_create_scanning_data` creates the output same as before and also calculates `label_pubkey = tx_output + P_k_negated` and `label_pubkey_negated = tx_output_negated + P_k_negated`.\r\n\r\nThis way, if `xonly_output` matches one of the transaction outputs, we add `t_k` to the wallet. If `xonly_output` doesn't match, we check if `label_pubkey` or `label_pubkey_negated` is in our labels cache and if there is a match we add `t_k + label_tweak` to the wallet.\r\n\r\nIf the scanning client is not using labels, they can just ignore the label data and move on if they don't find a match for `xonly_pubkey`. Creating the label data only involves a few negations and EC additions so I don't think it hurts to always calculate it. The alternative would be *even moar routines:* one for receiving clients that use labels and one for receiving clients that don't.\r\n\r\nWDYT?",
      "created_at": "2024-02-09T16:42:35Z",
      "updated_at": "2024-02-09T16:54:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1484563895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1484563895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1484574143",
      "pull_request_review_id": 1872806854,
      "id": 1484574143,
      "node_id": "PRRC_kwDOAP4Jqs5YfM2_",
      "diff_hunk": "@@ -0,0 +1,227 @@\n+#!/usr/bin/env python3\n+import bech32m\n+import hashlib\n+import json\n+import ripemd160\n+import secp256k1_glue\n+\n+def sha256(s):\n+    return hashlib.sha256(s).digest()\n+\n+def hash160(s):\n+    return ripemd160.ripemd160(sha256(s))\n+\n+def TaggedHash(tag, data):\n+    return sha256(sha256(tag) + sha256(tag) + data)\n+\n+def smallest_outpoint(outpoints):\n+    serialized_outpoints = [bytes.fromhex(txid)[::-1] + n.to_bytes(4, 'little') for txid, n in outpoints]\n+    return sorted(serialized_outpoints)[0]\n+\n+def encode_silent_payment_address(scan_pubkey, spend_pubkey):\n+    assert len(scan_pubkey) == 33\n+    assert len(spend_pubkey) == 33\n+    data = bech32m.convertbits(scan_pubkey + spend_pubkey, 8, 5)\n+    return bech32m.bech32_encode(\"sp\", [0] + data, bech32m.Encoding.BECH32M)\n+\n+def decode_silent_payments_address(address):\n+    version, data = bech32m.decode(\"sp\", address)\n+    data = bytes(data)  # convert from list to bytes\n+    assert len(data) == 66\n+    return data[:33], data[33:]\n+\n+def is_p2tr(s):  # OP_1 OP_PUSHBYTES_32 <32 bytes>\n+    return (len(s) == 34) and (s[0] == 0x51) and (s[1] == 0x20)\n+\n+def is_p2wpkh(s):  # OP_0 OP_PUSHBYTES_20 <20 bytes>\n+    return (len(s) == 22) and (s[0] == 0x00) and (s[1] == 0x14)\n+\n+def is_p2sh(s):  # OP_HASH160 OP_PUSHBYTES_20 <20 bytes> OP_EQUAL\n+    return (len(s) == 23) and (s[0] == 0xA9) and (s[1] == 0x14) and (s[-1] == 0x87)\n+\n+def is_p2pkh(s):  # OP_DUP OP_HASH160 OP_PUSHBYTES_20 <20 bytes> OP_EQUALVERIFY OP_CHECKSIG\n+    return (len(s) == 25) and (s[0] == 0x76) and (s[1] == 0xA9) and (s[2] == 0x14) and (s[-2] == 0x88) and (s[-1] == 0xAC)\n+\n+def get_pubkey_from_input(spk, script_sig, witness):\n+    if is_p2pkh(spk):\n+        spk_pkh = spk[3:3 + 20]\n+        for i in range(len(script_sig), 0, -1):\n+            if i - 33 >= 0:\n+                pk = script_sig[i - 33:i]\n+                if hash160(pk) == spk_pkh:\n+                    return pk\n+        # should never happen, as this would be an invalid spend\n+        assert False\n+    if is_p2sh(spk):\n+        redeem_script = script_sig[1:]\n+        if is_p2wpkh(redeem_script):\n+            return redeem_script[-33:]\n+    if is_p2wpkh(spk):\n+        # the witness must contain two items and the second item is the pubkey\n+        return witness[-33:]\n+    if is_p2tr(spk):\n+        return spk[2:]\n+    assert False\n+\n+with open('./bip352-send_and_receive_test_vectors.json') as f:\n+    test_vectors = json.load(f)\n+\n+passed_send, passed_receive = 0, 0\n+for test_nr, test_vector in enumerate(test_vectors):\n+    print(f\"----- Test vector: \\'{test_vector['comment']}\\' {test_nr+1}/{len(test_vectors)} -----\")\n+    ###################### sending #########################\n+    assert len(test_vector['sending']) == 1\n+    send_data_given = test_vector['sending'][0]['given']\n+    send_data_expected = test_vector['sending'][0]['expected']\n+    input_priv_keys = []\n+    outpoints = []\n+    for i in send_data_given['vin']:\n+        priv_key = i['private_key']\n+        pub_key = get_pubkey_from_input(bytes.fromhex(i['prevout']['scriptPubKey']['hex']),\n+            bytes.fromhex(i['scriptSig']), bytes.fromhex(i['txinwitness']))\n+        input_priv_keys.append((i['private_key'], len(pub_key) == 32))\n+        outpoints.append((i['txid'], i['vout']))\n+    outpoint_L = smallest_outpoint(outpoints)\n+    outputs_calculated = []\n+\n+    groups = {}\n+    for recipient_address, recipient_value in send_data_given['recipients']:\n+        recipient_B_scan, recipient_B_spend = decode_silent_payments_address(recipient_address)\n+        groups.setdefault(recipient_B_scan, []).append((recipient_B_spend, recipient_value))\n+\n+    for recipient_B_scan, recipient_spend_data in groups.items():\n+        plain_seckeys, xonly_seckeys = [], []\n+        for seckey_hex, is_taproot in input_priv_keys:\n+            (xonly_seckeys if is_taproot else plain_seckeys).append(bytes.fromhex(seckey_hex))\n+        tweak_data = secp256k1_glue.silentpayments_create_private_tweak_data(\n+            plain_seckeys, xonly_seckeys, outpoint_L)\n+        shared_secret = secp256k1_glue.silentpayments_send_create_shared_secret(tweak_data, recipient_B_scan)\n+        k = 0\n+        for recipient_B_spend in recipient_spend_data:\n+            output = secp256k1_glue.silentpayments_create_output_pubkey(shared_secret, recipient_B_spend[0], k)\n+            outputs_calculated.append(output.hex())\n+            k += 1\n+    outputs_expected = [o[0] for o in send_data_expected['outputs']]\n+    if outputs_calculated == outputs_expected:\n+        print(\"Sending test \\033[0;32mPASSED. ✓\\033[0m\")\n+        passed_send += 1\n+    else:\n+        print(\"Sending test \\033[0;31mFAILED. ✖\\033[0m\")\n+        print(f\"Calculated outputs: {outputs_calculated}\")\n+        print(f\"Expected outputs: {outputs_expected}\")\n+\n+    ###################### receiving ########################\n+    assert len(test_vector['receiving']) >= 1\n+    for subtest_nr, receive_data in enumerate(test_vector['receiving']):\n+        receive_data_given = receive_data['given']\n+        receive_data_expected = receive_data['expected']\n+\n+        input_pub_keys = []\n+        outpoints = []\n+        for i in receive_data_given['vin']:\n+            pub_key = get_pubkey_from_input(bytes.fromhex(i['prevout']['scriptPubKey']['hex']),\n+                bytes.fromhex(i['scriptSig']), bytes.fromhex(i['txinwitness']))\n+            input_pub_keys.append(pub_key)\n+            outpoints.append((i['txid'], i['vout']))\n+        receive_outpoint_L = smallest_outpoint(outpoints)\n+\n+        # test data sanity check: outpoint_L of send and receive has to match\n+        assert receive_outpoint_L == outpoint_L\n+        # derive tweak_data and shared_secret\n+        plain_pubkeys, xonly_pubkeys = [], []\n+        for pubkey in input_pub_keys:\n+            if len(pubkey) == 32:\n+                xonly_pubkeys.append(pubkey)\n+            elif len(pubkey) == 33:\n+                plain_pubkeys.append(pubkey)\n+            else:\n+                assert False\n+        tweak_data = secp256k1_glue.silentpayments_create_tweak_data(plain_pubkeys, xonly_pubkeys, receive_outpoint_L)\n+        scan_privkey = bytes.fromhex(receive_data_given['key_material']['scan_priv_key'])\n+        spend_privkey = bytes.fromhex(receive_data_given['key_material']['spend_priv_key'])\n+        # spend pubkey is not in the given data of the receiver part, so let's compute it\n+        scan_pubkey = secp256k1_glue.pubkey_serialize((secp256k1_glue.pubkey_create(scan_privkey)))\n+        spend_pubkey = secp256k1_glue.pubkey_serialize((secp256k1_glue.pubkey_create(spend_privkey)))\n+        shared_secret = secp256k1_glue.silentpayments_receive_create_shared_secret(tweak_data, scan_privkey)\n+        outputs_pubkeys_expected = [o['pub_key'] for o in receive_data_expected['outputs']]\n+        outputs_privkeys_expected = [o['priv_key_tweak'] for o in receive_data_expected['outputs']]\n+        outputs_scanned = []\n+        outputs_privkeys = []\n+\n+        # scan through outputs\n+        k = 0\n+        outputs_to_check = receive_data_given['outputs'].copy()\n+        while True:\n+            if len(outputs_to_check) == 0:\n+                break\n+            for output_to_check in outputs_to_check:\n+                found_sth = False\n+                for label_m in [None] + receive_data_given['labels']:",
      "path": "bip352-testsuite/run_bip352_tests.py",
      "position": null,
      "original_position": 159,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "3deeebd1b5d7f3684e6425be749c643504f7c471",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"[DEMO-ONLY] add bip352 test vectors running suite using python and ctypes\" (https://github.com/bitcoin-core/secp256k1/pull/1471/commits/3deeebd1b5d7f3684e6425be749c643504f7c471):\r\n\r\nThis is *kinda* cheating in that you are iterating through all of your labels for every output in the transaction that you're scanning. So lets say I have 100k labels and I'm checking a tx with 100 outputs.. I'd doing `2 * 100k * 100` hashes, along with `100k * 100` EC additions, etc.\r\n\r\nSince the receiver already has to generate the label to use it, the idea is they would store the label (something like `{(B_spend + label_tweak * G) : label_tweak}` so that when scanning they can calculate `label = tx_output - P_k` and `label = tx_output_negated - P_k`. This means that regardless of the number of labels used, they only have to do at most two look ups in their label cache when scanning.",
      "created_at": "2024-02-09T16:52:13Z",
      "updated_at": "2024-02-09T16:54:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1484574143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1484574143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1485131949",
      "pull_request_review_id": 1873721523,
      "id": 1485131949,
      "node_id": "PRRC_kwDOAP4Jqs5YhVCt",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I started POC branch to demonstrate: https://github.com/josibake/secp256k1/commit/fa3f887ab689b937aeb2ea28cf50b591d3673960",
      "created_at": "2024-02-10T14:24:28Z",
      "updated_at": "2024-02-10T14:24:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1485131949",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1485131949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1485617714",
      "pull_request_review_id": 1874391470,
      "id": 1485617714,
      "node_id": "PRRC_kwDOAP4Jqs5YjLoy",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for clarifying, this helped me a lot in understanding. IIUC, trying to summarize:\r\n1. calculating $P_k$ (from $SS$, $B_{spend}$ and $k$) is always needed as bare minimum for both sides, i.e. either for output creation (sender) or as first step for scanning (receiver)\r\n2. for the receiver, the tweak $t_k$ is also relevant (to be stored in the wallet for spending later, without the need to involve $b_{spend}$ yet)\r\n3. only receivers with labels support have to process $P_k$ further (together with the actual output of the scanned tx) and calculate `label` and `label_negated`\r\n\r\nTo add another interface possibility, would it work to have steps 1. and 2. done in one routine (basically the one we have already now, with the only change that it also optionally returns $t_k$), and step 3. in a separate one?\r\n\r\nThe interface would look like\r\n```\r\nint secp256k1_silentpayments_create_output_pubkey(\r\n    const secp256k1_context *ctx,\r\n    secp256k1_xonly_pubkey *output_xonly_pubkey,\r\n    unsigned char *t_k,\r\n    const unsigned char *shared_secret33,\r\n    const secp256k1_pubkey *receiver_spend_pubkey,\r\n    unsigned int k\r\n);\r\n```\r\n(senders can pass in NULL for `t_k` as they don't have any use for it), and\r\n```\r\nint secp256k1_silentpayments_create_scan_labels(\r\n    const secp256k1_context *ctx,\r\n    secp256k1_pubkey *label,\r\n    secp256k1_pubkey *label_negated,\r\n    const secp256k1_xonly_pubkey *P_output,\r\n    const secp256k1_xonly_pubkey *tx_output\r\n);\r\n```\r\n\r\nDepending on the role and labels support, the following needs to be done:\r\n* Sender: call `secp256k1_silentpayments_create_output_pubkey` (with `t_k` set to NULL to avoid having to store dummy data), create tx with output $P_{output}$\r\n* Receiver:\r\n    * call `secp256k1_silentpayments_create_output_pubkey` (with `t_k` set to non-NULL)\r\n    * if $P_{output}$ equals $tx_{output}$, add $t_k$ to wallet and proceed with next `k` value\r\n    * if labels are supported\r\n        * call `secp256k1_silentpayments_create_scan_labels` with $P_{output}$ and $tx_{output}$\r\n        * if any of the results match the labels cache, add $t_k + labeltweak$ to the wallet\r\n     * proceed with next `k` value\r\n\r\nThat way we would only have to calculate the scan label data if it's needed / supported. What do you prefer, especially w.r.t. using it in #28122? Grouping by dedicated `sender_` and `receiver_` routines also has its advantages though in terms of readability for the user. I'm fine with either approach.",
      "created_at": "2024-02-11T15:44:36Z",
      "updated_at": "2024-02-11T15:44:36Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1485617714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1485617714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1485643621",
      "pull_request_review_id": 1874415223,
      "id": 1485643621,
      "node_id": "PRRC_kwDOAP4Jqs5YjR9l",
      "diff_hunk": "@@ -0,0 +1,227 @@\n+#!/usr/bin/env python3\n+import bech32m\n+import hashlib\n+import json\n+import ripemd160\n+import secp256k1_glue\n+\n+def sha256(s):\n+    return hashlib.sha256(s).digest()\n+\n+def hash160(s):\n+    return ripemd160.ripemd160(sha256(s))\n+\n+def TaggedHash(tag, data):\n+    return sha256(sha256(tag) + sha256(tag) + data)\n+\n+def smallest_outpoint(outpoints):\n+    serialized_outpoints = [bytes.fromhex(txid)[::-1] + n.to_bytes(4, 'little') for txid, n in outpoints]\n+    return sorted(serialized_outpoints)[0]\n+\n+def encode_silent_payment_address(scan_pubkey, spend_pubkey):\n+    assert len(scan_pubkey) == 33\n+    assert len(spend_pubkey) == 33\n+    data = bech32m.convertbits(scan_pubkey + spend_pubkey, 8, 5)\n+    return bech32m.bech32_encode(\"sp\", [0] + data, bech32m.Encoding.BECH32M)\n+\n+def decode_silent_payments_address(address):\n+    version, data = bech32m.decode(\"sp\", address)\n+    data = bytes(data)  # convert from list to bytes\n+    assert len(data) == 66\n+    return data[:33], data[33:]\n+\n+def is_p2tr(s):  # OP_1 OP_PUSHBYTES_32 <32 bytes>\n+    return (len(s) == 34) and (s[0] == 0x51) and (s[1] == 0x20)\n+\n+def is_p2wpkh(s):  # OP_0 OP_PUSHBYTES_20 <20 bytes>\n+    return (len(s) == 22) and (s[0] == 0x00) and (s[1] == 0x14)\n+\n+def is_p2sh(s):  # OP_HASH160 OP_PUSHBYTES_20 <20 bytes> OP_EQUAL\n+    return (len(s) == 23) and (s[0] == 0xA9) and (s[1] == 0x14) and (s[-1] == 0x87)\n+\n+def is_p2pkh(s):  # OP_DUP OP_HASH160 OP_PUSHBYTES_20 <20 bytes> OP_EQUALVERIFY OP_CHECKSIG\n+    return (len(s) == 25) and (s[0] == 0x76) and (s[1] == 0xA9) and (s[2] == 0x14) and (s[-2] == 0x88) and (s[-1] == 0xAC)\n+\n+def get_pubkey_from_input(spk, script_sig, witness):\n+    if is_p2pkh(spk):\n+        spk_pkh = spk[3:3 + 20]\n+        for i in range(len(script_sig), 0, -1):\n+            if i - 33 >= 0:\n+                pk = script_sig[i - 33:i]\n+                if hash160(pk) == spk_pkh:\n+                    return pk\n+        # should never happen, as this would be an invalid spend\n+        assert False\n+    if is_p2sh(spk):\n+        redeem_script = script_sig[1:]\n+        if is_p2wpkh(redeem_script):\n+            return redeem_script[-33:]\n+    if is_p2wpkh(spk):\n+        # the witness must contain two items and the second item is the pubkey\n+        return witness[-33:]\n+    if is_p2tr(spk):\n+        return spk[2:]\n+    assert False\n+\n+with open('./bip352-send_and_receive_test_vectors.json') as f:\n+    test_vectors = json.load(f)\n+\n+passed_send, passed_receive = 0, 0\n+for test_nr, test_vector in enumerate(test_vectors):\n+    print(f\"----- Test vector: \\'{test_vector['comment']}\\' {test_nr+1}/{len(test_vectors)} -----\")\n+    ###################### sending #########################\n+    assert len(test_vector['sending']) == 1\n+    send_data_given = test_vector['sending'][0]['given']\n+    send_data_expected = test_vector['sending'][0]['expected']\n+    input_priv_keys = []\n+    outpoints = []\n+    for i in send_data_given['vin']:\n+        priv_key = i['private_key']\n+        pub_key = get_pubkey_from_input(bytes.fromhex(i['prevout']['scriptPubKey']['hex']),\n+            bytes.fromhex(i['scriptSig']), bytes.fromhex(i['txinwitness']))\n+        input_priv_keys.append((i['private_key'], len(pub_key) == 32))\n+        outpoints.append((i['txid'], i['vout']))\n+    outpoint_L = smallest_outpoint(outpoints)\n+    outputs_calculated = []\n+\n+    groups = {}\n+    for recipient_address, recipient_value in send_data_given['recipients']:\n+        recipient_B_scan, recipient_B_spend = decode_silent_payments_address(recipient_address)\n+        groups.setdefault(recipient_B_scan, []).append((recipient_B_spend, recipient_value))\n+\n+    for recipient_B_scan, recipient_spend_data in groups.items():\n+        plain_seckeys, xonly_seckeys = [], []\n+        for seckey_hex, is_taproot in input_priv_keys:\n+            (xonly_seckeys if is_taproot else plain_seckeys).append(bytes.fromhex(seckey_hex))\n+        tweak_data = secp256k1_glue.silentpayments_create_private_tweak_data(\n+            plain_seckeys, xonly_seckeys, outpoint_L)\n+        shared_secret = secp256k1_glue.silentpayments_send_create_shared_secret(tweak_data, recipient_B_scan)\n+        k = 0\n+        for recipient_B_spend in recipient_spend_data:\n+            output = secp256k1_glue.silentpayments_create_output_pubkey(shared_secret, recipient_B_spend[0], k)\n+            outputs_calculated.append(output.hex())\n+            k += 1\n+    outputs_expected = [o[0] for o in send_data_expected['outputs']]\n+    if outputs_calculated == outputs_expected:\n+        print(\"Sending test \\033[0;32mPASSED. ✓\\033[0m\")\n+        passed_send += 1\n+    else:\n+        print(\"Sending test \\033[0;31mFAILED. ✖\\033[0m\")\n+        print(f\"Calculated outputs: {outputs_calculated}\")\n+        print(f\"Expected outputs: {outputs_expected}\")\n+\n+    ###################### receiving ########################\n+    assert len(test_vector['receiving']) >= 1\n+    for subtest_nr, receive_data in enumerate(test_vector['receiving']):\n+        receive_data_given = receive_data['given']\n+        receive_data_expected = receive_data['expected']\n+\n+        input_pub_keys = []\n+        outpoints = []\n+        for i in receive_data_given['vin']:\n+            pub_key = get_pubkey_from_input(bytes.fromhex(i['prevout']['scriptPubKey']['hex']),\n+                bytes.fromhex(i['scriptSig']), bytes.fromhex(i['txinwitness']))\n+            input_pub_keys.append(pub_key)\n+            outpoints.append((i['txid'], i['vout']))\n+        receive_outpoint_L = smallest_outpoint(outpoints)\n+\n+        # test data sanity check: outpoint_L of send and receive has to match\n+        assert receive_outpoint_L == outpoint_L\n+        # derive tweak_data and shared_secret\n+        plain_pubkeys, xonly_pubkeys = [], []\n+        for pubkey in input_pub_keys:\n+            if len(pubkey) == 32:\n+                xonly_pubkeys.append(pubkey)\n+            elif len(pubkey) == 33:\n+                plain_pubkeys.append(pubkey)\n+            else:\n+                assert False\n+        tweak_data = secp256k1_glue.silentpayments_create_tweak_data(plain_pubkeys, xonly_pubkeys, receive_outpoint_L)\n+        scan_privkey = bytes.fromhex(receive_data_given['key_material']['scan_priv_key'])\n+        spend_privkey = bytes.fromhex(receive_data_given['key_material']['spend_priv_key'])\n+        # spend pubkey is not in the given data of the receiver part, so let's compute it\n+        scan_pubkey = secp256k1_glue.pubkey_serialize((secp256k1_glue.pubkey_create(scan_privkey)))\n+        spend_pubkey = secp256k1_glue.pubkey_serialize((secp256k1_glue.pubkey_create(spend_privkey)))\n+        shared_secret = secp256k1_glue.silentpayments_receive_create_shared_secret(tweak_data, scan_privkey)\n+        outputs_pubkeys_expected = [o['pub_key'] for o in receive_data_expected['outputs']]\n+        outputs_privkeys_expected = [o['priv_key_tweak'] for o in receive_data_expected['outputs']]\n+        outputs_scanned = []\n+        outputs_privkeys = []\n+\n+        # scan through outputs\n+        k = 0\n+        outputs_to_check = receive_data_given['outputs'].copy()\n+        while True:\n+            if len(outputs_to_check) == 0:\n+                break\n+            for output_to_check in outputs_to_check:\n+                found_sth = False\n+                for label_m in [None] + receive_data_given['labels']:",
      "path": "bip352-testsuite/run_bip352_tests.py",
      "position": null,
      "original_position": 159,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "3deeebd1b5d7f3684e6425be749c643504f7c471",
      "in_reply_to_id": 1484574143,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "True, good point. Will adapt that in the next force-push, when the output pubkey creation / scanning routines are updated (according to the discussion above: https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1484563895).",
      "created_at": "2024-02-11T18:40:50Z",
      "updated_at": "2024-02-11T18:40:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1485643621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1485643621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1486078960",
      "pull_request_review_id": 1875073781,
      "id": 1486078960,
      "node_id": "PRRC_kwDOAP4Jqs5Yk8Pw",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> senders can pass in NULL for t_k as they don't have any use for it\r\n\r\nNice, I like this. \r\n\r\n> only receivers with labels support have to process further\r\n\r\nSmall correction: per the BIP, it is recommended the receiver *always* check for the change label. That being said, I somewhat prefer what you're proposing here with a separate routine for generating the label data. Initially, my thinking was its better to keep it all in one routine because we avoid needing to save `P_output` as a `secp256k1_pubkey` only to load it back into a `secp256k1_ge/gej` group element for label processing, but I suspect this conversion is trivial enough.\r\n\r\nLet's go with the interface you proposed and keep the functions separate for now.",
      "created_at": "2024-02-12T11:52:51Z",
      "updated_at": "2024-02-12T11:53:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1486078960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1486078960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487131068",
      "pull_request_review_id": 1876828391,
      "id": 1487131068,
      "node_id": "PRRC_kwDOAP4Jqs5Yo9G8",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Small correction: per the BIP, it is recommended the receiver always check for the change label. That being said, I somewhat prefer what you're proposing here with a separate routine for generating the label data. Initially, my thinking was its better to keep it all in one routine because we avoid needing to save P_output as a secp256k1_pubkey only to load it back into a secp256k1_ge/gej group element for label processing, but I suspect this conversion is trivial enough.\r\n\r\nFair point with the pubkey <-> ge/gej conversions, didn't think about that. I also presume that these are not hurting the performance in a significant way though.\r\n\r\n> Let's go with the interface you proposed and keep the functions separate for now.\r\n\r\nUpdated the PR with the proposed interface changes, with one caveat: my suggestion of returning `P_output` only as x-only pubkey in `_create_output_pubkey` doesn't work, as the parity is needed for the scan label calculation for the receiver. The x-only format OTOH is handy both for the sender (for creating the taproot output) and the receiver (for the first scanning step, where the tx's taproot output is directly compared to the calculated pubkey). So I've went now with returning P both in x-only and plain pubkey format, where the second is optional.\r\n\r\nThe alternative would be to only return the plain pubkey and document properly that users have to convert that to an x-only-pubkey via `secp256k1_xonly_pubkey_from_pubkey` after, for the purpose of output creation / the first scanning step. I feel that it's better if the users don't have to do any manual plain -> xonly pubkey conversions and having an interface with one parameter more is the lesser evil here, if the API documentation is clear enough. Thoughts?",
      "created_at": "2024-02-13T03:52:24Z",
      "updated_at": "2024-02-13T03:52:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1487131068",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487131068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487136288",
      "pull_request_review_id": 1876834803,
      "id": 1487136288,
      "node_id": "PRRC_kwDOAP4Jqs5Yo-Yg",
      "diff_hunk": "@@ -0,0 +1,227 @@\n+#!/usr/bin/env python3\n+import bech32m\n+import hashlib\n+import json\n+import ripemd160\n+import secp256k1_glue\n+\n+def sha256(s):\n+    return hashlib.sha256(s).digest()\n+\n+def hash160(s):\n+    return ripemd160.ripemd160(sha256(s))\n+\n+def TaggedHash(tag, data):\n+    return sha256(sha256(tag) + sha256(tag) + data)\n+\n+def smallest_outpoint(outpoints):\n+    serialized_outpoints = [bytes.fromhex(txid)[::-1] + n.to_bytes(4, 'little') for txid, n in outpoints]\n+    return sorted(serialized_outpoints)[0]\n+\n+def encode_silent_payment_address(scan_pubkey, spend_pubkey):\n+    assert len(scan_pubkey) == 33\n+    assert len(spend_pubkey) == 33\n+    data = bech32m.convertbits(scan_pubkey + spend_pubkey, 8, 5)\n+    return bech32m.bech32_encode(\"sp\", [0] + data, bech32m.Encoding.BECH32M)\n+\n+def decode_silent_payments_address(address):\n+    version, data = bech32m.decode(\"sp\", address)\n+    data = bytes(data)  # convert from list to bytes\n+    assert len(data) == 66\n+    return data[:33], data[33:]\n+\n+def is_p2tr(s):  # OP_1 OP_PUSHBYTES_32 <32 bytes>\n+    return (len(s) == 34) and (s[0] == 0x51) and (s[1] == 0x20)\n+\n+def is_p2wpkh(s):  # OP_0 OP_PUSHBYTES_20 <20 bytes>\n+    return (len(s) == 22) and (s[0] == 0x00) and (s[1] == 0x14)\n+\n+def is_p2sh(s):  # OP_HASH160 OP_PUSHBYTES_20 <20 bytes> OP_EQUAL\n+    return (len(s) == 23) and (s[0] == 0xA9) and (s[1] == 0x14) and (s[-1] == 0x87)\n+\n+def is_p2pkh(s):  # OP_DUP OP_HASH160 OP_PUSHBYTES_20 <20 bytes> OP_EQUALVERIFY OP_CHECKSIG\n+    return (len(s) == 25) and (s[0] == 0x76) and (s[1] == 0xA9) and (s[2] == 0x14) and (s[-2] == 0x88) and (s[-1] == 0xAC)\n+\n+def get_pubkey_from_input(spk, script_sig, witness):\n+    if is_p2pkh(spk):\n+        spk_pkh = spk[3:3 + 20]\n+        for i in range(len(script_sig), 0, -1):\n+            if i - 33 >= 0:\n+                pk = script_sig[i - 33:i]\n+                if hash160(pk) == spk_pkh:\n+                    return pk\n+        # should never happen, as this would be an invalid spend\n+        assert False\n+    if is_p2sh(spk):\n+        redeem_script = script_sig[1:]\n+        if is_p2wpkh(redeem_script):\n+            return redeem_script[-33:]\n+    if is_p2wpkh(spk):\n+        # the witness must contain two items and the second item is the pubkey\n+        return witness[-33:]\n+    if is_p2tr(spk):\n+        return spk[2:]\n+    assert False\n+\n+with open('./bip352-send_and_receive_test_vectors.json') as f:\n+    test_vectors = json.load(f)\n+\n+passed_send, passed_receive = 0, 0\n+for test_nr, test_vector in enumerate(test_vectors):\n+    print(f\"----- Test vector: \\'{test_vector['comment']}\\' {test_nr+1}/{len(test_vectors)} -----\")\n+    ###################### sending #########################\n+    assert len(test_vector['sending']) == 1\n+    send_data_given = test_vector['sending'][0]['given']\n+    send_data_expected = test_vector['sending'][0]['expected']\n+    input_priv_keys = []\n+    outpoints = []\n+    for i in send_data_given['vin']:\n+        priv_key = i['private_key']\n+        pub_key = get_pubkey_from_input(bytes.fromhex(i['prevout']['scriptPubKey']['hex']),\n+            bytes.fromhex(i['scriptSig']), bytes.fromhex(i['txinwitness']))\n+        input_priv_keys.append((i['private_key'], len(pub_key) == 32))\n+        outpoints.append((i['txid'], i['vout']))\n+    outpoint_L = smallest_outpoint(outpoints)\n+    outputs_calculated = []\n+\n+    groups = {}\n+    for recipient_address, recipient_value in send_data_given['recipients']:\n+        recipient_B_scan, recipient_B_spend = decode_silent_payments_address(recipient_address)\n+        groups.setdefault(recipient_B_scan, []).append((recipient_B_spend, recipient_value))\n+\n+    for recipient_B_scan, recipient_spend_data in groups.items():\n+        plain_seckeys, xonly_seckeys = [], []\n+        for seckey_hex, is_taproot in input_priv_keys:\n+            (xonly_seckeys if is_taproot else plain_seckeys).append(bytes.fromhex(seckey_hex))\n+        tweak_data = secp256k1_glue.silentpayments_create_private_tweak_data(\n+            plain_seckeys, xonly_seckeys, outpoint_L)\n+        shared_secret = secp256k1_glue.silentpayments_send_create_shared_secret(tweak_data, recipient_B_scan)\n+        k = 0\n+        for recipient_B_spend in recipient_spend_data:\n+            output = secp256k1_glue.silentpayments_create_output_pubkey(shared_secret, recipient_B_spend[0], k)\n+            outputs_calculated.append(output.hex())\n+            k += 1\n+    outputs_expected = [o[0] for o in send_data_expected['outputs']]\n+    if outputs_calculated == outputs_expected:\n+        print(\"Sending test \\033[0;32mPASSED. ✓\\033[0m\")\n+        passed_send += 1\n+    else:\n+        print(\"Sending test \\033[0;31mFAILED. ✖\\033[0m\")\n+        print(f\"Calculated outputs: {outputs_calculated}\")\n+        print(f\"Expected outputs: {outputs_expected}\")\n+\n+    ###################### receiving ########################\n+    assert len(test_vector['receiving']) >= 1\n+    for subtest_nr, receive_data in enumerate(test_vector['receiving']):\n+        receive_data_given = receive_data['given']\n+        receive_data_expected = receive_data['expected']\n+\n+        input_pub_keys = []\n+        outpoints = []\n+        for i in receive_data_given['vin']:\n+            pub_key = get_pubkey_from_input(bytes.fromhex(i['prevout']['scriptPubKey']['hex']),\n+                bytes.fromhex(i['scriptSig']), bytes.fromhex(i['txinwitness']))\n+            input_pub_keys.append(pub_key)\n+            outpoints.append((i['txid'], i['vout']))\n+        receive_outpoint_L = smallest_outpoint(outpoints)\n+\n+        # test data sanity check: outpoint_L of send and receive has to match\n+        assert receive_outpoint_L == outpoint_L\n+        # derive tweak_data and shared_secret\n+        plain_pubkeys, xonly_pubkeys = [], []\n+        for pubkey in input_pub_keys:\n+            if len(pubkey) == 32:\n+                xonly_pubkeys.append(pubkey)\n+            elif len(pubkey) == 33:\n+                plain_pubkeys.append(pubkey)\n+            else:\n+                assert False\n+        tweak_data = secp256k1_glue.silentpayments_create_tweak_data(plain_pubkeys, xonly_pubkeys, receive_outpoint_L)\n+        scan_privkey = bytes.fromhex(receive_data_given['key_material']['scan_priv_key'])\n+        spend_privkey = bytes.fromhex(receive_data_given['key_material']['spend_priv_key'])\n+        # spend pubkey is not in the given data of the receiver part, so let's compute it\n+        scan_pubkey = secp256k1_glue.pubkey_serialize((secp256k1_glue.pubkey_create(scan_privkey)))\n+        spend_pubkey = secp256k1_glue.pubkey_serialize((secp256k1_glue.pubkey_create(spend_privkey)))\n+        shared_secret = secp256k1_glue.silentpayments_receive_create_shared_secret(tweak_data, scan_privkey)\n+        outputs_pubkeys_expected = [o['pub_key'] for o in receive_data_expected['outputs']]\n+        outputs_privkeys_expected = [o['priv_key_tweak'] for o in receive_data_expected['outputs']]\n+        outputs_scanned = []\n+        outputs_privkeys = []\n+\n+        # scan through outputs\n+        k = 0\n+        outputs_to_check = receive_data_given['outputs'].copy()\n+        while True:\n+            if len(outputs_to_check) == 0:\n+                break\n+            for output_to_check in outputs_to_check:\n+                found_sth = False\n+                for label_m in [None] + receive_data_given['labels']:",
      "path": "bip352-testsuite/run_bip352_tests.py",
      "position": null,
      "original_position": 159,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "3deeebd1b5d7f3684e6425be749c643504f7c471",
      "in_reply_to_id": 1484574143,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated that as well by introducing a label cache and using the new routine for label scanning. The test should now more resemble what an actual wallet would do and the hacky constructs for getting the privkey tweak are also gone. One of the next steps is to also test against the \"signature\" field in the test vectors, I ignored that so far.",
      "created_at": "2024-02-13T03:58:05Z",
      "updated_at": "2024-02-13T03:58:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1487136288",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487136288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487697837",
      "pull_request_review_id": 1877729989,
      "id": 1487697837,
      "node_id": "PRRC_kwDOAP4Jqs5YrHet",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, I completely forgot about the parity of `P_output` being relevant. I'm not crazy about returning two encodings of the same public key, one of which is only relevant if you're the receiver and scanning for labels. This means the function now has an optional `t_k` parameter and an optional `P_output_pubkey` that are only used if you are a receiver, so it seems like it might be better to just have `_sender/_receiver` specific functions.\r\n\r\nApologies for the back and forth on this, but what do you think about the following:\r\n\r\nFor the sender, same as before:\r\n```\r\nint secp256k1_silentpayments_sender_create_output_pubkey(\r\n    const secp256k1_context *ctx,\r\n    secp256k1_xonly_pubkey *output_xonly_pubkey,\r\n    const unsigned char *shared_secret33,\r\n    const secp256k1_pubkey *receiver_spend_pubkey,\r\n    unsigned int k\r\n);\r\n```\r\nFor the receiver:\r\n```\r\ntypedef struct {\r\n    unsigned char t_k[32];\r\n    secp256k1_xonly_pubkey xonly_output;\r\n} secp256k1_silentpayments_output_data;\r\n\r\ntypedef struct {\r\n    secp256k1_pubkey label;\r\n    secp256k1_pubkey label_negated;\r\n} secp256k1_silentpayments_label_data;\r\n\r\nint secp256k1_silentpayments_receiver_create_scanning_data(\r\n    const secp256k1_context *ctx,\r\n    secp256k1_silentpayments_output_data *output_data,\r\n    secp256k1_silentpayments_label_data *label_data,\r\n    const unsigned char *shared_secret33,\r\n    const secp256k1_pubkey *receiver_spend_pubkey,\r\n    unsigned int k\r\n)\r\n```\r\n\r\nThis way, the receiver can pass `NULL` for label_data if they don't support labels, otherwise we can compute the label data while we still have `P_output` as a group element and avoid all of the pubkey encoding woes.",
      "created_at": "2024-02-13T11:46:03Z",
      "updated_at": "2024-02-13T11:46:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1487697837",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487697837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487821480",
      "pull_request_review_id": 1877898428,
      "id": 1487821480,
      "node_id": "PRRC_kwDOAP4Jqs5Yrlqo",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Hm, I completely forgot about the parity of P_output being relevant.\r\n\r\nYeah, same here. I only noticed the importance of the `P_output` parity at the very end of doing the changes, when about half of the receiving tests with labels were failing. As a quick-fix, I came up with this minimum-effort interface change of outputting the pubkey in two formats.\r\n\r\n> I'm not crazy about returning two encodings of the same public key, one of which is only relevant if you're the receiver and scanning for labels. This means the function now has an optional t_k parameter and an optional P_output_pubkey that are only used if you are a receiver, so it seems like it might be better to just have _sender/_receiver specific functions.\r\n\r\nAgree, dedicated `sender_` and `receiver_` routines make even more sense now! Considering that wallets following the BIP recommendation should always scan for the change label anyways, I think it's also simpler to have a single routine doing both the output and labels calculation (still with the option to skip the labels calculation though, as you suggested above).\r\n\r\n> Apologies for the back and forth on this, but what do you think about the following:\r\n> ....\r\n\r\nYour proposed interface SGTM, will adapt in a bit.",
      "created_at": "2024-02-13T13:09:54Z",
      "updated_at": "2024-02-13T13:09:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1487821480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1487821480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1488421537",
      "pull_request_review_id": 1878705864,
      "id": 1488421537,
      "node_id": "PRRC_kwDOAP4Jqs5Yt4Kh",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Force-pushed with the latest interface proposal in https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1487697837 and updated the table in the PR description accordingly. One small annoyance of the current interface is that one of the calculated labels is invalid if the calculated and scanned output match (i.e. $P_{output} == tx_{output}$), as this results in the point of infinity. If the users behave correctly, they should only ever look at the labels if there's a mismatch between scanned and calculated outputs, so this is probably not a problem.\r\n\r\n",
      "created_at": "2024-02-13T18:51:45Z",
      "updated_at": "2024-02-13T18:51:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1488421537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1488421537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1488463757",
      "pull_request_review_id": 1878748781,
      "id": 1488463757,
      "node_id": "PRRC_kwDOAP4Jqs5YuCeN",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I was thinking about this today. One thought was have the `_create_scanning_data` check if `P_output == tx_output` before calculating the label data (since it has both), and then just skip creating the label data if they match.. but it felt a bit weird to have the routine doing checks for the caller. Curious what you think.",
      "created_at": "2024-02-13T19:20:51Z",
      "updated_at": "2024-02-13T19:20:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1488463757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1488463757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1488641041",
      "pull_request_review_id": 1879013261,
      "id": 1488641041,
      "node_id": "PRRC_kwDOAP4Jqs5YutwR",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Heh, then we had similar thoughts, that's what is actually done right now:\r\n\r\nhttps://github.com/theStack/secp256k1/blob/c541071488c8132e5897e3eb74b010fc80a74b85/src/modules/silentpayments/main_impl.h#L340-L344\r\n\r\nBut I'm also not sure about whether doing this check in the function is something we want. _If_ we decide to do it, then it seems redundant to return the output x-only pubkey and we could just return a boolean (e.g. `int *direct_match`, set to 0 or 1) instead? Otherwise the `P_output == tx_output` comparison happens twice, once inside the function, and another time on the caller. We could state in the API description that the label data is only relevant out if no direct match was found and has to be ignored otherwise. Have to think more about it, happy to hear more suggestions.",
      "created_at": "2024-02-13T22:02:27Z",
      "updated_at": "2024-02-13T22:02:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1488641041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1488641041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1489889689",
      "pull_request_review_id": 1880967628,
      "id": 1489889689,
      "node_id": "PRRC_kwDOAP4Jqs5YzemZ",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hah, I don't know if there is a good answer here. Our options are:\r\n\r\n* Don't do the check and always compute the label data - this means in the event of finding an output, we are doing a few unnecessary EC negations / additions and one of the labels we return is the point at infinity. Not too big a deal, since this would be unusable by the caller anyways\r\n* Do the check to avoid computing label data when we don't need it - this means the caller will end up doing the check again\r\n* Return a boolean (which is a separate in param, instead of the functions normal `int` return) which is checked by the caller. If false, look at the label data (if using)\r\n\r\nUsing the boolean approach seems like the most efficient of the options and avoids calculating / returning unnecessary data, at the expense of a slightly awkward API. Personally, I'm leaning toward performance given that scanning is a resource intensive operation.",
      "created_at": "2024-02-14T18:19:26Z",
      "updated_at": "2024-02-14T18:19:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1489889689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1489889689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1490175539",
      "pull_request_review_id": 1881474329,
      "id": 1490175539,
      "node_id": "PRRC_kwDOAP4Jqs5Y0kYz",
      "diff_hunk": "@@ -192,6 +192,35 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_silentpayments_create_a\n     const unsigned char *label_tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Create Silent Payment output public key (both for sender and receiver).\n+ *\n+ *  Given a shared_secret, a recipient's spend public key B_spend, an output\n+ *  counter k, and an optional label_tweak, calculate the corresponding\n+ *  output public key:\n+ *\n+ *  B_m = B_spend + label_tweak * G\n+ *  (if no label tweak is used, then B_m = B_spend)\n+ *  P_output = B_m + hash(shared_secret || ser_32(k)) * G\n+ *\n+ *  Returns: 1 if outputs creation was successful. 0 if an error occured.\n+ *  Args:                  ctx: pointer to a context object\n+ *  Out:   output_xonly_pubkey: pointer to the resulting output x-only pubkey",
      "path": "include/secp256k1_silentpayments.h",
      "position": null,
      "original_position": 16,
      "commit_id": "c541071488c8132e5897e3eb74b010fc80a74b85",
      "original_commit_id": "e8cb4e74ff586d332eb023e157b69e38660668ce",
      "in_reply_to_id": 1484563895,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Had very similar thoughts today with the same conclusion. What is indeed a bit unclean about the return-a-boolean API is the fact that the responsibilities of \"creating scan data\" and \"scanning\" are not strictly separated anymore, as the latter would now be done also partly by the secp module (for the direct match), and partly by the caller (for the labels). As an upside though, it's more efficient and also leads to less code for the caller, so I'd think it's maybe not a conceptually perfect, but practically still the most reasonable choice from the variants we considered so far. \r\n\r\nWill update that tomorrow, shouldn't take too long. Do you think we should rename the function, now that it's not only creating scan data, but doing also the first part of the scan? (e.g. simply `_receiver_scan_output`?)",
      "created_at": "2024-02-14T23:12:28Z",
      "updated_at": "2024-02-14T23:12:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1471#discussion_r1490175539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1490175539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1471"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    }
  ]
}