{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044",
    "id": 805876786,
    "node_id": "PR_kwDOAP4Jqs4wCLQy",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1044.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1044.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1044",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1044/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
    "number": 1044,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add another ecmult_multi test",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add a large randomized test for ecmult_multi_* functions, which aims to test:\r\n* Small and large numbers of (scalar,point) input pairs (from 0 to 128, vaguely exponentially distributed).\r\n* Small and large numbers of (scalar,point) input pairs that individually multiply to zero (so scalar=0 or point=infinity), as those are handled specially in wnaf loops.\r\n* With final output equal to infinity or not (roughly 50% chance).\r\n* With the factor for G equal to 0 or not (roughly 50% chance).\r\n* All single-batch algorithms (ecmult_multi_var, as well as ecmult_strauss_single_batch and ecmult_pippenger_single_batch).\r\n\r\nI wrote this mostly to gain confidence in the handling of (0,p) or (s,infinity) inputs being changed by #899.",
    "labels": [],
    "created_at": "2021-12-18T16:44:36Z",
    "updated_at": "2021-12-22T14:18:29Z",
    "closed_at": "2021-12-22T14:18:29Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-12-22T14:18:29Z",
    "merge_commit_sha": "b39d431aedcc85423ead2466f73e548709cc0663",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:202112_randomecmultmulti",
      "ref": "202112_randomecmultmulti",
      "sha": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 16648672,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODY3Mg==",
        "name": "secp256k1",
        "full_name": "sipa/secp256k1",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/secp256k1",
        "archive_url": "https://api.github.com/repos/sipa/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/sipa/secp256k1/events",
        "forks_url": "https://api.github.com/repos/sipa/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/sipa/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/sipa/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/sipa/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/sipa/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/sipa/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/sipa/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/sipa/secp256k1/hooks",
        "svn_url": "https://github.com/sipa/secp256k1",
        "language": "C",
        "forks_count": 20,
        "stargazers_count": 43,
        "watchers_count": 43,
        "size": 11649,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-09T03:46:04Z",
        "created_at": "2014-02-08T17:33:30Z",
        "updated_at": "2023-05-11T11:08:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "be6944ade92c60f161c95e511e935e85f6cff78d",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 172,
    "deletions": 0,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 10,
    "comments": 5
  },
  "events": [
    {
      "event": "reviewed",
      "id": 835905769,
      "node_id": "PRR_kwDOAP4Jqs4x0ujp",
      "url": null,
      "actor": null,
      "commit_id": "a00ff07f9c9de1069607dea7620cdb3a7b42a4bf",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I can't judge if this helps with coverage of corner cases in #899. But I'll take a look at that PR. \r\n\r\nThis new test adds about 16% (7.5 seconds) to my `./tests`.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#pullrequestreview-835905769",
      "submitted_at": "2021-12-19T21:53:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5795545328,
      "node_id": "HRFPE_lADOAP4Jqs5AmogqzwAAAAFZcQDw",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5795545328",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T22:24:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5795554772,
      "node_id": "HRFPE_lADOAP4Jqs5AmogqzwAAAAFZcSXU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5795554772",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T22:26:58Z"
    },
    {
      "event": "commented",
      "id": 998317672,
      "node_id": "IC_kwDOAP4Jqs47gR5o",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/998317672",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T22:27:22Z",
      "updated_at": "2021-12-20T22:27:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've improved comments, fixed the ecmult count, and now benchmark the added cost of this test at 2% of the total runtime (at iters=64; at iters=1 it should be much lower), running ~1400 instances of it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#issuecomment-998317672",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1044"
    },
    {
      "event": "commented",
      "id": 998326209,
      "node_id": "IC_kwDOAP4Jqs47gT_B",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/998326209",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T22:46:18Z",
      "updated_at": "2021-12-20T22:46:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonasnick My goal isn't increasing test coverage as such, but just having something that tests many scenarios that involve `0*P` or `a*INF` terms in the beginning/end/middle of the list of terms. Just because all lines are hit doesn't mean those line are correct.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#issuecomment-998326209",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1044"
    },
    {
      "event": "mentioned",
      "id": 5795613342,
      "node_id": "MEE_lADOAP4Jqs5AmogqzwAAAAFZcgqe",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5795613342",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T22:46:19Z"
    },
    {
      "event": "subscribed",
      "id": 5795613346,
      "node_id": "SE_lADOAP4Jqs5AmogqzwAAAAFZcgqi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5795613346",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T22:46:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5796355824,
      "node_id": "HRFPE_lADOAP4Jqs5AmogqzwAAAAFZfV7w",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5796355824",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T03:14:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5799896769,
      "node_id": "HRFPE_lADOAP4Jqs5AmogqzwAAAAFZs2bB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5799896769",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T16:01:15Z"
    },
    {
      "event": "commented",
      "id": 998943505,
      "node_id": "IC_kwDOAP4Jqs47iqsR",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/998943505",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T16:59:52Z",
      "updated_at": "2021-12-21T16:59:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "This valgrind failure on CI is not a timeout: \r\n```\r\n==2989== Conditional jump or move depends on uninitialised value(s)\r\n==2989==    at 0x468DCD: secp256k1_ecmult_strauss_wnaf (ecmult_impl.h:235)\r\n==2989==    by 0x43C309: secp256k1_ecmult (ecmult_impl.h:348)\r\n==2989==    by 0x43C309: test_ecmult_multi_random (tests.c:4137)\r\n==2989==    by 0x43E7F7: run_ecmult_multi_tests (tests.c:4424)\r\n==2989==    by 0x465503: main (tests.c:6818)\r\n```",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#issuecomment-998943505",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1044"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5800492958,
      "node_id": "HRFPE_lADOAP4Jqs5AmogqzwAAAAFZvH-e",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5800492958",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T17:49:33Z"
    },
    {
      "event": "commented",
      "id": 999082688,
      "node_id": "IC_kwDOAP4Jqs47jMrA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/999082688",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T20:45:30Z",
      "updated_at": "2021-12-21T20:45:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "@real-or-random Fixed.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#issuecomment-999082688",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1044"
    },
    {
      "event": "mentioned",
      "id": 5801252976,
      "node_id": "MEE_lADOAP4Jqs5AmogqzwAAAAFZyBhw",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5801252976",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T20:45:30Z"
    },
    {
      "event": "subscribed",
      "id": 5801252980,
      "node_id": "SE_lADOAP4Jqs5AmogqzwAAAAFZyBh0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5801252980",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T20:45:30Z"
    },
    {
      "event": "reviewed",
      "id": 837886381,
      "node_id": "PRR_kwDOAP4Jqs4x8SGt",
      "url": null,
      "actor": null,
      "commit_id": "ba61b183082eeb28c02f6f519c340240bf35d78b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "@sipa Sure, I didn't mean to refer to metrics like line or branch coverage. I have looked at PR #899 enough now to see why this added test is useful. It exercises conditions that can uncover potential bugs in the rewritten loop of commit \"Eliminate input_pos state field from ecmult_strauss_wnaf.\". I think both the commit and this PR are worth having.\r\n\r\nCan confirm the 2% test time increase. 7%  with 256 iters.\r\n\r\nACK mod nits",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#pullrequestreview-837886381",
      "submitted_at": "2021-12-21T21:33:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDIyZDI1YzhlMGFiMWQyNGYwZjRhODBmZTAxNmNiZDcxY2Q4ODk4NjY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "tree": {
        "sha": "1495c775b11ecfe1e12873eab732bb97475cb962",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1495c775b11ecfe1e12873eab732bb97475cb962"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/be6944ade92c60f161c95e511e935e85f6cff78d",
          "sha": "be6944ade92c60f161c95e511e935e85f6cff78d",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/be6944ade92c60f161c95e511e935e85f6cff78d"
        }
      ],
      "message": "Add another ecmult_multi test",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-21T21:42:08Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-18T16:37:19Z"
      },
      "sha": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5801461232,
      "node_id": "HRFPE_lADOAP4Jqs5AmogqzwAAAAFZy0Xw",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5801461232",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T21:42:17Z"
    },
    {
      "event": "commented",
      "id": 999113569,
      "node_id": "IC_kwDOAP4Jqs47jUNh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/999113569",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T21:44:05Z",
      "updated_at": "2021-12-21T21:44:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Idea for a follow-up: when testing ecmult_mult_var, also randomly choose the amount of scratch space, so it'll exercise splitting into batches.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#issuecomment-999113569",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1044"
    },
    {
      "event": "reviewed",
      "id": 837897414,
      "node_id": "PRR_kwDOAP4Jqs4x8UzG",
      "url": null,
      "actor": null,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#pullrequestreview-837897414",
      "submitted_at": "2021-12-21T21:47:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
    },
    {
      "event": "merged",
      "id": 5805025915,
      "node_id": "ME_lADOAP4Jqs5AmogqzwAAAAFaAap7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5805025915",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b39d431aedcc85423ead2466f73e548709cc0663",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/b39d431aedcc85423ead2466f73e548709cc0663",
      "created_at": "2021-12-22T14:18:29Z"
    },
    {
      "event": "closed",
      "id": 5805025963,
      "node_id": "CE_lADOAP4Jqs5AmogqzwAAAAFaAaqr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5805025963",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-22T14:18:29Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-02T16:13:00Z",
      "updated_at": "2022-01-02T16:13:00Z",
      "source": {
        "issue": {
          "id": 1092050929,
          "node_id": "PR_kwDOAjZbZs4wcazo",
          "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/159",
          "repository_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp",
          "labels_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/159/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/159/comments",
          "events_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/159/events",
          "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/159",
          "number": 159,
          "state": "closed",
          "state_reason": null,
          "title": "Sync Upstream",
          "body": "[bitcoin-core/secp256k1#986]: tests: remove `secp256k1_fe_verify` from tests.c and modify `_fe_from_storage` to call `_fe_verify`\r\n[bitcoin-core/secp256k1#987]: Fix unused parameter warnings when building without VERIFY\r\n[bitcoin-core/secp256k1#966]: Make aux_rand32 arg to secp256k1_schnorrsig_sign const\r\n[bitcoin-core/secp256k1#983]: [RFC] Remove OpenSSL testing support\r\n[bitcoin-core/secp256k1#952]: Avoid computing out-of-bounds pointer.\r\n[bitcoin-core/secp256k1#810]: Avoid overly-wide multiplications in 5x52 field mul/sqr\r\n[bitcoin-core/secp256k1#996]: Fix G.y parity in sage code\r\n[bitcoin-core/secp256k1#989]: Shared benchmark format for command line and CSV outputs\r\n[bitcoin-core/secp256k1#999]: bench_ecmult: improve clarity of output\r\n[bitcoin-core/secp256k1#943]: VERIFY_CHECK precondition for secp256k1_fe_set_int.\r\n[bitcoin-core/secp256k1#1002]: Make aux_rnd32==NULL behave identical to 0x0000..00.\r\n[bitcoin-core/secp256k1#991]: Merge all \"external\" benchmarks into a single bench binary\r\n[bitcoin-core/secp256k1#1007]: doc: Replace apoelstra's GPG key by jonasnick's GPG key\r\n[bitcoin-core/secp256k1#1009]: refactor: Use (int)&(int) in boolean context to avoid compiler warning\r\n[bitcoin-core/secp256k1#1011]: ci: Enable -g if we set CFLAGS manually\r\n[bitcoin-core/secp256k1#1012]: Fix typos\r\n[bitcoin-core/secp256k1#1010]: doc: Minor fixes in safegcd_implementation.md\r\n[bitcoin-core/secp256k1#1020]: doc: remove use of <0xa0> \"no break space\"\r\n[bitcoin-core/secp256k1#1019]: build: don't append valgrind CPPFLAGS if not installed (macOS)\r\n[bitcoin-core/secp256k1#1004]: ecmult: fix definition of STRAUSS_SCRATCH_OBJECTS\r\n[bitcoin-core/secp256k1#1025]: build: replace backtick command substitution with $()\r\n[bitcoin-core/secp256k1#1008]: bench.c: add `--help` option and ci: move env variables\r\n[bitcoin-core/secp256k1#1027]: build: Add a check that Valgrind actually supports a host platform\r\n[bitcoin-core/secp256k1#1022]: build: Windows DLL additions\r\n[bitcoin-core/secp256k1#920]: Test all ecmult functions with many j*2^i combinations\r\n[bitcoin-core/secp256k1#942]: Verify that secp256k1_ge_set_gej_zinv does not operate on infinity.\r\n[bitcoin-core/secp256k1#988]: Make signing table fully static\r\n[bitcoin-core/secp256k1#1042]: Follow-ups to making all tables fully static\r\n[bitcoin-core/secp256k1#816]: Improve checks at top of _fe_negate methods\r\n[bitcoin-core/secp256k1#1044]: Add another ecmult_multi test\r\n[bitcoin-core/secp256k1#1030]: doc: Fix upper bounds + cleanup in field_5x52_impl.h comment\r\n[bitcoin-core/secp256k1#1047]: ci: Various improvements\r\n[bitcoin-core/secp256k1#1053]: ecmult: move `_ecmult_odd_multiples_table_globalz_windowa`\r\n[bitcoin-core/secp256k1#964]: Add release-process.md\r\n[bitcoin-core/secp256k1#1052]: Use xoshiro256++ instead of RFC6979 for tests\r\n[bitcoin-core/secp256k1#1054]: tests: Fix test whose result is implementation-defined\r\n[bitcoin-core/secp256k1#1029]: Simpler and faster ecdh skew fixup\r\n\r\nThis PR can be recreated  with `./contrib/sync-upstream.sh range a1102b12196ea27f44d6201de4d25926a2ae9640`.",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/pulls/159",
            "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/159",
            "diff_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/159.diff",
            "patch_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/159.patch"
          },
          "closed_at": "2022-01-05T18:02:30Z",
          "created_at": "2022-01-02T16:12:59Z",
          "updated_at": "2023-06-02T12:28:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5848043904,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAFckhGA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5848043904",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21e2d65b7907b711de6c09fd7235be73b5877af7",
      "commit_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/commits/21e2d65b7907b711de6c09fd7235be73b5877af7",
      "created_at": "2022-01-05T18:02:31Z"
    },
    {
      "event": "referenced",
      "id": 5957418247,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAFjFv0H",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5957418247",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6f7e395acc54ee0790ad8dfaceff1124b40d091a",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/6f7e395acc54ee0790ad8dfaceff1124b40d091a",
      "created_at": "2022-01-26T15:16:39Z"
    },
    {
      "event": "referenced",
      "id": 5975705978,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAFkLgl6",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5975705978",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "065b6dbf9db825ce2f3d4b6b2c032c38c8b77f73",
      "commit_url": "https://api.github.com/repos/hebasto/bitcoin/commits/065b6dbf9db825ce2f3d4b6b2c032c38c8b77f73",
      "created_at": "2022-01-30T01:04:53Z"
    },
    {
      "event": "referenced",
      "id": 5991285356,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAFlG8Js",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5991285356",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "139d4b881ecafce5252f30c501ba625fb1b3a807",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/139d4b881ecafce5252f30c501ba625fb1b3a807",
      "created_at": "2022-02-01T21:15:37Z"
    },
    {
      "event": "referenced",
      "id": 6257645394,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAF0_BdS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6257645394",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f8631d8269a962af38f9e553fccc2312ed6fbcc",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/8f8631d8269a962af38f9e553fccc2312ed6fbcc",
      "created_at": "2022-03-17T10:14:30Z"
    },
    {
      "event": "referenced",
      "id": 6259163510,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAF1E0F2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6259163510",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4bb1d7e62a6f88090a327b4301b89df67702f5cd",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/4bb1d7e62a6f88090a327b4301b89df67702f5cd",
      "created_at": "2022-03-17T12:59:08Z"
    },
    {
      "event": "referenced",
      "id": 6333589985,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAF5gunh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6333589985",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "465d05253aaff1e06165a1777e70da16e14d2519",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/465d05253aaff1e06165a1777e70da16e14d2519",
      "created_at": "2022-03-30T09:43:02Z"
    },
    {
      "event": "referenced",
      "id": 6358631092,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAF7AQK0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6358631092",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4d5afc9767595ed13ffddb4a517cdeb45fd31461",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/4d5afc9767595ed13ffddb4a517cdeb45fd31461",
      "created_at": "2022-04-03T18:33:34Z"
    },
    {
      "event": "referenced",
      "id": 6358657120,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAF7AWhg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6358657120",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5b18493cfaaf2dae1b7c6c18325801a76197fb88",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/5b18493cfaaf2dae1b7c6c18325801a76197fb88",
      "created_at": "2022-04-03T18:57:29Z"
    },
    {
      "event": "referenced",
      "id": 6382809841,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAF8cfLx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6382809841",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "afb7a6fe06a33956ef43429d31f5934448f6e671",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/afb7a6fe06a33956ef43429d31f5934448f6e671",
      "created_at": "2022-04-06T19:25:28Z"
    },
    {
      "event": "referenced",
      "id": 6681498888,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAGOP5UI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6681498888",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "35d6112a72ef419af9cb1ee3ffd9e28ad0df04a0",
      "commit_url": "https://api.github.com/repos/gwillen/elements/commits/35d6112a72ef419af9cb1ee3ffd9e28ad0df04a0",
      "created_at": "2022-05-25T22:22:22Z"
    },
    {
      "event": "referenced",
      "id": 7059808329,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAGkzCBJ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7059808329",
      "actor": {
        "login": "patricklodder",
        "id": 1410115,
        "node_id": "MDQ6VXNlcjE0MTAxMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1410115?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patricklodder",
        "html_url": "https://github.com/patricklodder",
        "followers_url": "https://api.github.com/users/patricklodder/followers",
        "following_url": "https://api.github.com/users/patricklodder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/patricklodder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/patricklodder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/patricklodder/subscriptions",
        "organizations_url": "https://api.github.com/users/patricklodder/orgs",
        "repos_url": "https://api.github.com/users/patricklodder/repos",
        "events_url": "https://api.github.com/users/patricklodder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/patricklodder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21badcf9d23f51d831a2069a3d61ad320de417ea",
      "commit_url": "https://api.github.com/repos/patricklodder/dogecoin/commits/21badcf9d23f51d831a2069a3d61ad320de417ea",
      "created_at": "2022-07-25T21:21:04Z"
    },
    {
      "event": "referenced",
      "id": 7083242641,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAGmMbSR",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7083242641",
      "actor": {
        "login": "patricklodder",
        "id": 1410115,
        "node_id": "MDQ6VXNlcjE0MTAxMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1410115?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patricklodder",
        "html_url": "https://github.com/patricklodder",
        "followers_url": "https://api.github.com/users/patricklodder/followers",
        "following_url": "https://api.github.com/users/patricklodder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/patricklodder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/patricklodder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/patricklodder/subscriptions",
        "organizations_url": "https://api.github.com/users/patricklodder/orgs",
        "repos_url": "https://api.github.com/users/patricklodder/repos",
        "events_url": "https://api.github.com/users/patricklodder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/patricklodder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "03002a9013ffb5efdccfbae3f3510f4a44c0da20",
      "commit_url": "https://api.github.com/repos/patricklodder/dogecoin/commits/03002a9013ffb5efdccfbae3f3510f4a44c0da20",
      "created_at": "2022-07-28T16:53:46Z"
    },
    {
      "event": "referenced",
      "id": 7125520687,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAGottEv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7125520687",
      "actor": {
        "login": "janus",
        "id": 6726,
        "node_id": "MDQ6VXNlcjY3MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6726?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janus",
        "html_url": "https://github.com/janus",
        "followers_url": "https://api.github.com/users/janus/followers",
        "following_url": "https://api.github.com/users/janus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janus/subscriptions",
        "organizations_url": "https://api.github.com/users/janus/orgs",
        "repos_url": "https://api.github.com/users/janus/repos",
        "events_url": "https://api.github.com/users/janus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3a0652a777202bd7b56ee68d1e56f240c42a459f",
      "commit_url": "https://api.github.com/repos/BitgesellOfficial/bitgesell/commits/3a0652a777202bd7b56ee68d1e56f240c42a459f",
      "created_at": "2022-08-04T08:12:01Z"
    },
    {
      "event": "referenced",
      "id": 9068914780,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAIcjKhc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9068914780",
      "actor": {
        "login": "str4d",
        "id": 4993799,
        "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/str4d",
        "html_url": "https://github.com/str4d",
        "followers_url": "https://api.github.com/users/str4d/followers",
        "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
        "organizations_url": "https://api.github.com/users/str4d/orgs",
        "repos_url": "https://api.github.com/users/str4d/repos",
        "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/str4d/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "522190d5c3686cae522b507d5f2366f580bfc586",
      "commit_url": "https://api.github.com/repos/str4d/zcash/commits/522190d5c3686cae522b507d5f2366f580bfc586",
      "created_at": "2023-04-21T15:40:13Z"
    },
    {
      "event": "referenced",
      "id": 9425177907,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAIxyM0z",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9425177907",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "created_at": "2023-06-04T15:42:11Z"
    },
    {
      "event": "referenced",
      "id": 9696152954,
      "node_id": "REFE_lADOAP4Jqs5AmogqzwAAAAJB7416",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9696152954",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f03457eede9abfd1d7a0d26abc379a710e16755",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/8f03457eede9abfd1d7a0d26abc379a710e16755",
      "created_at": "2023-07-01T12:32:55Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772004731",
      "pull_request_review_id": 835905769,
      "id": 772004731,
      "node_id": "PRRC_kwDOAP4Jqs4uA9t7",
      "diff_hunk": "@@ -4052,6 +4052,145 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    secp256k1_scalar scalars[128];\n+    secp256k1_scalar g_scalar, sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    secp256k1_gej gejs[128];\n+    secp256k1_gej result, computed;\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero result. */\n+    int result_nonzero = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. */\n+    int g_nonzero = num_nonzero == 0 ? result_nonzero :\n+                    num_nonzero == 1 && !result_nonzero ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many scalars/gej pairs have been filled. */\n+    int filled = 0;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = num_nonzero <= 1 ? 0 : (int)secp256k1_testrand_bits(3);\n+\n+    data.sc = scalars;\n+    data.pt = ges;\n+    secp256k1_gej_set_infinity(&result);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&g_scalar, 0);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (result_nonzero == 0) {\n+            /* And if 0 result is desired, add a (a*r, -(1/a)*g) term to compensate. */\n+            CHECK(num_nonzero > filled);\n+            random_scalar_order_test(&sc_tmp);\n+            secp256k1_scalar_mul(&scalars[filled], &sc_tmp, &g_scalar);\n+            secp256k1_scalar_inverse_var(&sc_tmp, &sc_tmp);\n+            secp256k1_scalar_negate(&sc_tmp, &sc_tmp);\n+            secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &gejs[filled], &sc_tmp);\n+            ++filled;\n+            ++mults;\n+        }\n+    }\n+    if (result_nonzero && filled < num_nonzero) {\n+        /* If a nonzero result is desired, and there is space, add a random nonzero term. */\n+        random_scalar_order_test(&scalars[filled]);\n+        random_group_element_test(&ge_tmp);\n+        secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        ++filled;\n+    }\n+    if (result_nonzero) {\n+        /* Compute the expected result. */\n+        CHECK(filled <= 1);\n+        secp256k1_ecmult(&result, &gejs[0], &scalars[0], &g_scalar);\n+        mults += filled + g_nonzero;\n+    }\n+    /* At this point we have (filled <= 2) and result equals the sum of all (scalars,gejs) pairs. */",
      "path": "src/tests.c",
      "position": null,
      "original_position": 73,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "a00ff07f9c9de1069607dea7620cdb3a7b42a4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is `(g_scalar, g)` part of \"all pairs\"? If no, it should be mentioned here because it's included in the result. If yes, then the comment above `filled = 0` should mention \"excluding g\".",
      "created_at": "2021-12-19T21:43:08Z",
      "updated_at": "2021-12-19T21:53:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r772004731",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772004731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772005369",
      "pull_request_review_id": 835905769,
      "id": 772005369,
      "node_id": "PRRC_kwDOAP4Jqs4uA935",
      "diff_hunk": "@@ -4052,6 +4052,145 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    secp256k1_scalar scalars[128];\n+    secp256k1_scalar g_scalar, sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    secp256k1_gej gejs[128];\n+    secp256k1_gej result, computed;\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero result. */\n+    int result_nonzero = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. */\n+    int g_nonzero = num_nonzero == 0 ? result_nonzero :\n+                    num_nonzero == 1 && !result_nonzero ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many scalars/gej pairs have been filled. */\n+    int filled = 0;\n+    /* How many EC multiplications were performed in this function. */",
      "path": "src/tests.c",
      "position": 51,
      "original_position": 34,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "a00ff07f9c9de1069607dea7620cdb3a7b42a4bf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"excluding ecmult_multi\" if this is intentional. But it seems like it would be preferable to include `ecmult_multi` (the nonzero pairs) because `multi` appears to be a proxy for time and most of the multiplications will happen inside `ecmult_multi`. Probably worth to add a note on what `mults` is for exactly.",
      "created_at": "2021-12-19T21:49:33Z",
      "updated_at": "2021-12-19T21:53:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r772005369",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772005369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4102,
      "original_line": 4102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772705354",
      "pull_request_review_id": 836864349,
      "id": 772705354,
      "node_id": "PRRC_kwDOAP4Jqs4uDoxK",
      "diff_hunk": "@@ -4052,6 +4052,145 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    secp256k1_scalar scalars[128];\n+    secp256k1_scalar g_scalar, sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    secp256k1_gej gejs[128];\n+    secp256k1_gej result, computed;\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero result. */\n+    int result_nonzero = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. */\n+    int g_nonzero = num_nonzero == 0 ? result_nonzero :\n+                    num_nonzero == 1 && !result_nonzero ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many scalars/gej pairs have been filled. */\n+    int filled = 0;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = num_nonzero <= 1 ? 0 : (int)secp256k1_testrand_bits(3);\n+\n+    data.sc = scalars;\n+    data.pt = ges;\n+    secp256k1_gej_set_infinity(&result);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&g_scalar, 0);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (result_nonzero == 0) {\n+            /* And if 0 result is desired, add a (a*r, -(1/a)*g) term to compensate. */\n+            CHECK(num_nonzero > filled);\n+            random_scalar_order_test(&sc_tmp);\n+            secp256k1_scalar_mul(&scalars[filled], &sc_tmp, &g_scalar);\n+            secp256k1_scalar_inverse_var(&sc_tmp, &sc_tmp);\n+            secp256k1_scalar_negate(&sc_tmp, &sc_tmp);\n+            secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &gejs[filled], &sc_tmp);\n+            ++filled;\n+            ++mults;\n+        }\n+    }\n+    if (result_nonzero && filled < num_nonzero) {\n+        /* If a nonzero result is desired, and there is space, add a random nonzero term. */\n+        random_scalar_order_test(&scalars[filled]);\n+        random_group_element_test(&ge_tmp);\n+        secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        ++filled;\n+    }\n+    if (result_nonzero) {\n+        /* Compute the expected result. */\n+        CHECK(filled <= 1);\n+        secp256k1_ecmult(&result, &gejs[0], &scalars[0], &g_scalar);\n+        mults += filled + g_nonzero;\n+    }\n+    /* At this point we have (filled <= 2) and result equals the sum of all (scalars,gejs) pairs. */",
      "path": "src/tests.c",
      "position": null,
      "original_position": 73,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "a00ff07f9c9de1069607dea7620cdb3a7b42a4bf",
      "in_reply_to_id": 772004731,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it is. I've improved the comments.",
      "created_at": "2021-12-20T22:24:33Z",
      "updated_at": "2021-12-20T22:24:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r772705354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772705354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772705581",
      "pull_request_review_id": 836864666,
      "id": 772705581,
      "node_id": "PRRC_kwDOAP4Jqs4uDo0t",
      "diff_hunk": "@@ -4052,6 +4052,145 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    secp256k1_scalar scalars[128];\n+    secp256k1_scalar g_scalar, sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    secp256k1_gej gejs[128];\n+    secp256k1_gej result, computed;\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero result. */\n+    int result_nonzero = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. */\n+    int g_nonzero = num_nonzero == 0 ? result_nonzero :\n+                    num_nonzero == 1 && !result_nonzero ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many scalars/gej pairs have been filled. */\n+    int filled = 0;\n+    /* How many EC multiplications were performed in this function. */",
      "path": "src/tests.c",
      "position": 51,
      "original_position": 34,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "a00ff07f9c9de1069607dea7620cdb3a7b42a4bf",
      "in_reply_to_id": 772005369,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice catch. That wasn't intentional (and also the reason why this test added so much runtime). I've fixed it.",
      "created_at": "2021-12-20T22:25:09Z",
      "updated_at": "2021-12-20T22:25:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r772705581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/772705581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4102,
      "original_line": 4102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773454993",
      "pull_request_review_id": 837886381,
      "id": 773454993,
      "node_id": "PRRC_kwDOAP4Jqs4uGfyR",
      "diff_hunk": "@@ -4052,6 +4052,175 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    /* Large random test for ecmult_multi_* functions which exercises:\n+     * - Few or many inputs (0 up to 128, roughly exponentially distributed).\n+     * - Few or many 0*P or a*INF inputs (roughly uniformly distributed).\n+     * - Including or excluding an nonzero a*G term (or such a term at all).\n+     * - Final expected result equal to infinity or not (roughly 50%).\n+     * - ecmult_multi_var, ecmult_strauss_single_batch, ecmult_pippenger_single_batch\n+     */\n+\n+    /* These 4 variables define the eventual input to the ecmult_multi function.\n+     * g_scalar is the G scalar fed to it (or NULL, possibly, if g_scalar=0), and\n+     * scalars[0..filled-1] and gejs[0..filled-1] are the scalars and points\n+     * which form its normal inputs. */\n+    int filled = 0;\n+    secp256k1_scalar g_scalar = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    secp256k1_scalar scalars[128];\n+    secp256k1_gej gejs[128];\n+    /* The expected result, and the computed result. */\n+    secp256k1_gej expected, computed;\n+    /* Temporaries. */\n+    secp256k1_scalar sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    /* Variables needed for the actual input to ecmult_multi. */\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero expected result. */\n+    int nonzero_result = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. In some cases our hand\n+     * is forced here based on num_nonzero and nonzero_result. */\n+    int g_nonzero = num_nonzero == 0 ? nonzero_result :\n+                    num_nonzero == 1 && !nonzero_result ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = (int)secp256k1_testrand_bits(3);\n+    if (rands > num_nonzero) rands = num_nonzero;\n+\n+    secp256k1_gej_set_infinity(&expected);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (!nonzero_result) {\n+            /* And if 0 expected is desired, add a (a*r, -(1/a)*g) term to compensate. */\n+            CHECK(num_nonzero > filled);\n+            random_scalar_order_test(&sc_tmp);\n+            secp256k1_scalar_mul(&scalars[filled], &sc_tmp, &g_scalar);\n+            secp256k1_scalar_inverse_var(&sc_tmp, &sc_tmp);\n+            secp256k1_scalar_negate(&sc_tmp, &sc_tmp);\n+            secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &gejs[filled], &sc_tmp);\n+            ++filled;\n+            ++mults;\n+        }\n+    }\n+\n+    if (nonzero_result && filled < num_nonzero) {\n+        /* If a nonzero result is desired, and there is space, add a random nonzero term. */\n+        random_scalar_order_test(&scalars[filled]);\n+        random_group_element_test(&ge_tmp);\n+        secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        ++filled;\n+    }\n+\n+    if (nonzero_result) {\n+        /* Compute the expected result using normal ecmult. */\n+        CHECK(filled <= 1);\n+        secp256k1_ecmult(&expected, &gejs[0], &scalars[0], &g_scalar);\n+        mults += filled + g_nonzero;\n+    }\n+\n+    /* At this point we have expected = scalar_g*G + sum(scalars[i]*gejs[i] for i=0..filled-1). */\n+    CHECK(filled <= 1 + !nonzero_result);\n+    CHECK(filled <= num_nonzero);\n+\n+    /* Add entries to sclalars,gejs so that there are num of them. All the added entries",
      "path": "src/tests.c",
      "position": null,
      "original_position": 96,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "ba61b183082eeb28c02f6f519c340240bf35d78b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    /* Add entries to scalars,gejs so that there are num of them. All the added entries\r\n```",
      "created_at": "2021-12-21T21:29:47Z",
      "updated_at": "2021-12-21T21:33:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r773454993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773454993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773455177",
      "pull_request_review_id": 837886381,
      "id": 773455177,
      "node_id": "PRRC_kwDOAP4Jqs4uGf1J",
      "diff_hunk": "@@ -4052,6 +4052,175 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    /* Large random test for ecmult_multi_* functions which exercises:\n+     * - Few or many inputs (0 up to 128, roughly exponentially distributed).\n+     * - Few or many 0*P or a*INF inputs (roughly uniformly distributed).\n+     * - Including or excluding an nonzero a*G term (or such a term at all).\n+     * - Final expected result equal to infinity or not (roughly 50%).\n+     * - ecmult_multi_var, ecmult_strauss_single_batch, ecmult_pippenger_single_batch\n+     */\n+\n+    /* These 4 variables define the eventual input to the ecmult_multi function.\n+     * g_scalar is the G scalar fed to it (or NULL, possibly, if g_scalar=0), and\n+     * scalars[0..filled-1] and gejs[0..filled-1] are the scalars and points\n+     * which form its normal inputs. */\n+    int filled = 0;\n+    secp256k1_scalar g_scalar = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    secp256k1_scalar scalars[128];\n+    secp256k1_gej gejs[128];\n+    /* The expected result, and the computed result. */\n+    secp256k1_gej expected, computed;\n+    /* Temporaries. */\n+    secp256k1_scalar sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    /* Variables needed for the actual input to ecmult_multi. */\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero expected result. */\n+    int nonzero_result = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. In some cases our hand\n+     * is forced here based on num_nonzero and nonzero_result. */\n+    int g_nonzero = num_nonzero == 0 ? nonzero_result :\n+                    num_nonzero == 1 && !nonzero_result ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = (int)secp256k1_testrand_bits(3);\n+    if (rands > num_nonzero) rands = num_nonzero;\n+\n+    secp256k1_gej_set_infinity(&expected);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (!nonzero_result) {\n+            /* And if 0 expected is desired, add a (a*r, -(1/a)*g) term to compensate. */",
      "path": "src/tests.c",
      "position": null,
      "original_position": 65,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "ba61b183082eeb28c02f6f519c340240bf35d78b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            /* And if expected=0 is desired, add a (a*r, -(1/a)*g) term to compensate. */\r\n```",
      "created_at": "2021-12-21T21:30:09Z",
      "updated_at": "2021-12-21T21:33:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r773455177",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773455177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773455433",
      "pull_request_review_id": 837886381,
      "id": 773455433,
      "node_id": "PRRC_kwDOAP4Jqs4uGf5J",
      "diff_hunk": "@@ -4052,6 +4052,175 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    /* Large random test for ecmult_multi_* functions which exercises:\n+     * - Few or many inputs (0 up to 128, roughly exponentially distributed).\n+     * - Few or many 0*P or a*INF inputs (roughly uniformly distributed).\n+     * - Including or excluding an nonzero a*G term (or such a term at all).\n+     * - Final expected result equal to infinity or not (roughly 50%).\n+     * - ecmult_multi_var, ecmult_strauss_single_batch, ecmult_pippenger_single_batch\n+     */\n+\n+    /* These 4 variables define the eventual input to the ecmult_multi function.\n+     * g_scalar is the G scalar fed to it (or NULL, possibly, if g_scalar=0), and\n+     * scalars[0..filled-1] and gejs[0..filled-1] are the scalars and points\n+     * which form its normal inputs. */\n+    int filled = 0;\n+    secp256k1_scalar g_scalar = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    secp256k1_scalar scalars[128];\n+    secp256k1_gej gejs[128];\n+    /* The expected result, and the computed result. */\n+    secp256k1_gej expected, computed;\n+    /* Temporaries. */\n+    secp256k1_scalar sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    /* Variables needed for the actual input to ecmult_multi. */\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero expected result. */\n+    int nonzero_result = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. In some cases our hand\n+     * is forced here based on num_nonzero and nonzero_result. */\n+    int g_nonzero = num_nonzero == 0 ? nonzero_result :\n+                    num_nonzero == 1 && !nonzero_result ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = (int)secp256k1_testrand_bits(3);\n+    if (rands > num_nonzero) rands = num_nonzero;\n+\n+    secp256k1_gej_set_infinity(&expected);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (!nonzero_result) {\n+            /* And if 0 expected is desired, add a (a*r, -(1/a)*g) term to compensate. */\n+            CHECK(num_nonzero > filled);\n+            random_scalar_order_test(&sc_tmp);\n+            secp256k1_scalar_mul(&scalars[filled], &sc_tmp, &g_scalar);\n+            secp256k1_scalar_inverse_var(&sc_tmp, &sc_tmp);\n+            secp256k1_scalar_negate(&sc_tmp, &sc_tmp);\n+            secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &gejs[filled], &sc_tmp);\n+            ++filled;\n+            ++mults;\n+        }\n+    }\n+\n+    if (nonzero_result && filled < num_nonzero) {\n+        /* If a nonzero result is desired, and there is space, add a random nonzero term. */\n+        random_scalar_order_test(&scalars[filled]);\n+        random_group_element_test(&ge_tmp);\n+        secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        ++filled;\n+    }\n+\n+    if (nonzero_result) {\n+        /* Compute the expected result using normal ecmult. */\n+        CHECK(filled <= 1);\n+        secp256k1_ecmult(&expected, &gejs[0], &scalars[0], &g_scalar);\n+        mults += filled + g_nonzero;\n+    }\n+\n+    /* At this point we have expected = scalar_g*G + sum(scalars[i]*gejs[i] for i=0..filled-1). */\n+    CHECK(filled <= 1 + !nonzero_result);\n+    CHECK(filled <= num_nonzero);\n+\n+    /* Add entries to sclalars,gejs so that there are num of them. All the added entries\n+     * either have scalar=0 or point=infinity, so these do not change the expected result. */\n+    while (filled < num) {\n+        if (secp256k1_testrand_bits(1)) {\n+            secp256k1_gej_set_infinity(&gejs[filled]);\n+            random_scalar_order_test(&scalars[filled]);\n+        } else {\n+            secp256k1_scalar_set_int(&scalars[filled], 0);\n+            random_group_element_test(&ge_tmp);\n+            secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        }\n+        ++filled;\n+    }\n+\n+    /* Now perform cheapish transformations on gejs and scalars, for indices\n+     * 0..num_nonzero-1, which do not change the expected result, but may\n+     * convert some of them to be both non-0-scalar and non-infinity-point. */\n+    for (i = 0; i < rands; ++i) {\n+        int j;\n+        /* Shuffle the entries. */\n+        for (j = 0; j < num_nonzero; ++j) {\n+            int k = secp256k1_testrand_int(num_nonzero - j);\n+            if (k != 0) {\n+                secp256k1_gej gej = gejs[j];\n+                secp256k1_scalar sc = scalars[j];\n+                gejs[j] = gejs[j + k];\n+                scalars[j] = scalars[j + k];\n+                gejs[j + k] = gej;\n+                scalars[j + k] = sc;\n+            }\n+        }\n+        /* Perturb all consecutive pairs of inputs:\n+         * a*P + b*Q -> (a+b)*P + b*(Q-P). */\n+        for (j = 0; j + 1 < num_nonzero; j += 2) {\n+            secp256k1_gej gej;\n+            secp256k1_scalar_add(&scalars[j], &scalars[j], &scalars[j+1]);\n+            secp256k1_gej_neg(&gej, &gejs[j]);\n+            secp256k1_gej_add_var(&gejs[j+1], &gejs[j+1], &gej, NULL);\n+        }\n+        /* Transform the last input: a*P -> (v*a) * ((1/v)*P). */\n+        if (num_nonzero >= 1) {",
      "path": "src/tests.c",
      "position": null,
      "original_position": 136,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "ba61b183082eeb28c02f6f519c340240bf35d78b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That condition seems to be true always.",
      "created_at": "2021-12-21T21:30:46Z",
      "updated_at": "2021-12-21T21:33:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r773455433",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773455433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773460810",
      "pull_request_review_id": 837894227,
      "id": 773460810,
      "node_id": "PRRC_kwDOAP4Jqs4uGhNK",
      "diff_hunk": "@@ -4052,6 +4052,175 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    /* Large random test for ecmult_multi_* functions which exercises:\n+     * - Few or many inputs (0 up to 128, roughly exponentially distributed).\n+     * - Few or many 0*P or a*INF inputs (roughly uniformly distributed).\n+     * - Including or excluding an nonzero a*G term (or such a term at all).\n+     * - Final expected result equal to infinity or not (roughly 50%).\n+     * - ecmult_multi_var, ecmult_strauss_single_batch, ecmult_pippenger_single_batch\n+     */\n+\n+    /* These 4 variables define the eventual input to the ecmult_multi function.\n+     * g_scalar is the G scalar fed to it (or NULL, possibly, if g_scalar=0), and\n+     * scalars[0..filled-1] and gejs[0..filled-1] are the scalars and points\n+     * which form its normal inputs. */\n+    int filled = 0;\n+    secp256k1_scalar g_scalar = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    secp256k1_scalar scalars[128];\n+    secp256k1_gej gejs[128];\n+    /* The expected result, and the computed result. */\n+    secp256k1_gej expected, computed;\n+    /* Temporaries. */\n+    secp256k1_scalar sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    /* Variables needed for the actual input to ecmult_multi. */\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero expected result. */\n+    int nonzero_result = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. In some cases our hand\n+     * is forced here based on num_nonzero and nonzero_result. */\n+    int g_nonzero = num_nonzero == 0 ? nonzero_result :\n+                    num_nonzero == 1 && !nonzero_result ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = (int)secp256k1_testrand_bits(3);\n+    if (rands > num_nonzero) rands = num_nonzero;\n+\n+    secp256k1_gej_set_infinity(&expected);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (!nonzero_result) {\n+            /* And if 0 expected is desired, add a (a*r, -(1/a)*g) term to compensate. */\n+            CHECK(num_nonzero > filled);\n+            random_scalar_order_test(&sc_tmp);\n+            secp256k1_scalar_mul(&scalars[filled], &sc_tmp, &g_scalar);\n+            secp256k1_scalar_inverse_var(&sc_tmp, &sc_tmp);\n+            secp256k1_scalar_negate(&sc_tmp, &sc_tmp);\n+            secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &gejs[filled], &sc_tmp);\n+            ++filled;\n+            ++mults;\n+        }\n+    }\n+\n+    if (nonzero_result && filled < num_nonzero) {\n+        /* If a nonzero result is desired, and there is space, add a random nonzero term. */\n+        random_scalar_order_test(&scalars[filled]);\n+        random_group_element_test(&ge_tmp);\n+        secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        ++filled;\n+    }\n+\n+    if (nonzero_result) {\n+        /* Compute the expected result using normal ecmult. */\n+        CHECK(filled <= 1);\n+        secp256k1_ecmult(&expected, &gejs[0], &scalars[0], &g_scalar);\n+        mults += filled + g_nonzero;\n+    }\n+\n+    /* At this point we have expected = scalar_g*G + sum(scalars[i]*gejs[i] for i=0..filled-1). */\n+    CHECK(filled <= 1 + !nonzero_result);\n+    CHECK(filled <= num_nonzero);\n+\n+    /* Add entries to sclalars,gejs so that there are num of them. All the added entries",
      "path": "src/tests.c",
      "position": null,
      "original_position": 96,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "ba61b183082eeb28c02f6f519c340240bf35d78b",
      "in_reply_to_id": 773454993,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-12-21T21:42:22Z",
      "updated_at": "2021-12-21T21:42:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r773460810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773460810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773460850",
      "pull_request_review_id": 837894284,
      "id": 773460850,
      "node_id": "PRRC_kwDOAP4Jqs4uGhNy",
      "diff_hunk": "@@ -4052,6 +4052,175 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    /* Large random test for ecmult_multi_* functions which exercises:\n+     * - Few or many inputs (0 up to 128, roughly exponentially distributed).\n+     * - Few or many 0*P or a*INF inputs (roughly uniformly distributed).\n+     * - Including or excluding an nonzero a*G term (or such a term at all).\n+     * - Final expected result equal to infinity or not (roughly 50%).\n+     * - ecmult_multi_var, ecmult_strauss_single_batch, ecmult_pippenger_single_batch\n+     */\n+\n+    /* These 4 variables define the eventual input to the ecmult_multi function.\n+     * g_scalar is the G scalar fed to it (or NULL, possibly, if g_scalar=0), and\n+     * scalars[0..filled-1] and gejs[0..filled-1] are the scalars and points\n+     * which form its normal inputs. */\n+    int filled = 0;\n+    secp256k1_scalar g_scalar = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    secp256k1_scalar scalars[128];\n+    secp256k1_gej gejs[128];\n+    /* The expected result, and the computed result. */\n+    secp256k1_gej expected, computed;\n+    /* Temporaries. */\n+    secp256k1_scalar sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    /* Variables needed for the actual input to ecmult_multi. */\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero expected result. */\n+    int nonzero_result = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. In some cases our hand\n+     * is forced here based on num_nonzero and nonzero_result. */\n+    int g_nonzero = num_nonzero == 0 ? nonzero_result :\n+                    num_nonzero == 1 && !nonzero_result ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = (int)secp256k1_testrand_bits(3);\n+    if (rands > num_nonzero) rands = num_nonzero;\n+\n+    secp256k1_gej_set_infinity(&expected);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (!nonzero_result) {\n+            /* And if 0 expected is desired, add a (a*r, -(1/a)*g) term to compensate. */",
      "path": "src/tests.c",
      "position": null,
      "original_position": 65,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "ba61b183082eeb28c02f6f519c340240bf35d78b",
      "in_reply_to_id": 773455177,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-12-21T21:42:27Z",
      "updated_at": "2021-12-21T21:42:27Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r773460850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773460850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773460948",
      "pull_request_review_id": 837894404,
      "id": 773460948,
      "node_id": "PRRC_kwDOAP4Jqs4uGhPU",
      "diff_hunk": "@@ -4052,6 +4052,175 @@ void test_ecmult_multi(secp256k1_scratch *scratch, secp256k1_ecmult_multi_func e\n     }\n }\n \n+int test_ecmult_multi_random(secp256k1_scratch *scratch) {\n+    /* Large random test for ecmult_multi_* functions which exercises:\n+     * - Few or many inputs (0 up to 128, roughly exponentially distributed).\n+     * - Few or many 0*P or a*INF inputs (roughly uniformly distributed).\n+     * - Including or excluding an nonzero a*G term (or such a term at all).\n+     * - Final expected result equal to infinity or not (roughly 50%).\n+     * - ecmult_multi_var, ecmult_strauss_single_batch, ecmult_pippenger_single_batch\n+     */\n+\n+    /* These 4 variables define the eventual input to the ecmult_multi function.\n+     * g_scalar is the G scalar fed to it (or NULL, possibly, if g_scalar=0), and\n+     * scalars[0..filled-1] and gejs[0..filled-1] are the scalars and points\n+     * which form its normal inputs. */\n+    int filled = 0;\n+    secp256k1_scalar g_scalar = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    secp256k1_scalar scalars[128];\n+    secp256k1_gej gejs[128];\n+    /* The expected result, and the computed result. */\n+    secp256k1_gej expected, computed;\n+    /* Temporaries. */\n+    secp256k1_scalar sc_tmp;\n+    secp256k1_ge ge_tmp;\n+    /* Variables needed for the actual input to ecmult_multi. */\n+    secp256k1_ge ges[128];\n+    ecmult_multi_data data;\n+\n+    int i;\n+    /* Which multiplication function to use */\n+    int fn = secp256k1_testrand_int(3);\n+    secp256k1_ecmult_multi_func ecmult_multi = fn == 0 ? secp256k1_ecmult_multi_var :\n+                                               fn == 1 ? secp256k1_ecmult_strauss_batch_single :\n+                                               secp256k1_ecmult_pippenger_batch_single;\n+    /* Simulate exponentially distributed num. */\n+    int num_bits = 2 + secp256k1_testrand_int(6);\n+    /* Number of (scalar, point) inputs (excluding g). */\n+    int num = secp256k1_testrand_int((1 << num_bits) + 1);\n+    /* Number of those which are nonzero. */\n+    int num_nonzero = secp256k1_testrand_int(num + 1);\n+    /* Whether we're aiming to create an input with nonzero expected result. */\n+    int nonzero_result = secp256k1_testrand_bits(1);\n+    /* Whether we will provide nonzero g multiplicand. In some cases our hand\n+     * is forced here based on num_nonzero and nonzero_result. */\n+    int g_nonzero = num_nonzero == 0 ? nonzero_result :\n+                    num_nonzero == 1 && !nonzero_result ? 1 :\n+                    (int)secp256k1_testrand_bits(1);\n+    /* Which g_scalar pointer to pass into ecmult_multi(). */\n+    const secp256k1_scalar* g_scalar_ptr = (g_nonzero || secp256k1_testrand_bits(1)) ? &g_scalar : NULL;\n+    /* How many EC multiplications were performed in this function. */\n+    int mults = 0;\n+    /* How many randomization steps to apply to the input list. */\n+    int rands = (int)secp256k1_testrand_bits(3);\n+    if (rands > num_nonzero) rands = num_nonzero;\n+\n+    secp256k1_gej_set_infinity(&expected);\n+    secp256k1_gej_set_infinity(&gejs[0]);\n+    secp256k1_scalar_set_int(&scalars[0], 0);\n+\n+    if (g_nonzero) {\n+        /* If g_nonzero, set g_scalar to nonzero value r. */\n+        random_scalar_order_test(&g_scalar);\n+        if (!nonzero_result) {\n+            /* And if 0 expected is desired, add a (a*r, -(1/a)*g) term to compensate. */\n+            CHECK(num_nonzero > filled);\n+            random_scalar_order_test(&sc_tmp);\n+            secp256k1_scalar_mul(&scalars[filled], &sc_tmp, &g_scalar);\n+            secp256k1_scalar_inverse_var(&sc_tmp, &sc_tmp);\n+            secp256k1_scalar_negate(&sc_tmp, &sc_tmp);\n+            secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &gejs[filled], &sc_tmp);\n+            ++filled;\n+            ++mults;\n+        }\n+    }\n+\n+    if (nonzero_result && filled < num_nonzero) {\n+        /* If a nonzero result is desired, and there is space, add a random nonzero term. */\n+        random_scalar_order_test(&scalars[filled]);\n+        random_group_element_test(&ge_tmp);\n+        secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        ++filled;\n+    }\n+\n+    if (nonzero_result) {\n+        /* Compute the expected result using normal ecmult. */\n+        CHECK(filled <= 1);\n+        secp256k1_ecmult(&expected, &gejs[0], &scalars[0], &g_scalar);\n+        mults += filled + g_nonzero;\n+    }\n+\n+    /* At this point we have expected = scalar_g*G + sum(scalars[i]*gejs[i] for i=0..filled-1). */\n+    CHECK(filled <= 1 + !nonzero_result);\n+    CHECK(filled <= num_nonzero);\n+\n+    /* Add entries to sclalars,gejs so that there are num of them. All the added entries\n+     * either have scalar=0 or point=infinity, so these do not change the expected result. */\n+    while (filled < num) {\n+        if (secp256k1_testrand_bits(1)) {\n+            secp256k1_gej_set_infinity(&gejs[filled]);\n+            random_scalar_order_test(&scalars[filled]);\n+        } else {\n+            secp256k1_scalar_set_int(&scalars[filled], 0);\n+            random_group_element_test(&ge_tmp);\n+            secp256k1_gej_set_ge(&gejs[filled], &ge_tmp);\n+        }\n+        ++filled;\n+    }\n+\n+    /* Now perform cheapish transformations on gejs and scalars, for indices\n+     * 0..num_nonzero-1, which do not change the expected result, but may\n+     * convert some of them to be both non-0-scalar and non-infinity-point. */\n+    for (i = 0; i < rands; ++i) {\n+        int j;\n+        /* Shuffle the entries. */\n+        for (j = 0; j < num_nonzero; ++j) {\n+            int k = secp256k1_testrand_int(num_nonzero - j);\n+            if (k != 0) {\n+                secp256k1_gej gej = gejs[j];\n+                secp256k1_scalar sc = scalars[j];\n+                gejs[j] = gejs[j + k];\n+                scalars[j] = scalars[j + k];\n+                gejs[j + k] = gej;\n+                scalars[j + k] = sc;\n+            }\n+        }\n+        /* Perturb all consecutive pairs of inputs:\n+         * a*P + b*Q -> (a+b)*P + b*(Q-P). */\n+        for (j = 0; j + 1 < num_nonzero; j += 2) {\n+            secp256k1_gej gej;\n+            secp256k1_scalar_add(&scalars[j], &scalars[j], &scalars[j+1]);\n+            secp256k1_gej_neg(&gej, &gejs[j]);\n+            secp256k1_gej_add_var(&gejs[j+1], &gejs[j+1], &gej, NULL);\n+        }\n+        /* Transform the last input: a*P -> (v*a) * ((1/v)*P). */\n+        if (num_nonzero >= 1) {",
      "path": "src/tests.c",
      "position": null,
      "original_position": 136,
      "commit_id": "22d25c8e0ab1d24f0f4a80fe016cbd71cd889866",
      "original_commit_id": "ba61b183082eeb28c02f6f519c340240bf35d78b",
      "in_reply_to_id": 773455433,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to an assertion.",
      "created_at": "2021-12-21T21:42:39Z",
      "updated_at": "2021-12-21T21:42:39Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1044#discussion_r773460948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/773460948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1044"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4187,
      "side": "RIGHT"
    }
  ]
}